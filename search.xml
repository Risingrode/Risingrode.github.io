<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go基础</title>
    <url>/post/Go%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><blockquote>
<p>导入单个包使用（）,第一行暴露一个函数名。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span><span class="comment">//输入库</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span><span class="comment">//数学库</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="string">&quot;initial&quot;</span></span><br><span class="line">    <span class="comment">//定义一个int类型，需要在变量后面进行定义</span></span><br><span class="line">    <span class="keyword">var</span> b,c <span class="type">int</span>=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> d=<span class="literal">true</span><span class="comment">//默认Bool型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> e <span class="type">float64</span></span><br><span class="line">    f:=<span class="type">float32</span>(e)</span><br><span class="line"></span><br><span class="line">    g:=a+<span class="string">&quot;foo&quot;</span><span class="comment">//字符串拼接</span></span><br><span class="line">    fmt.Println(a,b,c,d,e,f)</span><br><span class="line">    fmt.Println(g)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> s <span class="type">string</span>=<span class="string">&quot;consist&quot;</span></span><br><span class="line">    <span class="keyword">const</span> h=<span class="number">5000000000</span></span><br><span class="line">    <span class="keyword">const</span> i=<span class="number">3e20</span>/h</span><br><span class="line">    <span class="comment">//转化为sin值</span></span><br><span class="line">    fmt.Println(s,h,i,math.Sin(h),math.Sin(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i:=<span class="number">1</span></span><br><span class="line">    <span class="comment">//这不加break，就是一个死循环</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;loop&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j:=<span class="number">7</span>;j&lt;<span class="number">9</span>;j++&#123;</span><br><span class="line">        fmt.Println(j)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n:=<span class="number">0</span>;n&lt;<span class="number">5</span>;n++&#123;</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">//注意这里必须要加大括号</span></span><br><span class="line">            <span class="keyword">continue</span>   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fmt.Println(n)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> i&lt;=<span class="number">3</span>&#123;</span><br><span class="line">        fmt.Println(i)</span><br><span class="line">        i++</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="number">7</span>%<span class="number">2</span>==<span class="number">0</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;你好，小可爱&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//加上ln是换行的意思</span></span><br><span class="line">        fmt.Print(<span class="string">&quot;你好，大可爱&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">8</span>%<span class="number">4</span>==<span class="number">0</span>&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;8 是 偶数&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> num :=<span class="number">9</span>;num&lt;<span class="number">0</span>&#123;</span><br><span class="line">        fmt.Println(num,<span class="string">&quot;is negative&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> num&lt;<span class="number">10</span>&#123;</span><br><span class="line">        fmt.Println(num,<span class="string">&quot;has 1 digit&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(num,<span class="string">&quot;has multiple digits&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    a:=<span class="number">2</span></span><br><span class="line">    <span class="comment">//其switch语句默认是带break语句的</span></span><br><span class="line">    <span class="keyword">switch</span> a&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;我是小可爱&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;你好呀&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>,<span class="number">5</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;大家好！&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;other&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t:=time.Now()</span><br><span class="line">    <span class="keyword">switch</span>&#123;</span><br><span class="line">    <span class="keyword">case</span> t.Hour()&lt;<span class="number">12</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;今天是上午&quot;</span>)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;今天是下午&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a[<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">    a[<span class="number">4</span>]=<span class="number">100</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;get:&quot;</span>,a[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>,<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">    b:=[<span class="number">5</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">    fmt.Println(b)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> twoD [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int</span></span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>;i&lt;<span class="number">2</span>;i++&#123;</span><br><span class="line">        <span class="keyword">for</span> j:=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++&#123;</span><br><span class="line">            twoD[i][j]=i+j</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(<span class="string">&quot;2d:&quot;</span>,twoD)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//制作一个string数组，长度为3</span></span><br><span class="line">    s:=<span class="built_in">make</span>([]<span class="type">string</span>,<span class="number">3</span>)</span><br><span class="line">    s[<span class="number">0</span>]=<span class="string">&quot;a&quot;</span></span><br><span class="line">    s[<span class="number">1</span>]=<span class="string">&quot;b&quot;</span></span><br><span class="line">    s[<span class="number">2</span>]=<span class="string">&quot;c&quot;</span></span><br><span class="line">    <span class="comment">//数组下边从0开始</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;get:&quot;</span>,s[<span class="number">2</span>])</span><br><span class="line">    fmt.Println(<span class="string">&quot;len:&quot;</span>,<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="comment">//把元素添加到该数组后面</span></span><br><span class="line">    s=<span class="built_in">append</span>(s,<span class="string">&quot;d&quot;</span>)</span><br><span class="line">    s=<span class="built_in">append</span>(s,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>)</span><br><span class="line">    fmt.Println(s)</span><br><span class="line"></span><br><span class="line">    c:=<span class="built_in">make</span>([]<span class="type">string</span>,<span class="built_in">len</span>(s))</span><br><span class="line">    <span class="built_in">copy</span>(c,s)<span class="comment">//数组拷贝</span></span><br><span class="line">    fmt.Println(c)</span><br><span class="line">    <span class="comment">//输出从下标2输出到下标5</span></span><br><span class="line">    fmt.Println(s[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">    fmt.Println(s[:<span class="number">5</span>])</span><br><span class="line">    fmt.Println(s[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    good:=[]<span class="type">string</span>&#123;<span class="string">&quot;g&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;o&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">    fmt.Println(good)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go语言基础一</tag>
      </tags>
  </entry>
  <entry>
    <title>IDE</title>
    <url>/post/IDE.html</url>
    <content><![CDATA[<h1 id="什么是IDE？"><a href="#什么是IDE？" class="headerlink" title="什么是IDE？"></a>什么是IDE？</h1><p>简单来说就是写代码的软件。</p>
<blockquote>
<p>下面根据编程语言进行IDE推荐</p>
</blockquote>
<h1 id="C-x2F-C"><a href="#C-x2F-C" class="headerlink" title="C &#x2F; C++"></a>C &#x2F; C++</h1><h2 id="VS2022"><a href="#VS2022" class="headerlink" title="VS2022"></a>VS2022</h2><ul>
<li>找到微软官网，下载Community版本，这是专门为学生提供的。</li>
<li>最强C++编译器,适用于小白，不过对于小白来说，下载稍微有点麻烦，不过耐心点，下这一次，以后四年都够用了。</li>
</ul>
<blockquote>
<p>软件链接：<a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&channel=Release&version=VS2022&source=VSLandingPage&cid=2030&passive=false">https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=Community&amp;channel=Release&amp;version=VS2022&amp;source=VSLandingPage&amp;cid=2030&amp;passive=false</a></p>
</blockquote>
<ol>
<li>下载的是一个40mb左右的下载器，双击打开，进行选择C++配置，再正式下载。</li>
<li>去CSDN找教程</li>
</ol>
<h2 id="不建议的软件"><a href="#不建议的软件" class="headerlink" title="不建议的软件"></a>不建议的软件</h2><p>下面这三个软件会打开，会运行代码即可，其它情况不要用，因为太垃圾了，你要是想用也行，只不过体验不好而已。</p>
<blockquote>
<p>VC6++,dev++,CodeBlocks</p>
</blockquote>
<h2 id="竞赛编译器"><a href="#竞赛编译器" class="headerlink" title="竞赛编译器"></a>竞赛编译器</h2><p>这是文本编译器，里面有代码插件，可以运行代码，速度快，简单方便。</p>
<p>这个软件叫做<code>Sublime</code>。</p>
<p>使用其写代码，需要遵循下面三个步骤：</p>
<ol>
<li>配置好C++的环境变量，MinGw</li>
<li>下载插件fastOlympiccoding</li>
<li>新建cpp文件，ctrl+alt+b 运行代码即可</li>
</ol>
<p>配置过程太麻烦，不怕麻烦的可以搞。</p>
<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>全名叫做：<code>IntelliJ IDEA</code>。<br>最强Java编译器。</p>
<ol>
<li>安装jdk.(Java内核)</li>
<li>配置环境变量</li>
<li>下载软件，自己搜，下载IDEA社区版即可，如果实在不会，随便下一个。</li>
<li>然后找个项目运行一下即可</li>
</ol>
<blockquote>
<p>有的人是使用VS code运行Java,初学阶段是可以的，长期不行，还是要下载IDEA。</p>
</blockquote>
]]></content>
      <tags>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>2023国赛</title>
    <url>/post/2023%E5%9B%BD%E8%B5%9B.html</url>
    <content><![CDATA[<h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><p>建模时间：9月7日（周四）18时至9月10日（周日）20时</p>
<h1 id="C题需要学习的"><a href="#C题需要学习的" class="headerlink" title="C题需要学习的"></a>C题需要学习的</h1><p>C题比较简单，咱们大概率写C题<br>C题主要是数据分析，数据预测<br>主要常考模型：</p>
<ol>
<li>相关性分析</li>
<li>灵敏度分析</li>
<li>预测模型</li>
<li>数据处理</li>
</ol>
<h1 id="历年来C题思路"><a href="#历年来C题思路" class="headerlink" title="历年来C题思路"></a>历年来C题思路</h1><p>2022年C题思路，看看即可：<br><a href="https://mp.weixin.qq.com/s/IPYy7yodxUa44knZL8B9Qw">https://mp.weixin.qq.com/s/IPYy7yodxUa44knZL8B9Qw</a></p>
<h1 id="目前需要做的"><a href="#目前需要做的" class="headerlink" title="目前需要做的"></a>目前需要做的</h1><ol>
<li>看历年C题论文，包括优秀论文</li>
<li>熟悉掌握那个网站使用</li>
<li>看一下清风的课：把他的前几个小时看了</li>
<li>清风有个论文课，把前两个小时看了</li>
<li>课不想看的话就不看了，直接找历年C题优秀论文自己看</li>
</ol>
<h1 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h1><p>数模备赛指南<br><a href="https://mp.weixin.qq.com/s/UtlDK-4CZONYgHLAsGiFzQ">https://mp.weixin.qq.com/s/UtlDK-4CZONYgHLAsGiFzQ</a></p>
<h1 id="任务分配"><a href="#任务分配" class="headerlink" title="任务分配"></a>任务分配</h1><p>建模时各个人员主要任务：<br>    付昌威：辅助论文，辅助解题，找代码，找图片，excel数据处理，论文润色<br>    边锦华：主攻论文，付昌威辅助，辅助解题<br>    方啸阳：主攻解题思路，杂项论文(假设检验啥的)</p>
<p>论文模板使用清风给的</p>
<h1 id="时间预估："><a href="#时间预估：" class="headerlink" title="时间预估："></a>时间预估：</h1><ul>
<li>9-7是晚上：尽量把题的解题思路全部搞出来 咱们三个疯狂查找对应文献，找到nb的一起讨论，是否开腾讯会议啥的，需要按情况处理。最晚12点睡</li>
<li>9-8：第一题，第二题解出来</li>
<li>9-9：第三题，第四题解出来，晚上可以通宵了</li>
<li>9-10：其余部分写完，下午论文润色，查重</li>
</ul>
<h1 id="C题感悟："><a href="#C题感悟：" class="headerlink" title="C题感悟："></a>C题感悟：</h1><p>今天也是分享一个国赛C题的一个自己小感悟。</p>
<ul>
<li>第一点，这个统计题型啊，很重要的一点就是数据的处理了，包含异常值的剔除、数据的筛选、数据的补全等。</li>
<li>第二点，这个题型用的模型得是准确的，这个模型是指在建立模型的时候考虑三个检验，一是统计检验如T、F检验，二是模型拟合优度，三是模型统计学意义。</li>
<li>第三点，在2021C题和2020C题中，可以用的两个重要的数学模型，回归分析和规划类，前者数据量不大，提出多个指标建立模型，后者数据量非常大，也是提出多个指标建立模型，同样最重要的事就是数据的预处理。</li>
<li>第四点，在这个题型中参考文献在5个以上10个以内，要引用的论文中的语句自己修改，避免查重。经过对2021C和2020C题，我们可以发现，很多指标不都是自己想的，而是大佬文献里直接找的。先传统后机器学习，</li>
<li>第五点，用传统数学模型，然后进行求解，不进行解释为什么不推荐用机器学习，能用传统数学模型和思维去做写来下就是好的。</li>
<li>然后因为这个题型的难度不大，所以到比赛的时候这个题出解析的人会很多，如果去查找的话，或多或少都会影响自己的做题思路。这个发解析的都是会被赛方拉入黑名单的，论文里面跟那里面的内容大部分相似的话就涉嫌抄袭，就没资格了。</li>
</ul>
<h2 id="注意的点："><a href="#注意的点：" class="headerlink" title="注意的点："></a>注意的点：</h2><blockquote>
<p>数据相关性分析之前做正态检验，具体需要做什么相关性分析自己去csdn上查找方法，问问度娘运用这个方法之前是不是要做什么检验。<br>结果解释，要对分析之后的结果进行解释，如妈妈吸烟等多个指标对胎儿健康程度的影响，相关性分析之后就可以说，吸烟影响胎儿健康。<br>多找指标，看完题后，多次分析背景和题目，三个组员再去文献里找指标，然后再讨论。</p>
</blockquote>
<h2 id="C题的一个大致流程："><a href="#C题的一个大致流程：" class="headerlink" title="C题的一个大致流程："></a>C题的一个大致流程：</h2><ul>
<li>数据的预处理，剔除或者补全。</li>
<li>指标的确定，指标下定义。</li>
<li>指标的筛选，通过相关性。这种题一般都要求量化。</li>
<li>理论模型的建立，传统优先。</li>
<li>模型的检验。（不通过检验就修正）</li>
<li>模型的修正</li>
<li>算法的设计，思路。</li>
</ul>
<p>大致也就是这样，国赛C题难度不高，要多去文献和通过自己的脑瓜子想指标。</p>
<h1 id="碎碎念："><a href="#碎碎念：" class="headerlink" title="碎碎念："></a>碎碎念：</h1><ol>
<li>正常来说是三个人在一起去搞，不过由于我俩是班导，大概率在不了一起。</li>
<li>那个网站可以相信一部分，这几天必须会搞明白那个网站如何使用。</li>
<li>论文中会有高级公式，这个付昌威来。</li>
<li>那个网站如果用的好的话，完全可以相信，关键你要用的好。</li>
<li>最后不要忘记知网查重</li>
</ol>
]]></content>
      <categories>
        <category>2023数模国赛</category>
      </categories>
      <tags>
        <tag>2023国赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Go进阶</title>
    <url>/post/Go%E8%BF%9B%E9%98%B6.html</url>
    <content><![CDATA[<h1 id="第二节"><a href="#第二节" class="headerlink" title="第二节"></a>第二节</h1><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//制作一个map容器，key值是string类型 value是int类型</span></span><br><span class="line">    m:=<span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">    m[<span class="string">&quot;one&quot;</span>]=<span class="number">1</span></span><br><span class="line">    m[<span class="string">&quot;two&quot;</span>]=<span class="number">2</span></span><br><span class="line">    fmt.Println(m)</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(m))</span><br><span class="line">    fmt.Println(m[<span class="string">&quot;one&quot;</span>])</span><br><span class="line">    fmt.Println(m[<span class="string">&quot;unknow&quot;</span>])</span><br><span class="line">    <span class="comment">//两个返回值，一个返回值是value,另一个是bool类型（是否存在）</span></span><br><span class="line">    r,ok:=m[<span class="string">&quot;unknow&quot;</span>]</span><br><span class="line">    fmt.Println(r,ok)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">delete</span>(m,<span class="string">&quot;one&quot;</span>)</span><br><span class="line">    <span class="comment">//不加：前面就要加上var</span></span><br><span class="line">    m2:=<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>:<span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">var</span> m3=<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;<span class="string">&quot;one&quot;</span>:<span class="number">1</span>,<span class="string">&quot;two&quot;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    fmt.Println(m2,m3)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    nums:=[]<span class="type">int</span>&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">    sum:=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//i表示下标 num表示具体数值</span></span><br><span class="line">    <span class="comment">//当需要遍历一个map时，使用range</span></span><br><span class="line">    <span class="keyword">for</span> i,num:=<span class="keyword">range</span> nums&#123;</span><br><span class="line">        sum+=num</span><br><span class="line">        <span class="keyword">if</span> num==<span class="number">2</span>&#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;index&quot;</span>,i,<span class="string">&quot;num&quot;</span>,num)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line"></span><br><span class="line">    m:=<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;A&quot;</span>,<span class="string">&quot;b&quot;</span>:<span class="string">&quot;B&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> k,v:=<span class="keyword">range</span> m&#123;</span><br><span class="line">        fmt.Println(k,v)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> k:=<span class="keyword">range</span> m&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;key&quot;</span>,k)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a <span class="type">int</span>,b <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数标识符 自定义函数名称  参数 返回值类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(a,b <span class="type">int</span>)</span></span><span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">exists</span><span class="params">(m <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>,k <span class="type">string</span>)</span></span>(v <span class="type">string</span>,ok <span class="type">bool</span>)&#123;</span><br><span class="line">    v,ok=m[k]</span><br><span class="line">    <span class="keyword">return</span> v,ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    res:=add(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">    fmt.Println(res)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里实际上就是导入两个参数</span></span><br><span class="line">    v,ok:=exists(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;a&quot;</span>:<span class="string">&quot;A&quot;</span>&#125;,<span class="string">&quot;a&quot;</span>)</span><br><span class="line">    fmt.Println(v,ok)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2</span><span class="params">(n <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    n+=<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传进来一个地址</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add2ptr</span><span class="params">(n * <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    *+=<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    n:=<span class="number">5</span><span class="comment">//还可以写成var n=5</span></span><br><span class="line">    add2(n)<span class="comment">//值传递</span></span><br><span class="line">    fmt.Println(n)</span><br><span class="line">    add2ptr(&amp;n)<span class="comment">//地址传递</span></span><br><span class="line">    fmt.Println(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个user结构体</span></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化方式</span></span><br><span class="line">    a:=user&#123;name:<span class="string">&quot;wnag&quot;</span>,password:<span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">    b:=user&#123;<span class="string">&quot;li&quot;</span>,<span class="string">&quot;1288&quot;</span>&#125;</span><br><span class="line">    c:=user&#123;name:<span class="string">&quot;xiao&quot;</span>&#125;</span><br><span class="line">    c.password=<span class="string">&quot;1024&quot;</span></span><br><span class="line">    <span class="comment">//定义一个user变量</span></span><br><span class="line">    <span class="keyword">var</span> d user</span><br><span class="line">    d.name=<span class="string">&quot;wang&quot;</span></span><br><span class="line">    d.password=<span class="string">&quot;1024&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(a,b,c,d)</span><br><span class="line">    fmt.Println(checkPassword(a,<span class="string">&quot;haha&quot;</span>))<span class="comment">//值传递</span></span><br><span class="line">    fmt.Println(checkPassword2(&amp;a,<span class="string">&quot;haha&quot;</span>))<span class="comment">//地址传递</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword</span><span class="params">(u user,password <span class="type">string</span>)</span></span> <span class="type">bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u.password==password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">checkPassword2</span><span class="params">(u *user,password <span class="type">string</span>)</span></span><span class="type">bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> u.password==password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体修改"><a href="#结构体修改" class="headerlink" title="结构体修改"></a>结构体修改</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span>&#123;</span><br><span class="line">    name <span class="type">string</span></span><br><span class="line">    password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a user)</span></span>check(password <span class="type">string</span>)<span class="type">bool</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.password==password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a* user)</span></span>check1(password <span class="type">string</span>)&#123;</span><br><span class="line">    a.password = password</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=user&#123;name:<span class="string">&quot;小王&quot;</span>,password:<span class="string">&quot;1024&quot;</span>&#125;</span><br><span class="line">    a.check1(<span class="string">&quot;2048&quot;</span>)<span class="comment">//对其密码进行修改</span></span><br><span class="line">    fmt.Println(a.check(<span class="string">&quot;2048&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="返回错误"><a href="#返回错误" class="headerlink" title="返回错误"></a>返回错误</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;errors&quot;</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> user <span class="keyword">struct</span> &#123;</span><br><span class="line">    name <span class="type">string</span> </span><br><span class="line">    password <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//传入一个user数组和名字，返回值是一个结构体对象和一个错误</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span> <span class="params">(users []user ,name <span class="type">string</span>)</span></span>(v *user,err <span class="type">error</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> _,u:=<span class="keyword">range</span> users&#123;<span class="comment">//进行查找</span></span><br><span class="line">        <span class="keyword">if</span> u.name==name&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;u,<span class="literal">nil</span><span class="comment">//找到，返回该对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>,errors.New(<span class="string">&quot;NOt, fount&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//注意，这是出纳入一个user数组，传入要查找的名字</span></span><br><span class="line">    u,err:=findUser([] user&#123;&#123;<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;1024&quot;</span>&#125;&#125;,<span class="string">&quot;wang&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err!=<span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(u.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> u,err:=findUser([]user&#123;&#123;<span class="string">&quot;wang&quot;</span>,<span class="string">&quot;1024&quot;</span>&#125;&#125;,<span class="string">&quot;li&quot;</span>);err!=<span class="literal">nil</span>&#123;</span><br><span class="line">        fmt.Println(err)</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fmt.Println(u.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    a:=<span class="string">&quot;hello&quot;</span></span><br><span class="line">    <span class="comment">//检查是否有ll这个子串</span></span><br><span class="line">    fmt.Println(strings.Contains(a,<span class="string">&quot;ll&quot;</span>))</span><br><span class="line">    fmt.Println(strings.Count(a,<span class="string">&quot;l&quot;</span>))</span><br><span class="line">    <span class="comment">//检查前缀</span></span><br><span class="line">    fmt.Println(strings.HasPrefix(a,<span class="string">&quot;he&quot;</span>))</span><br><span class="line">    <span class="comment">//检查后缀</span></span><br><span class="line">    fmt.Println(strings.HasSuffix(a,<span class="string">&quot;llo&quot;</span>))</span><br><span class="line">    <span class="comment">//看ll的下标是多少</span></span><br><span class="line">    fmt.Println(strings.Index(a,<span class="string">&quot;ll&quot;</span>))</span><br><span class="line">    <span class="comment">//在字符串之间添加一个东西</span></span><br><span class="line">    fmt.Println(strings.Join([] <span class="type">string</span>&#123;<span class="string">&quot;he&quot;</span>,<span class="string">&quot;llo&quot;</span>&#125;,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//把a这个字符串拼接2次</span></span><br><span class="line">    fmt.Println(strings.Repeat(a,<span class="number">2</span>))</span><br><span class="line">    <span class="comment">//e用E代替</span></span><br><span class="line">    <span class="comment">//返回将s中前n个不重叠old子串都替换为new的新字符串，如果n&lt;0会替换所有old子串。</span></span><br><span class="line">    fmt.Println(strings.Replace(a,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;E&quot;</span>,<span class="number">-1</span>))</span><br><span class="line">    <span class="comment">//按照-分隔开，变成字符串数组</span></span><br><span class="line">    fmt.Println(strings.Split(<span class="string">&quot;a-b-c&quot;</span>,<span class="string">&quot;-&quot;</span>))</span><br><span class="line">    <span class="comment">//全部转化为小写</span></span><br><span class="line">    fmt.Println(strings.ToLower(a))</span><br><span class="line">    fmt.Println(strings.ToUpper(a))</span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">    b:=<span class="string">&quot;你好&quot;</span></span><br><span class="line">    <span class="comment">//一个汉字2字节，并且后面还带些东西</span></span><br><span class="line">    fmt.Println(<span class="built_in">len</span>(b))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go语言基础二</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-复习题2</title>
    <url>/post/algo-review2.html</url>
    <content><![CDATA[<h1 id="考试总结"><a href="#考试总结" class="headerlink" title="考试总结"></a>考试总结</h1><p><code>致谢：感谢gjx同学的笔记😁以及jjj的txt文本,感谢yfm和tyq同学的纠错，还找了好几个错误🤣</code></p>
<p>纠错小分队：</p>
<ul>
<li>yfm   <code>找出3个错误并且还提供了一个手绘图</code></li>
<li>tyq😘 <code>1个错误</code></li>
<li>xy    <code>1个错误</code></li>
</ul>
<p><code>看前须知：看每一个题前，需要看红字说明，介绍这个题是考还是不考</code></p>
<p><a href="https://c.runoob.com/compile/12/">点我！我是在线编译网站</a></p>
<blockquote>
<p>如何代码需要输入时，需要在网站这个位置，填上相应数字。<br><img src="/post/algo-review2/c1.jpg"></p>
</blockquote>
<p><img src="/post/algo-review2/w1.jpg"></p>
<h2 id="非空子集最好把代码背一下"><a href="#非空子集最好把代码背一下" class="headerlink" title="非空子集最好把代码背一下"></a>非空子集<code>最好把代码背一下</code></h2><p>谢谢美丽的<code>syw</code>🤣,写那么多，真是辛苦啦</p>
<p><img src="/post/algo-review2/f1.jpg"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> s[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> x[<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> N = <span class="number">4</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SubSet</span><span class="params">(<span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &gt;= N) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) </span><br><span class="line">            <span class="keyword">if</span>(x[j]) </span><br><span class="line">                cout &lt;&lt; s[j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    x[i] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">SubSet</span>(i+<span class="number">1</span>);</span><br><span class="line">    x[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">SubSet</span>(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;数组的子集合为：&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">SubSet</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/post/algo-review2/f3.jpg"></p>
<h2 id="分数化简题代码要会背"><a href="#分数化简题代码要会背" class="headerlink" title="分数化简题代码要会背"></a>分数化简题<code>代码要会背</code></h2><blockquote>
<p>需要用到欧几里得求最大公约数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">gcd</span>(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> num1, num2;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入两个分子和分母: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; num1 &gt;&gt; num2;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">gcd</span>(num1, num2);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;化简结果是：&quot;</span> &lt;&lt; num1/result &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; num2/result &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="最长公共子序列（这个写出代码，或者画出表格图，困难😫）"><a href="#最长公共子序列（这个写出代码，或者画出表格图，困难😫）" class="headerlink" title="最长公共子序列（这个写出代码，或者画出表格图，困难😫）"></a>最长公共子序列（这个写出代码，或者画出表格图，困难😫）</h2><p><code>注意：如果代码写不出来，要把矩阵图画出来,需要画2张图，一张s图，一张l图</code></p>
<p>这张图是网上找的，可以参考一下：<br><img src="/post/algo-review2/z1-2.png"></p>
<p>这张图是另外同学提供的，<code>可以自己手算试一下</code>，谢谢<code>yfm</code>同学😍：<br><img src="/post/algo-review2/z1-1.jpg"></p>
<p>书上的内容<br><img src="/post/algo-review2/z5.jpg"><br><img src="/post/algo-review2/z6.jpg"></p>
<p><code>这个可以输出具体的子串结果</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a + <span class="number">1</span> &gt;&gt; m &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">// 如果a[i]和b[j]相等，更新f[i][j]</span></span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl; <span class="comment">// 输出最长公共子序列长度</span></span><br><span class="line"></span><br><span class="line">    string res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n, j = m; f[i][j] &gt;= <span class="number">1</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j]) &#123;</span><br><span class="line">            res += a[i];</span><br><span class="line">            i--; j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f[i - <span class="number">1</span>][j] &gt;= f[i][j - <span class="number">1</span>]) i--;</span><br><span class="line">        <span class="keyword">else</span> j--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> k=res.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=k<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">        cout&lt;&lt;res[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; a + <span class="number">1</span> &gt;&gt; m &gt;&gt; b + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j]) f[i][j] =  f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>; <span class="comment">// 如果a[i]和b[j]相等，更新f[i][j]</span></span><br><span class="line">            <span class="keyword">else</span> f[i][j] = <span class="built_in">max</span>(f[i - <span class="number">1</span>][j], f[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl; <span class="comment">// 输出最长公共子序列长度</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试用例：<br>6<br>abcbdb<br>9<br>acbbabdbb<br>结果：5</p>
</blockquote>
<h2 id="汉诺塔问题考结果，代码不用背"><a href="#汉诺塔问题考结果，代码不用背" class="headerlink" title="汉诺塔问题考结果，代码不用背"></a>汉诺塔问题<code>考结果，代码不用背</code></h2><p>这个不考代码，考次数,如果给你n个盘子，那么就是需要2<sup>n</sup>-1次</p>
<blockquote>
<p>这个有点难🤣</p>
</blockquote>
<blockquote>
<p>圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘。</p>
</blockquote>
<p><img src="/post/algo-review2/h1.gif"></p>
<p>例子😃：</p>
<ul>
<li>当n&#x3D;1时：<br>1.将A柱上最后一个圆盘移动到C柱上（A →C）</li>
<li>当n&#x3D;2时：<br>1.将1个圆盘从A柱移动到B柱上，重复n&#x3D;1时的步骤，只不过是将那1个圆盘（从A借助于B移动到C）改为（从A借助于C移动到B）<br>2.将A柱上最后一个圆盘移动到C柱上（A →C）<br>3.将B柱上的1个圆盘移动到C柱上。重复n&#x3D;1时的步骤，只不过是将那个圆盘（从A借助于B移动到C）改为（从B借助于A移动到C）</li>
<li>当n&#x3D;3时：<br>1.将2个圆盘从A柱移动到B柱上。重复n&#x3D;2时的步骤，只不过是将那2个圆盘（从A借助于B移动到C）改为（从A借助于C移动到B）<br>2.将A柱上最后一个圆盘移动到C柱上（A →C）<br>3.将B柱上的2个圆盘移动到C柱上。重复n&#x3D;2时的步骤，只不过是将那2个圆盘（从A借助于B移动到C）改为（从B借助于A移动到C）</li>
<li>当n&#x3D;4时：<br>1.将3个圆盘从A柱移动到B柱上。重复n&#x3D;3时的步骤，只不过是将那3个圆盘（从A借助于B移动到C）改为（从A借助于C移动到B）<br>2.将A柱上最后一个圆盘移动到C柱上（A →C）<br>3.将B柱上的3个圆盘移动到C柱上。重复n&#x3D;3时的步骤，只不过是将那3个圆盘（从A借助于B移动到C）改为（从B借助于A移动到C）</li>
</ul>
<blockquote>
<p>代码实现思路：先将n-1个圆盘从A柱移动到B柱上，然后将A柱上<br> 最后一个圆盘移动到C柱上，最后再把B柱上的n-1个圆盘移动到C柱上。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 感兴趣自己跑一下</span></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HanoiTower</span><span class="params">(<span class="type">char</span> A, <span class="type">char</span> B, <span class="type">char</span> C, <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;把第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个圆盘从&quot;</span>&lt;&lt;A&lt;&lt;<span class="string">&quot;---&gt;&quot;</span>&lt;&lt;C&lt;&lt;endl;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//将n-1个圆盘从A柱借助于C柱移动到B柱上</span></span><br><span class="line">        <span class="built_in">HanoiTower</span>(A, C, B, n - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将A柱子最后一个圆盘移动到C柱上</span></span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;把第&quot;</span>&lt;&lt;n&lt;&lt;<span class="string">&quot;个圆盘从&quot;</span>&lt;&lt;A&lt;&lt;<span class="string">&quot;---&gt;&quot;</span>&lt;&lt;C&lt;&lt;endl;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="comment">//将n-1个圆盘从B柱借助于A柱移动到C柱上</span></span><br><span class="line">        <span class="built_in">HanoiTower</span>(B, A, C, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;输入A柱子上的圆盘个数：&quot;</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//将n个圆盘从A柱借助于B柱移动到C柱上</span></span><br><span class="line">    <span class="built_in">HanoiTower</span>(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, n);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;总共需要移动&quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;次&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<blockquote>
<p>结论：若只有1个圆盘时，需要移动1次；若有2个圆盘时，需要移动3次；若有3个圆盘时，需要移动7次……不难看出，汉诺塔步数的数学规律为2的n次方减1（n为柱子上的圆盘个数）。所以若有64个圆盘那将会移动2^64-1次.</p>
</blockquote>
<h2 id="走台阶问题考结果，代码不用背"><a href="#走台阶问题考结果，代码不用背" class="headerlink" title="走台阶问题考结果，代码不用背"></a>走台阶问题<code>考结果，代码不用背</code></h2><p><code>不考代码，考数字，按照斐波那契数列随机应变就行</code></p>
<blockquote>
<p>本质是<code>斐波那契数列</code></p>
</blockquote>
<p>问题：<br>一个楼梯有50个台阶，每一步可以走一个台阶，也可以走两个台阶，请问走完这个楼梯共有多少种方法？</p>
<p>举个例子，假设有3个台阶，则有三种走法：分别是，1-1-1, 1-2, 2-1。</p>
<p>很简单的一道题，学过组合数学的人很快就能想到，这是一个递推关系。假设走完k个台阶有f(k)种走法。</p>
<ul>
<li>k &#x3D; 1时，f(k) &#x3D; 1</li>
<li>k &#x3D; 2时，f(k) &#x3D; 2</li>
<li>k &#x3D; n时，第一步走一个台阶，剩n-1个台阶，有f(n - 1)种走法。第一步走两个台阶，剩n-2个台阶，有f(n - 2种走法。所以共有f(n - 1) + f(n - 2)种走法。于是有如下公式</li>
</ul>
<p><img src="/post/algo-review2/%E8%B7%B3%E5%8F%B0%E9%98%B6.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fib</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fib</span>(n - <span class="number">1</span>) + <span class="built_in">fib</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">fib</span>(n)&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>爬楼梯的前9个数字(例子)：1 2 3 5 8 13 21 34 55 …</p>
</blockquote>
<h2 id="快速排序不考代码，考时间复杂度"><a href="#快速排序不考代码，考时间复杂度" class="headerlink" title="快速排序不考代码，考时间复杂度"></a>快速排序<code>不考代码，考时间复杂度</code></h2><p><code>时间复杂度是</code>nlogn<code> </code></p>
<p>快速排序过程程是这样的：</p>
<ul>
<li>假设我们现在对“6 1 2 7 9 3 4 5 10 8”这个10个数进行排序。首先在这个序列中随便找一个数作为基准数（不要被这个名词吓到了，就是一个用来参照的数，待会你就知道它用来做啥的了）。为了方便，就让第一个数6作为基准数吧。接下来，需要将这个序列中所有比基准数大的数放在6的右边，比基准数小的数放在6的左边，类似下面这种排列。</li>
</ul>
<blockquote>
<p> 3  1  2 5  4  6  9 7  10  8</p>
</blockquote>
<p><br></br></p>
<p><img src="/post/algo-review2/q1.png"></p>
<p>方法其实很简单： 分别从初始序列“6 1 2 7 9 3 4 5 10 8”两端开始“探测”。先从右往左找一个小于6的数，再从左往右找一个大于6的数，然后交换他们。这里可以用两个变量i和j，分别指向序列次左边和最右边。我们为这两个变量起个好听的名字“哨兵i”和“哨兵j”。刚开始的时候让哨兵i指向序列的次左边（即下标为1），指向数字1。让哨兵j指向序列的最右边（即下标为9），指向数字8。</p>
<p>哨兵i从左往右依次寻找到第一个比基准大的数，哨兵j从右往左依次寻找到第一个比基准小的数，然后交换。<br><img src="/post/algo-review2/q2.png"><br>交换：注意：交换之前需要检查i是否小于j，只有i &lt; j的时候才能交换。否则不交换，然后进入最后的基准的位置调整。<br><img src="/post/algo-review2/q3.png"><br>再继续往前寻找（哨兵i寻找比基准大，哨兵j寻找比基准小的），直到哨兵i，j相遇或者j &lt; i。<br><img src="/post/algo-review2/q4.png"><br>交换：<br><img src="/post/algo-review2/q5.png"><br>继续找：<br><img src="/post/algo-review2/q6.png"><br>这里由于不满足i &lt; j，因此3和9不会进行交换。退出循环。</p>
<p>现在我们发现以3和9的中间为界，除了基准6以外，比6小的都在左边，比6大的都在右边。因此，此时还需要调整基准的位置。</p>
<p>这里需要注意的是，当选择的基准在最左边时，需要和右指针也就是j做交换；<br>如果选择的基准在最右边，则基准和左指针i进行交换。</p>
<p>当我们第一次排序结束以后，就需要对原数组进行划分处理，以上一个基准为界，分为两个数组，如下:<br><img src="/post/algo-review2/q7.png"><br>然后再对子数组进行上述的排序操作，这是一个递归的思想。</p>
<blockquote>
<p>代码如下：</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//选取分界线。这里选数组中间那个数</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[(l + r) /<span class="number">2</span>];</span><br><span class="line">    <span class="comment">//划分成左右两个部分</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对左右部分排序</span></span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">5</span>]=&#123;<span class="number">9</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">quick_sort</span>(a,<span class="number">0</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">        cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="递推关系式推导似乎要考，看一看"><a href="#递推关系式推导似乎要考，看一看" class="headerlink" title="递推关系式推导似乎要考，看一看"></a>递推关系式推导<code>似乎要考，看一看</code></h2><p>给你 F(1)&#x3D;1,<code>F(n)=F(n-1)+n</code>,求F(n)的表达式。</p>
<p><img src="/post/algo-review2/d1.jpg"></p>
<h2 id="求2000以内的合数问题背代码"><a href="#求2000以内的合数问题背代码" class="headerlink" title="求2000以内的合数问题背代码"></a>求2000以内的合数问题<code>背代码</code></h2><blockquote>
<p>题目要求：找到2000内的合数，并且这个合数的所有因子（除它自己）之和等于这个合数。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个是输出具体因子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isComposite</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">1000</span>];</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>,count=<span class="number">0</span>; </span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    <span class="built_in">memset</span>(x, <span class="number">0</span>, <span class="built_in">sizeof</span>(x));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num / <span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</span><br><span class="line">            ans += i;</span><br><span class="line">            count++;</span><br><span class="line">            x[count] = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans == num)&#123;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;=&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= count; i++)&#123;</span><br><span class="line">            cout &lt;&lt; x[i<span class="number">-1</span>]&lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (i == count)&#123;</span><br><span class="line">                cout &lt;&lt; x[count];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2000 以内的合数是:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">isComposite</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>精简版</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个是直接输出结果，不输出因子</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">isComposite</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num / <span class="number">2</span>; i++)</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>) </span><br><span class="line">            ans += i;</span><br><span class="line">    <span class="keyword">if</span> (ans == num)</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;2000 以内的合数是:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">2000</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">isComposite</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>2000 以内的合数是: 6 28 496<br>    6&#x3D;1+2+3<br>    28&#x3D;1+2+4+7+14<br>    496&#x3D;1+2+4+8+16+31+62+124+248</p>
</blockquote>
<h2 id="蛮力法、分治法等思想简答题"><a href="#蛮力法、分治法等思想简答题" class="headerlink" title="蛮力法、分治法等思想简答题"></a>蛮力法、分治法等思想简答题</h2><h3 id="蛮力法"><a href="#蛮力法" class="headerlink" title="蛮力法"></a>蛮力法</h3><p>蛮力法通过穷举所有可能的解来找到问题的答案，并通过对比来找到最优解或满足特定条件的解。<br>或者：<code>遍历，采用一定策略依次处理待求解问题所有元素，找出问题的解</code></p>
<h3 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h3><p>分治法的基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些子问题互相独立且与原问题相同。递归地解这些子问题，然后将各个子问题的解合并得到原问题的解。</p>
<h3 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h3><p>（1） 找出最优解的性质，并刻画其结构特征。<br>（2） 递归的定义最优值。<br>（3） 以自底向上的方式计算出最优值。<br>（4） 根据计算最优值得到的信息，构造最优解。</p>
<h3 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h3><p>目光短浅，只会根据当前已有的信息做出选择，一旦做出选择就不会改变</p>
<h3 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h3><p>从解空间树的根结点出发，按照深度优先策略搜索满足约束条件的解。在搜索至树中某结点时，先判断该结点对应的部分解是否满足约束条件，如果不满足则剪枝，否则进入以该结点为根的子树继续按照深度优先策略搜索。</p>
<h2 id="杨辉三角这个代码要看懂哈🤣背代码"><a href="#杨辉三角这个代码要看懂哈🤣背代码" class="headerlink" title="杨辉三角这个代码要看懂哈🤣背代码"></a>杨辉三角<code>这个代码要看懂哈🤣背代码</code></h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun2</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;<span class="comment">//求num的阶乘</span></span><br><span class="line">    <span class="type">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= num; i++)&#123;</span><br><span class="line">        sum *= i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span></span>&#123;</span><br><span class="line">    <span class="comment">//求阶乘函数</span></span><br><span class="line">    <span class="type">int</span> ret = <span class="built_in">fun2</span>(n);</span><br><span class="line">    <span class="type">int</span> dat = <span class="built_in">fun2</span>(m);</span><br><span class="line">    <span class="type">int</span> un = <span class="built_in">fun2</span>(n - m);</span><br><span class="line">    <span class="comment">//公式:C(n, m ) = (n)!/ [(m)!(n - m)!]</span></span><br><span class="line">    <span class="keyword">return</span> ret / (dat * un);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="comment">//这里i和j要从1开始，否则公式就会出现求负数的阶乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">        <span class="comment">// 输出空格可以不要</span></span><br><span class="line">        <span class="comment">// for (int k = 0; k &lt; (n - i); k++)&#123;</span></span><br><span class="line">        <span class="comment">//     cout &lt;&lt; &quot;  &quot;;           //输出每行前面的空格</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">            <span class="type">int</span> C = <span class="built_in">fun</span>(i - <span class="number">1</span>, j - <span class="number">1</span>);<span class="comment">//利用公式求每个元素</span></span><br><span class="line">            cout&lt;&lt;C&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/post/algo-review2/y1.jpg"></p>
<h2 id="桥本分数式背代码"><a href="#桥本分数式背代码" class="headerlink" title="桥本分数式背代码"></a>桥本分数式<code>背代码</code></h2><p><img src="/post/algo-review2/q1.jpg"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recursion</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> m1 = a[<span class="number">2</span>] * <span class="number">10</span> + a[<span class="number">3</span>];</span><br><span class="line">        <span class="type">int</span> m2 = a[<span class="number">5</span>] * <span class="number">10</span> + a[<span class="number">6</span>];</span><br><span class="line">        <span class="type">int</span> m3 = a[<span class="number">8</span>] * <span class="number">10</span> + a[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">1</span>] * m2 * m3 + a[<span class="number">4</span>] * m1 * m3 == a[<span class="number">7</span>] * m1 * m2) &#123;</span><br><span class="line">            sum++;</span><br><span class="line">            cout &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; m1 &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; a[<span class="number">4</span>] &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; m2 &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; a[<span class="number">7</span>] &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; m3 &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt; <span class="number">10</span>; t++) &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这段代码用于检查当前数字t是否在数组a的前面已经出现过。如果出现过，则将flag设置为false，表示当前数字t无法作为解的一部分。通过这个步骤可以排除重复的数字。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] == t) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面的数字没有重复的</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            a[i] = t;</span><br><span class="line">            <span class="built_in">recursion</span>(i + <span class="number">1</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">recursion</span>(<span class="number">1</span>, a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\t总计有&quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;种解！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数字游戏"><a href="#数字游戏" class="headerlink" title="数字游戏"></a>数字游戏</h2><p><img src="/post/algo-review2/s1.jpg"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">recursion</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> a[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">10</span>) &#123;<span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> m1 = a[<span class="number">1</span>] * <span class="number">10</span> + a[<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> m2 = a[<span class="number">4</span>] * <span class="number">100</span> + a[<span class="number">5</span>]*<span class="number">10</span>+a[<span class="number">6</span>];</span><br><span class="line">        <span class="type">int</span> m3 = a[<span class="number">8</span>] * <span class="number">10</span> + a[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">if</span> (a[<span class="number">3</span>]!=<span class="number">1</span>&amp;&amp;a[<span class="number">7</span>]!=<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (m1 * a[<span class="number">3</span>] + m2 / a[<span class="number">7</span>] == m3) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">                cout &lt;&lt; m1 &lt;&lt; <span class="string">&quot; * &quot;</span> &lt;&lt; a[<span class="number">3</span>] &lt;&lt; <span class="string">&quot; + &quot;</span> &lt;&lt; m2 &lt;&lt; <span class="string">&quot; / &quot;</span> &lt;&lt; a[<span class="number">7</span>] &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; m3&lt;&lt;<span class="string">&quot; == 0 &quot;</span> &lt;&lt; endl;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">1</span>; t &lt; <span class="number">10</span>; t++) &#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 这段代码用于检查当前数字t是否在数组a的前面已经出现过。如果出现过，则将flag设置为false，表示当前数字t无法作为解的一部分。通过这个步骤可以排除重复的数字。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j] == t) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 前面的数字没有重复的</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            a[i] = t;</span><br><span class="line">            <span class="built_in">recursion</span>(i + <span class="number">1</span>, a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">recursion</span>(<span class="number">1</span>, a);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;\n\t总计有&quot;</span> &lt;&lt; sum &lt;&lt; <span class="string">&quot;种解！&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="0-x2F-1背包背代码"><a href="#0-x2F-1背包背代码" class="headerlink" title="0&#x2F;1背包背代码"></a>0&#x2F;1背包<code>背代码</code></h2><blockquote>
<p> 有n个物品和一个容量为m的背包，每个物品只能选或不选，第i个物品的体积为w[i]，价值为v[i]<code>w:wight v:value</code>，求解将哪些物品装入背包可使这些物品的体积总和不超过背包容量，且价值总和最大。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// n个背包 总体积是m</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m; j ++ )&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j]; <span class="comment">// 初始化</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w[i]) f[i][j] = <span class="built_in">max</span>(f[i][j], f[i - <span class="number">1</span>][j - w[i]] + v[i]); <span class="comment">// 转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[n][m] &lt;&lt; endl; <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面是一维dp优化</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="comment">// 体积为w[i]，价值为v[i]</span></span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= w[i]; j -- )</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - w[i]] + v[i]);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl; <span class="comment">// 输出结果</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面是一维dp优化 <code>精简版</code></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m,v,w;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 输入体积w  输入价值v</span></span><br><span class="line">        cin &gt;&gt; w &gt;&gt; v;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= w; j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - w] + v);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[m] &lt;&lt; endl; <span class="comment">// 输出结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入格式：<br>4 5<br>1 2<br>2 4<br>3 4<br>4 5</p>
<blockquote>
<p>解释：4个物品，容量是5，第一个物品体积是1价值是2，… ,最后的输出结果应该是8</p>
</blockquote>
<h2 id="埃及分数这个不考的，了解一下吧"><a href="#埃及分数这个不考的，了解一下吧" class="headerlink" title="埃及分数这个不考的，了解一下吧"></a>埃及分数<code>这个不考的，了解一下吧</code></h2><blockquote>
<p>要求表示为最少的埃及分数之和的形式，那就要求我们分解出来得到埃及分数的分母尽可能的小。<br>按照贪心的策略，我们可以在每一次分解时都取出最大的那个埃及分数，也就是分母最小的埃及分数。然后将所给的真分数分解为一个更小的真分数+埃及分<br>数的形式，然后对该真分数继续分解，直到把真分数都表示成埃及分数的形式。<br>那么，现在的问题就转成了怎么求出每次的最大的埃及分数了。下面就行相应分析：<br>假设一个真分数为a&#x2F;b，那么就有b&gt;a,那么，b就可以表示成以下形式：</p>
</blockquote>
<p><img src="/post/algo-review2/a1.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;请输入两个数，分子与分母 ：&quot;</span>;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> k = (b + a - <span class="number">1</span>) / a; <span class="comment">// 向上取整</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;1/&quot;</span> &lt;&lt; k &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        a = a * k - b;</span><br><span class="line">        b = b * k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最优二叉查找树"><a href="#最优二叉查找树" class="headerlink" title="最优二叉查找树"></a>最优二叉查找树</h2><p><code>这个是结果:1.4</code></p>
<p><code>感谢fyx的结果😁</code></p>
<p><img src="/post/algo-review2/z1.jpg"></p>
<p><code>感谢yfm的结果😁</code><br><img src="/post/algo-review2/z3.jpg"></p>
<h2 id="活动安排问题不考"><a href="#活动安排问题不考" class="headerlink" title="活动安排问题不考"></a>活动安排问题<code>不考</code></h2><p><code>应该考这个题,贪心算法</code></p>
<p><img src="/post/algo-review2/h1.jpg"></p>
<blockquote>
<p>活动安排问题：设有n个活动的集合C&#x3D;{1,2,…,n}，其中每个活动都要求使用同一个资源(如会议室)<br> ，而在同一时间内只能有一个活动使用该资源。每个活动i都有要求使用该资源的起始时间si和结束时间fi，且si<code>&lt;</code><br> fi。如果选择了活动i使用会议室，那么它在半开区间［si, fi)内占用该资源。如果［si, fi)与［sj,fj)不相交，那么活动i与活动j是相容的。也就是<br> 说，当si≥fj或sj≥fi时，活动i与活动j相容。活动安排问题要求在所给的活动集合中选出最大的相容活动子集，也即尽可能选择更多的活动来使用资源。</p>
</blockquote>
<p><img src="/post/algo-review2/h1.png"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">11</span>;<span class="comment">//活动的数量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GreedySelector</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> s[], <span class="type">int</span> f[], <span class="type">bool</span> A[])</span></span>&#123;</span><br><span class="line">    A[<span class="number">1</span>]=<span class="literal">true</span>;<span class="comment">//默认将第一个活动先安排</span></span><br><span class="line">    <span class="type">int</span> j=<span class="number">1</span>;<span class="comment">//记录最近一次加入A中的活动</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;<span class="comment">//依次检查活动i是否与当前已选择的活动相容</span></span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=f[j])&#123;<span class="comment">//下一活动的开始时间晚于之前活动的结束时间</span></span><br><span class="line">            A[i]=<span class="literal">true</span>;<span class="comment">//标记该活动是可安排的</span></span><br><span class="line">            j=i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            A[i]=<span class="literal">false</span>;<span class="comment">//标记该活动是不可安排的</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> s[] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">12</span>&#125;;        <span class="comment">//下标从1开始,存储活动开始时间</span></span><br><span class="line">    <span class="type">int</span> f[] = &#123;<span class="number">0</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>&#125;;    <span class="comment">//下标从1开始,存储活动结束时间</span></span><br><span class="line">    <span class="type">bool</span> b[N+<span class="number">1</span>];<span class="comment">//存储被安排的活动编号</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;各活动的开始时间,结束时间分别为：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;s[i]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;f[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">GreedySelector</span>(N,s,f,b);</span><br><span class="line"></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;最大相容活动子集为：&quot;</span>&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b[i])&#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]:&quot;</span>&lt;&lt;<span class="string">&quot;(&quot;</span>&lt;&lt;s[i]&lt;&lt;<span class="string">&quot;,&quot;</span>&lt;&lt;f[i]&lt;&lt;<span class="string">&quot;)&quot;</span>&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图着色、哈密顿回路（回溯法）"><a href="#图着色、哈密顿回路（回溯法）" class="headerlink" title="图着色、哈密顿回路（回溯法）"></a>图着色、哈密顿回路（回溯法）</h2><p><img src="/post/algo-review2/t1.jpg"></p>
<h2 id="八皇后背代码"><a href="#八皇后背代码" class="headerlink" title="八皇后背代码"></a>八皇后<code>背代码</code></h2><p><code>代码直接背吧,可能会出个编程大题，这是我能找到的最简单的代码了</code></p>
<blockquote>
<p>这段代码是一个经典的 N 皇后问题的解法。在一个 N × N<br>的棋盘上，放置N个皇后，使得它们互相之间不能攻击到对方。其中，皇后可以攻击同一行、同一列以及同一对角线上的其他皇后。<br>代码使用深度优先搜索（DFS）的思想进行求解。通过递归的方式，依次尝试在每一行放置皇后，保证每一行只有一个皇后，并且满足不被其他皇后攻击的<br>条件。具体实现中使用了三个辅助数组 col、dg 和 udg 来标记列、正对角线和反对角线上的位置是否已经放置了皇后。<br>在搜索过程中，如果成功放置了 N 个皇后，即找到了一种合法的摆放方式，就输出棋盘的情况，并将结果数量 res 加一。最终输出结果的个数。<br>这段代码可以帮助解决 N 皇后问题，对于给定的 N 值，求出所有合法的摆放方式，并统计结果的数量。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// N 皇后问题</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="type">char</span> g[N][N];</span><br><span class="line"><span class="type">bool</span> col[N], dg[N], udg[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == n)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) cout&lt;&lt;g[i]&lt;&lt;endl;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">        res++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!col[i] &amp;&amp; !dg[u + i] &amp;&amp; !udg[n - u + i])&#123;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            col[i] = dg[u + i] = udg[n - u + i] = <span class="literal">false</span>;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// cin &gt;&gt; n;</span></span><br><span class="line">    n=<span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;总共有&quot;</span>&lt;&lt;res&lt;&lt;<span class="string">&quot;个结果&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">在这段代码中，<span class="code">`dg`</span>和<span class="code">`udg`</span>分别表示主对角线和副对角线上是否存在皇后。</span><br><span class="line">在棋盘上，每个格子可以通过行号和列号来表示，主对角线上的格子具有相同的行号减去列号，而副对角线上的格子具有相同的行号加上列号。</span><br><span class="line">在代码中，<span class="code">`dg[u + i]`</span>表示当前处理的行<span class="code">`u`</span>和列<span class="code">`i`</span>所在的主对角线，而<span class="code">`udg[n - u + i]`</span>表示当前处理的行<span class="code">`u`</span>和列<span class="code">`i`</span>所在的副对角线。</span><br><span class="line">对于每个格子<span class="code">`(u, i)`</span>，如果在主对角线上已经存在皇后，则<span class="code">`dg[u + i]`</span>的值为<span class="code">`true`</span>，否则为<span class="code">`false`</span>。同样地，如果在副对角线上已经存在皇后，则<span class="code">`udg[n - u + i]`</span>的值为<span class="code">`true`</span>，否则为<span class="code">`false`</span>。</span><br><span class="line">在回溯算法中，当我们选择一个格子放置皇后时，需要标记相应的主对角线和副对角线上已经存在皇后，以便在后续的递归过程中判断某个格子是否可放置皇后。</span><br></pre></td></tr></table></figure>

<h2 id="Kruskal算法不考"><a href="#Kruskal算法不考" class="headerlink" title="Kruskal算法不考"></a>Kruskal算法<code>不考</code></h2><p>时间复杂度：<code>ElogE</code>  E是边的个数</p>
<blockquote>
<p>代码不要记，看看图一乐就行。</p>
</blockquote>
<p><code>想要提升自己的话，代码可以自己看看</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">    <span class="type">int</span> src;</span><br><span class="line">    <span class="type">int</span> dest;</span><br><span class="line">    <span class="type">int</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">compareEdges</span><span class="params">(<span class="type">const</span> Edge&amp; e1, <span class="type">const</span> Edge&amp; e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e1.weight &lt; e2.weight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; parent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findRoot</span><span class="params">(<span class="type">int</span> vertex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (parent[vertex] != vertex) &#123;</span><br><span class="line">        vertex = parent[vertex];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> vertex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">unionVertices</span><span class="params">(<span class="type">int</span> root1, <span class="type">int</span> root2)</span> </span>&#123;</span><br><span class="line">    parent[root2] = root1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kruskalMST</span><span class="params">(vector&lt;Edge&gt;&amp; edges, <span class="type">int</span> numVertices)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> numEdges = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> minCost = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(edges.<span class="built_in">begin</span>(), edges.<span class="built_in">end</span>(), compareEdges);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; numVertices; i++) &#123;</span><br><span class="line">        parent[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> Edge&amp; edge : edges) &#123;</span><br><span class="line">        <span class="type">int</span> root1 = <span class="built_in">findRoot</span>(edge.src);</span><br><span class="line">        <span class="type">int</span> root2 = <span class="built_in">findRoot</span>(edge.dest);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root1 != root2) &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;边：&quot;</span> &lt;&lt; edge.src &lt;&lt; <span class="string">&quot; - &quot;</span> &lt;&lt; edge.dest &lt;&lt; <span class="string">&quot; (权值: &quot;</span> &lt;&lt; edge.weight &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; endl;</span><br><span class="line">            minCost += edge.weight;</span><br><span class="line">            <span class="built_in">unionVertices</span>(root1, root2);</span><br><span class="line">            numEdges++;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (numEdges == numVertices - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;最小生成树的总权值为：&quot;</span> &lt;&lt; minCost &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;Edge&gt; edges = &#123;</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>&#125;,</span><br><span class="line">        &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;,</span><br><span class="line">        &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>&#125;,</span><br><span class="line">        &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> numVertices = <span class="number">6</span>;</span><br><span class="line">    parent.<span class="built_in">resize</span>(numVertices);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">kruskalMST</span>(edges, numVertices);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="棋盘覆盖问题不考"><a href="#棋盘覆盖问题不考" class="headerlink" title="棋盘覆盖问题不考"></a>棋盘覆盖问题<code>不考</code></h2><p>使用的是<code>分治法</code></p>
<p><code>代码不考，感兴趣看一看得了</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 棋盘全局变量，使用二维数组表示</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; board;</span><br><span class="line"></span><br><span class="line"><span class="comment">// L型骨牌编号，从1到n * n</span></span><br><span class="line"><span class="type">int</span> tile = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 棋盘覆盖函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chessboardCover</span><span class="params">(<span class="type">int</span> tr, <span class="type">int</span> tc, <span class="type">int</span> dr, <span class="type">int</span> dc, <span class="type">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = tile++;</span><br><span class="line">    <span class="type">int</span> s = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查特殊方格所在的象限</span></span><br><span class="line">    <span class="keyword">if</span> (dr &lt; tr + s &amp;&amp; dc &lt; tc + s) &#123;</span><br><span class="line">        <span class="comment">// 特殊方格在左上象限</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr, tc, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在左上象限放置一个L型骨牌</span></span><br><span class="line">        board[tr + s - <span class="number">1</span>][tc + s - <span class="number">1</span>] = t;</span><br><span class="line">        <span class="comment">// 覆盖其余方格</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr, tc, tr + s - <span class="number">1</span>, tc + s - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &lt; tr + s &amp;&amp; dc &gt;= tc + s) &#123;</span><br><span class="line">        <span class="comment">// 特殊方格在右上象限</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr, tc + s, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在右上象限放置一个L型骨牌</span></span><br><span class="line">        board[tr + s - <span class="number">1</span>][tc + s] = t;</span><br><span class="line">        <span class="comment">// 覆盖其余方格</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr, tc + s, tr + s - <span class="number">1</span>, tc + s, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &gt;= tr + s &amp;&amp; dc &lt; tc + s) &#123;</span><br><span class="line">        <span class="comment">// 特殊方格在左下象限</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr + s, tc, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在左下象限放置一个L型骨牌</span></span><br><span class="line">        board[tr + s][tc + s - <span class="number">1</span>] = t;</span><br><span class="line">        <span class="comment">// 覆盖其余方格</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr + s, tc, tr + s, tc + s - <span class="number">1</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dr &gt;= tr + s &amp;&amp; dc &gt;= tc + s) &#123;</span><br><span class="line">        <span class="comment">// 特殊方格在右下象限</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr + s, tc + s, dr, dc, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 在右下象限放置一个L型骨牌</span></span><br><span class="line">        board[tr + s][tc + s] = t;</span><br><span class="line">        <span class="comment">// 覆盖其余方格</span></span><br><span class="line">        <span class="built_in">chessboardCover</span>(tr + s, tc + s, tr + s, tc + s, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印棋盘</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printBoard</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            cout &lt;&lt; board[i][j] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入棋盘尺寸，需要是2^n (n): &quot;</span>;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化棋盘</span></span><br><span class="line">    board.<span class="built_in">resize</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> Row, Col;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;输入特殊单元格的行和列索引: &quot;</span>;</span><br><span class="line">    cin &gt;&gt; Row &gt;&gt; Col;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 覆盖棋盘</span></span><br><span class="line">    <span class="built_in">chessboardCover</span>(<span class="number">0</span>, <span class="number">0</span>, Row, Col, n);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印棋盘</span></span><br><span class="line">    <span class="built_in">printBoard</span>(n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><ul>
<li>P157 解空间树364个结点，只找14个</li>
<li>P159  解空间树3906个结点，只搜索了21个</li>
<li>P162 八皇后问题代码</li>
<li>最小生成树、批处理作业调度问题不考</li>
<li>子集合问题运算结果按输出顺序写出来</li>
<li>哈密顿回路不考</li>
<li>杨辉三角给定公式写出代码</li>
<li>写不出代码的题写伪代码</li>
<li>P113 最长公共子序列可以写过程也可以写代码</li>
<li>P22 递推式子推导</li>
<li>给一段代码算时间复杂度</li>
<li>P118 最优二叉查找树的矩阵数字</li>
<li>word文档复习课拿下</li>
<li>除了分支界限法和减治法的其他方法的思路要写出来</li>
<li>2000以内合数</li>
<li>P115 动态规划01背包代码</li>
<li>P170 课后习题桥本分数式</li>
<li>课后画的习题都得会</li>
<li>实验下周日之前全部收齐</li>
</ul>
<blockquote>
<p>祝大家考个好成绩</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法-复习题</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-复习题1</title>
    <url>/post/algo-review.html</url>
    <content><![CDATA[<h1 id="算法总结"><a href="#算法总结" class="headerlink" title="算法总结"></a>算法总结</h1><h2 id="什么是算法😊？算法一般还必须满足哪些重要特性？"><a href="#什么是算法😊？算法一般还必须满足哪些重要特性？" class="headerlink" title="什么是算法😊？算法一般还必须满足哪些重要特性？"></a>什么是算法😊？算法一般还必须满足哪些重要特性？</h2><p>答：算法是对特定问题求解步骤的一种描述，是指令的有限序列。<br>算法还必须满足下列5个重要特性：</p>
<ul>
<li>输入：一个算法有零个或多个输入（即算法可以没有输入）；</li>
<li>输出：一个算法有一个或多个输出（算法必须要有输出），通常输出与输入之间有着某种特定的关系；</li>
<li>有穷性：一个算法必须总是（对任何合法的输入）在执行有穷步之后结束，且每一步都在有穷时间内完成；</li>
<li>确定性：算法中的每一条指令必须有确切的含义，不存在二义性。并且，在任何条件下，对于相同的输入只能得到相同的输出。</li>
<li>可行性：算法描述的操作可以通过已经实现的基本操作执行有限次来实现。</li>
</ul>
<h2 id="考虑下面的算法，回答下列问题，算法完成什么功能？算法的基本语句是什么？基本语句执行了多少次？算法的时间复杂性是多少？"><a href="#考虑下面的算法，回答下列问题，算法完成什么功能？算法的基本语句是什么？基本语句执行了多少次？算法的时间复杂性是多少？" class="headerlink" title="考虑下面的算法，回答下列问题，算法完成什么功能？算法的基本语句是什么？基本语句执行了多少次？算法的时间复杂性是多少？"></a>考虑下面的算法，回答下列问题，算法完成什么功能？算法的基本语句是什么？基本语句执行了多少次？算法的时间复杂性是多少？</h2><p>（1）考虑下面的算法，回答下列问题，算法完成什么功能？算法的基本语句是什么？基本语句执行了多少次？算法的时间复杂性是多少？</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="function"><span class="type">int</span> <span class="title">Mistery</span><span class="params">(<span class="type">int</span> n)</span>                    （2）<span class="type">int</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;                                          &#123;</span><br><span class="line">  <span class="type">int</span>  S = <span class="number">0</span>;                                 <span class="keyword">if</span>(n = = <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; = n;i++)                   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       S = S+i*i;                             <span class="keyword">else</span></span><br><span class="line">       <span class="keyword">return</span> S;                                <span class="keyword">return</span> <span class="built_in">Q</span>(n<span class="number">-1</span>)+<span class="number">2</span>*n<span class="number">-1</span>;            </span><br><span class="line">    &#125;                                        &#125;</span><br></pre></td></tr></table></figure>

<p>答：😜<br>(1)算法的基本语句是 S &#x3D; S+i<code>*</code>i；基本语句执行了n次，算法的时间复杂性是O(n)。<br>(2)算法的时间复杂性是O(n)。</p>
<h2 id="下面程序段中基本语句的执行次数是多少，要求写出计算公式"><a href="#下面程序段中基本语句的执行次数是多少，要求写出计算公式" class="headerlink" title="下面程序段中基本语句的执行次数是多少，要求写出计算公式"></a>下面程序段中基本语句的执行次数是多少，要求写出计算公式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">（<span class="number">1</span>）<span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=n;i++)        (<span class="number">2</span>) m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">2</span>*i&lt;=n)                 <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">2</span>*i;j&lt;=n;j++)           <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">2</span>*i;j++)</span><br><span class="line">                y=y+i*j;                 m=m+<span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>答：(1)基本语句执行次数：(n^2)&#x2F;4<br>    (2)基本语句执行次数：n(n+1)</p>
<p><img src="/post/algo-review/1.jpg"></p>
<h2 id="过桥问题"><a href="#过桥问题" class="headerlink" title="过桥问题"></a>过桥问题</h2><blockquote>
<p>有4个人打算过桥，这个桥每次最多只能有两个人同时通过。他们都在桥的某一端，并且是在晚上，过桥需要一只手电筒，而他们只有一只手电筒。这就意味着两个人过桥后必须有一人将手电筒带回来。每个人走路的速度是不同的：甲过桥要用1分钟，乙过桥要用2分钟，丙过桥要用5分钟，丁过桥要用10分钟，显然，两个人走路的速度等于其中较慢那个人的速度，问他们全部过桥最少要用多长时间？写出具体过桥的思路。</p>
</blockquote>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">解析：</span><br><span class="line">这个问题可以使用贪心算法来解决。以下是一个具体的过桥思路：</span><br><span class="line"></span><br><span class="line">1. 假设四个人分别为甲、乙、丙、丁，他们的过桥时间分别为1分钟、2分钟、5分钟、10分钟。</span><br><span class="line">2. 首先，甲和乙一起过桥，花费时间为2分钟，然后甲返回，花费时间为1分钟。</span><br><span class="line">3. 接下来，丙和丁一起过桥，花费时间为10分钟，然后乙返回，花费时间为2分钟。</span><br><span class="line">4. 最后，甲和乙将手电筒一起带过桥，花费时间为2分钟。</span><br><span class="line"></span><br><span class="line">总共花费的时间为2 + 1 + 10 + 2 + 2 = 17分钟。</span><br><span class="line"></span><br><span class="line">因此，他们全部过桥最少需要17分钟。</span><br><span class="line"></span><br><span class="line">这种思路的关键是:通过两次最快的人一起过桥，并让最快的人回来带手电筒，以此来最大程度地减少总过桥时间。</span><br></pre></td></tr></table></figure>

<h2 id="应用选择排序方法对一个记录序列进行升序排列的基本思想是什么，具体排序过程怎么做的？"><a href="#应用选择排序方法对一个记录序列进行升序排列的基本思想是什么，具体排序过程怎么做的？" class="headerlink" title="应用选择排序方法对一个记录序列进行升序排列的基本思想是什么，具体排序过程怎么做的？"></a>应用选择排序方法对一个记录序列进行升序排列的基本思想是什么，具体排序过程怎么做的？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">答：基本思想：第i 趟排序在无序序列ri-rn中找到值最小的记录，并和第i个记录交换作为有序序列的第一个记录。</span><br><span class="line">具体排序过程如下：</span><br><span class="line">（1）将整个记录序列划分为有序区和无序区，初始时有序区为空，无序区含有待排序的所有记录</span><br><span class="line">（2）在无序区查找值最小的记录，将它与无序区的第一个记录交换，使得有序区扩展一个记录，同时无序区减少一个记录。</span><br><span class="line">不断重复步骤（2），直到无序区只剩下一个记录为止。</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="type">int</span> minIndex = i;  <span class="comment">// 当前最小元素的下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">                minIndex = j;  <span class="comment">// 更新最小元素的下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 交换最小元素和当前元素的位置</span></span><br><span class="line">        <span class="built_in">swap</span>(arr[i], arr[minIndex]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">selectionSort</span>(arr, n);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后的数组：&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速排序的分治策略，当以第一个记录作为轴值，对待排序序列进行划分的过程是怎样实现的？"><a href="#快速排序的分治策略，当以第一个记录作为轴值，对待排序序列进行划分的过程是怎样实现的？" class="headerlink" title="快速排序的分治策略，当以第一个记录作为轴值，对待排序序列进行划分的过程是怎样实现的？"></a>快速排序的分治策略，当以第一个记录作为轴值，对待排序序列进行划分的过程是怎样实现的？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">快速排序的分治策略是：</span><br><span class="line">（1）划分：选定一个记录作为轴值，以轴值为基准将整个序列划分为两个子序列r1 … ri-1和ri+1 … rn，前一个子序列中记录的值均小于或等于轴值，后一个子序列中记录的值均大于或等于轴值；</span><br><span class="line">（2）求解子问题：分别对划分后的每一个子序列递归处理；</span><br><span class="line">（3）合并：由于对子序列r1 … ri-1和ri+1 … rn的排序是就地进行的，所以合并不需要执行任何操作。</span><br><span class="line">以第一个记录作为轴值，对待排序序列进行划分的过程为：</span><br><span class="line">    （1）初始化：取第一个记录作为基准，设置两个参数i，j分别用来指示将要与基准记录进行比较的左侧记录位置和右侧记录位置，也就是本次划分的区间；</span><br><span class="line">    （2）右侧扫描过程：将基准记录与j指向的记录进行比较，如果j指向记录的关键码大，则j前移一个记录位置。重复右侧扫描过程，直到右侧的记录小（即反序），若i＜j，则将基准记录与j指向的记录进行交换；</span><br><span class="line">    （3）左侧扫描过程：将基准记录与i指向的记录进行比较，如果i指向记录的关键码小，则i后移一个记录位置。重复左侧扫描过程，直到左侧的记录大（即反序），若i＜j，则将基准记录与i指向的记录交换；</span><br><span class="line">    （4）重复（2）（3）步，直到i与j指向同一位置，即基准记录最终的位置。</span><br></pre></td></tr></table></figure>

<h2 id="汉诺塔问题"><a href="#汉诺塔问题" class="headerlink" title="汉诺塔问题"></a>汉诺塔问题</h2><p><code>记结论</code></p>
<blockquote>
<p>已知刚开始时A塔座有6个碟子，这些碟子按照从上到下不断变大的次序依次放置在A塔座，即最大的碟子放在最下面，最小的碟子放在最上面，现在借助中间塔座B，将这些碟子移动到目标塔座C，要求一次只能移动一个碟子，且每次不能将大的碟子放在小的碟子上，请问要移动多少次，如果碟子数是10，移动次数是多少？如果碟子数是64，移动次数是多少？请试着写出移动次数与碟子数的函数关系或递推关系式。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">1、碟子数为6时，移动次数63</span><br><span class="line">2、碟子数为10，移动次数1023</span><br><span class="line">3、碟子数是64，移动次数是2的64次方减1</span><br><span class="line">4、碟子数是n，移动次数用M(n)，则所以`M(n)=2^n-1`，可以验证n=1也满足该函数关系。</span><br></pre></td></tr></table></figure>
<h2 id="试述分治法的基本思想"><a href="#试述分治法的基本思想" class="headerlink" title="试述分治法的基本思想"></a>试述分治法的基本思想</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">分治法的基本思想是将一个规模为n的问题分解为k个规模较小的子问题，这些子问题互相独立且与原问题相同。递归地解这些子问题，然后将各个子问题的解合并得到原问题的解。</span><br></pre></td></tr></table></figure>

<h2 id="蛮力法的优缺点是什么？"><a href="#蛮力法的优缺点是什么？" class="headerlink" title="蛮力法的优缺点是什么？"></a>蛮力法的优缺点是什么？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">优点：具有广泛的适用性和简单性。</span><br><span class="line">缺点：计算效率不高。</span><br><span class="line">应用：选择排序，顺序查找，穷举查找也是解决组合问题的一种蛮力方法。</span><br></pre></td></tr></table></figure>
<h2 id="最大子段和问题的简单算法是什么？"><a href="#最大子段和问题的简单算法是什么？" class="headerlink" title="最大子段和问题的简单算法是什么？"></a>最大子段和问题的简单算法是什么？</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">MaxSubsequenceSum</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> tempSum, maxSum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; n;i++)       <span class="comment">// 子序列起始位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i;j &lt; n;j++)   <span class="comment">// 子序列终止位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            tempSum = <span class="number">0</span>;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i;k &lt;= j;k++)   <span class="comment">// 子序列遍历求和</span></span><br><span class="line">                tempSum += arr[k];</span><br><span class="line">            <span class="keyword">if</span> (tempSum &gt; maxSum)       <span class="comment">// 更新最大和值</span></span><br><span class="line">                maxSum = tempSum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxSum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123; <span class="number">4</span>, <span class="number">-3</span>, <span class="number">5</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">-2</span> &#125;;</span><br><span class="line">    <span class="type">int</span> maxSubSum = <span class="built_in">MaxSubsequenceSum</span>(a, <span class="number">8</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;T结果是: &quot;</span> &lt;&lt; maxSubSum &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="试述回溯法的基本思想及用回溯法解题的步骤。"><a href="#试述回溯法的基本思想及用回溯法解题的步骤。" class="headerlink" title="试述回溯法的基本思想及用回溯法解题的步骤。"></a>试述回溯法的基本思想及用回溯法解题的步骤。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">答：回溯法在问题的解空间树中，按深度优先策略，从根结点出发搜索解空间树。算法搜索至解空间树的任意一点时，先判断该结点是否包含问题的解。如果肯定不包含，则跳过对该结点为根的子树的搜索，逐层向其祖先结点回溯；否则，进入该子树，继续按深度优先策略搜索。  </span><br><span class="line">   基本步骤:</span><br><span class="line">① 针对所给问题，定义问题的解空间； </span><br><span class="line">② 确定易于搜索的解空间结构； </span><br><span class="line">③ 以深度优先方式搜索解空间，并在搜索过程中用剪枝函数避免无效搜索。</span><br></pre></td></tr></table></figure>

<h2 id="回溯法中常见哪两类典型的解空间树？分析各自的使用场合及时间复杂度。"><a href="#回溯法中常见哪两类典型的解空间树？分析各自的使用场合及时间复杂度。" class="headerlink" title="回溯法中常见哪两类典型的解空间树？分析各自的使用场合及时间复杂度。"></a>回溯法中常见哪两类典型的解空间树？分析各自的使用场合及时间复杂度。</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">答：回溯法中常见的两类典型的解空间树是子集树和排列树。</span><br><span class="line">当所给的问题是从n个元素的集合S中找出满足某种性质的子集时，相应的解空间树称为子集树。这类子集树通常有2n个叶结点，遍历子集树需O(2n)计算时间 。</span><br><span class="line">当所给的问题是确定n个元素满足某种性质的排列时，相应的解空间树称为排列树。这类排列树通常有n!个叶结点。遍历排列树需要O(n!)计算时间。</span><br></pre></td></tr></table></figure>
<h2 id="设计动态规划算法的4个步骤是什么？"><a href="#设计动态规划算法的4个步骤是什么？" class="headerlink" title="设计动态规划算法的4个步骤是什么？"></a>设计动态规划算法的4个步骤是什么？</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">动态规划算法的4个步骤是</span><br><span class="line">（1） 找出最优解的性质，并刻画其结构特征。</span><br><span class="line">（2） 递归的定义最优值。</span><br><span class="line">（3） 以自底向上的方式计算出最优值。</span><br><span class="line">（4） 根据计算最优值得到的信息，构造最优解。</span><br></pre></td></tr></table></figure>

<h2 id="比较分支限界法与回溯法的异同-😃"><a href="#比较分支限界法与回溯法的异同-😃" class="headerlink" title="比较分支限界法与回溯法的异同.😃"></a>比较分支限界法与回溯法的异同.😃</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">答：分支限界法与回溯法的相同点是：都是一种在问题的解空间树中搜索问题解的算法。</span><br><span class="line">不同点：</span><br><span class="line">（1）求解目标不同；</span><br><span class="line">（2）搜索方式不同；</span><br><span class="line">（3）对扩展结点的扩展方式不同；</span><br><span class="line">（4）存储空间的要求不同。</span><br></pre></td></tr></table></figure>
<h2 id="常见的两种分支限界法的算法框架是什么"><a href="#常见的两种分支限界法的算法框架是什么" class="headerlink" title="常见的两种分支限界法的算法框架是什么?"></a>常见的两种分支限界法的算法框架是什么?</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">正确答案：</span><br><span class="line">答：（1）队列式(FIFO)分支限界法：按照队列先进先出（FIFO）原则选取下一个节点为扩展节点。</span><br><span class="line">（2）优先队列式分支限界法：按照优先队列中规定的优先级选取优先级最高的节点成为当前扩展节点。</span><br></pre></td></tr></table></figure>


<hr>
<h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h1><h2 id="用3种颜色为一个具有5个顶点的无向图着色，共有（-）种可能的着色组合"><a href="#用3种颜色为一个具有5个顶点的无向图着色，共有（-）种可能的着色组合" class="headerlink" title="用3种颜色为一个具有5个顶点的无向图着色，共有（   ）种可能的着色组合"></a>用3种颜色为一个具有5个顶点的无向图着色，共有（   ）种可能的着色组合</h2><p>A、244<br>B、243<br>C、246<br>D、245<br>正确答案：B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每个点都有三种情况，所以是3^5=243</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="一个五个顶点的无向联通图邻接矩阵如下："><a href="#一个五个顶点的无向联通图邻接矩阵如下：" class="headerlink" title="一个五个顶点的无向联通图邻接矩阵如下："></a>一个五个顶点的无向联通图邻接矩阵如下：</h2><pre><code>     0     1    1      0      0
     1     0    1      1      1 
     1     1    0      0      1
     0     1    0      0      1
     0     1    1      1      0
</code></pre>
<p>假设用3种颜色来着色，则解空间树一个完全3叉树，问：解空间树中共有（    ）个结点；如果用回溯法进行搜索，只需搜索其中（     ）个结点就找到问题的解。<br>A、365；14<br>B、363；15<br>C、364；14<br>D、365；15<br>正确答案：C</p>
<p><img src="/post/algo-review/j1.jpg"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">完全三叉树是一种特殊的三叉树结构，其中除了最后一层外，其他层的节点都被填满，且最后一层的节点从左到右连续地填入。</span><br></pre></td></tr></table></figure>

<h2 id="对于带有五个顶点无向图，其邻接矩阵如下🤣"><a href="#对于带有五个顶点无向图，其邻接矩阵如下🤣" class="headerlink" title="对于带有五个顶点无向图，其邻接矩阵如下🤣"></a>对于带有五个顶点无向图，其邻接矩阵如下🤣</h2><pre><code> 0     1     0     1      0 
 1     0     1     0      1
 0     1     0     1      1
 1     0     1     0      1
 0     1     1     1      0
</code></pre>
<p>考虑该无向图的哈密顿回路问题，问：解空间树中共有（     ）个结点；而如果采用回溯法只用搜索其中（    ）个结点后就能找到问题的一个解。<br>A、3905；21<br>B、3906；24<br>C、3905；24<br>D、3906；21<br>正确答案：D</p>
<p><img src="/post/algo-review/j2.jpg"></p>
<h2 id="走楼梯问题，假设只能一次走一级台阶或走两级台阶（连续的），例如只有一级台阶，则只有一种走法；如果有两级台阶（连续的），有两种走法；如果有三级台阶，则有3种走法，问7级连续台阶共有（-）走法。"><a href="#走楼梯问题，假设只能一次走一级台阶或走两级台阶（连续的），例如只有一级台阶，则只有一种走法；如果有两级台阶（连续的），有两种走法；如果有三级台阶，则有3种走法，问7级连续台阶共有（-）走法。" class="headerlink" title="走楼梯问题，假设只能一次走一级台阶或走两级台阶（连续的），例如只有一级台阶，则只有一种走法；如果有两级台阶（连续的），有两种走法；如果有三级台阶，则有3种走法，问7级连续台阶共有（    ）走法。"></a>走楼梯问题，假设只能一次走一级台阶或走两级台阶（连续的），例如只有一级台阶，则只有一种走法；如果有两级台阶（连续的），有两种走法；如果有三级台阶，则有3种走法，问7级连续台阶共有（    ）走法。</h2><p>A、18<br>B、21<br>C、23<br>D、22<br>正确答案：B</p>
<h2 id="活动安排问题：如下六个活动集合的最大相容活动有（-）个。（贪心策略选择结束时间早的活动先安排）"><a href="#活动安排问题：如下六个活动集合的最大相容活动有（-）个。（贪心策略选择结束时间早的活动先安排）" class="headerlink" title="活动安排问题：如下六个活动集合的最大相容活动有（  ）个。（贪心策略选择结束时间早的活动先安排）"></a>活动安排问题：如下六个活动集合的最大相容活动有（  ）个。（贪心策略选择结束时间早的活动先安排）</h2><p>活动1：start&#x3D;0,finish&#x3D;6,start, finish表示活动的起始时刻和结束时刻，下同<br>活动2：start&#x3D;1,finish&#x3D;2；<br>活动3：start&#x3D;3,finish&#x3D;4；<br>活动4：start&#x3D;5,finish&#x3D;7；<br>活动5：start&#x3D;5,finish&#x3D;9；<br>活动6：start&#x3D;8,finish&#x3D;9；<br>A、5 B、4 C、3 D、6<br>正确答案：B</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这种贪心算法的核心思想是选择结束时间最早的活动，并且确保每次选择的活动与已选择的活动不发生时间冲突，以获得最大相容活动的子集。</span><br></pre></td></tr></table></figure>


<h2 id="背包问题（注：这里是分数背包，不是0-x2F-1背包）：有三个物品，其重量和价值如下所示："><a href="#背包问题（注：这里是分数背包，不是0-x2F-1背包）：有三个物品，其重量和价值如下所示：" class="headerlink" title="背包问题（注：这里是分数背包，不是0&#x2F;1背包）：有三个物品，其重量和价值如下所示："></a>背包问题（注：这里是分数背包，不是0&#x2F;1背包）：有三个物品，其重量和价值如下所示：</h2><pre><code>            重量                价值
物品1        20                  60
物品2        10                  50
物品3        30                  120
</code></pre>
<p>背包的容量为50，下面考虑三种贪心策略（1）选择物品按照价值从大到小的次序；（2）选择物品按照重量从小到大的次序；<br>（3）选择物品按照单位重量价值从大到小的次序。则这三种策略（1）、（2）、（3）装入背包的物品价值分别是多少（   ）<br>A、180、195、200 ；B、180、190、200；<br>C、185、190、195；D、185、195、200<br>正确答案：B</p>
<h2 id="用贪心算法求解问题应该满足（-）两个性质"><a href="#用贪心算法求解问题应该满足（-）两个性质" class="headerlink" title="用贪心算法求解问题应该满足（       ）两个性质"></a>用贪心算法求解问题应该满足（       ）两个性质</h2><p>A、最优子结构、重叠子问题；B、最优子结构、贪心选择<br>C、贪心选择、局部最优；D、以上都不是<br>正确答案：B</p>
<h2 id="图着色问题：已知五个顶点无向连通图的邻接矩阵如下："><a href="#图着色问题：已知五个顶点无向连通图的邻接矩阵如下：" class="headerlink" title="图着色问题：已知五个顶点无向连通图的邻接矩阵如下："></a>图着色问题：已知五个顶点无向连通图的邻接矩阵如下：</h2><pre><code>   0        1       0        0         0
   1        0       1        1         0
   0        1       0        0         1
   0        1       0        0         1  
   0        0       1        1         0
</code></pre>
<p>当任意两个相邻的顶点着色都不同时，该无向图的最小着色数是（      ）。<br>A、3；B、4；C、2；D、1<br>正确答案：C</p>
<p><img src="/post/algo-review/j3.jpg"></p>
<h2 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h2><p>已知二叉查找树中查找概率分别是0.1、0.2、0.4、0.3，已知应用动态规划算法求最优二叉查找树的动态规划函数为C[i][i-1]&#x3D;0，i&#x3D;1，2，…n+1，C[i][i]<br>&#x3D;pi，i&#x3D;1，2，…，n ，C[i][j]&#x3D;min{C[i][k-1]+C[k+1][j]<br>+（查找第i个记录一直到第j个记录概率之和）}，这里（1≤i≤j≤n，i≤k≤j）<br>C[2][4]的值是多少?<br>A、1.5；B、1.4；C、1.6；D、1.3<br>正确答案：B</p>
<h2 id="下列算法中通常以自底向上的方式求解最优解的是"><a href="#下列算法中通常以自底向上的方式求解最优解的是" class="headerlink" title="下列算法中通常以自底向上的方式求解最优解的是"></a>下列算法中通常以自底向上的方式求解最优解的是</h2><p>A、备忘录法；B、动态规划法<br>C、贪心法；D、回溯法<br>正确答案：B</p>
<h2 id="下面问题（-）不能使用贪心法解决。"><a href="#下面问题（-）不能使用贪心法解决。" class="headerlink" title="下面问题（   ）不能使用贪心法解决。"></a>下面问题（   ）不能使用贪心法解决。</h2><p>A、 单源最短路径问题；B、 N皇后问题<br>C、 最小生成树问题；  D、 背包问题<br>正确答案：B</p>
<h2 id="回溯法搜索状态空间树是按照（-）的顺序。"><a href="#回溯法搜索状态空间树是按照（-）的顺序。" class="headerlink" title="回溯法搜索状态空间树是按照（   ）的顺序。"></a>回溯法搜索状态空间树是按照（   ）的顺序。</h2><p>A、 中序遍历<br>B、 广度优先遍历<br>C、 深度优先遍历<br>D、 层次优先遍历<br>正确答案：C</p>
<h2 id="下面哪种函数是回溯法中为避免无效搜索采取的策略（-）"><a href="#下面哪种函数是回溯法中为避免无效搜索采取的策略（-）" class="headerlink" title="下面哪种函数是回溯法中为避免无效搜索采取的策略（    ）"></a>下面哪种函数是回溯法中为避免无效搜索采取的策略（    ）</h2><p>A、 递归函数<br>B、 剪枝函数<br>C、 随机数函数<br>D、 搜索函数<br>正确答案：B</p>
<h2 id="常见的两种分支限界法为（-）"><a href="#常见的两种分支限界法为（-）" class="headerlink" title="常见的两种分支限界法为（  ）"></a>常见的两种分支限界法为（  ）</h2><p>A、 广度优先分支限界法与深度优先分支限界法<br>B、 队列式（FIFO）分支限界法与堆栈式分支限界法<br>C、 排列树法与子集树法<br>D、 队列式（FIFO）分支限界法与优先队列式分支限界法<br>正确答案:D</p>
<h2 id="采用最大效益优先搜索方式的算法是（-）。"><a href="#采用最大效益优先搜索方式的算法是（-）。" class="headerlink" title="采用最大效益优先搜索方式的算法是（  ）。"></a>采用最大效益优先搜索方式的算法是（  ）。</h2><p>A、 分支界限法<br>B、 动态规划法<br>C、 贪心法<br>D、 回溯法<br>正确答案：A</p>
<h2 id="一个C程序的执行是从（-）。"><a href="#一个C程序的执行是从（-）。" class="headerlink" title="一个C程序的执行是从（  ）。"></a>一个C程序的执行是从（  ）。</h2><p>A、本程序的main函数开始，到main函数结束<br>B、本程序文件的第一个函数开始，到本程序文件的最后一个函数结束<br>C、本程序的main函数开始，到本程序文件的最后一个函数结束<br>D、本程序文件的第一个函数开始，到本程序main函数结束<br>正确答案：A</p>
<h2 id="在-C-语言中，每个语句必须以（-）结束。"><a href="#在-C-语言中，每个语句必须以（-）结束。" class="headerlink" title="在 C 语言中，每个语句必须以（    ）结束。"></a>在 C 语言中，每个语句必须以（    ）结束。</h2><p>A、回车符   B、冒号<br>C、逗号     D、分号<br>正确答案：D</p>
<h2 id="二分搜索算法是利用（-）实现的算法。"><a href="#二分搜索算法是利用（-）实现的算法。" class="headerlink" title="二分搜索算法是利用（   ）实现的算法。"></a>二分搜索算法是利用（   ）实现的算法。</h2><p>A、分治策略 B、动态规划法<br>C、贪心法 D、回溯法<br>正确答案：A</p>
<h2 id="实现棋盘覆盖算法利用的算法是（-）。"><a href="#实现棋盘覆盖算法利用的算法是（-）。" class="headerlink" title="实现棋盘覆盖算法利用的算法是（     ）。"></a>实现棋盘覆盖算法利用的算法是（     ）。</h2><p>A、分治法   B、动态规划法<br>C、贪心法 D、回溯法<br>正确答案：A</p>
<h2 id="哈夫曼编码的贪心算法所需的计算时间为（-）"><a href="#哈夫曼编码的贪心算法所需的计算时间为（-）" class="headerlink" title="哈夫曼编码的贪心算法所需的计算时间为（    ）"></a>哈夫曼编码的贪心算法所需的计算时间为（    ）</h2><p>A、O(n2n)  B、O(nlogn)<br>C、O(2n) D、O(n)<br>正确答案：B</p>
<h2 id="下列算法中不能解决0-x2F-1背包问题的是（-）"><a href="#下列算法中不能解决0-x2F-1背包问题的是（-）" class="headerlink" title="下列算法中不能解决0&#x2F;1背包问题的是（    ）"></a>下列算法中不能解决0&#x2F;1背包问题的是（    ）</h2><p>A、贪心法<br>B、动态规划<br>C、 回溯法<br>D、分支限界法<br>正确答案：A</p>
<h2 id="下面是贪心算法的基本要素的是（-）。"><a href="#下面是贪心算法的基本要素的是（-）。" class="headerlink" title="下面是贪心算法的基本要素的是（   ）。"></a>下面是贪心算法的基本要素的是（   ）。</h2><p>A、重叠子问题<br>B、构造最优解<br>C、贪心选择性质<br>D、定义最优解</p>
<p>正确答案：C</p>
<h2 id="背包问题的贪心算法所需的计算时间为"><a href="#背包问题的贪心算法所需的计算时间为" class="headerlink" title="背包问题的贪心算法所需的计算时间为"></a>背包问题的贪心算法所需的计算时间为</h2><p>A、O(n2n)<br>B、O(nlogn)<br>C、O(2n)<br>D、O(n)<br>正确答案：B</p>
<h2 id="下列算法中通常以深度优先方式系统搜索问题解的是（-）。"><a href="#下列算法中通常以深度优先方式系统搜索问题解的是（-）。" class="headerlink" title="下列算法中通常以深度优先方式系统搜索问题解的是（    ）。"></a>下列算法中通常以深度优先方式系统搜索问题解的是（    ）。</h2><p>A、备忘录法B、动态规划法C、贪心法D、回溯法<br>正确答案：D</p>
<h2 id="回溯法的效率不依赖于下列哪些因素（-）"><a href="#回溯法的效率不依赖于下列哪些因素（-）" class="headerlink" title="回溯法的效率不依赖于下列哪些因素（  ）"></a>回溯法的效率不依赖于下列哪些因素（  ）</h2><p>A、满足显约束的值的个数<br>B、计算约束函数的时间<br>C、计算限界函数的时间<br>D、确定解空间的时间<br>正确答案：D</p>
<h2 id="在-C-语言中，字符型数据在计算机内存中，以字符的（-）形式存储。"><a href="#在-C-语言中，字符型数据在计算机内存中，以字符的（-）形式存储。" class="headerlink" title="在 C 语言中，字符型数据在计算机内存中，以字符的（   ）形式存储。"></a>在 C 语言中，字符型数据在计算机内存中，以字符的（   ）形式存储。</h2><p>A、原码<br>B、反码<br>C、ASCII 码<br>D、BCD码<br>正确答案：C</p>
<h2 id="动态规划算法的基本要素为（-）"><a href="#动态规划算法的基本要素为（-）" class="headerlink" title="动态规划算法的基本要素为（  ）"></a>动态规划算法的基本要素为（  ）</h2><p>A、最优子结构性质与贪心选择性质<br>B、重叠子问题性质与贪心选择性质<br>C、最优子结构性质与重叠子问题性质<br>D、预排序与递归调用<br>正确答案：C</p>
<hr>
<h1 id="论述题"><a href="#论述题" class="headerlink" title="论述题"></a>论述题</h1><h2 id="旅行者问题"><a href="#旅行者问题" class="headerlink" title="旅行者问题"></a>旅行者问题</h2><blockquote>
<p>一个旅行者要驾车从A地到B地，A、B两地间距离为s。A、B两地之间有n个加油站，已知第i个加油站离起点A的距离为di公里,输入的di从小到大，s车加<br>满油后可行驶m公里，出发之前汽车油箱为空。应如何加油使得从A地到B地沿途加油次数最少？给出用贪心法求解该最优化问题的贪心选择策略<br>，写出该最优化问题的最优值和最优解的贪心算法，并分析算法的时间复杂性。</p>
</blockquote>
<p>正确答案：<br>答：贪心选择策略：从起点的加油站起每次加满油后不加油行驶尽可能远，直至油箱中的油耗尽前所能到达的最远的油站为止，在该油站再加满油。<br>最坏情况下的时间复杂性：Θ(n)</p>
<h2 id="证明活动安排问题的贪心算法具有整体最优解。"><a href="#证明活动安排问题的贪心算法具有整体最优解。" class="headerlink" title="证明活动安排问题的贪心算法具有整体最优解。"></a>证明活动安排问题的贪心算法具有整体最优解。</h2><p>正确答案：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">假设在某一步选择了结束时间最早的活动A作为下一个安排的活动，并且存在一个最优解中的另一个活动B，B的结束时间比A更早。我们需要证明将B替换为A并不会影响后续的活动安排。</span><br><span class="line"></span><br><span class="line">由于B的结束时间更早，我们可以将B的活动时间段分成两个部分，一个与A不重叠的部分和一个与A重叠的部分。如果我们选择了B而不选择A，那么与A不重叠的部分仍然可以安排其他活动，而与A重叠的部分可以被A所取代。因此，将B替换为A并不会影响后续的活动安排，贪心策略仍然是最优的。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>简化版：有xyh提供</code></p>
<blockquote>
<p>算法的贪心策略是选择结束时间最早的活动，即活动1，然后将问题简化为对剩余活动中与活动1相容的活动进行活动安排的子问题。证明过程采用反证法，假设存在一个最优解不包含活动1，然后构造一个包含活动1的最优解，从而证明包含活动1的最优解是整体最优解。</p>
</blockquote>
<h2 id="举反例证明0-x2F-1背包问题"><a href="#举反例证明0-x2F-1背包问题" class="headerlink" title="举反例证明0&#x2F;1背包问题"></a>举反例证明0&#x2F;1背包问题</h2><p>若使用的算法是按照pi&#x2F;wi的非递减次序考虑选择的物品，即只要正在被考虑的物品装得进就装入背包，则此方法不一定能得到最优解（此题说明0&#x2F;<br>1背包问题与背包问题的不同）。</p>
<p>正确答案：<br>证明：举例如：p&#x3D;{7,4,4},w&#x3D;{3,2,2},c&#x3D;4时，由于7除以3最大，若按题目要求的方法，只能取第一个，收益是7。而此实例的最大的收益应该是8，取第2<br>,3 个。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法-复习题</tag>
      </tags>
  </entry>
  <entry>
    <title>csdn</title>
    <url>/post/csdn.html</url>
    <content><![CDATA[<h1 id="csdn精选面试常考"><a href="#csdn精选面试常考" class="headerlink" title="csdn精选面试常考"></a>csdn精选面试常考</h1><p><a href="https://blog.csdn.net/sarah0619/article/details/119531095">https://blog.csdn.net/sarah0619/article/details/119531095</a><br><a href="https://blog.csdn.net/buutterfly/article/details/6617375">https://blog.csdn.net/buutterfly/article/details/6617375</a><br><a href="https://blog.csdn.net/qq_26464179/article/details/100122152?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=2">https://blog.csdn.net/qq_26464179/article/details/100122152?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2</a><br><a href="https://blog.csdn.net/weixin_43885975/article/details/121000965">https://blog.csdn.net/weixin_43885975/article/details/121000965</a><br><a href="https://blog.csdn.net/rod0320/article/details/123100270">https://blog.csdn.net/rod0320/article/details/123100270</a><br><a href="https://www.pdai.tech/md/java/jvm/java-jvm-gc-zgc.html">https://www.pdai.tech/md/java/jvm/java-jvm-gc-zgc.html</a><br><a href="https://www.cnblogs.com/kerwins-AC/p/15586335.html">https://www.cnblogs.com/kerwins-AC/p/15586335.html</a><br><a href="https://blog.csdn.net/woaini886353/article/details/124382091">https://blog.csdn.net/woaini886353/article/details/124382091</a><br><a href="http://www.lanxinbase.com/?p=2496">http://www.lanxinbase.com/?p=2496</a><br><a href="https://www.jianshu.com/p/014f96049fa3">https://www.jianshu.com/p/014f96049fa3</a><br><a href="https://www.yht7.com/news/92601">https://www.yht7.com/news/92601</a><br><a href="https://blog.csdn.net/u010859650/article/details/123819149">https://blog.csdn.net/u010859650/article/details/123819149</a><br><a href="https://blog.csdn.net/guoqiaosen/article/details/122523562">https://blog.csdn.net/guoqiaosen/article/details/122523562</a><br><a href="https://blog.csdn.net/qq_42145871/article/details/81950949?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-81950949-blog-123708659.t5_refersearch_landing&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-81950949-blog-123708659.t5_refersearch_landing&utm_relevant_index=1">https://blog.csdn.net/qq_42145871/article/details/81950949?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-81950949-blog-123708659.t5_refersearch_landing&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-81950949-blog-123708659.t5_refersearch_landing&amp;utm_relevant_index=1</a><br><a href="https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#full-gc-%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6">https://www.pdai.tech/md/java/jvm/java-jvm-gc.html#full-gc-%E7%9A%84%E8%A7%A6%E5%8F%91%E6%9D%A1%E4%BB%B6</a><br><a href="https://baijiahao.baidu.com/s?id=1683233515038143669&wfr=spider&for=pc">https://baijiahao.baidu.com/s?id=1683233515038143669&amp;wfr=spider&amp;for=pc</a><br><a href="https://blog.csdn.net/qq_33528407/article/details/88425102?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-88425102-blog-118937567.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-88425102-blog-118937567.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">https://blog.csdn.net/qq_33528407/article/details/88425102?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-88425102-blog-118937567.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-88425102-blog-118937567.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</a></p>
<hr>
<p><a href="https://blog.csdn.net/ChineseSoftware/article/details/118390388">https://blog.csdn.net/ChineseSoftware/article/details/118390388</a><br><a href="https://www.cnblogs.com/hustzzl/p/9343797.html">https://www.cnblogs.com/hustzzl/p/9343797.html</a><br><a href="https://www.cnblogs.com/hcxss/p/15933060.html">https://www.cnblogs.com/hcxss/p/15933060.html</a><br><a href="https://www.cnblogs.com/songgj/p/14403523.html">https://www.cnblogs.com/songgj/p/14403523.html</a><br><a href="https://blog.csdn.net/striveb/article/details/84826921">https://blog.csdn.net/striveb/article/details/84826921</a><br><a href="https://blog.csdn.net/Hellowenpan/article/details/119954133">https://blog.csdn.net/Hellowenpan/article/details/119954133</a><br><a href="https://www.cnblogs.com/paddix/p/5428507.html">https://www.cnblogs.com/paddix/p/5428507.html</a><br><a href="https://www.cnblogs.com/east7/p/16096417.html">https://www.cnblogs.com/east7/p/16096417.html</a><br><a href="https://blog.csdn.net/JAVA88866/article/details/124691274">https://blog.csdn.net/JAVA88866/article/details/124691274</a><br><a href="https://www.cnblogs.com/cj8357475/p/16032878.html">https://www.cnblogs.com/cj8357475/p/16032878.html</a><br><a href="https://blog.csdn.net/qq_40907977/article/details/104743789?spm=1001.2101.3001.6650.2&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-104743789-blog-125737653.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-2-104743789-blog-125737653.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=4">https://blog.csdn.net/qq_40907977/article/details/104743789?spm=1001.2101.3001.6650.2&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-104743789-blog-125737653.pc_relevant_3mothn_strategy_recovery&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-2-104743789-blog-125737653.pc_relevant_3mothn_strategy_recovery&amp;utm_relevant_index=4</a><br><a href="https://www.jb51.net/article/246666.htm">https://www.jb51.net/article/246666.htm</a><br><a href="https://blog.csdn.net/qq_50652600/article/details/123417584">https://blog.csdn.net/qq_50652600/article/details/123417584</a><br><a href="https://blog.csdn.net/meser88/article/details/120698638">https://blog.csdn.net/meser88/article/details/120698638</a></p>
<hr>
<p><a href="https://blog.csdn.net/KIMTOU/article/details/124712277">https://blog.csdn.net/KIMTOU/article/details/124712277</a><br><a href="https://blog.csdn.net/albertsh/article/details/121368339?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121368339-blog-125983316.t5_refersearch_landing&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121368339-blog-125983316.t5_refersearch_landing&utm_relevant_index=1">https://blog.csdn.net/albertsh/article/details/121368339?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121368339-blog-125983316.t5_refersearch_landing&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-121368339-blog-125983316.t5_refersearch_landing&amp;utm_relevant_index=1</a><br><a href="https://blog.csdn.net/u011686226/article/details/52411306?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-52411306-blog-109269319.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-52411306-blog-109269319.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">https://blog.csdn.net/u011686226/article/details/52411306?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-52411306-blog-109269319.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-52411306-blog-109269319.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</a><br><a href="https://blog.csdn.net/weixin_45313931/article/details/114496274">https://blog.csdn.net/weixin_45313931/article/details/114496274</a><br><a href="https://blog.csdn.net/WYQIMJ/article/details/105892060">https://blog.csdn.net/WYQIMJ/article/details/105892060</a><br><a href="https://blog.csdn.net/m0_38033475/article/details/90166469">https://blog.csdn.net/m0_38033475/article/details/90166469</a><br><a href="https://blog.csdn.net/Funny54/article/details/121459081">https://blog.csdn.net/Funny54/article/details/121459081</a><br><a href="https://blog.csdn.net/mo71105731/article/details/123364539">https://blog.csdn.net/mo71105731/article/details/123364539</a><br><a href="https://www.cnblogs.com/Ro0kie/p/5185370.html">https://www.cnblogs.com/Ro0kie/p/5185370.html</a><br><a href="https://blog.csdn.net/weixin_54186646/article/details/124412656">https://blog.csdn.net/weixin_54186646/article/details/124412656</a><br><a href="https://blog.csdn.net/Longtermevolution/article/details/108927402">https://blog.csdn.net/Longtermevolution/article/details/108927402</a></p>
<hr>
<p><a href="https://blog.csdn.net/WB18002337539/article/details/120468027?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-120468027-blog-89326739.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-120468027-blog-89326739.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">https://blog.csdn.net/WB18002337539/article/details/120468027?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120468027-blog-89326739.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120468027-blog-89326739.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</a></p>
]]></content>
      <categories>
        <category>csdn</category>
      </categories>
      <tags>
        <tag>csdn</tag>
      </tags>
  </entry>
  <entry>
    <title>Java复习题</title>
    <url>/post/Java%E5%A4%8D%E4%B9%A0%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="《JAVA语言程序设计》练习一"><a href="#《JAVA语言程序设计》练习一" class="headerlink" title="《JAVA语言程序设计》练习一"></a>《JAVA语言程序设计》练习一</h1><h2 id="单选择题"><a href="#单选择题" class="headerlink" title="单选择题"></a>单选择题</h2><ol>
<li>编译Java  Application 源程序文件将产生相应的字节码文件，这些字节码文件的扩展名为(  B)。<br> A. java                      B. .class<br> C. html                      D. .exe</li>
<li>设 x &#x3D; 1 , y &#x3D; 2 , z &#x3D; 3，则表达式  y＋＝z－－&#x2F;＋＋x  的值是(  A    )。<br> A. 3                         B. 3. 5<br> C. 4                         D. 5</li>
<li>不允许作为类及类成员的访问控制符的是(  C    )。<br> A. public                    B. private<br> C. static                     D. protected</li>
<li>为AB类的一个无形式参数无返回值的方法method书写方法头，使得使用类名AB作为前缀就可以调用它，该方法头的形式为(   A   )。<br> A. static void method( )                    B. public void method( )<br> C. final void method( )                     D. abstract void method( )</li>
<li>给定java 代码如下，编译运行后，输出结果是(  C   )(选择一项）。     <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">aMethod</span><span class="params">()</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.aMethod();</span><br><span class="line">        System.out.println(test.aMethod());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>
  a) 0    b) 1   c) 2    d) 3</li>
</ol>
<p>二. 填空题<br>以下是排版后的内容：</p>
<ol>
<li><p>开发与运行 Java 程序需要经过的三个主要步骤为<strong>编写代码</strong>、<strong>编译程序</strong>和<strong>运行程序</strong>。</p>
</li>
<li><p>在 Java 的基本数据类型中，char 型采用 Unicode 编码方案，每个 Unicode 码占用<strong>2</strong>字节内存空间，这样，无论是中文字符还是英文字符，都是占用<strong>2</strong>字节内存空间。</p>
</li>
<li><p>设 x &#x3D; 2 ，则表达式 <code>(x++)/3</code> 的值是<strong>0</strong>。</p>
</li>
<li><p>若 x &#x3D; 5，y &#x3D; 10，则 x &lt; y 和 x &gt;&#x3D; y 的逻辑值分别为<strong>True</strong>和<strong>False</strong>。</p>
</li>
<li><p>抽象方法是一种仅有方法头，没有具体方法体和操作实现的方法，该方法必须在抽象类之中定义。<code>final</code> 方法是不能被当前类的子类重新定义的方法。</p>
</li>
<li><p>创建一个名为 MyPackage 的包的语句是 <code>package MyPackage;</code>，该语句应该放在程序的位置为：<strong>第一行</strong>。</p>
</li>
<li><p>设有数组定义：<code>int MyIntArray[] = &#123;10, 20, 30, 40, 50, 60, 70&#125;;</code>，则执行以下几个语句后的输出结果是<strong>120</strong>。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; MyIntArray.length; i++)</span><br><span class="line">     <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>)    </span><br><span class="line">        s += MyIntArray[i];</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Java 程序中，通过类的定义只能实现<strong>单</strong>重继承，但通过接口的定义可以实现<strong>多</strong>重继承关系。</p>
</li>
</ol>
<h2 id="写出下面程序的运行结果"><a href="#写出下面程序的运行结果" class="headerlink" title="写出下面程序的运行结果"></a>写出下面程序的运行结果</h2><p>1. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;    </span><br><span class="line">        <span class="type">AB</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AB</span>(<span class="string">&quot;Hello!&quot;</span>, <span class="string">&quot;I love JAVA.&quot;</span>);</span><br><span class="line">        System.out.println(s.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AB</span> &#123;</span><br><span class="line">    String s1;</span><br><span class="line">    String s2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AB</span><span class="params">(String str1, String str2)</span> &#123; </span><br><span class="line">        s1 = str1;  </span><br><span class="line">        s2 = str2; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> s1 + s2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：Hello！ I love JAVA．</p>
<p>2. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">abc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> i, s = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> a[] = &#123; <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>, <span class="number">90</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> ( i = <span class="number">0</span> ; i &lt; a.length ; i ++ )</span><br><span class="line">            <span class="keyword">if</span> ( a[i] % <span class="number">3</span> == <span class="number">0</span> )  </span><br><span class="line">                s += a[i];</span><br><span class="line">        System.out.println(<span class="string">&quot;s=&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：s&#x3D;180</p>
<p>3. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    String one, two;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Parent</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        one = a;</span><br><span class="line">        two = b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(one);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Child</span><span class="params">(String a, String b)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(one + <span class="string">&quot; to &quot;</span> + two);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Parent</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Parent</span>(<span class="string">&quot;south&quot;</span>, <span class="string">&quot;north&quot;</span>);</span><br><span class="line">        <span class="type">Parent</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&quot;east&quot;</span>, <span class="string">&quot;west&quot;</span>);</span><br><span class="line">        p.print();</span><br><span class="line">        t.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">south</span><br><span class="line">east to west</span><br></pre></td></tr></table></figure>
<h1 id="《JAVA语言程序设计》期末考试练习二"><a href="#《JAVA语言程序设计》期末考试练习二" class="headerlink" title="《JAVA语言程序设计》期末考试练习二"></a>《JAVA语言程序设计》期末考试练习二</h1><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h2><ol>
<li>Java的源代码中定义几个类，编译结果就生成几个以<code>.class</code>为后缀的字节码文件。（√）</li>
<li>Java程序里,创建新的类对象用关键字<code>new</code>，回收无用的类对象使用关键字<code>free</code>。 （×）<br><code>回收对象使用JVM的GC自动完成</code></li>
<li>构造函数用于创建类的实例对象，构造函数名应与类名相同，返回类型为<code>void</code>。 （×）<br><code>构造函数无返回类型</code></li>
<li>在异常处理中，若<code>try</code>中的代码可能产生多种异常则可以对应多个<code>catch</code>语句，若<code>catch</code>中的参数类型有父类子类关系，此时应该将父类放在后面，子类放在前面。（√）</li>
<li>拥有<code>abstract</code>方法的类是抽象类，但抽象类中可以没有<code>abstract</code>方法。（√）</li>
<li>静态初始化器是在其所属的类加载内存时由系统自动调用执行。（√）</li>
<li>在Java中对象可以赋值，只要使用赋值号（等号）即可，相当于生成了一个各属性与赋值对象相同的新对象。（×）<br><code>没有分配内存，没有创建新对象。</code></li>
</ol>
<h2 id="单项选择题"><a href="#单项选择题" class="headerlink" title="单项选择题"></a>单项选择题</h2><ol>
<li><p>Java application中的主类需包含main方法，以下哪项是main方法的正确形参？（B）<br>A. String args  B. String args[]  C. Char arg  D. StringBuffer args[]</p>
</li>
<li><p>以下关于继承的叙述正确的是（A）。<br>A. 在Java中类只允许单一继承<br>B. 在Java中一个类只能实现一个接口<br>C. 在Java中一个类不能同时继承一个类和实现一个接口<br>D. 在Java中接口只允许单一继承</p>
</li>
<li><p>paint()方法使用哪种类型的参数? （C）<br>A. Graphics  B. Graphics2D  C. String  D. Color</p>
</li>
<li><p>以下哪个不是Java的原始数据类型（B）<br>A. int  B. Boolean  C. float  D. char</p>
</li>
<li><p>若需要定义一个类域或类方法，应使用哪种修饰符？（A）<br>A. static  B. package  C. private  D. public</p>
</li>
<li><p>在浏览器中执行applet程序，以下选项中的哪个方法将被最先执行（A）。<br>A. init()  B. start()  C. destroy()  D. stop()</p>
</li>
<li><p>有以下程序片段，下列哪个选项不能插入到行1。（D）</p>
<ol>
<li></li>
<li>public class Interesting{</li>
<li>&#x2F;&#x2F;do sth</li>
<li>}<br>A. import java.awt.* ;  B. package mypackage;  C. class OtherClass{ }  D. public class MyClass{ }</li>
</ol>
</li>
<li><p>设有下面两个赋值语句：<br>a &#x3D; Integer.parseInt(“12”);<br>b &#x3D; Integer.valueOf(“12”).intValue();<br>下述说法正确的是（B）。<br>A. a是整数类型变量，b是整数类对象。<br>B. a是整数类对象，b是整数类型变量。<br>C. a和b都是整数类对象并且值相等。<br>D. a和b都是整数类型变量并且值相等。</p>
</li>
<li><p>FilterOutputStream是BufferedOutputStream、DataOutputStream及PrintStream的父类，以下哪个类可能是FilterOutputStream构造函数的参数类型？(A)<br>A. OutputStream  B. File  C. InputStream  D. BufferedOutputStream</p>
</li>
<li><p>在编写Java Applet程序时，需在程序的开头写上(B)语句。<br>A. import java.awt.* ;  B. import java.applet.Applet ;  C. import java.io.* ;  D. import java.awt.Graphics ;</p>
</li>
<li><p>在使用interface声明一个接口时，只可以使用（D）修饰符修饰该接口。<br>A. private  B. protected  C. private protected  D. public</p>
</li>
</ol>
<h2 id="程序阅读题"><a href="#程序阅读题" class="headerlink" title="程序阅读题"></a>程序阅读题</h2><ol>
<li><p>以下程序的输出结果为     相等      。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringTest1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> </span><br><span class="line">    &#123;</span><br><span class="line">        String s1=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        String s2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(s1.equals(s2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;相等&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不相等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以下程序段的输出结果为 5 6 7 8 9          。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String  args[ ])</span>&#123;  </span><br><span class="line">        <span class="type">int</span>  i , j ;</span><br><span class="line">        <span class="type">int</span>  a[ ] = &#123; <span class="number">5</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>  ( i = <span class="number">0</span> ; i &lt; a.length-<span class="number">1</span>; i ++ ) &#123;</span><br><span class="line">            <span class="type">int</span>  <span class="variable">k</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>  ( j = i ; j &lt; a.length ;  j++ )</span><br><span class="line">                <span class="keyword">if</span>  ( a[j]&lt;a[k] )  k = j;</span><br><span class="line">            <span class="type">int</span>  <span class="variable">temp</span> <span class="operator">=</span>a[i];</span><br><span class="line">            a[i] = a[k];</span><br><span class="line">            a[k] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>  ( i =<span class="number">0</span> ; i&lt;a.length; i++ )</span><br><span class="line">                System.out.print(a[i]+<span class="string">&quot;  &quot;</span>);</span><br><span class="line">       System.out.println( );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>写出以下程序的功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestFile</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;input.txt&quot;</span>));</span><br><span class="line">        String s;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">         &#123;</span><br><span class="line">          System.out.print(<span class="string">&quot;请输入一个字符串： &quot;</span>);</span><br><span class="line">          System.out.flush();</span><br><span class="line">          s=br.readLine();</span><br><span class="line">          <span class="keyword">if</span> (s.length()==<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">          bw.write(s);</span><br><span class="line">          bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：该程序的功能是将用户从控制台输入的字符串保存到名为 “input.txt” 的文本文件中。</p>
</li>
<li><p>阅读以下程序，写出输出结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    Animal() &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Animal  &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    Dog() &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Dog &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">snoppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：Animal  Dog</p>
</li>
</ol>
<h1 id="《JAVA语言程序设计》期末考试练习三"><a href="#《JAVA语言程序设计》期末考试练习三" class="headerlink" title="《JAVA语言程序设计》期末考试练习三"></a>《JAVA语言程序设计》期末考试练习三</h1><h2 id="单项选择题-1"><a href="#单项选择题-1" class="headerlink" title="单项选择题"></a>单项选择题</h2><ol>
<li><p>如下哪个是Java中的标识符（D）<br>A. public    B. super     C. 3number   D. width</p>
</li>
<li><p>如下哪个是Java中的标识符( A)<br>A. fieldname    B. super      C. 3number   D. #number</p>
</li>
<li><p>已知如下定义：String s &#x3D; “story”; 下面哪个语句不是合法的( B)<br>A. s +&#x3D; “books”;             B. s &#x3D; s + 100;<br>C. int len &#x3D; s.length;               D. String t &#x3D; s + “abc”;</p>
</li>
<li><p>如下哪个是Java中有效的关键字(C)<br>A. name      B. hello     C. false         D. good</p>
</li>
<li><p>下面的代码段执行之后count的值是什么(   D   )</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">    count += i;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(count);</span><br></pre></td></tr></table></figure>
<p>A. 5      B. 1            C. 15        D. 16</p>
</li>
<li><p>定义一个类，必须使用的关键字是( B)<br>A. public        B. class     C. interface     D. static</p>
</li>
<li><p>定义一个接口必须使用的关键字是（   C   ）<br>A. public        B. class     C. interface     D. static</p>
</li>
<li><p>如果容器组件p的布局是BorderLayout，则在p的下边中添加一个按钮b，应该使用的语句是（ C ）<br> A. p.add(b);                 B. p.add(b,”North”);<br> C. p.add(b,”South”);         D. b.add(p,”North”);</p>
</li>
<li><p>声明并创建一个按钮对象b，应该使用的语句是（  A   ）<br>A. Button b&#x3D;new Button();        B. button b&#x3D;new button();<br>C. Button b&#x3D;new b();         D. b.setLabel(“确定”);</p>
</li>
<li><p>Frame对象默认的布局管理器是（  B ）<br>A. FlowLayout                B. BorderLayout<br>C. CardLayout                D. null</p>
</li>
<li><p>下列哪一个import命令可以使我们在程序中创建输入&#x2F;输出流对象（C）<br>A. import java.sql.*;            B. import java.util.*;<br>C. import java.io.*;         D. import java.net.*;</p>
</li>
<li><p>下面哪一个import命令可以为我们提供编写网络应用程序的类（D）<br>A. import java.sql.*;            B. import java.util.*;<br>C. import java.io.*;         D. import java.net.*;</p>
</li>
<li><p>如果需要从文件中读取数据，则可以在程序中创建哪一个类的对象（A）<br>A. FileInputStream           B. FileOutputStream<br>C. DataOutputStream      D. FileWriter</p>
</li>
</ol>
<h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><ol>
<li>如果将类MyClass声明为public，它的文件名称必须是 MyClass.java  才能正常编译。</li>
<li>Java程序中的单行注释符是（ &#x2F;&#x2F; ），多行注释符是（ <code>/**/</code> ）。</li>
<li>Java中布尔类型的常量有两种，它们是（ True ）和（False  ）。</li>
<li>Java中用于定义小数的关键字有两个：（  float） 和 （ double），后者精度高于前者。</li>
<li>Java中用于两个数相等比较的运算符是：（  &#x3D;&#x3D; ），用于不相等比较的运算符是（ !&#x3D;  ）。</li>
<li>在Java中定义一个字符串类型的变量str的语句是：（  String str    ） ，定义一个具有10个元素的整型数组a的语句是：（ int[] a &#x3D; new int[10];    ） 。</li>
<li>导入mypackage包中的所类的命令是（  import mypackage.*;    ）。</li>
<li>当声明一个数组int arr[] &#x3D; new int[5]; 时，这代表这个数组所保存的变量类型是（整型   ），数组名是（ arr ），数组的大小为（ 5 ），数组元素下标的使用范围是（0-4  ）。</li>
<li>假设x&#x3D;13，y&#x3D;4，则表达式x%y !&#x3D; 0的值是（False  ），其数据类型是（ boolean  ）。</li>
<li>异常处理是由（ try ）. （  catch ）和finally块三个关键所组成的程序块。</li>
<li>以下程序段的输出结果是（  三角形 ）<br>int x &#x3D; 5, y &#x3D; 6, z &#x3D; 4;<br>if (x + y &gt; z &amp;&amp; x + z &gt; y &amp;&amp; z + y &gt; x)<br>System.out.println(“三角形”);<br>else<br>System.out.println(“不是三角形”);</li>
<li>下面程序段的执行结果是（ 6 5 4 3 2   ）<br>int a[] &#x3D; { 2, 3, 4, 5, 6 };<br>for (int i &#x3D; a.length - 1; i &gt;&#x3D; 0; i–)<br>System.out.print(a[i] + “ “);</li>
</ol>
<h2 id="程序阅读题-1"><a href="#程序阅读题-1" class="headerlink" title="程序阅读题"></a>程序阅读题</h2><ol>
<li>以下程序的输出结果为__ Peter is 17 years old! 。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   String name;</span><br><span class="line">   <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Person</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Peter&quot;</span>, <span class="number">17</span>);</span><br><span class="line">      System.out.println(c.name + <span class="string">&quot; is &quot;</span> + c.age + <span class="string">&quot; years old!&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>以下程序的输出结果为_ 课程号:101 课程名:ASP 学分:3    。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Course</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cNumber;</span><br><span class="line">    <span class="keyword">private</span> String cName;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cUnit;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Course</span><span class="params">(String number, String name, <span class="type">int</span> unit)</span> &#123;</span><br><span class="line">        cNumber = number;</span><br><span class="line">        cName = name;</span><br><span class="line">        cUnit = unit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printCourseInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;课程号:&quot;</span> + cNumber + <span class="string">&quot; 课程名:&quot;</span> + cName + <span class="string">&quot; 学分:&quot;</span> + cUnit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CourseTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Course c;</span><br><span class="line">        c = <span class="keyword">new</span> <span class="title class_">Course</span>(<span class="string">&quot;101&quot;</span>, <span class="string">&quot;ASP&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        c.printCourseInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>以下程序的输出结果为__  汤姆猫体重：20.0斤  。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tom</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWeight</span><span class="params">(<span class="type">float</span> weight)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;体重：&quot;</span> + weight + <span class="string">&quot;斤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Tom.name = <span class="string">&quot;汤姆猫&quot;</span>;</span><br><span class="line">        <span class="type">Tom</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tom</span>();</span><br><span class="line">        cat.setWeight(<span class="number">20</span>);</span><br><span class="line">        cat.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>以下程序的输出结果 ： 姓名:Tom 年龄:15 家庭住址:金水区 电话:66123456 学校：九中  。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    String name, address, tel;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Father</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;姓名:&quot;</span> + name);</span><br><span class="line">        System.out.print(<span class="string">&quot; 年龄:&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outOther</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot; 家庭住址:&quot;</span> + address);</span><br><span class="line">        System.out.print(<span class="string">&quot; 电话:&quot;</span> + tel);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">    String school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Son</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.out();</span><br><span class="line">        <span class="built_in">super</span>.outOther();</span><br><span class="line">        System.out.println(<span class="string">&quot; 学校：&quot;</span> + school);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Son</span> <span class="variable">son</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;Tom&quot;</span>, <span class="number">15</span>);</span><br><span class="line">        son.address = <span class="string">&quot;金水区&quot;</span>;</span><br><span class="line">        son.school = <span class="string">&quot;九中&quot;</span>;</span><br><span class="line">        son.tel = <span class="string">&quot;66123456&quot;</span>;</span><br><span class="line">        son.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>下列程序的运行结果是__ 1 2 3 4 5  。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="type">int</span> a[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">out</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; a.length; j++)</span><br><span class="line">            System.out.print(a[j] + <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">my</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        my.out();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><ol>
<li><p>简述Java中异常处理的机制？<br>答：首先Java的异常是面向对象的。一个Java的Exception是一个描述异常情况的对象.当出现异常情况时，一个Exception对象就产生了,并放到异常的成员函数里。<br>Java的异常处理是通过5个关键词来实现的：try,catch,throw,throws和finally。<br>1.异常处理：在Java语言的错误处理结构由try，catch，finally三个块组成。其中try块存放将可能发生异常的Java语言，并管理相关的异常指针；catch块紧跟在try块后面，用来激发被捕获的异常；finally块包含清除程序没有释放的资源，句柄等。不管try块中的代码如何退出，都将执行 finally块。<br>2.抛出异常：Java语言可以不在方法中直接捕获，而用throw语句将异常抛给上层的调用者。Throw语句就是来明确地抛出一个异常；首先你必需得到一个Throwable的实例句柄，通过参数传到catch中，或者采用new操作符来创建一个。</p>
</li>
<li><p>什么是继承？<br>答：通过必要的说明能够实现某个类无需重新定义就拥有另一个类的某些属性和方法，并把这种关系称为继承，先定义的类称为父类，后定义的类称为子类，并且允许多层的继承关系。</p>
</li>
<li><p>请简述重载和重写的区别？<br>答：方法的重写Overriding和重载Overloading是Java多态性的不同表现。<br>重写Overriding是父类与子类之间多态性的一种表现，重载Overloading是一个类中多态性的一种表现。<br>如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。<br>如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。Overloaded的方法是可以改变返回值的类型。</p>
</li>
</ol>
<h2 id="程序设计题"><a href="#程序设计题" class="headerlink" title="程序设计题"></a>程序设计题</h2><p><strong>第一个程序：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="type">double</span> width;</span><br><span class="line">    <span class="type">double</span> height;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculatePerimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (width + height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> <span class="title function_">calculateArea</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width * height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">myRectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        myRectangle.width = <span class="number">5</span>;</span><br><span class="line">        myRectangle.height = <span class="number">7</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">perimeter</span> <span class="operator">=</span> myRectangle.calculatePerimeter();</span><br><span class="line">        <span class="type">double</span> <span class="variable">area</span> <span class="operator">=</span> myRectangle.calculateArea();</span><br><span class="line">        System.out.println(<span class="string">&quot;矩形的周长为：&quot;</span> + perimeter);</span><br><span class="line">        System.out.println(<span class="string">&quot;矩形的面积为：&quot;</span> + area);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第二个程序：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird is flying.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Fish is swimming.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">myBird</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        <span class="type">Fish</span> <span class="variable">myFish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fish</span>();</span><br><span class="line"></span><br><span class="line">        myBird.run(); <span class="comment">// 输出 &quot;Bird is flying.&quot;</span></span><br><span class="line">        myFish.run(); <span class="comment">// 输出 &quot;Fish is swimming.&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>第三个程序：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Menu;</span><br><span class="line"><span class="keyword">import</span> java.awt.MenuBar;</span><br><span class="line"><span class="keyword">import</span> java.awt.MenuItem;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowAdapter;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFrame</span> <span class="keyword">extends</span> <span class="title class_">Frame</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">6895463895656626294L</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Frame frmMain;</span><br><span class="line">    MenuBar mb;</span><br><span class="line">    Menu mnuFile;</span><br><span class="line">    Menu mnuEdit;</span><br><span class="line">    MenuItem miOpen;</span><br><span class="line">    MenuItem miSave;</span><br><span class="line">    MenuItem miClose;</span><br><span class="line">    MenuItem miCopy;</span><br><span class="line">    MenuItem miPaste;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        frmMain = <span class="keyword">new</span> <span class="title class_">Frame</span>(<span class="string">&quot;主窗体&quot;</span>);</span><br><span class="line">        mb = <span class="keyword">new</span> <span class="title class_">MenuBar</span>();</span><br><span class="line">        mnuFile = <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;文件&quot;</span>);</span><br><span class="line">        mnuEdit = <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;编辑&quot;</span>);</span><br><span class="line">        miOpen = <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;打开&quot;</span>);</span><br><span class="line">        miSave = <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;保存&quot;</span>);</span><br><span class="line">        miClose = <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;关闭&quot;</span>);</span><br><span class="line">        miCopy = <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;复制&quot;</span>);</span><br><span class="line">        miPaste = <span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;粘贴&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        frmMain.setSize(<span class="number">800</span>, <span class="number">600</span>);</span><br><span class="line">        frmMain.setLocation(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        frmMain.setBackground(Color.white);</span><br><span class="line">        frmMain.setVisible(<span class="literal">true</span>);</span><br><span class="line">        frmMain.setLayout(<span class="literal">null</span>);</span><br><span class="line">        </span><br><span class="line">        frmMain.addWindowListener(<span class="keyword">new</span> <span class="title class_">WindowHandler</span>());</span><br><span class="line">        </span><br><span class="line">        frmMain.setMenuBar(mb);</span><br><span class="line">        mb.add(mnuFile);</span><br><span class="line">        mb.add(mnuEdit);</span><br><span class="line">        mnuFile.add(miOpen);</span><br><span class="line">        mnuFile.add(miSave);</span><br><span class="line">        mnuFile.add(miClose);</span><br><span class="line">        mnuEdit.add(miCopy);</span><br><span class="line">        mnuEdit.add(miPaste);</span><br><span class="line">        </span><br><span class="line">        miClose.setActionCommand(<span class="string">&quot;miClose_Clicked&quot;</span>);</span><br><span class="line">        miClose.addActionListener(<span class="keyword">new</span> <span class="title class_">MenuHandler</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">WindowHandler</span> <span class="keyword">extends</span> <span class="title class_">WindowAdapter</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">windowClosing</span><span class="params">(WindowEvent e)</span> &#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">MenuHandler</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.getActionCommand() == <span class="string">&quot;miClose_Clicked&quot;</span>) &#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMyFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyFrame</span> <span class="variable">guiWindow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyFrame</span>();</span><br><span class="line">        guiWindow.showFrame();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="《JAVA语言程序设计》期末考试练习四"><a href="#《JAVA语言程序设计》期末考试练习四" class="headerlink" title="《JAVA语言程序设计》期末考试练习四"></a>《JAVA语言程序设计》期末考试练习四</h1><h2 id="单选题"><a href="#单选题" class="headerlink" title="单选题"></a>单选题</h2><ol>
<li><p>下列程序段执行后的结果是（A）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcdefg&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;s.length(); i+=<span class="number">2</span>)&#123;</span><br><span class="line">    System.out.print(s.charAt(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> A) aceg   B) ACEG    C) abcdefg    D) abcd</p>
</li>
<li><p>有整型数组：int[]  x&#x3D;{12,35,8,7,2};,则调用方法Arrays.sort(x)后，数组x中的元素值依次是（A）。<br> A) 2   7   8   12   35              B) 12  35  8    7    2<br> C) 35  12  8    7    2              D) 8   7   12   35   2</p>
</li>
<li><p>下面的程序段创建了BufferedReader类的对象in，以便读取本机c盘my文件夹下的文件1.txt。File构造函数中正确的路径和文件名的表示是（C）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(填代码处);</span><br><span class="line">file =<span class="keyword">new</span> <span class="title class_">FileReader</span>(f);</span><br><span class="line">in=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(file);</span><br></pre></td></tr></table></figure>
<p> A) “.&#x2F;1.txt”    B) “..&#x2F;my&#x2F;1.txt”    C) “c:\ \my\ \1.txt”        D) “c:\ my\1.txt”           </p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是（A）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String  s1=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">String  s2=<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>); </span><br><span class="line"><span class="type">boolean</span> b1=s1.equals(s2);</span><br><span class="line"><span class="type">boolean</span> b2=(s1==s2);            </span><br><span class="line">System.out.print(b1+<span class="string">&quot;   &quot;</span>+b2);           </span><br></pre></td></tr></table></figure>
<p> A)true  false        B) false  true      C) true  true    D)false  false                             </p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是（B）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable hashtable=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;12345&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;y&quot;</span>,<span class="string">&quot;67890&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;abcde&quot;</span>); </span><br><span class="line">System.out.println(hashtable.get(<span class="string">&quot;a&quot;</span>));       </span><br></pre></td></tr></table></figure>
<p> A) a   B) abcde    C) 12345   D) 67890                                                                                    </p>
</li>
<li><p>下面语句的功能是（A）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span>  <span class="variable">raf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;1.txt&quot;</span>,<span class="string">&quot;rw&quot;</span> ); </span><br></pre></td></tr></table></figure>
<p> A)打开当前目录下的文件1.txt，既可以向文件写数据，也可以从文件读数据。<br> B)打开当前目录下的文件1.txt，但只能向文件写入数据，不能从文件读取数据。<br> C)打开当前目录下的文件1.txt，但不能向文件写入数据，只能从文件读取数据。<br> D)以上说法都不对。           </p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是（B）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String   s=<span class="string">&quot;12345#aaa#bbb#67890&quot;</span>;</span><br><span class="line"><span class="type">int</span>     n=s.indexOf(<span class="string">&quot;#&quot;</span>);</span><br><span class="line"><span class="type">int</span>     k=s.indexOf(<span class="string">&quot;#&quot;</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span>     m=s.indexOf(<span class="string">&quot;#&quot;</span>,k+<span class="number">1</span>);</span><br><span class="line">String  s2=s.substring(m+<span class="number">1</span>);</span><br><span class="line">System.out.println(s2); </span><br></pre></td></tr></table></figure>
<p> A) 123456     B) 67890     C) aaa      D) bbb                                                  </p>
</li>
<li><p>下面程序段执行后b的值是（B）。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">integ</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">9</span>);</span><br><span class="line"><span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> integ  <span class="keyword">instanceof</span>  Object; </span><br></pre></td></tr></table></figure>
<p> A) 9     B) true     C) 1     D) false</p>
</li>
<li><p>应用程序Test.java的源程序如下，在命令行键入：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span>  k1=args.length;</span><br><span class="line">        <span class="type">int</span>  k2=args[<span class="number">1</span>].length();         </span><br><span class="line">        System.out.print(k1+<span class="string">&quot;    &quot;</span>+k2); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p> 回车后输出的结果是（A）。<br> A) 3  2       B)1  2     C) 1  3    D) 3  3                                                 </p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是（B）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>  b[][]=&#123;&#123;<span class="number">1</span>&#125;, &#123;<span class="number">2</span>,<span class="number">2</span>&#125;, &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;b.length;i++) &#123;            </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;b[i].length;j++) &#123;</span><br><span class="line">        sum+=b[i][j];</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br></pre></td></tr></table></figure>
<p>A) 32     B) 11     C) 2     D) 3                                                                                                      </p>
</li>
<li><p>应用程序的main方法中有以下语句，则执行后输出的结果是（D）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[]  x=&#123;<span class="number">125</span>,<span class="number">21</span>,<span class="number">5</span>,<span class="number">168</span>,<span class="number">98</span>&#125;;</span><br><span class="line"><span class="type">int</span>  max=x[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;x.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x[i]&gt; max)</span><br><span class="line">        max =x[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(max);</span><br></pre></td></tr></table></figure>
<p>A) 125     B) 5     C) 98        D) 168                                                 </p>
</li>
<li><p>程序Test.java编译运行后输出的结果是（A）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    String s1=<span class="string">&quot;java&quot;</span>;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;                  </span><br><span class="line">        <span class="type">int</span> z=<span class="number">2</span>;              </span><br><span class="line">        Test t=<span class="keyword">new</span> <span class="title class_">Test</span>();              </span><br><span class="line">        System.out.println(t.s1+z); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>
<p>A) java2     B) 2     C) 没有输出结果         D) java                                    </p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是（A）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1=<span class="string">&quot;0.5&quot;</span>, s2=<span class="string">&quot;12&quot;</span>; </span><br><span class="line"><span class="type">double</span> x=Double.parseDouble(s1);</span><br><span class="line"><span class="type">int</span>    y=Integer.parseInt(s2);</span><br><span class="line">System.out.println(x+y);</span><br></pre></td></tr></table></figure>
<p>A) 12.5         B) 120.5        C) 12           D) “12.5”                                                    </p>
</li>
<li><p>下面的程序创建了一个文件输出流对象，用来向文件test.txt中输出数据，假设程序当前目录下不存在文件test.txt，编译下面的程序Test.java后，将该程序运行3次，则文件test.txt 的内容是（D）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">            <span class="type">byte</span> b[]=s.getBytes();</span><br><span class="line">            FileOutputStream file=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            file.write(b);            </span><br><span class="line">            file.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A) ABCABC   B) ABCDE     C) Test    D) ABCDE ABCDE ABCDE</p>
</li>
</ol>
<h2 id="多选题"><a href="#多选题" class="headerlink" title="多选题"></a>多选题</h2><ol>
<li><p>下面main()方法的定义哪些是正确的(AC)？</p>
<ul>
<li>A) <code>public static void main(String args[]) &#123;&#125;</code></li>
<li>B) <code>public static void main(String[]) &#123;&#125;</code></li>
<li>C) <code>public static void main(String[] args) &#123;&#125;</code></li>
<li>D) <code>public static void main(String [] x) &#123;&#125;</code></li>
</ul>
</li>
<li><p>线程对象的生命周期中，通常经历下面哪些状态（ABCD）？</p>
<ul>
<li>A) 新建      </li>
<li>B) 运行      </li>
<li>C) 就绪      </li>
<li>D) 死亡</li>
</ul>
</li>
<li><p>下面说法正确的是(ABC)。</p>
<ul>
<li>A) <code>final</code> 可修饰类、属性(变量)、方法。              </li>
<li>B) <code>abstract</code> 可修饰类、方法。</li>
<li>C) 抽象方法只有方法头，没有方法体。      </li>
<li>D) 关键字 <code>final</code> 和 <code>abstract</code> 不能同时使用。</li>
</ul>
</li>
<li><p>下面关于 Java 中输入&#x2F;输出流的说法正确的是(ABCD)。</p>
<ul>
<li>A) <code>FileInputStream</code> 与 <code>FileOutputStream</code> 类用于读写字节流。       </li>
<li>B) <code>Reader</code> 与 <code>Writer</code> 类用来读写字符流。</li>
<li>C) <code>RandomAccessFile</code> 既可以用来读文件，也可以用来写文件。    </li>
<li>D) <code>File</code> 类用来处理与文件相关的操作。</li>
</ul>
</li>
<li><p>下面说法正确的是(AC)。</p>
<ul>
<li>A) 如果某公共接口被声明在一个源文件中，则接口必须与源文件具有相同名字。</li>
<li>B) 如果源文件包含 <code>import</code> 语句，则该语句必须是除空行和注释行外的第一个语句行。</li>
<li>C) 如果某源文件包含 <code>package</code> 语句，则该语句必须是第一个非空、非注释行。</li>
<li>D) 接口中的方法必定是抽象方法，但可以不用关键字 <code>abstract</code> 修饰。</li>
</ul>
</li>
<li><p>下面关于 Java 中异常处理 <code>try</code> 块的说法正确的是(ACD)？</p>
<ul>
<li>A) <code>try</code> 块后通常应有一个 <code>catch</code> 块，用来处理 <code>try</code> 块中抛出的异常。   </li>
<li>B) <code>catch</code> 块后必须有 <code>finally</code> 块。</li>
<li>C) 可能抛出异常的方法调用应放在 <code>try</code> 块中。                      </li>
<li>D) 对抛出的异常的处理必须放在 <code>try</code> 块中。</li>
</ul>
</li>
<li><p>下面关于进程和线程的说法正确的是(ABCD)。</p>
<ul>
<li>A) 进程是程序的一次动态执行过程。一个进程在其执行过程中，可以产生多个线程——多线程，形成多条执行线索。</li>
<li>B) 线程是比进程更小的执行单位，是在一个进程中独立的控制流，即程序内部的控制流。线程本身不能自动运行，栖身于某个进程之中，由进程启动执行。</li>
<li>C) Java 多线程的运行与平台相关。</li>
<li>D) 对于单处理器系统，多个线程分时间片获取 CPU 或其他系统资源来运行。对于多处理器系统，线程可以分配到多个处理器中，从而真正的并发执行多任务。</li>
</ul>
</li>
<li><p>关于 <code>BufferedReader</code> 类的 <code>readLine()</code> 方法，以下说法正确的是（ACD）。</p>
<ul>
<li>A) 方法 <code>readLine()</code> 每次读取一行数据。                  </li>
<li>B) 方法 <code>readLine()</code> 每次读取一个字节。</li>
<li>C) 该方法可能抛出 <code>IOException</code> 异常，调用该方法时通常应将它放到 <code>try</code> 块中，并通过 <code>catch</code> 块处理异常。</li>
<li>D) 如果读到流的末尾，该方法返回的结果为 <code>null</code>。</li>
</ul>
</li>
</ol>
<h2 id="程序阅读题-2"><a href="#程序阅读题-2" class="headerlink" title="程序阅读题"></a>程序阅读题</h2><p>已整理如下：</p>
<ol>
<li>阅读下面的程序，回答问题：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">T</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">T</span> <span class="params">( )</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;GridLayout&quot;</span>);</span><br><span class="line">        Container  con=<span class="built_in">this</span>.getContentPane();</span><br><span class="line">        con.setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;a&quot;</span>));  </span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;b&quot;</span>));</span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;c&quot;</span>));  </span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;d&quot;</span>));</span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;e&quot;</span>));</span><br><span class="line">        con.add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;f&quot;</span>));</span><br><span class="line">        setSize(<span class="number">200</span>, <span class="number">80</span>);</span><br><span class="line">        setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">T</span>();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>画图表示程序运行后的图形界面。</li>
</ul>
<p><img src="/post/Java%E5%A4%8D%E4%B9%A0%E9%A2%98/1.png"></p>
<ul>
<li>如果程序通过实现某个接口处理按钮的动作事件，则该接口名为何？接口中的方法头声明如何？</li>
</ul>
<p>答案：</p>
<ul>
<li>接口名：ActionListener</li>
<li>接口中的方法：<code>public void actionPerformed(ActionEvent e)</code></li>
</ul>
<ol start="2">
<li>阅读下面的程序，并回答问题：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        BufferedReader buf=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));        </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            String  str=buf.readLine();</span><br><span class="line">            <span class="keyword">if</span>(str.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="type">int</span> x=Integer.parseInt(str);</span><br><span class="line">            System.out.println(x*x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li><p>编译运行上面的程序：</p>
</li>
<li><p>从键盘输入5，回车后输出的结果如何？</p>
</li>
</ul>
<p>回答：输出25</p>
<ul>
<li>从键盘输入quit，回车后程序执行情况如何？</li>
</ul>
<p>回答：退出程序</p>
<h1 id="《JAVA程序设计》期末考试练习五"><a href="#《JAVA程序设计》期末考试练习五" class="headerlink" title="《JAVA程序设计》期末考试练习五"></a>《JAVA程序设计》期末考试练习五</h1><h2 id="单选题-1"><a href="#单选题-1" class="headerlink" title="单选题"></a>单选题</h2><ol>
<li><p>当某一线程正处于休眠状态，而另一个线程用 Thread 类中的 interrupt() 方法中断它时，抛出的异常类型是（ C ）。<br>A) IOException     B) RuntimeException<br>C) InterruptedException    D) ClassNotFoundException</p>
</li>
<li><p>下面的程序段的功能是( A )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">File file1=<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\xxx\\yyy\\zzz&quot;</span>);</span><br><span class="line">file1.mkdirs();</span><br></pre></td></tr></table></figure>
<p>A)在当前目录下生成子目录：\xxx\yyy\zzz    B)生成目录： e:\xxx\yyy\zzz<br>C)在当前目录下生成文件xxx.yyy.zzz        D)以上说法都不对</p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是 ( B  )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;xxxxxxxxxxxxxxx#123#456#zzzzz&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;#&quot;</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> s.indexOf(<span class="string">&quot;#&quot;</span>, n+<span class="number">1</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> s.substring(n+<span class="number">1</span>, k);</span><br><span class="line">System.out.println(s2);</span><br></pre></td></tr></table></figure>
<p>A) 123456     B) 123     C) xxxxxxxxxxxxxxx      D) zzzzz</p>
</li>
<li><p>关于下面的程序Test.java说法正确的是( D   )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    String x=<span class="string">&quot;1&quot;</span>;       </span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;                  </span><br><span class="line">        <span class="type">int</span> z=<span class="number">2</span>;              </span><br><span class="line">        System.out.println(x+y+z); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A)3           B)102        C) 12          D)程序有编译错误</p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是 ( A  )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> b[][]=&#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">2</span>,<span class="number">2</span>&#125;, &#123;<span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;b.length; i++) &#123;            </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>; j&lt;b[i].length; j++) &#123;</span><br><span class="line">        sum+=b[i][j];</span><br><span class="line">    &#125;            </span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;sum=&quot;</span>+sum);</span><br></pre></td></tr></table></figure>
<p>A) 10     B) 6     C) 9     D) 13</p>
</li>
<li><p>应用程序的main方法中有以下语句，则执行后输出的结果是 ( B  )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] x = &#123;<span class="number">125</span>,<span class="number">21</span>,<span class="number">5</span>,<span class="number">168</span>,<span class="number">98</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> x[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i&lt;x.length; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x[i] &lt; min)</span><br><span class="line">        min = x[i];</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(min);</span><br></pre></td></tr></table></figure>
<p>A) 125     B) 5     C) 98        D) 168</p>
</li>
<li><p>应用程序的main方法中有以下语句，则输出的结果是 ( D  )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hashtable hashtable=<span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">hashtable.put(<span class="string">&quot;100&quot;</span>,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;200&quot;</span>,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">hashtable.put(<span class="string">&quot;300&quot;</span>,<span class="string">&quot;ccc&quot;</span>); </span><br><span class="line">System.out.println(hashtable.get(<span class="string">&quot;300&quot;</span>).toString()</span><br><span class="line">                    + hashtable.get(<span class="string">&quot;200&quot;</span>).toString()</span><br><span class="line">                    + hashtable.get(<span class="string">&quot;100&quot;</span>).toString()); </span><br></pre></td></tr></table></figure>
<p>A) aaa   B) bbb    C) ccc   D) cccbbbaaa</p>
</li>
<li><p>以下关于 java 异常说法不正确的是（ C  ）。<br>A) Throwable 类是 Java 语言中 Error 类和 Exception 类的父类。<br>B) 当异常对象是 Exception 类（或其子类）的实例时，能通过 Java 虚拟机或者 throw 语句抛出该异常对象，并能通过 try…catch…finally 处理。<br>C) 如果只用一个 catch 块捕捉多个异常对象，则 catch 子句中的参数类型应是所有异常对象的父类。<br>D) 以上说法都不对。</p>
</li>
<li><p>下面的程序创建了一个文件输出流对象，用来向文件 test.txt 中输出数据，假设程序当前目录下存在文件 test.txt，编译下面的程序 Test.java 后，将该程序运行 3 次，则文件 test.txt 的内容是( D )。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s=<span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">            <span class="type">byte</span> b[]=s.getBytes();</span><br><span class="line">            FileOutputStream file=<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            file.write(b);            </span><br><span class="line">            file.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A) ABCABC   B) ABCDE     C) Test    D) ABCDE ABCDE ABCDE</p>
</li>
<li><p>下面说法不正确的是( D )？<br>A) 列表(List). 集合(Set) 和映射(Map) 都是 java.util 包中的接口。<br>B) List 接口是可以包含重复元素的有序集合。<br>C) Set 接口是不包含重复元素的集合。<br>D) Map 接口将键映射到值，键可以重复，但每个键最多只能映射一个值。</p>
</li>
</ol>
<h2 id="多选题-1"><a href="#多选题-1" class="headerlink" title="多选题"></a>多选题</h2><ol>
<li><p>下面哪些关键字能用来控制对类成员的访问( ABC )？<br>A) public   B) protected    C) private     D) default</p>
</li>
<li><p>下面关于Java中异常处理try块的说法正确的是(  AC  )?<br>A) try 块后通常应有一个 catch 块，用来处理 try 块中抛出的异常。<br>B) catch 块后必须有 finally 块。<br>C) 可能抛出异常的方法调用应放在 try 块中。<br>D) 对抛出的异常的处理必须放在 try 块中</p>
</li>
<li><p>线程对象的生命周期中,通常经历下面哪些状态（  ABCD   ）。<br>A)新建      B)运行      C)就绪      D)死亡</p>
</li>
<li><p>定义如下的二维数组 b，下面的说法正确的是( CD )。<br><code>int b[][]=&#123;&#123;1, 2, 3&#125;, &#123;4, 5&#125;,&#123;6, 7, 8&#125;&#125;&#125;;</code><br>A) b.length 的值是3。     B) b[1].length 的值是3。<br>C) <code>b[1][1]</code> 的值是5。      D) 二维数组 b 的第一行有3个元素</p>
</li>
<li><p>类 B 是一个抽象类，类 C 是类 B 的非抽象子类，下列创建对象 x1 的语句中正确的是( BC  )。<br>A) B x1&#x3D; new B( );        B) B x1&#x3D; new C( );<br>C) C x1&#x3D;new C( );         D) C x1&#x3D; new B( );</p>
</li>
<li><p>下面关于进程. 线程的说法正确的是(  ABCD  )。<br>A) 进程是程序的一次动态执行过程。一个进程在其执行过程中，可以产生多个线程——多线程，形成多条执行线索。<br>B) 线程是比进程更小的执行单位，是在一个进程中独立的控制流，即程序内部的控制流。线程本身不能自动运行，栖身于某个进程之中，由进程启动执行。<br>C) Java 多线程的运行与平台相关。<br>D) 对于单处理器系统，多个线程分时间片获取 CPU 或其他系统资源来运行。对于多处理器系统，线程可以分配到多个处理器中，从而真正的并发执行多任务。</p>
</li>
<li><p>下面关于外部类和内部类成员的相互访问的规则中，正确的选项是( AD   )。<br>A) 内部类可以直接访问外部类的成员<br>B) 外部类可以直接访问内部类的成员<br>C) 外部类不能访问内部类的成员<br>D) 外部类可通过创建内部类的实例来访问内部类的成员</p>
</li>
</ol>
<h2 id="程序阅读题-3"><a href="#程序阅读题-3" class="headerlink" title="程序阅读题"></a>程序阅读题</h2><ol>
<li>阅读下面的程序代码,并回答问题。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line"><span class="type">boolean</span> b1= s1.equals(s2);  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">b2</span> <span class="operator">=</span> s1== s2;</span><br><span class="line">System.out.print(b1+<span class="string">&quot; &quot;</span>+b2);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>程序段执行后,在命令行的输出结果如何?</p>
</blockquote>
<p>true false</p>
<blockquote>
<p>解释输出(1)的结果的原因?</p>
</blockquote>
<p><code>boolean b1 = s1.equals(s2);</code> 这一行比较的是两个字符串对象的内容,即它们所包含的字符序列是否相同。</p>
<p><code>boolean b2 = s1 == s2;</code> 这一行比较的是两个字符串对象的引用,即它们在内存中的地址是否相同。</p>
<ol start="2">
<li>阅读下面的程序,并回答问题(问3分,问3分,共6分)。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    BufferedReader buf=<span class="keyword">new</span> <span class="title class_">BufferedReader</span>(</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> buf.readLine();  </span><br><span class="line">      <span class="keyword">if</span>(str.equals(<span class="string">&quot;quit&quot;</span>))</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">      <span class="type">int</span> x=Integer.parseInt(str);</span><br><span class="line">      System.out.println(x*x);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译运行上面的程序:</p>
<blockquote>
<p>从键盘输入10,回车后输出的结果如何?</p>
</blockquote>
<p>输出100</p>
<blockquote>
<p>从键盘输入exit,回车后程序能正确执行吗?为什么?</p>
</blockquote>
<p>不能正确执行。在执行 <code>Integer.parseInt(str)</code> 时,无法将字符串 “exit” 转换成整数。</p>
<ol start="3">
<li>写出下面的程序编译. 运行后的结果(6分)。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Tom&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">90</span>, <span class="number">88</span>);   </span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="number">66</span>, <span class="number">89</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Mary&quot;</span>, <span class="string">&#x27;f&#x27;</span>, <span class="number">76</span>, <span class="number">86</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;name\tsex\tchinese\tenglish&quot;</span>); </span><br><span class="line">    Student.print();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> String name;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">char</span> sex;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> chinese;</span><br><span class="line">  <span class="keyword">protected</span> <span class="type">int</span> english;</span><br><span class="line">  <span class="keyword">protected</span> Student next;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> Student list;</span><br><span class="line">  </span><br><span class="line">  Student (String name, <span class="type">char</span> sex, <span class="type">int</span> chinese, <span class="type">int</span> english) &#123;</span><br><span class="line">    <span class="built_in">this</span>.name=name;</span><br><span class="line">    <span class="built_in">this</span>.sex=sex;  </span><br><span class="line">    <span class="built_in">this</span>.chinese=chinese;</span><br><span class="line">    <span class="built_in">this</span>.english=english;</span><br><span class="line">    <span class="built_in">this</span>.next=list;</span><br><span class="line">    list=<span class="built_in">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">    Student friend=list;</span><br><span class="line">    <span class="keyword">if</span> (friend==<span class="literal">null</span>)</span><br><span class="line">      System.out.println(<span class="string">&quot;The list is empty.&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">do</span>&#123;</span><br><span class="line">        System.out.println(friend.toString());</span><br><span class="line">        friend=friend.next;</span><br><span class="line">      &#125;<span class="keyword">while</span>(friend!=<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(name+<span class="string">&quot;\t&quot;</span>+sex+<span class="string">&quot;\t&quot;</span>+chinese+<span class="string">&quot;\t&quot;</span>+english);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name    sex chinese english</span><br><span class="line">Mary    f   76      86</span><br><span class="line">Jack    m   66      89  </span><br><span class="line">Tom     m   90      88</span><br></pre></td></tr></table></figure>


<h1 id="《JAVA程序设计》期末考试练习六"><a href="#《JAVA程序设计》期末考试练习六" class="headerlink" title="《JAVA程序设计》期末考试练习六"></a>《JAVA程序设计》期末考试练习六</h1><h2 id="填空题-1"><a href="#填空题-1" class="headerlink" title="填空题"></a>填空题</h2><ol>
<li>定义类的保留字是(<code>class</code>)，定义接口的保留字是(<code>interface</code>)。</li>
<li>Socket通常也称为 (<code>套接字</code>)，用于描述(<code>网络通信</code>)  和 (<code>数据传输</code>)。 </li>
<li>线程的优先级在(<code>1</code>)至(<code>10</code>)之间，数值越大(<code>优先级越高</code>)。</li>
<li>构造方法是一种特殊的成员方法，构造方法名与(<code>类名</code>) 相同。</li>
<li>Java语言只允许单继承，指每个类只能有一个 (<code>直接父类</code>)。</li>
<li>Java源程序的扩展名是(<code>.java</code>)，经过编译后的程序的扩展名是(<code>.class</code>)。</li>
<li>在一个时间只能由一个线程访问的资源称为 (<code>临界资源</code>) 。访问临界资源的代码(<code>需要同步</code>)。</li>
<li>在多线程系统中，多个线程之间有 (<code>竟态</code>) 和 (<code>互斥</code>) 两种关系。</li>
</ol>
<h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol>
<li><p>关于选择结构下列哪个说法正确？ （B）<br>A．if语句和 else语句必须成对出现<br>B．if语句可以没有else语句对应<br>C．switch结构中每个case语句中必须用break语句<br>D．switch结构中必须有default语句</p>
</li>
<li><p>while循环和 do…while循环的区别是： （D）<br>A．没有区别，这两个结构任何情况下效果一样<br>B．while循环比 do…while循环执行效率高<br>C．while循环是先循环后判断，所以循环体至少被执行一次<br>D．do…while循环是先循环后判断，所以循环体至少被执行一次</p>
</li>
<li><p>关于 for循环和 while循环的说法哪个正确？ （B）<br>A．while循环先判断后执行，for循环先执行后判断。<br>B．while循环判断条件一般是程序结果，for循环的判断条件一般是非程序结果<br>C．两种循环任何时候都不可以替换<br>D．两种循环结构中都必须有循环体，循环体不能为空</p>
</li>
<li><p>下列修饰符中与访问控制无关的是 （D）<br>A．private　　　<br>B．public<br>C．protected<br>D．final</p>
</li>
<li><p>void的含义： （A）<br>A．方法没有返回值　　　<br>B． 方法体为空<br>C．没有意义　　　　<br>D.　定义方法时必须使用</p>
</li>
<li><p>return语句： （C）<br>A．只能让方法返回数值　　　　<br>B．方法都必须含有<br>C．方法中可以有多句return 　　<br>D．不能用来返回对象</p>
</li>
<li><p>关于对象成员占用内存的说法哪个正确？ （B）<br>A．同一个类的对象共用同一段内存<br>B. 同一个类的对象使用不同的内存段，但静态成员共享相同的内存空间<br>C．对象的方法不占用内存<br>D．以上都不对</p>
</li>
<li><p>下列说法哪个正确？(C)<br>A．不需要定义类，就能创建对象<br>B．对象中必须有属性和方法<br>C．属性可以是简单变量，也可以是一个对象<br>D. 属性必须是简单变量</p>
</li>
<li><p>下列说法哪个正确？ （A）<br>A. 一个程序可以包含多个源文件<br>B. 一个源文件中只能有一个类<br>C. 一个源文件中可以有多个公共类<br>D. 一个源文件只能供一个程序使用</p>
</li>
<li><p>关于方法main（）的说法哪个正确？（A）<br>A．方法main（）只能放在公共类中<br>B.  main()的头定义可以根据情况任意更改<br>C．一个类中可以没有main()方法<br>D．所有对象的创建都必须放在main()方法中</p>
</li>
<li><p>构造函数何时被调用？ （A）<br>A. 创建对象时　　　　　<br>B. 类定义时<br>C. 使用对象的方法时　　<br>D. 使用对象的属性时</p>
</li>
<li><p>抽象方法： （C）<br>A. 可以有方法体<br>B. 可以出现在非抽象类中<br>C. 是没有方法体的方法<br>D. 抽象类中的方法都是抽象方法</p>
</li>
<li><p>关于继承的说法正确的是： （B）<br>A. 子类将继承父类所有的属性和方法。<br>B. 子类将继承父类的非私有属性和方法。<br>C. 子类只继承父类public方法和属性<br>D. 子类只继承父类的方法，而不继承属性</p>
</li>
<li><p>关于构造函数的说法哪个正确？ （C）<br>A. 一个类只能有一个构造函数<br>B. 一个类可以有多个不同名的构造函数<br>C. 构造函数与类同名<br>D. 构造函数必须自己定义，不能使用父类的构造函数</p>
</li>
<li><p>覆盖与重载的关系是 （A）<br>A. 覆盖只有发生在父类与子类之间，而重载可以发生在同一个类中<br>B．覆盖方法可以不同名，而重载方法必须同名<br>C．final修饰的方法可以被覆盖，但不能被重载<br>D．覆盖与重载是同一回事</p>
</li>
<li><p>关于接口哪个正确？ （A）<br>A. 实现一个接口必须实现接口的所有方法<br>B．一个类只能实现一个接口<br>C．接口间不能有继承关系<br>D．接口和抽象类是同一回事</p>
</li>
<li><p>异常包含下列哪些内容？ （D）<br>A．程序执行过程中遇到的事先没有预料到的情况<br>B．程序中的语法错误　　<br>C．程序的编译错误<br>D．以上都是</p>
</li>
<li><p>对于已经被定义过可能抛出异常的语句，在编程时： （A）<br>A. 必须使用try／catch语句处理异常，或用throws将其抛出<br>B．如果程序错误，必须使用 try／catch语句处理异常<br>C．可以置之不理<br>D．只能使用try／catch语句处理</p>
</li>
<li><p>字符流与字节流的区别在于 （D）<br>A．前者带有缓冲，后者没有<br>B．前者是块读写，后者是字节读写<br>C. 二者没有区别，可以互换使用<br>D. 每次读写的字节数不同</p>
</li>
<li><p>下列流中哪个不属于字节流 （D）<br>A．FileInputStream<br>B．BufferedInputStream<br>C. FilterInputStream<br>D. InputStreamReader</p>
</li>
</ol>
<h2 id="程序填空题"><a href="#程序填空题" class="headerlink" title="程序填空题"></a>程序填空题</h2><p>1. </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Sum</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;j is : &quot;</span> + j);</span><br><span class="line">        calculate(j);</span><br><span class="line">        System.out.println(<span class="string">&quot;At last, j is : &quot;</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">calculate</span><span class="params">(<span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">            j++;</span><br><span class="line">        System.out.println(<span class="string">&quot;j in calculate() is: &quot;</span> + j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果为：</p>
<p>j is : 10<br>j in calculate() is: 20<br>At last, j is : 10</p>
<ol start="2">
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SuperAbstract</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">a</span><span class="params">()</span> &#123;…&#125;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">c</span><span class="params">(<span class="type">int</span> i)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AsSuper</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SubAbstract</span> <span class="keyword">extends</span> <span class="title class_">SuperAbstract</span> <span class="keyword">implements</span> <span class="title class_">AsSuper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">b</span><span class="params">()</span> &#123;…&#125;</span><br><span class="line">    <span class="keyword">abstract</span> String <span class="title function_">f</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InheritAbstract</span> <span class="keyword">extends</span> <span class="title class_">SubAbstract</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">x</span><span class="params">()</span> &#123;…&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">c</span><span class="params">(<span class="type">int</span> i)</span> &#123;…&#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">f</span><span class="params">()</span> &#123;…&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">InheritAbstract</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InheritAbstract</span>();</span><br><span class="line">        instance.x();</span><br><span class="line">        instance.a();</span><br><span class="line">        instance.b();</span><br><span class="line">        instance.c(<span class="number">100</span>);</span><br><span class="line">        System.out.println(instance.f());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在以上这段程序中：</p>
</li>
<li><p>抽象类有：SuperAbstract和 SubAbstract。</p>
</li>
<li><p>非抽象类有： InheritAbstract。</p>
</li>
<li><p>接口有： AsSuper。</p>
</li>
<li><p>AsSuper中的x()方法是抽象方法，所以在InheritAbstract中必须对它进行重写。 </p>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leaf</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//此属性值用于检验</span></span><br><span class="line">    Leaf <span class="title function_">increment</span><span class="params">()</span> &#123; <span class="comment">//定义方法increment()，返回值是Leaf类的对象</span></span><br><span class="line">        i++;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>; <span class="comment">//将当前对象的地址作为返回值返回</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; i = &quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">Leaf</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leaf</span>(); <span class="comment">//创建Leaf类的对象x</span></span><br><span class="line">        x.increment().increment().increment().print();</span><br><span class="line">    &#125;<span class="comment">//多次调用方法increment()，返回的都是x的地址，i 值表示调用次数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一空：this<br>第二空：new Leaf()</p>
</li>
</ol>
<p>输出结果为：i&#x3D;3</p>
<ol start="4">
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FileStream源代码如下：</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileStream</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args [])</span> &#123; </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">File</span> <span class="variable">inFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file1.txt&quot;</span>);  <span class="comment">//指定源文件</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">outFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;file2.txt&quot;</span>); <span class="comment">//指定目标文件</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(inFile);</span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(outFile);</span><br><span class="line">            <span class="type">int</span> c; </span><br><span class="line">            <span class="comment">//逐字节从源文件中输入，再输出到fos流</span></span><br><span class="line">            <span class="keyword">while</span> ((c = fis.read ())!=-<span class="number">1</span>)</span><br><span class="line">                fos.write(c);</span><br><span class="line">            fis.close(); </span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;FileStreamsTest: &quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
第一空：new FileInputStream(inFile)<br>第二空：fos.write(c)</li>
</ol>
<h2 id="阅读程序，给出结果："><a href="#阅读程序，给出结果：" class="headerlink" title="阅读程序，给出结果："></a>阅读程序，给出结果：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AbstractClassDemo.java源代码如下：</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;     <span class="comment">//定义抽象类Shape和抽象方法display</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;        <span class="comment">//实现抽象类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Circle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;    <span class="comment">//实现抽象类的方法      </span></span><br><span class="line">        System.out.println(<span class="string">&quot;Rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">display</span><span class="params">()</span> &#123;    <span class="comment">//实现抽象类的方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Triangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractClassDemo</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">Circle</span>()).display();   <span class="comment">//定义无名对象来调用对应的display方法</span></span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">Rectangle</span>()).display();</span><br><span class="line">        (<span class="keyword">new</span> <span class="title class_">Triangle</span>()).display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果是：<br> Circle<br> Rectangle<br> Triangle</p>
<h1 id="《JAVA程序设计》期末考试练习七"><a href="#《JAVA程序设计》期末考试练习七" class="headerlink" title="《JAVA程序设计》期末考试练习七"></a>《JAVA程序设计》期末考试练习七</h1><h2 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题"></a>选择题</h2><ol>
<li><p>请说出下列代码的执行结果: (B)<br>String s &#x3D; “abcd”;<br>String s1 &#x3D; new String(s);<br>if (s &#x3D;&#x3D; s1) System.out.println(“the same”);<br>if (s.equals(s1)) System.out.println(“equals”)<br>结果: equals</p>
</li>
<li><p>下列有关 Java 中接口的说法哪个是正确的？ (B)<br>A. 接口中含有具体方法的实现代码<br>B. 若一个类要实现一个接口，则用到 “implements” 关键字<br>C. 若一个类要实现一个接口，则用到“ extends ”关键字<br>D. 接口不允许继承<br>正确答案: B</p>
</li>
<li><p>下列代码的执行结果是什么？ (B)<br>String s1 &#x3D; “aaa”;<br>String s2 &#x3D; s1.concat(“bbb”);<br>System.out.println(s2);<br>结果: The string “aaabbb”.</p>
</li>
<li><p>如果有一个对象 myListener ( 其中 myListener 对象实现了 ActionListener 接口 ),<br>下列哪条语句使得 myListener 对象能够接受处理来自于 smallButton 按钮对象的动作事件? (C)<br>A. smallButton.add(myListener);<br>B. smallButton.addListener(myListener);<br>C. smallButton.addActionListener(myListener);<br>D. smallButton.addItem(myListener);<br>正确答案: C</p>
</li>
</ol>
<h2 id="读程序题"><a href="#读程序题" class="headerlink" title="读程序题"></a>读程序题</h2><ol>
<li>读下列代码,说出这段程序的功能。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] argv)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>( <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">      String inputLine;</span><br><span class="line"></span><br><span class="line">      While ((inputLine = is.readLine ())!= <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(inputLine);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      is.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;IOException: &quot;</span> + e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段程序的功能是从控制台读取用户输入的文本,并将其逐行打印出来,直到遇到输入结束符。</p>
<ol start="2">
<li>读下列程序,写出正确的运行结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args )</span>&#123;</span><br><span class="line">    <span class="type">int</span> x=<span class="number">9</span>, y;</span><br><span class="line">    <span class="keyword">if</span> (x&gt;=<span class="number">0</span>)</span><br><span class="line">      <span class="keyword">if</span> (x&gt;<span class="number">0</span>)</span><br><span class="line">        y=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      y=-<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">    System.out.println(y);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:1</p>
<ol start="3">
<li>读程序,写出正确的运行结果。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">100</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">miner</span><span class="params">()</span>&#123;</span><br><span class="line">    a--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="type">Father</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Father</span>();</span><br><span class="line">    <span class="type">Son</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Son</span>();</span><br><span class="line">    System.out.println(y.a); </span><br><span class="line">    System.out.println( y.getA());</span><br><span class="line">    y.miner();</span><br><span class="line">    System.out.println(y.a);</span><br><span class="line">    System.out.println(y.getA());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_">Father</span> &#123;</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plus</span><span class="params">()</span>&#123;</span><br><span class="line">    a++; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getA</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:<br>0<br>100<br>0<br>99</p>
<h2 id="简答题-1"><a href="#简答题-1" class="headerlink" title="简答题"></a>简答题</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. Java语言的特点：</span><br><span class="line"></span><br><span class="line">- 简单性：Java风格类似于C++，但它摒弃了C++中容易引起程序错误的地方。</span><br><span class="line">- 面向对象：Java语言的设计是完全面向对象。</span><br><span class="line">- 分布式：Java具有分布式特性，可以通过远程方法调用(RMI)实现分布式应用程序。</span><br><span class="line">- 解释执行：Java源代码通过解释器逐行翻译成字节码执行。</span><br><span class="line">- 健壮性：Java提供自动垃圾回收机制，异常处理机制，进行严格的类型检查。</span><br><span class="line">- 平台无关性：Java可以在不同平台上运行，只需安装相应的Java虚拟机。</span><br><span class="line">- 安全性：Java提供安全性机制，防止恶意代码执行。</span><br><span class="line">- 多线程：Java支持多线程编程，允许多个任务同时执行。</span><br><span class="line">- 动态性：Java具有动态加载特性，可以在运行时加载类和接口。</span><br><span class="line"></span><br><span class="line">2. AWT事件模型描述：</span><br><span class="line"></span><br><span class="line">结合AWT事件模型并举例来说：</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">import java.awt.event.*;</span><br><span class="line"></span><br><span class="line">// 监听对象必须实现对应事件监听器的接口 </span><br><span class="line">class MyFirstFrame extends Frame implements ActionListener &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 明确事件监听器的接口形式</span><br><span class="line">public void actionPerformed(ActionEvent event) &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// MyFirstFrame 类必须实现接口 ActionListener 中的所有方法。</span><br><span class="line"></span><br><span class="line">// 注册监听对象.</span><br><span class="line">// 为了把 MyFirstFrame 对象注册为两个按钮的事件监听对象，</span><br><span class="line">// 必须在 MyFirstFrame 的构造函数中添加语句如下：</span><br><span class="line">cancelButton.addActionListener(this);</span><br><span class="line">okButton.addActionListener(this);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 Java 中，创建一个线程的两种方法：</li>
</ol>
<ul>
<li>定义类来实现 Runnable 接口：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 线程执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>继承 Thread 类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    TestThread(String name) &#123;</span><br><span class="line">        <span class="built_in">super</span>(name); </span><br><span class="line">        start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 线程执行的代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java实验："><a href="#Java实验：" class="headerlink" title="Java实验："></a>Java实验：</h1>]]></content>
      <categories>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>大三上</tag>
      </tags>
  </entry>
  <entry>
    <title>git基础</title>
    <url>/post/git.html</url>
    <content><![CDATA[<h1 id="Git各种BUG"><a href="#Git各种BUG" class="headerlink" title="Git各种BUG"></a>Git各种BUG</h1><p>标签（空格分隔）： Git</p>
<hr>
<h1 id="git-简单文件操作"><a href="#git-简单文件操作" class="headerlink" title="git 简单文件操作"></a>git 简单文件操作</h1><h2 id="第一步进入项目目录下进行git初始化（可以看到文件夹中生成了-git目录）"><a href="#第一步进入项目目录下进行git初始化（可以看到文件夹中生成了-git目录）" class="headerlink" title="第一步进入项目目录下进行git初始化（可以看到文件夹中生成了.git目录）"></a>第一步进入项目目录下进行git初始化（可以看到文件夹中生成了.git目录）</h2><blockquote>
<p>git init</p>
</blockquote>
<h2 id="第二步添加远程仓库"><a href="#第二步添加远程仓库" class="headerlink" title="第二步添加远程仓库"></a>第二步添加远程仓库</h2><blockquote>
<p>git remote add origin + 仓库地址</p>
</blockquote>
<h2 id="第三步添加提交的所有文件"><a href="#第三步添加提交的所有文件" class="headerlink" title="第三步添加提交的所有文件"></a>第三步添加提交的所有文件</h2><blockquote>
<p>git add .</p>
</blockquote>
<h2 id="第四步提交代码"><a href="#第四步提交代码" class="headerlink" title="第四步提交代码"></a>第四步提交代码</h2><blockquote>
<p>git commit -m ‘我是注释我要提交代码了’</p>
</blockquote>
<h2 id="第五步推送至仓库"><a href="#第五步推送至仓库" class="headerlink" title="第五步推送至仓库"></a>第五步推送至仓库</h2><blockquote>
<p>git push -u origin master -f </p>
</blockquote>
<h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">warning: adding embedded git repository: git/…</span><br><span class="line"></span><br><span class="line">当前目录下面有.git文件夹------默认是隐藏的，直接将.git文件夹掉，再重新git add .</span><br><span class="line"></span><br><span class="line">则不再有报警提示，按正常的上传步骤上传代码即可。</span><br><span class="line"></span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git基础</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub操作</title>
    <url>/post/github1.html</url>
    <content><![CDATA[<blockquote>
<p>下面是一个例子</p>
</blockquote>
<h2 id="找到开源项目"><a href="#找到开源项目" class="headerlink" title="找到开源项目"></a>找到开源项目</h2><blockquote>
<p>打开下面 <a href="https://github.com/cargo-youth/ToolDiy.git">https://github.com/cargo-youth/ToolDiy.git</a></p>
</blockquote>
<p>fork该项目</p>
<h2 id="从你的-Github下载-ToolDiy"><a href="#从你的-Github下载-ToolDiy" class="headerlink" title="从你的 Github下载 ToolDiy"></a>从你的 Github下载 ToolDiy</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/Risingrode/ToolDiy.git</span><br></pre></td></tr></table></figure>
<h2 id="安装-mkdocs"><a href="#安装-mkdocs" class="headerlink" title="安装 mkdocs"></a>安装 mkdocs</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载链接：pip install mkdocs</span><br></pre></td></tr></table></figure>
<h2 id="安装网站主题"><a href="#安装网站主题" class="headerlink" title="安装网站主题"></a>安装网站主题</h2><p>本站主题是material，使用下面命令进行安装即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install mkdocs-material</span><br></pre></td></tr></table></figure>

<h2 id="安装其它依赖"><a href="#安装其它依赖" class="headerlink" title="安装其它依赖"></a>安装其它依赖</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pymdown-extensions</span><br><span class="line">pip install mkdocs-awesome-pages-plugin</span><br></pre></td></tr></table></figure>

<h2 id="安装i18n"><a href="#安装i18n" class="headerlink" title="安装i18n"></a>安装i18n</h2><p>这里是个坑，我安装的时候，直接安装<code>pip install i18n</code>不行，你需要专门安装mkdocs下的i18n,然后问的chatGPT,他给我提供的解决方案是<code>pip install mkdocs-i18n-plugin</code>;可惜不对，最后在谷歌上找到下面命令，就对了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install mkdocs-static-i18n</span><br></pre></td></tr></table></figure>

<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdocs serve</span><br></pre></td></tr></table></figure>

<h2 id="构建静态网站文件"><a href="#构建静态网站文件" class="headerlink" title="构建静态网站文件"></a>构建静态网站文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdocs build</span><br></pre></td></tr></table></figure>

<h2 id="推送到你的Github上面"><a href="#推送到你的Github上面" class="headerlink" title="推送到你的Github上面"></a>推送到你的Github上面</h2><p>点击<code>pull request</code></p>
<p><img src="/./gthub1/github1.jpg"></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>如何参与开源项目</tag>
      </tags>
  </entry>
  <entry>
    <title>git杂项</title>
    <url>/post/git%E6%9D%82%E9%A1%B9.html</url>
    <content><![CDATA[<p>#版本控制</p>
<ul>
<li>管理多人协同开发技术</li>
</ul>
<p>##集中式版本控制 SVN<br>中央集权式，只有服务器具有全部代码</p>
<p>##分布式版本控制 Git<br>每个人具有全部代码</p>
<p>Git Bash:Unix与Linux的命令<br>Git CMD:Win风格的命令行<br>Git GUI：图形界面的Git</p>
<p>－　工作区(Working Directory)：平时存放代码的地方<br>－　暂存区(Stage&#x2F;Index)：临时存放你的文件<br>－　仓库区(Respository)：安全存放数据的位置<br>－　远程仓库（Remote）：托管代码的服务器</p>
<p>.gitignore  #忽略文件<br>    *.class<br>    *.log<br>    *.lock<br>    # Package Files #<br>    *.jar<br>    *.war<br>    *.ear<br>    target&#x2F;<br>    # idea<br>    .idea&#x2F;<br>    *.iml&#x2F;<br>    <em>velocity.log</em></p>
<pre><code>### STS ###
.apt_generated
.factorypath
.springBeans

### IntelliJ IDEA ###
*.iml
*.ipr
*.iws
.idea
.classpath
.project
.settings/
bin/

*.log
tem/

#rebel
*rebel.xml*
</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/post/design_pattern.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是给自己看的</p>
<p>本章可以下载<code>word</code>文档进行打印： <a href="https://www.aliyundrive.com/s/hVijAWNNL1W">https://www.aliyundrive.com/s/hVijAWNNL1W</a></p>
<p><code>感谢gjx,yfm,hyt等同学的贡献</code></p>
<h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><h2 id="设计模式的七大原则"><a href="#设计模式的七大原则" class="headerlink" title="设计模式的七大原则"></a>设计模式的七大原则</h2><h3 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h3><blockquote>
<p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p>
</blockquote>
<p><code>关键点：无法修改自身，但是可以进行拓展。例子：继承</code></p>
<h3 id="里氏代换原则"><a href="#里氏代换原则" class="headerlink" title="里氏代换原则"></a>里氏代换原则</h3><blockquote>
<p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。<br><code>继承重写方法,子类可以额外添加点东西</code></p>
</blockquote>
<h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><blockquote>
<p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p>
</blockquote>
<p><code>电脑类不再依赖于具体的键盘类，而是依赖于抽象接口</code></p>
<h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><blockquote>
<p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p>
</blockquote>
<p><code>接口隔离原则要求将庞大臃肿的接口拆分为更小、更具体的接口，以便客户端只需了解和依赖于自己需要的接口，而不需要了解和依赖于多余的接口。</code></p>
<h3 id="迪米特法则-最少知道原则"><a href="#迪米特法则-最少知道原则" class="headerlink" title="迪米特法则(最少知道原则)"></a>迪米特法则(最少知道原则)</h3><blockquote>
<p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p>
</blockquote>
<p><code>迪米特法则的目的是为了减少类之间的耦合度，使得系统的各个模块之间相互独立，修改一个模块时不会影响到其他模块。这样可以提高系统的可维护性、可扩展性和可测试性。</code></p>
<h3 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h3><blockquote>
<p>合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p>
</blockquote>
<p><code>合成复用原则的核心思想是：在设计系统时，应优先使用对象组合（composition）或聚合（aggregation）来实现复用，而不是通过继承来实现。</code></p>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><blockquote>
<p>一个对象应该只包含单一的职责，并且该职责被完整地封装在一个类中，另外一种定义：就一个类而言，应该仅有一个引起它变化的原因。</p>
</blockquote>
<p><code>单一职责原则的核心思想是将一个类的功能和责任限定在一个领域或关注点上，这样可以提高类的内聚性和可维护性，并降低类之间的耦合度。当一个类承担过多 的责任时，它变得复杂而脆弱，容易受到变化的影响，导致代码难以理解、修改和维护。</code></p>
<h1 id="考试重点"><a href="#考试重点" class="headerlink" title="考试重点"></a>考试重点</h1><h2 id="P90-2"><a href="#P90-2" class="headerlink" title="P90-2"></a><code>P90-2</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">autocar</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yunxing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Benzautocar</span> <span class="keyword">implements</span> <span class="title class_">autocar</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yunxing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Benz汽车运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWautocar</span> <span class="keyword">implements</span> <span class="title class_">autocar</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">yunxing</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW汽车运行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">autocarFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> autocar <span class="title function_">productautocar</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BenzautocarFactory</span> <span class="keyword">implements</span> <span class="title class_">autocarFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> autocar <span class="title function_">productautocar</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Benz汽车工厂生产的Benz汽车&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Benzautocar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BMWautocarFactory</span> <span class="keyword">implements</span> <span class="title class_">autocarFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> autocar <span class="title function_">productautocar</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;BMW汽车工厂生产的BMW汽车&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMWautocar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        autocarFactory autocarfactory=<span class="keyword">new</span> <span class="title class_">BenzautocarFactory</span>();</span><br><span class="line">        autocar autocar=autocarfactory.productautocar();</span><br><span class="line">        autocar.yunxing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="P399-策略模式-旅游出行"><a href="#P399-策略模式-旅游出行" class="headerlink" title="P399-策略模式-旅游出行"></a>P399-策略模式-旅游出行</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TravelStrategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CarStrategy</span> <span class="keyword">implements</span> <span class="title class_">TravelStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用汽车出行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirplaneStrategy</span> <span class="keyword">implements</span> <span class="title class_">TravelStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用飞机出行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WalkStrategy</span> <span class="keyword">implements</span> <span class="title class_">TravelStrategy</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;徒步旅行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TravelStrategyFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TravelStrategy <span class="title function_">getTravelStrategy</span><span class="params">(String strategyType)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (strategyType.equals(<span class="string">&quot;car&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CarStrategy</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyType.equals(<span class="string">&quot;airplane&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AirplaneStrategy</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (strategyType.equals(<span class="string">&quot;walk&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WalkStrategy</span>();</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TravelStrategy</span> <span class="variable">travelStrategy</span> <span class="operator">=</span> TravelStrategyFactory.getTravelStrategy(<span class="string">&quot;car&quot;</span>);</span><br><span class="line">        travelStrategy.travel();</span><br><span class="line">        </span><br><span class="line">        travelStrategy = TravelStrategyFactory.getTravelStrategy(<span class="string">&quot;walk&quot;</span>);</span><br><span class="line">        travelStrategy.travel();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 添加新的旅游策略方式</span></span><br><span class="line">        travelStrategy = TravelStrategyFactory.getTravelStrategy(<span class="string">&quot;airplane&quot;</span>);</span><br><span class="line">        travelStrategy.travel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="工厂方法模式实例之日志记录器P91-3"><a href="#工厂方法模式实例之日志记录器P91-3" class="headerlink" title="工厂方法模式实例之日志记录器P91-3 "></a>工厂方法模式实例之日志记录器<code>P91-3 </code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Log <span class="title function_">createLog</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Log</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseLog</span> <span class="keyword">implements</span> <span class="title class_">Log</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;写数据日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DatabaseLogFactory</span> <span class="keyword">implements</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Log <span class="title function_">createLog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建数据文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DatabaseLog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLog</span> <span class="keyword">implements</span> <span class="title class_">Log</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeLog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;写日志&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogFactory</span> <span class="keyword">implements</span> <span class="title class_">LogFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Log <span class="title function_">createLog</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;创建新的日志文件&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FileLog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Log log;</span><br><span class="line">        LogFactory factory;</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">FileLogFactory</span>();</span><br><span class="line">        log = factory.createLog();</span><br><span class="line">        log.writeLog();</span><br><span class="line">        factory = <span class="keyword">new</span> <span class="title class_">DatabaseLogFactory</span>();</span><br><span class="line">        log = factory.createLog();</span><br><span class="line">        log.writeLog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：创建新的日志文件<br>        写日志<br>        创建数据文件<br>        写数据日志</p>
</blockquote>
<h2 id="数据库操作工厂-P105-1"><a href="#数据库操作工厂-P105-1" class="headerlink" title="数据库操作工厂 P105-1"></a>数据库操作工厂 P105-1</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">DatabaseFactory</span> <span class="variable">databasefactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MysqlDatabaseFactory</span>();</span><br><span class="line">        Connection connection;</span><br><span class="line">        Statement statement;</span><br><span class="line">        connection = databasefactory.produceConnection();</span><br><span class="line">        connection.connect();</span><br><span class="line">        statement = databasefactory.produceStatement();</span><br><span class="line">        statement.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DatabaseFactory</span> &#123;</span><br><span class="line">    Connection <span class="title function_">produceConnection</span><span class="params">()</span>;</span><br><span class="line">    Statement <span class="title function_">produceStatement</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql connect success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlDatabaseFactory</span> <span class="keyword">implements</span> <span class="title class_">DatabaseFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">produceConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MysqlConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Statement <span class="title function_">produceStatement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MysqlStatement</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MysqlStatement</span> <span class="keyword">implements</span> <span class="title class_">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Mysql statement execute success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleConnection</span> <span class="keyword">implements</span> <span class="title class_">Connection</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle connect success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleDatabaseFactory</span> <span class="keyword">implements</span> <span class="title class_">DatabaseFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">produceConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleConnection</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Statement <span class="title function_">produceStatement</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OracleStatement</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OracleStatement</span> <span class="keyword">implements</span> <span class="title class_">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Oracle statement execute success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Statement</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：Mysql connect success<br>        Mysql statement execute success</p>
</blockquote>
<h2 id="P105-2-抽象工厂模式"><a href="#P105-2-抽象工厂模式" class="headerlink" title="P105-2 抽象工厂模式"></a>P105-2 抽象工厂模式</h2><p><code>谢谢hyt同学的贡献</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispose</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacCPU</span> <span class="keyword">implements</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispose</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MacCPU正在处理信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCCPU</span> <span class="keyword">implements</span> <span class="title class_">CPU</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispose</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PCCPU正在处理信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RAM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispose</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacRAM</span> <span class="keyword">implements</span> <span class="title class_">RAM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MacRAM正在存储信息..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCRAM</span> <span class="keyword">implements</span> <span class="title class_">RAM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;PCRAM正在存储信息..&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> CPU <span class="title function_">produceCPU</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RAM <span class="title function_">produceRAM</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PCFactory</span> <span class="keyword">implements</span> <span class="title class_">CFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> CPU <span class="title function_">produceCPU</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PCCPU</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RAM <span class="title function_">produceRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PCRAM</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MacFactory</span> <span class="keyword">implements</span> <span class="title class_">CFactory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> CPU <span class="title function_">produceCPU</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacCPU</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RAM <span class="title function_">produceRAM</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MacRAM</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            CFactory factory;</span><br><span class="line">            CPU cpu;</span><br><span class="line">            RAM ram;</span><br><span class="line">            factory = <span class="keyword">new</span> <span class="title class_">MacFactory</span>();</span><br><span class="line">            cpu = factory.produceCPU();</span><br><span class="line">            cpu.dispose();</span><br><span class="line">            ram = factory.produceRAM();</span><br><span class="line">            ram.store();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="P167-3-双向适配器模式"><a href="#P167-3-双向适配器模式" class="headerlink" title="P167-3  双向适配器模式"></a>P167-3  双向适配器模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RAM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">store</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchmouse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Catbehaviours</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dogbehaviours</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Icat</span> <span class="keyword">implements</span> <span class="title class_">Cat</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Catbehaviours</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是猫，爱吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchmouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;会捉老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Idog</span> <span class="keyword">implements</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dogbehaviours</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是狗，会啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;会狗叫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChangeBodyadapter</span> <span class="keyword">implements</span> <span class="title class_">Cat</span>, Dog &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChangeBodyadapter</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Dogbehaviours</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我也是一只狗，会啃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span> &#123;</span><br><span class="line">        cat.catchmouse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ChangeBodyadapter</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Catbehaviours</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我也是一只猫，爱吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchmouse</span><span class="params">()</span> &#123;</span><br><span class="line">        dog.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">JCat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangeBodyadapter</span>(<span class="keyword">new</span> <span class="title class_">Idog</span>());</span><br><span class="line">        JCat.Catbehaviours();</span><br><span class="line">        JCat.catchmouse();</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">JDog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChangeBodyadapter</span>(<span class="keyword">new</span> <span class="title class_">Icat</span>());</span><br><span class="line">        JDog.Dogbehaviours();</span><br><span class="line">        JDog.cry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P173-例子：毛笔"><a href="#P173-例子：毛笔" class="headerlink" title="P173 例子：毛笔"></a>P173 例子：毛笔</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String penType, String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigPen</span> <span class="keyword">extends</span> <span class="title class_">Pen</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        String penType=<span class="string">&quot;大号毛笔绘制&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.color.bepaint(penType,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Black</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String penType,String name)</span>&#123;</span><br><span class="line">        System.out.println(penType + <span class="string">&quot;黑色的&quot;</span>+ name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Blue</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String penType,String name)</span>&#123;</span><br><span class="line">        System.out.println(penType + <span class="string">&quot;蓝色的&quot;</span>+ name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiddlePen</span> <span class="keyword">extends</span> <span class="title class_">Pen</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        String penType=<span class="string">&quot;中号毛笔绘制&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.color.bepaint(penType,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Pen</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Color color;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(Color color)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.color=color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Red</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String penType,String name)</span>&#123;</span><br><span class="line">        System.out.println(penType + <span class="string">&quot;红色的&quot;</span>+ name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmallPen</span> <span class="keyword">extends</span> <span class="title class_">Pen</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        String penType=<span class="string">&quot;小号毛笔绘制&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.color.bepaint(penType,name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">White</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String penType,String name)</span>&#123;</span><br><span class="line">        System.out.println(penType + <span class="string">&quot;白色的&quot;</span>+ name + <span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String a[])</span>&#123;</span><br><span class="line">        Color color;</span><br><span class="line">        Pen pen;</span><br><span class="line">        color=(Color)XMLUtilPen.getBean(<span class="string">&quot;color&quot;</span>);</span><br><span class="line">        pen=(Pen)XMLUtilPen.getBean(<span class="string">&quot;pen&quot;</span>);</span><br><span class="line">        pen.setColor(color);</span><br><span class="line">        pen.draw(<span class="string">&quot;鲜花&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输入:蓝色 小号毛笔</p>
<blockquote>
<p>结果是：小号毛笔绘制蓝色的鲜花.</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>git高级</title>
    <url>/post/git%E9%AB%98%E7%BA%A7.html</url>
    <content><![CDATA[<h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h1 id="第一次初始化-方式1-："><a href="#第一次初始化-方式1-：" class="headerlink" title="第一次初始化(方式1)："></a>第一次初始化(方式1)：</h1><pre><code>git init
git add .
git commit -m &#39;这里是注释&#39;
git remote add origin git@github.com:帐号名/仓库名.git
git pull origin master
git push origin master # -f 强推
</code></pre>
<h1 id="第一次初始化-方式2-："><a href="#第一次初始化-方式2-：" class="headerlink" title="第一次初始化(方式2)："></a>第一次初始化(方式2)：</h1><pre><code>git clone git@github.com:git帐号名/仓库名.git
</code></pre>
<h1 id="平时工作基本操作："><a href="#平时工作基本操作：" class="headerlink" title="平时工作基本操作："></a>平时工作基本操作：</h1><pre><code>git checkout master # 切到主分支
git fetch origin  # 获取最新变更
git checkout -b dev origin/master # 基于主分支创建dev分支
git add . # 添加到缓存
git commit -m &#39;xxx&#39; # 提交到本地仓库
git fetch origin # 获取最新变更
git rebase dev origin/master # 合并到主分支
git push origin dev # 推送到远程分支
git chekout master # 切到主分支
git merge dev # 合并开发分支
git clone -b 远程分支 仓库地址 # 本地不存在仓库 拉取远程分支代码
git checkout -b 远程分支
origin/远程分支 # 本地存在仓库，拉取远程分支
</code></pre>
<h1 id="初始化仓库"><a href="#初始化仓库" class="headerlink" title="初始化仓库"></a>初始化仓库</h1><pre><code>git init
</code></pre>
<h1 id="查看仓库当前状态"><a href="#查看仓库当前状态" class="headerlink" title="查看仓库当前状态"></a>查看仓库当前状态</h1><pre><code>git status
</code></pre>
<h1 id="将文件添加到仓库"><a href="#将文件添加到仓库" class="headerlink" title="将文件添加到仓库"></a>将文件添加到仓库</h1><pre><code>git add 文件名 # 将工作区的某个文件添加到暂存区   
git add . # 将当前工作区的所有文件都加入暂存区
git add -u # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件
git add -A # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件
git add -i # 进入交互界面模式，按需添加文件到缓存区
</code></pre>
<h1 id="将暂存区文件提交到本地仓库"><a href="#将暂存区文件提交到本地仓库" class="headerlink" title="将暂存区文件提交到本地仓库"></a>将暂存区文件提交到本地仓库</h1><pre><code>git commit -m &quot;提交说明&quot; # 将暂存区内容提交到本地仓库
git commit -a -m &quot;提交说明&quot; # 跳过缓存区操作，直接把工作区内容提交到本地仓库
</code></pre>
<h1 id="比较文件异同"><a href="#比较文件异同" class="headerlink" title="比较文件异同"></a>比较文件异同</h1><pre><code>git diff # 工作区与暂存区的差异
git diff 分支名 #工作区与某分支的差异，远程分支这样写：remotes/origin/分支名
git diff HEAD  # 工作区与HEAD指针指向的内容差异
git diff 提交id 文件路径 # 工作区某文件当前版本与历史版本的差异
git diff --stage # 工作区文件与上次提交的差异(1.6 版本前用 --cached)
git diff 版本TAG # 查看从某个版本后都改动内容
git diff 分支A 分支B # 比较从分支A和分支B的差异(也支持比较两个TAG)
git diff 分支A...分支B # 比较两分支在分开后各自的改动
</code></pre>
<h1 id="另外：如果只想统计哪些文件被改动，多少行被改动，可以添加-–stat-参数"><a href="#另外：如果只想统计哪些文件被改动，多少行被改动，可以添加-–stat-参数" class="headerlink" title="另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数"></a>另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 –stat 参数</h1><h1 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h1><pre><code>git log # 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)
git log -p -次数 # 查看最近多少次的提交记录
git log --stat # 简略显示每次提交的内容更改
git log --name-only # 仅显示已修改的文件清单
git log --name-status # 显示新增，修改，删除的文件清单
git log --oneline # 让提交记录以精简的一行输出
git log –graph –all --online # 图形展示分支的合并历史
git log --author=作者  # 查询作者的提交记录(和grep同时使用要加一个--all--match参数)
git log --grep=过滤信息 # 列出提交信息中包含过滤信息的提交记录
git log -S查询内容 # 和--grep类似，S和查询内容间没有空格
git log fileName # 查看某文件的修改记录，找背锅专用
</code></pre>
<h1 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h1><pre><code>git reset HEAD^ # 恢复成上次提交的版本
git reset HEAD^^ # 恢复成上上次提交的版本，就是多个^，以此类推或用~次数
git reflog
git reset --hard 版本号
--soft：只是改变HEAD指针指向，缓存区和工作区不变；
--mixed：修改HEAD指针指向，暂存区内容丢失，工作区不变；
--hard：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；
</code></pre>
<h1 id="同步远程仓库"><a href="#同步远程仓库" class="headerlink" title="同步远程仓库"></a>同步远程仓库</h1><pre><code>git push -u origin master
</code></pre>
<h1 id="删除版本库文件"><a href="#删除版本库文件" class="headerlink" title="删除版本库文件"></a>删除版本库文件</h1><pre><code>git rm 文件名 
</code></pre>
<h1 id="版本库里的版本替换工作区的版本"><a href="#版本库里的版本替换工作区的版本" class="headerlink" title="版本库里的版本替换工作区的版本"></a>版本库里的版本替换工作区的版本</h1><pre><code>git checkout -- test.txt
</code></pre>
<h1 id="本地仓库内容推送到远程仓库"><a href="#本地仓库内容推送到远程仓库" class="headerlink" title="本地仓库内容推送到远程仓库"></a>本地仓库内容推送到远程仓库</h1><pre><code>git remote add origin git@github.com:帐号名/仓库名.git
</code></pre>
<h1 id="从远程仓库克隆项目到本地"><a href="#从远程仓库克隆项目到本地" class="headerlink" title="从远程仓库克隆项目到本地"></a>从远程仓库克隆项目到本地</h1><pre><code>git clone git@github.com:git帐号名/仓库名.git
</code></pre>
<h1 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h1><pre><code>git checkout -b dev
-b表示创建并切换分支
上面一条命令相当于一面的二条：
git branch dev //创建分支
git checkout dev //切换分支
</code></pre>
<h1 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h1><pre><code>git branch
</code></pre>
<h1 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h1><pre><code>git merge dev  #用于合并指定分支到当前分支
git merge --no-ff -m &quot;merge with no-ff&quot; dev  #加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并
</code></pre>
<h1 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h1><pre><code>git branch -d dev
</code></pre>
<h1 id="查看分支合并图"><a href="#查看分支合并图" class="headerlink" title="查看分支合并图"></a>查看分支合并图</h1><pre><code>git log --graph --pretty=oneline --abbrev-commit
</code></pre>
<h1 id="查看远程库信息"><a href="#查看远程库信息" class="headerlink" title="查看远程库信息"></a>查看远程库信息</h1><pre><code>git remote
</code></pre>
<h1 id="git相关配置"><a href="#git相关配置" class="headerlink" title="git相关配置"></a>git相关配置</h1><h1 id="安装完Git后第一件要做的事，设置用户信息-global可换成local在单独项目生效-："><a href="#安装完Git后第一件要做的事，设置用户信息-global可换成local在单独项目生效-：" class="headerlink" title="安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)："></a>安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)：</h1><pre><code>git config --global user.name &quot;用户名&quot; # 设置用户名
git config --global user.email &quot;用户邮箱&quot;   #设置邮箱
git config --global user.name   # 查看用户名是否配置成功
git config --global user.email   # 查看邮箱是否配置
</code></pre>
<h1 id="其他查看配置相关"><a href="#其他查看配置相关" class="headerlink" title="其他查看配置相关"></a>其他查看配置相关</h1><pre><code>git config --global --list  # 查看全局设置相关参数列表
git config --local --list # 查看本地设置相关参数列表
git config --system --list # 查看系统配置参数列表
git config --list  # 查看所有Git的配置(全局+本地+系统)
git config --global color.ui true //显示git相关颜色
</code></pre>
<h1 id="撤消某次提交"><a href="#撤消某次提交" class="headerlink" title="撤消某次提交"></a>撤消某次提交</h1><pre><code>git revert HEAD # 撤销最近的一个提交
git revert 版本号 # 撤销某次commit
</code></pre>
<h1 id="拉取远程分支到本地仓库"><a href="#拉取远程分支到本地仓库" class="headerlink" title="拉取远程分支到本地仓库"></a>拉取远程分支到本地仓库</h1><pre><code>git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支
git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkout
git branch --set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接
</code></pre>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre><code>git tag 标签 //打标签命令，默认为HEAD
git tag //显示所有标签
git tag 标签 版本号 //给某个commit版本添加标签
git show 标签 //显示某个标签的详细信息
</code></pre>
<h1 id="同步远程仓库更新"><a href="#同步远程仓库更新" class="headerlink" title="同步远程仓库更新"></a>同步远程仓库更新</h1><pre><code>git fetch  origin master
</code></pre>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git高级</tag>
      </tags>
  </entry>
  <entry>
    <title>gulimall基础篇</title>
    <url>/post/gulimall%E5%9F%BA%E7%A1%80%E7%AF%87.html</url>
    <content><![CDATA[<h1 id="Vo"><a href="#Vo" class="headerlink" title="Vo"></a>Vo</h1><p>在Java中，”VO” 通常是指 “Value Object”（值对象）的缩写。值对象是一种用于封装数据的类，其主要目的是保存数据并且没有业务逻辑。值对象在应用程序中用于表示特定的数据结构，例如数据库中的表、API的请求&#x2F;响应、用户输入等。</p>
<p>值对象通常具有以下特征：</p>
<ol>
<li>**不可变性 (Immutability)**：值对象的实例一旦创建，其状态不应该发生改变。所有字段都应该是只读的，以确保数据的完整性。</li>
<li>**比较 (Equality)**：值对象的相等性通常是基于其所有字段的值来判断的，而不是依赖于对象的标识符。</li>
<li>**无业务逻辑 (No Business Logic)**：值对象通常不包含复杂的业务逻辑，而是专注于数据的表示和访问。</li>
<li>**封装性 (Encapsulation)**：值对象应该将相关的数据字段封装在一起，提供良好的抽象。</li>
</ol>
]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>谷粒商城-基础篇-self</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/post/design_pattern_plus.html</url>
    <content><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>注重完成对象的实例化，相比于直接实例化对象，根据实际情况选择合适的<br>设计模式完成对象的实例化，可以为复杂的业务场景带来更高的灵活性。</p>
<p>工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p>
<h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><p>结构型设计模式用于指导我们完成对代码的结构划分，如此，代码结构会更加清晰，更易理解，也提高了软件的可维护性。</p>
<p>适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模<br>式。</p>
<h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><p>行为型设计模式主要用于定义对象之间的通信与流程控制，主要的设计模式都非常注重优化对象之间的数据交互方式。</p>
<p>策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、<br>备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p>
<p><img src="/post/design_pattern_plus/1.jpg"></p>
<h1 id="六大原则"><a href="#六大原则" class="headerlink" title="六大原则"></a>六大原则</h1><h2 id="开放封闭原则（Open-Close-Principle）"><a href="#开放封闭原则（Open-Close-Principle）" class="headerlink" title="开放封闭原则（Open Close Principle）"></a>开放封闭原则（Open Close Principle）</h2><ul>
<li>原则思想：尽量通过扩展软件实体来解决需求变化，而不是通过修改已有的代码来完成变化 </li>
<li>描述：一个软件产品在生命周期内，都会发生变化，既然变化是一个既定的事实，我们就应该在设计的时候尽量适应这些变化，以提高项目的稳定性和灵活性。 </li>
<li>优点：单一原则告诉我们，每个类都有自己负责的职责，里氏替换原则不能破坏继承关系的体系。</li>
</ul>
<h2 id="里氏代换原则（Liskov-Substitution-Principle）"><a href="#里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="里氏代换原则（Liskov Substitution Principle）"></a>里氏代换原则（Liskov Substitution Principle）</h2><ul>
<li><p>原则思想：使用的基类可以在任何地方使用继承的子类，完美的替换基类。 </p>
</li>
<li><p>大概意思是：子类可以扩展父类的功能，但不能改变父类原有的功能。子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法，子类中可以增加自己特有的方法。 </p>
</li>
<li><p>优点：增加程序的健壮性，即使增加了子类，原有的子类还可以继续运行，互不影响。</p>
</li>
</ul>
<h2 id="依赖倒转原则（Dependence-Inversion-Principle）"><a href="#依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="依赖倒转原则（Dependence Inversion Principle）"></a>依赖倒转原则（Dependence Inversion Principle）</h2><ul>
<li><p>依赖倒置原则的核心思想是面向接口编程. </p>
</li>
<li><p>依赖倒转原则要求我们在程序代码中传递参数时或在关联关系中，尽量引用层次高的抽象层类， </p>
</li>
<li><p>这个是开放封闭原则的基础，具体内容是：对接口编程，依赖于抽象而不依赖于具体。</p>
</li>
</ul>
<h2 id="接口隔离原则（Interface-Segregation-Principle）"><a href="#接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="接口隔离原则（Interface Segregation Principle）"></a>接口隔离原则（Interface Segregation Principle）</h2><ul>
<li>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。还是一个降低类之间的耦合度的意思，从这儿我们看出，其实设计模式就是一个软件的设计思想，从大型软件架构出发，为了升级和维护方便。所以上文中多次出现：降低依赖，降低耦合。 </li>
<li>例如：支付类的接口和订单类的接口，需要把这俩个类别的接口变成俩个隔离的接口</li>
</ul>
<h2 id="迪米特法则（最少知道原则）（Demeter-Principle）"><a href="#迪米特法则（最少知道原则）（Demeter-Principle）" class="headerlink" title="迪米特法则（最少知道原则）（Demeter Principle）"></a>迪米特法则（最少知道原则）（Demeter Principle）</h2><ul>
<li>原则思想：一个对象应当对其他对象有尽可能少地了解，简称类间解耦 </li>
<li>大概意思就是一个类尽量减少自己对其他对象的依赖，原则是低耦合，高内聚，只有使各个模块之间的耦合尽量的低，才能提高代码的复用率。 </li>
<li>优点：低耦合，高内聚。</li>
</ul>
<h2 id="单一职责原则（Principle-of-single-responsibility）"><a href="#单一职责原则（Principle-of-single-responsibility）" class="headerlink" title="单一职责原则（Principle of single responsibility）"></a>单一职责原则（Principle of single responsibility）</h2><ul>
<li>原则思想：一个方法只负责一件事情。 </li>
<li>描述：单一职责原则很简单，一个方法 一个类只负责一个职责，各个职责的程序改动，不影响其它程序。 这是常识，几乎所有程序员都会遵循这个原则。 </li>
<li>优点：降低类和类的耦合，提高可读性，增加可维护性和可拓展性，降低可变性的风险。</li>
</ul>
<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式是一个通过定义、使用、测试去解决特定问题的方法，是针对软件设计中在给定条件下会重复性发生的问题而提出的一种通用性的可重用解决方案，设计模式不是可以直接转化为代码的完整设计，它是用于描述在不同情况下解决问题的通用方案。</p>
<h2 id="设计模式的作用"><a href="#设计模式的作用" class="headerlink" title="设计模式的作用"></a>设计模式的作用</h2><p>设计模式通过提供经过验证的行之有效的开发范式加快开发过程，预防重大的隐患问题，提高代码可读性。</p>
<h2 id="设计模式的分类"><a href="#设计模式的分类" class="headerlink" title="设计模式的分类"></a>设计模式的分类</h2><p><strong>这里主要讨论GoF所提出的23种设计模式，可将其分为三种类型：</strong></p>
<ol>
<li>创造型设计模式</li>
<li>结构型设计模式</li>
<li>行为型设计模式</li>
</ol>
<h3 id="创造型设计模式"><a href="#创造型设计模式" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h3><p>注重完成对象的实例化，相比于直接实例化对象，根据实际情况选择合适的设计模式完成对象的实例化，可以为复杂的业务场景带来更高的灵活性。<br>创造型设计模式主要包括以下几种：</p>
<ol>
<li>抽象工厂设计模式</li>
<li>生成器设计模式</li>
<li>工厂方法设计模式</li>
<li>原型设计模式</li>
<li>单例设计模式</li>
</ol>
<h3 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h3><p>结构型设计模式用于指导我们完成对代码的结构划分，如此，代码结构会更加清晰，更易理解，也提高了软件的可维护性。<br>结构型设计模式主要包括以下几种：</p>
<ol>
<li>适配器设计模式</li>
<li>桥接设计模式</li>
<li>组合设计模式</li>
<li>装饰设计模式</li>
<li>门面设计模式</li>
<li>享元设计模式</li>
<li>代理设计模式</li>
</ol>
<h3 id="行为型设计模式"><a href="#行为型设计模式" class="headerlink" title="行为型设计模式"></a>行为型设计模式</h3><p>行为型设计模式主要用于定义对象之间的通信与流程控制，主要的设计模式都非常注重优化对象之间的数据交互方式。<br>行为型设计模式主要包括以下几种：</p>
<ol>
<li>职责链设计模式</li>
<li>命令设计模式</li>
<li>解释器设计模式</li>
<li>迭代器设计模式</li>
<li>中介者设计模式</li>
<li>备忘录设计模式</li>
<li>观察者设计模式</li>
<li>策略设计模式</li>
<li>状态设计模式</li>
<li>模板方法设计模式</li>
<li>访问者设计模式</li>
</ol>
<h2 id="如何学习设计模式"><a href="#如何学习设计模式" class="headerlink" title="如何学习设计模式"></a>如何学习设计模式</h2><ul>
<li>模式名称是什么？</li>
<li>模式类型是什么？是创造型，结构型，还是行为型？</li>
<li>模式的目的是什么？（作用是什么？解决了什么问题？）</li>
<li>模式的别名是什么？</li>
<li>什么情况下使用该模式？</li>
<li>该模式的基本示例</li>
<li>该模式的UML图是什么样的？是类图还是交互图？</li>
<li>都有那些对象在模式中参与活动？列出设计模式中使用的类和对象，并说明他们各自的角色</li>
<li>模式中的类和对象是怎么进行交互的？</li>
<li>通过应用设计模式能获取什么好处，有哪些坏处？如何权衡？</li>
<li>如何实现该模式</li>
<li>与该模式相近的设计模式是什么？这几种相近的模式有哪些异同点？</li>
</ul>
<h2 id="正确看待设计模式"><a href="#正确看待设计模式" class="headerlink" title="正确看待设计模式"></a>正确看待设计模式</h2><p>恰当使用设计模式能够提高代码的复用性，但是由于复用性往往会引入封装与间接调用，这些会降低系统性能，增加代码复杂程度。因此，除非设计模式能够帮助我们完成代码的实现或者后续的维护工作，否则没有必要去引入设计模式。<br>学习设计模式的关键并不在于学习设计模式本身，而是在于识别应用场景与潜在的风险，并将设计模式用之有道，这般，设计模式才能算作得心应手的工具。<br>在没有必要的情况大可不必去使用设计模式，因为设计模式有可能会牺牲代码的简洁性，而且滥用设计模式多会引入新的问题却没有解决原来的问题。<br><strong>保持代码的整洁，模块化和可读性，同时不要让各类之间过度耦合。</strong></p>
<h2 id="创造型设计模式-1"><a href="#创造型设计模式-1" class="headerlink" title="创造型设计模式"></a>创造型设计模式</h2><p>创造型设计模式主要关注的是类的实例化，也就是说体现的是对象的创建方法，利用这些模式，我们可以在适当的情况下以适当的形式创建对象，创造型设计模式通过控制对象的创建来解决设计中的问题。<br>创造型设计模式主要包含以下子类别：</p>
<ol>
<li>对象创造型设计模式：</li>
</ol>
<p>主要完成对象创建，并将对象中部分内容放到其他对象中创建。</p>
<ol start="2">
<li>类创造型设计模式：</li>
</ol>
<p>主要完成类的实例化，并将类中的部分对象放到子类中创建，此类模式在实例化过程中高效地利用了继承机制<br>创造型设计模式主要包含以下5种具体的设计模式：</p>
<ol>
<li>抽象工厂设计模式</li>
</ol>
<p>提供一个用于创建相关对象或相互依赖对象的接口，无需指定对象的具体类</p>
<ol start="2">
<li>生成器设计模式</li>
</ol>
<p>将复杂对象的构建与其表示相互分离，使得同样的构建过程可以创建不同的表示</p>
<ol start="3">
<li>工厂方法设计模式</li>
</ol>
<p>允许在子类中实现本类的实例化类</p>
<ol start="4">
<li>原型设计模式</li>
</ol>
<p>使用一个原型实例来指定创建对象的种类，然后通过拷贝这些原型实现新对象的创建</p>
<ol start="5">
<li>单例模式</li>
</ol>
<p>确保某个类在系统中仅有一个实例，并提供一个访问它的全局访问点</p>
<table>
<thead>
<tr>
<th align="center">对象创造型设计模式</th>
<th align="center">类创造型设计模式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">抽象工厂设计模式</td>
<td align="center">工厂方法设计模式</td>
</tr>
<tr>
<td align="center">生成器设计模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">原型设计模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">单例设计模式</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="工厂方法设计模式"><a href="#工厂方法设计模式" class="headerlink" title="工厂方法设计模式"></a>工厂方法设计模式</h3><p>工厂方法的作用是创建对象，用来从一组实现特定逻辑的类中实例化某个对象。</p>
<h4 id="模式中包括的类"><a href="#模式中包括的类" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>产品类（Product）中定义了工厂方法创建的对象接口。</li>
<li>具体产品类（ Concrete Product）实现产品类接口。</li>
<li>工厂类（ Creator，因为由它来创建产品类，所以叫作工厂类）声明工厂方法，返回一个产品类对象。可用于调用创建产品类对象的生成方法。</li>
<li>具体工厂类（ Concrete Creator）重写用于创建具体产品类对象的方法。</li>
</ul>
<h4 id="UML图"><a href="#UML图" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588679646408-22276075-76c2-42b2-8b20-84e3401fdbf7.png#align=left&display=inline&height=231&margin=%5Bobject%20Object%5D&name=image.png&originHeight=381&originWidth=1228&size=220064&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景"><a href="#功能及应用场景" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>当需要创建一个类，而在编程时不能确定这个类的类型时（需要运行时确定）。</li>
<li>当一个类希望由其子类来指定所创建对象的具体类型时。</li>
<li>当我们想要定位被创建类，并获取相关信息时。</li>
</ul>
<h3 id="抽象工厂设计模式"><a href="#抽象工厂设计模式" class="headerlink" title="抽象工厂设计模式"></a>抽象工厂设计模式</h3><p>抽象工厂模式相比于工厂方法模式的抽象层次更高。这意味着抽象工厂返回的是一组类的工厂。与工厂方法模式类似（返回多个子类中的一个），此方法会返回一个工厂，而这个工厂会返回多个子类中的一个。简单来说，抽象工厂是一个工厂对象，该对象又会返回若干工厂中的一个。<br>工厂模式是创造型模式的典型示例。抽象工厂设计模式是工厂方法模式的扩展，从而使我们无须担心所创建对象的实际类就能够创建对象。抽象工厂模式扩展了工厂方法模式，允许创建更多类型的对象。</p>
<h4 id="模式中包括的类-1"><a href="#模式中包括的类-1" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象工厂（AbstractFactory）声明一个用于完成抽象产品对象创建操作的接口。</li>
<li>具体工厂（ConcreteFactory）实现创建具体产品对象的操作。</li>
<li>抽象产品（AbstractProduct）声明一个用于一类产品对象的接口。</li>
<li>具体产品（ConcreteProduct）定义由相应的具体工厂来创建的产品对象。</li>
<li>客户端（Client）使用由抽象工厂和抽象产品类声明的唯一接口。</li>
</ul>
<h4 id="UML图-1"><a href="#UML图-1" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588681690229-615d93e2-9429-42cc-812e-fa8cb7eb49a4.png#align=left&display=inline&height=307&margin=%5Bobject%20Object%5D&name=image.png&originHeight=565&originWidth=1374&size=368470&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景-1"><a href="#功能及应用场景-1" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>抽象工厂模式的主要优点之一是它屏蔽了这些具体类的创建方法。实际应用的类名称不需要再让客户端（将客户端与具体类解耦）知道。由于具体类是屏蔽的，因此我们可以在不同的工厂（实现方法）之间进行切换。</p>
<h3 id="生成器设计模式"><a href="#生成器设计模式" class="headerlink" title="生成器设计模式"></a>生成器设计模式</h3><p>生成器模式，能够从简单的对象一步一步生成复杂的对象。生成器模式是一种用来逐步构建复杂对象并在最后一步返回对象的创造型模式。<br>构造一个对象的过程是通过泛型实现的，以便它能够用于对同一对象创建不同的表示形式。</p>
<h4 id="模式中包括的类-2"><a href="#模式中包括的类-2" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>生成器类（ Builder）提供一个接口用于创建产品的各个组成部件。具体生成器（Concrete Builder）提供此接的实现。</li>
<li>具体生成器（ ConcreteBuilder）会跟踪其所创建对象的表现形式，并在创建对象的同时提供一个接口获取产品（Product）。</li>
<li>导演类（ Director）通过生成器提供的接口构造对象。产品类用于表示被构造的复杂对象。这包括对我们构建的所有类进行定义。</li>
</ul>
<h4 id="UML图-2"><a href="#UML图-2" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588687137859-38493900-8c93-43ef-bbe7-c67c14e9ba75.png#align=left&display=inline&height=286&margin=%5Bobject%20Object%5D&name=image.png&originHeight=364&originWidth=951&size=131071&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景-2"><a href="#功能及应用场景-2" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>生成器模式隐藏了产品构建过程中的内部细节。各个生成器之间都是相互独立的。这提高了代码的模块化，并使其他的生成器更方便地创建对象。因为每个生成器都能够逐步创建对象，这让我们能够很好地对最终产品进行掌控。</p>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><p>在应用程序的整个生命周期中，对象只有一个实例的时候，就会使用单例设计模式。单例类总是在第一次被访问时完成实例化，直至应用程序退出之前，都只会使用同一个实例。单一实例创建策略：我们通过限制构造函数（通过设置其为私有）从而限制单例类的实例化。之后在定义类时包含一个该类的静态私有对象，以便创建单例类的实例。<br>在单例模式中，最棘手的部分是对单一实例的实现和管理。<br>在单例模式的定义过程中，有两点需要注意的地方：</p>
<ul>
<li>该类仅允许存在一个实例。</li>
<li>需要为该单一实例提供一个全局访问点。</li>
</ul>
<p>单例模式中的主动实例化和被动实例化（饿汉、懒汉）<br>线程安全的单例：双重同步锁、静态变量、枚举</p>
<h4 id="模式中包括的类-3"><a href="#模式中包括的类-3" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>单例类</li>
</ul>
<h4 id="UML图-3"><a href="#UML图-3" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588689300339-c33a3d0d-7544-4754-8695-b08fc843183d.png#align=left&display=inline&height=208&margin=%5Bobject%20Object%5D&name=image.png&originHeight=208&originWidth=334&size=51899&status=done&style=none&width=334" alt="image.png"></p>
<h4 id="功能及应用场景-3"><a href="#功能及应用场景-3" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>在应用程序的整个生命周期中，对象只有一个实例的时候，就会使用单例设计模式。</p>
<h3 id="原型设计模式"><a href="#原型设计模式" class="headerlink" title="原型设计模式"></a>原型设计模式</h3><p>相比于以往创建一个复杂对象总是费时费力，原型模式只需要复制现有的相似对象，并根据需要做适当修改。原型意味着使用克隆方法。克隆方法是一种复制对象的操作。克隆出的对象副本被初始化为调用克隆方法时原始对象的当前状态。这意味着对象的克隆避免了创建新对象。如果创建一个新对象的开销很大，而且有可能引起资源紧张时，我们就克隆对象。</p>
<ul>
<li>浅层复制：当原始对象变化时，新对象也跟着改变。这主要是因为浅层复制并没有实际复制新的对象，而只是对原有对象的一个引用。</li>
<li>深层复制：当原始对象变化时，新对象不受影响，因为原始对象所包含的所有参数、对象和引用在复制新对象的过程中都建立了新的拷贝。</li>
</ul>
<p>使用克隆方法来复制对象时，具体是使用浅层复制还是深层复制是由业务需求来决定的。在使用原型模式时，使用克隆方法来复制对象仅仅是一个设计上的决策。克隆方法对于原型模式来说并不是强制性的最佳选择。</p>
<h4 id="模式中包括的类-4"><a href="#模式中包括的类-4" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>客户端（Client）：通过调用原型类的克隆操作创建一个新对象。</li>
<li>原型类（ Prototype）：声明一个接口用于克隆自己。</li>
<li>具体原型类（ Concrete Prototype）：实现克隆自己的操作。</li>
</ul>
<h4 id="UML图-4"><a href="#UML图-4" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588746617916-a21ed08c-42df-40c0-bc79-6701209c2f55.png#align=left&display=inline&height=564&margin=%5Bobject%20Object%5D&name=image.png&originHeight=564&originWidth=951&size=191697&status=done&style=none&width=951" alt="image.png"></p>
<h4 id="功能及应用场景-4"><a href="#功能及应用场景-4" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ol>
<li>当一个系统应该独立于其产品的创建、组合和表示。</li>
<li>当需要实例化的类是在运行时定义的，例如动态加载，或避免建立一个平行于产品类继承层次的工厂类继承层次时。</li>
<li>当一个类的实例仅可以拥有若干不同的状态组合中的一个时。使用原型模式建立相应数量的原型和克隆方法，会比每次都手动实例化类并配置相应状态更加方便。</li>
</ol>
<p><strong>主要难点：</strong></p>
<ul>
<li>每个原型类的子类都必须实现克隆操作。这实现起来可能有难度。例如，当类已经存在的时候添加克隆方法可能比较困难。</li>
<li>对象内部包含其他不支持克隆的对象或具有循环引用的对象时，实现克隆方法会比较困难。</li>
</ul>
<p><strong>优点：</strong></p>
<ul>
<li>原型模式意味着使用克隆方法。克隆方法是一种复制对象的操作。相比于耗时的复制对象创建过程，原型模式仅复制类似的现有对象，再根据需要对复制出的副本进行修改。</li>
<li>客户端可以在运行时添加或移除原型对象。</li>
<li>通过各种参数来定义新对象：高度动态的系统允许我们通过使用对象组合来定义新的特征，例如为对象变量指定相应的参数值，而不是重新定义一个类。我们通过实例化现有类可以有效地定义新类型的对象，并为客户端对象注册原型实例。客户端可以通过向原型类委派某个责任而使其具有新的特征。这种设计允许用户无须大量编程就能轻松定义新的类。事实上，克隆一个原型本质上是类似于类的实例化的。但原型模式能够大大降低系统所需的类的数量。</li>
</ul>
<p><strong>副作用：</strong></p>
<ul>
<li>使用原型模式，我们可以根据需要通过对象克隆来实现运行时对象的添加和删除。我们可以根据程序运行情况在运行时修改类的内部数据表示形式。</li>
<li>在Java中实现原型模式的一大困难是如果这些类已经存在，我们未必能够通过添加所需要的克隆方法或深层克隆方法对类进行修改。此外，那些与其他类具有循环引用关系的类并不能真正实现克隆。</li>
<li>需要在这些类中具有足够的数据访问权限或方法，以便在克隆完成后对相应的数据进行修改。这可能需要在这些原型类中添加相应的数据访问方法，以便我们对类完成克隆之后可以修改数据。</li>
</ul>
<h2 id="结构型设计模式-1"><a href="#结构型设计模式-1" class="headerlink" title="结构型设计模式"></a>结构型设计模式</h2><p>结构型模式主要描述如何将对象和类组合在一起以组成更复杂的结构。在软件工程中结构型模式是用于帮助设计人员通过简单的方式来识别和实现对象之间关系的设计模式。结构型模式会以组的形式组织程序。这种划分形式使代码更加清晰，维护更加简便。结构型模式用于代码和对象的结构组织。<br>结构型模式会以组的形式组织程序。这种划分形式使代码更加清晰，维护更加简便。<br><strong>结构型模式又分为以下子类别：</strong></p>
<ol>
<li>对象结构型模式：用于对象之间相互关联与组织，以便形成更大、更复杂的结构。</li>
<li>类结构型模式：用于实现基于继承的代码抽象，并且会介绍如何通过该模式提供更有用的程序接口。</li>
</ol>
<p><strong>具体包括：</strong></p>
<table>
<thead>
<tr>
<th align="center">对象结构型模式</th>
<th align="center">类结构型模式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">桥接模式</td>
<td align="center">类适配器模式</td>
</tr>
<tr>
<td align="center">组合模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">装饰模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">门面模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">享元模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">对象适配器模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">代理模式</td>
<td align="center"></td>
</tr>
</tbody></table>
<ol>
<li>组合模式：它能够为客户端处理各种复杂和灵活的树状结构。这些树结构可以由各种不同类型的容器和叶节点组成，其深度或组合形式能够在运行时调整或确定。</li>
<li>装饰模式：允许我们通过附加新的功能或修改现有功能，在运行时动态地修改对象。</li>
<li>门面模式：允许我们为客户端创建一个统一的接口以访问不同子系统的不同接口，从而简化客户端。</li>
<li>享元模式：客户端调用类时会在运行时创建大量对象，该模式会重新设计类以优化内存开销。</li>
<li>代理模式：为其他对象提供一种代理以控制对这个对象的访问。这种模式的目的是一个对象不适合或者不能直接引用另一个对象，简化客户端并实现对象访问，同时避免任何副作用。</li>
<li>适配器模式：允许我们为一个已有的类提供一个新的接口，并在客户端请求不同接口时实现类的重用。</li>
<li>桥接模式：允许我们将类与其接口相互解耦。允许类及其接口随着时间相互独立变化，增加类重用的次数，提高后续可扩展性。它也允许运行时对接口的不同实现方式动态切换，使代码更加灵活。</li>
</ol>
<h3 id="适配器设计模式"><a href="#适配器设计模式" class="headerlink" title="适配器设计模式"></a>适配器设计模式</h3><p>软件适配器的工作原理也和插座适配器完全一样。我们也经常需要在程序中使用到不同的类或模块。假设有一段代码写得很烂，如果我们直接将这些代码集成到程序中，会将现有的代码搞乱。但是我们又不得不调用这段代码，因为我们需要实现相关的功能，而从头写起会耽误很多宝贵的时间。这时的最佳实践就是编写适配器，并将所需要的代码包装进去。这样我们就能够使用自定义的接口，从而降低对外部代码的依赖。<br>适配器模式会将现有接口转换为新的接口，已实现对应用程序中不相关的类的兼容性和可重用性的目标。适配器模式也被称为包装模式。适配器模式能够帮助那些因为接口不兼容而无法一起工作的类，以便它们能够一同工作。<br>适配器模式也负责将数据转换成适当的形式。当客户端在接口中指定了其对数据格式的要求时，我们通常可以创建新的类以实现现有类的接口和子类。这种实现方式也会通过创建类适配器，实现对客户端调用命和现有类中被调用方法之间接口的转换。</p>
<h4 id="模式中包括的类-5"><a href="#模式中包括的类-5" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>客户端（Client）调用目标类的类或程序。</li>
<li>目标类（Target）客户端想要使用的接口。</li>
<li>适配对象类（Adapetee）需要进行适配的类或对象。</li>
<li>适配器类（ Adapter）按照目标类接口的要求对适配对象接口实现接口形式的适配转换。</li>
<li>request方法：客户端想要执行的操作。</li>
<li>specificRequest方法：适配对象中能够完成 request方法功能的实现。</li>
</ul>
<h4 id="UML图-5"><a href="#UML图-5" class="headerlink" title="UML图"></a>UML图</h4><p><strong><img src="/post/design_pattern_plus/1588761010089-ced9b3a9-3232-4729-943a-67c133909d7c.png#align=left&display=inline&height=395&margin=%5Bobject%20Object%5D&name=image.png&originHeight=395&originWidth=1149&size=182309&status=done&style=none&width=1149" alt="image.png"></strong></p>
<h4 id="功能及应用场景-5"><a href="#功能及应用场景-5" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>在具体实践上，有两种实际应用适配器模式的方法：</p>
<ol>
<li>使用继承［类适配器］</li>
<li>使用关联［对象适配器］</li>
</ol>
<p><strong>应用场景：</strong></p>
<ul>
<li>我们想要使用现有的类，但它的接口不符合我们的需要。</li>
<li>我们想要创建一个可重用的类，能够与一些无关的类或不可预见的类进行协作，同时这个类无须具有兼容的接口。</li>
<li>（仅适用于对象适配器）我们需要使用多个已经存在的子类，而我们为每一个子类都做接口适配显然是不切实际的。使用对象适配器可以直接适配其父类的接口。</li>
</ul>
<h3 id="桥接设计模式"><a href="#桥接设计模式" class="headerlink" title="桥接设计模式"></a>桥接设计模式</h3><p>桥接模式是结构型模式中的另一个典型模式。桥接模式用于将类的接口与接口的实现相互解耦。这样做提高了系统的灵活性使得接口和实现两者均可独立变化。<br>举一个例子，让我们想一下家用电器及其开关。例如，风扇的开关。开关是电器的控制接口，而一旦闭合开关，实际让风扇运转的是风扇电机。<br>所以，在这个示例中，开关和风扇之间是彼此独立的。如果我们将开关接到电灯泡的供电线路上，那么我们还可以选用其他开关来控制风扇。</p>
<h4 id="模式中包括的类-6"><a href="#模式中包括的类-6" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象化对象（Abstraction）桥接设计模式的核心，并定义了关键症结所在。包含对实现化对象的引用。</li>
<li>扩充抽象化对象（RefinedAbstraction）扩展抽象化对象，并将抽象化对象细化到新的层次。对实现化对象隐藏细节元素。</li>
<li>实现化对象（Implementor）该接口比抽象化对象的层次更高。只对基本操作进行定义。</li>
<li>具体实现化对象（Concretelmplementor）通过提供具体实现来执行实现化对象的具体功能。</li>
</ul>
<h4 id="UML图-6"><a href="#UML图-6" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588760917772-e4e10a15-0c43-456e-88f2-279fdd3e2d12.png#align=left&display=inline&height=411&margin=%5Bobject%20Object%5D&name=image.png&originHeight=411&originWidth=1027&size=184618&status=done&style=none&width=1027" alt="image.png"></p>
<h4 id="功能及应用场景-6"><a href="#功能及应用场景-6" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>桥接模式主要适用于系统的多个维度上都经常发生变化的情况。桥接模式能够将不同的抽象维度进行衔接。通过桥接模式，抽象化对象和实现化对象不会在编译时进行绑定，而能够在各自的类被调用时独立扩展。<br>当你经常需要在运行时在多个实现之间进行切换时，桥接模式也非常有用。</p>
<h3 id="组合设计模式"><a href="#组合设计模式" class="headerlink" title="组合设计模式"></a>组合设计模式</h3><p>在大部分系统开发过程中，程序员都会遇到某个组件既可以是独立的个体对象，也能够作为对象集合的情况。组合模式就用于此类情况的设计。简单来说，组合模式是一组对象的集合，而这组对象中的每一个对象本身也是一个组合模式构成的对象，或者只是一个原始对象。<br>组合模式中存在着一个树形结构，并且在该结构中的分支节点和叶节点上都能够执行相同的操作。树形结构中每一个分支节点都包含子节点的类（能继承出叶节点和分支节点），这样的分支节点本身就是一个组合模式构成的节点。树形结构中的叶子节点仅是一个原始对象，其没有子节点（不能继承出叶节点和分支节点）。组合模式的子类（下一级节点）可以是叶子节点或其他组合模式。</p>
<h4 id="模式中包括的类-7"><a href="#模式中包括的类-7" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>组件对象：（Component，结构）<ul>
<li>组件对象在整个继承结构的最顶端。它是对组合模式的抽象。</li>
<li>它声明了组合模式中的对象接口。</li>
<li>可以选择性地定义一个接口，以便对递归结构中组件的父类进行访问，并在需要的时候实现该接口。</li>
</ul>
</li>
<li>叶子节点：（Leaf，原始对象）<ul>
<li>树形结构的末端且不会再有子节点。</li>
<li>定义了组合结构中单个对象的行为。</li>
</ul>
</li>
<li>分支节点类：（Composite，组）<ul>
<li>包含了子组件并为它们定义行为。</li>
<li>实现子节点的相关操作。</li>
</ul>
</li>
</ul>
<h4 id="UML图-7"><a href="#UML图-7" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588762859910-c08b6230-8358-42e8-aa48-5835af2d2940.png#align=left&display=inline&height=395&margin=%5Bobject%20Object%5D&name=image.png&originHeight=395&originWidth=1149&size=182309&status=done&style=none&width=1149" alt="image.png"></p>
<h4 id="功能及应用场景-7"><a href="#功能及应用场景-7" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>当对象的集合需要采用与单个对象相同的处理方式时。</li>
<li>操纵单个对象的方式与操纵一组对象的方式类似时。</li>
<li>注意存在能够组合的递归结构或树形结构。</li>
<li>客户端能够通过组件对象访问整个继承结构，而它们却不会知道自己所处理的是叶子节点还是分支节点。</li>
</ul>
<p>组合模式的目的是能够使独立对象（单个分支节点或叶子节点）和对象集合（子树）都能够以同样的方式组织起来。组合模式中所有的对象都来自于其本身（成为一种嵌套结构）。组合模式允许我们使用递归的方式将类似的对象组合成一种树形结构，来实现复杂结构对象的构建。</p>
<h3 id="装饰者设计模式"><a href="#装饰者设计模式" class="headerlink" title="装饰者设计模式"></a>装饰者设计模式</h3><p>装饰设计模式用来在运行时扩展或修改一个实例的功能。一般来说，继承可以扩展类的功能（用于类的所有实例）。但与继承不同的是，通过装饰模式，我们可以选择一个类的某个对象，并对其进行修改，而不会影响这个类中其他的实例。继承会直接为类增加功能，而装饰模式则会通过将对象与其他对象进行包装的方式将功能添加到类。</p>
<h4 id="模式中包括的类-8"><a href="#模式中包括的类-8" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象组件（Component）给出一个抽象接口，用于能够动态添加功能的对象。</li>
<li>具体组件（Concrete Component）定义一个实现组件接口的对象。这是实际需要加以装饰的对象，但其对装饰的过程一无所知。</li>
</ul>
<h4 id="UML图-8"><a href="#UML图-8" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588776261625-d6b2f2b2-85c7-4752-ba71-ac38f9ca639c.png#align=left&display=inline&height=529&margin=%5Bobject%20Object%5D&name=image.png&originHeight=628&originWidth=886&size=170487&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景-8"><a href="#功能及应用场景-8" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>装饰设计模式用来在运行时扩展或修改一个实例的功能。一般来说，继承可以扩展类的功能（用于类的所有实例）。但与继承不同的是，通过装饰模式，我们可以选择一个类的某个对象，并对其进行修改，而不会影响这个类中其他的实例。继承会直接为类增加功能，而装饰模式则会通过将对象与其他对象进行包装的方式将功能添加到类。</p>
<h3 id="门面设计模式"><a href="#门面设计模式" class="headerlink" title="门面设计模式"></a>门面设计模式</h3><p>许多业务流程都会涉及复杂的业务类操作。由于流程很复杂，所以其涉及了多个业务对象，这往往会导致各个类之间的紧密耦合，从而降低系统的灵活性和设计的清晰度。底层业务组件间的复杂关系会使客户端的代码编写变得很困难。<br>门面模式简化了到复杂系统的外部接口。为此它会对所有的类进行整合，并构建一个复杂系统的子系统。<br>门面模式能够将用户与系统内部复杂的细节相互屏蔽，并只为用户提供简化后的更容易使用的外部接口。同时它也将系统内部代码与接口子系统的代码相互解耦，以便修改和升级系统代码。<br>相比于其他设计模式，门面模式更注重实现代码的解耦。它所强调的是代码设计中很重要的一点，即代码抽象。通过提供一个简单的接口并隐藏其后的复杂性，从而实现抽象。<br>在这种方式下，代码的实现完全交由门面层处理。客户端只会与一个接口交互，同时也只有和这个接口交互的权限。这样就能隐藏全部系统的复杂性。总而言之，门面模式通过提供一个简单的接口为客户端简化了与复杂系统的交互。<br>从另一方面看，门面模式也保证了能够在不修改客户端代码的情况下对具体实现方法进行修改。</p>
<h4 id="模式中包括的类-9"><a href="#模式中包括的类-9" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>门面层（ Facade）：它知道子系统内各个类的具体功能，并将客户端请求转换成对系统内部对象的调用。</li>
<li>系统内部类（ ComplicatedClass）：这些类会实现系统功能，处理门面层对象分配的各项工作任务。它们本身并不知道门面层的存在，也没有对其进行任何的引用。</li>
</ul>
<h4 id="UML图-9"><a href="#UML图-9" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588776769193-d3a6ae4a-83d5-4fbf-b187-339039a22f25.png#align=left&display=inline&height=650&margin=%5Bobject%20Object%5D&name=image.png&originHeight=650&originWidth=996&size=196580&status=done&style=none&width=996" alt="image.png"></p>
<h4 id="功能及应用场景-9"><a href="#功能及应用场景-9" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>想要为一个复杂的子系统提供一个简单接口。子系统随着其自身的发展往往变得越来越复杂。它们应用的大多数的设计模式会导致类的数量更多、代码段更小。这使得该子系统可重用更好，也更容易进行自定义。而对于某些无法自定义的客户端来说，它也变得难以使用。门面层可以提供对大多数客户端来说足够好的简化的调用接口。只有极少数高度定制化的客户端需要直接调用门面层之后的底层代码。</li>
<li>在客户端和抽象层的实现类之间存在大量的依赖关系。引入一个门面层能够将客户端的子系统与其他子系统进行解耦，从而促进子系统的独立性和可移植性。</li>
<li>你想要为你的子系统增加层级。使用一个门面层对每个子系统级别分别定义一个入口点。如果子系统之间存在依赖关系，那么你可以通过令这些子系统之间的交互全部需要经由门面层来简化彼此的依赖关系。</li>
</ul>
<h3 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h3><p>根据目的不同，有各种不同类型的代理。例如，有保护性代理，控制对某个对象的访问权限；有虚拟代理，处理开销过大而难以创建的对象，并通过远程访问控制来访问远程对象。</p>
<h4 id="模式中包括的类-10"><a href="#模式中包括的类-10" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><h4 id="UML图-10"><a href="#UML图-10" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588778531181-f78a0447-263d-40cf-bbfd-dfc565997dcd.png#align=left&display=inline&height=624&margin=%5Bobject%20Object%5D&name=image.png&originHeight=624&originWidth=934&size=174488&status=done&style=none&width=934" alt="image.png"></p>
<h4 id="功能及应用场景-10"><a href="#功能及应用场景-10" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>代理模式主要用于当我们需要用一个简单对象来表示一个复杂对象的情形。如果创建对象的开销很大，那么可以推迟其创建，并使用一个简单对象来代理其功能直到必须立即创建的时候。这个简单对象就可以称为复杂对象的代理。</p>
<h3 id="享元设计模式"><a href="#享元设计模式" class="headerlink" title="享元设计模式"></a>享元设计模式</h3><p>享元模式能够减少用于创建和操作大量相似的细碎对象所花费的成本。享元模式主要用在需要创建大量类似性质的对象时。大量的对象会消耗高内存，享元模式给出了一个解决方案，即通过共享对象来减少内存负载它的具体实现则是根据对象属性将对象分成两种类型：内蕴状态和外蕴状态。<br>共享是享元模式的关键。</p>
<h4 id="模式中包括的类-11"><a href="#模式中包括的类-11" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象享元角色（ Flyweight）声明一个为具体享元角色规定了必须实现的接口，而外蕴状态就是以参数的形式通过此方法传入。</li>
<li>具体享元角色（ Concrete Flyweight）实现享元模式接口，并存储内蕴状态。具体享元角色必须是共享的。具体享元角色必须保持其内蕴状态不变，并且能够操纵外蕴状态。</li>
<li>享元工厂角色（FlyweightFactory）负责创建和管理享元角色。此外，该工厂确保了享元角色的共享。工厂维护了不同的享元对象池，并负责在对象创建完成时从对象池返回对象，以及向对象池添加对象。</li>
<li>客户端（Client）维护对所有享元对象的引用，而且需要存储和计算对应的外蕴状态。</li>
</ul>
<h4 id="UML图-11"><a href="#UML图-11" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588820461937-2a508c21-4203-4629-bcc1-ca0750f9fe84.png#align=left&display=inline&height=372&margin=%5Bobject%20Object%5D&name=image.png&originHeight=515&originWidth=1032&size=209323&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景-11"><a href="#功能及应用场景-11" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>当我们选择享元模式的时候，需要考虑以下因素：</p>
<ul>
<li>需要创建大量的对象时。</li>
<li>由于对象众多，内存的开销是一个制约因素。</li>
<li>大多数对象属性可以分为内蕴状态和外蕴状态。</li>
<li>应用程序需要使用多种对象，且创建对象后需要多次重复使用。</li>
<li>外蕴状态最好是通过计算得到的，而不需要进行存储。</li>
</ul>
<h2 id="行为型模式-1"><a href="#行为型模式-1" class="headerlink" title="行为型模式"></a>行为型模式</h2><p>行为型模式是一类主要关注对象间相互通信（交互）的设计模式。这些对象之间的相互作用既能保证对象间能够交换数据，同时对象间仍然能够保持松耦合。<br>紧耦合一般会发生在一组紧密关联（相互依赖）的类之间。在面向对象的设计过程中，耦合引用的数量和设计过程中类与类之间的相互依赖是成正比的。用通俗的话讲，就是当一个类变化的时候，有多少可能需要同时修改其他类呢？<br>松耦合是软件架构设计的关键。在行为型模式中，功能实现与调用该实现的客户端之间应该是松耦合的，以避免硬编码和依赖性。<br>行为型模式处理不同的对象之间的通信关系，为其提供基本的通信方式，并提供实现这种通信方式的最常用、最灵活的解决方案。<br>行为型模式描述的不仅是类或对象的模式，同时也包括了它们之间的通信模式。行为型模式能够用来避免硬编码和依赖性。<br><strong>行为型模式又分为以下子类别：</strong></p>
<ol>
<li>对象行为型模式：对象行为型模式使用对象组合而非继承。描述一组对象如何合作执行部分任务，而单个对象无法执行这些任务。</li>
<li>类行为型模式：类行为型模式使用继承而不是对象组合来描述算法和流程控制。</li>
</ol>
<p><strong>具体包括：</strong></p>
<ul>
<li>职责链模式（COR）：在一系列对象链之间传递请求的方法。</li>
<li>命令模式：命令模式主要用于在需要向对象发出请求的情况，发出请求的对象无须了解请求的操作内容，也无须了解请求的实际接收对象。</li>
<li>解释器模式：解释器提供了在代码中使用特定语言的一种方法。解释器模式就是一种用于在程序中解析特定语言的设计模式。</li>
<li>迭代器模式：迭代器用于顺序访问集合（组合）对象中的元素，而无须了解其内部结构。</li>
<li>中介者模式：定义简单的类间通信。</li>
<li>备忘录模式：捕获和恢复对象的内部状态。</li>
<li>观察者模式：一种通知多个类进行改变的方式。</li>
<li>状态模式：当一个对象状态改变时改变其功能。</li>
<li>策略模式：在类中进行算法封装。</li>
<li>模板方法模式：将算法中的部分步骤延迟到子类中进行计算。</li>
<li>访问者模式：在不改变类的条件下为该类定义一个新的操作。</li>
</ul>
<table>
<thead>
<tr>
<th align="center"><strong>对象行为型模式</strong></th>
<th align="center"><strong>类行为型模式</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">职责链模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">解释器模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">命令模式</td>
<td align="center">模板方法模式</td>
</tr>
<tr>
<td align="center">迭代器模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">中介者模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">备忘录模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">观察者模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">状态模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">策略模式</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">访问者模式</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="职责链设计模式"><a href="#职责链设计模式" class="headerlink" title="职责链设计模式"></a>职责链设计模式</h3><p>在职责链模式中，由发送端发送一个请求到一个对象链中，链中的对象自行处理请求。如果链中的对象决定不响应请求，它会将请求转发给链中的下一个对象。<br>职责链的目的是通过特定设计对请求的发送者和接收者之间进行解耦。解耦是软件设计中很重要的一个方面。通过该设计模式能够使我们彻底地将发送者和接收者之间完全解耦。发送者是用于调用操作的对象，接收者是接收请求并执行相关操作的对象。通过解耦，发送者不需要关心接收者的接口。<br>在职责链模式中，职责是前后传递的。对于链中的对象，决定谁来响应请求的责任由整个链中左侧的对象来承担。这就像问答测验的时候传递问题一样。当提问者向一个人提问，如果他不知道答案，他就把问题传给下一个人，以此类推。当一个人回答了问题，问题就会停止向下传递。有时，也可能到达最后一个人时，还是没有人能回答问题。<br>我们能举出若干个职责链模式的例子：硬币分拣机、ATM取款机、Servlet过滤器和Java的异常处理机制。<br>在Java中，我们可以在catch语句中列出的异常序列时就抛出一个异常，catch列表从上到下逐条扫描。如果赶上第一个进行异常处理就可以立刻完成任务，否则责任转移到下一行，直到最后一行。</p>
<h4 id="模式中包括的类-12"><a href="#模式中包括的类-12" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象处理者（Handler）：定义用于处理请求的接口。</li>
<li>具体处理者（ Concrete Handler）：它负责处理请求。如果它能够处理这样的要求就会自行处理，否则会将请求发送到下一个处理者。</li>
<li>客户端（Client）：将命令发送到职责链中第一个能够处理该请求的对象。</li>
</ul>
<h4 id="UML图-12"><a href="#UML图-12" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588839044031-1dcdb9c4-a7c0-43b0-af86-4fb919336801.png#align=left&display=inline&height=483&margin=%5Bobject%20Object%5D&name=image.png&originHeight=483&originWidth=942&size=137762&status=done&style=none&width=942" alt="image.png"></p>
<h4 id="功能及应用场景-12"><a href="#功能及应用场景-12" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>发送者并不知道在链中的哪个对象会响应请求。</li>
<li>职责链中的每一个对象都有责任决定是否对请求进行响应，如果这些对象有能力响应请求就会响应请求。</li>
<li>如果对象（或节点）决定向后传递请求它需要具有选择下一个节点和继续传递的能力。</li>
<li>也有可能没有任何一个节点能够响应请求（有些请求可能无法得到处理）</li>
<li>会在运行时确定哪些对象能够响应请求。</li>
</ul>
<h3 id="命令设计模式"><a href="#命令设计模式" class="headerlink" title="命令设计模式"></a>命令设计模式</h3><p>命令模式（也称为行动模式、业务模式）是一个对象行为型模式。<br>这使我们能够实现发送者和接收者之间完全解耦。发送者是调用操作的对象，接收者是接收请求并执行特定操作的对象。通过解耦，发送者无须了解接收者的接口。在这里，请求的含义是需要被执行的命令。</p>
<h4 id="模式中包括的类-13"><a href="#模式中包括的类-13" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象命令类（Command）：在类中对需要执行的命令接口进行声明。</li>
<li>具体命令类（ ConcreteCommand）：将接收者对象和行为之间进行绑定。它通过调用接收者中相应的操作实现 execute方法。</li>
<li>客户端（ Client）：客户端完成对命令对象的实例化并提供随后需要调用的方法的信息。</li>
<li>调用者（Invoker）：调用者决定合适的调用方法。</li>
<li>接收者（Receiver）：接收者是包含方法代码的类的一个实例。这意味着它知道如何处理一个请求并执行相应的操作。任何一个类都可以作为接收者。</li>
</ul>
<h4 id="UML图-13"><a href="#UML图-13" class="headerlink" title="UML图"></a>UML图</h4><p><strong><img src="/post/design_pattern_plus/1588841461626-35402966-4817-4f7c-bc64-7fa4dbfc6a84.png#align=left&display=inline&height=344&margin=%5Bobject%20Object%5D&name=image.png&originHeight=433&originWidth=938&size=126130&status=done&style=none&width=746" alt="image.png"></strong></p>
<h4 id="功能及应用场景-13"><a href="#功能及应用场景-13" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>通过参数化对象实现功能执行。命令是面向对象式的，而不是回调函数式的。</li>
<li>指定消息队列并在不同的时间执行请求一个命令对象可以有独立于原始请求的生命周期。如果一个请求的接收者可以由一个独立地址空间的方式来表示，那么你可以将请求对应的命令对象转换到不同的进程并在其中完成请求。</li>
<li>支持撤销。命令的执行操作可以作为状态进行存储，并在需要时实现命令撤销。命令接口必须增加一个unexecute操作，支持撤销之前命令调用的执行效果。执行的命令存储在命令的历史列表中。无限次数的撤销和重做是通过遍历这个列表并分别调用 unexecute和 execute来实现的。</li>
<li>支持日志记录变化，在系统崩溃的情况下使命令可以重新应用。通过增加load和 store操作命令接口参数，你可以保存一个持续变化的日志。从系统崩溃中恢复需要从磁盘重新加载日志命令和使用 Execute作重新执行这些命令。</li>
<li>通过在原生操作基础上的高层操作构建系统。这样的结构在支持交易操作的信息系统中很常见。一个交易事务封装一组变化的数据。命令模式提供了一种交易模型。命令都有一个共同的接口，允许你使用相同的方式调用所有的交易。这种模式也使得它很容易与新的交易系统进行交互扩展。</li>
</ul>
<p><strong>注意事项：</strong></p>
<ul>
<li><p>目的：将请求封装为一个对象，从而使客户端可以将不同的请求、队列、日志请求及其他支持撤销的操作进行参数化。</p>
</li>
<li><p>发出请求的对象无须知道请求对应的操作或请求接收者的任何信息。</p>
</li>
<li><p>后果：</p>
<ul>
<li>将调用操作的对象和执行操作的对象之间对命令进行解耦。即调用者和接收者之间解耦。</li>
<li>命令转换为一类对象。使其可以像其他对象那样进行操作和扩展。</li>
<li>我们可以将命令组合成一个组合命令。一般来说，组合命令是一个组合模式的实例。</li>
<li>很容易添加新的命令，因为我们无须改变现有的类。</li>
</ul>
</li>
</ul>
<h3 id="解释器设计模式"><a href="#解释器设计模式" class="headerlink" title="解释器设计模式"></a>解释器设计模式</h3><p>解释器模式是一种用于在程序中解析特定语法的设计模式。解释器模式是组合模式的一种应用。<br>对于特定的某种语言，解释器模式能够定义针对其语法表示形式的解释器，并实现对该语言语句的翻译和解释。</p>
<h4 id="模式中包括的类-14"><a href="#模式中包括的类-14" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>内容类（Context）：包含解释器的全局信息</li>
<li>表达式（AbstractExpression）：带有名叫 interpret抽象方法的抽象类。它会声明执行操作的接口。</li>
<li>终结符表达式（TerminalExpression）：就是带有终结符的表达式。</li>
<li>非终结符表达式（ NonterminalExpression）：在两个终结符表达式或非终结符表达式之间实现逻辑运算（与或运算）的表达式。</li>
<li>客户端（Client）：建立抽象树，并调用抽象树中的 interpret方法。</li>
</ul>
<h4 id="UML图-14"><a href="#UML图-14" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588846767979-ce72003e-375a-4eea-8d13-eed6b726aa3b.png#align=left&display=inline&height=649&margin=%5Bobject%20Object%5D&name=image.png&originHeight=649&originWidth=992&size=178099&status=done&style=none&width=992" alt="image.png"></p>
<h4 id="功能及应用场景-14"><a href="#功能及应用场景-14" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>解释器模式的适用范围非常有限。我们可以说解释器模式仅仅用于需要进行正式语法解释的地方，但这些领域往往已经有了更好的标准的解决方法，因此，在实际使用中，并不会经常使用该模式。该模式可以用于解释使用了特定语法的表达式或者建立某个简单的规则引擎的时候。</p>
<h3 id="迭代器设计模式"><a href="#迭代器设计模式" class="headerlink" title="迭代器设计模式"></a>迭代器设计模式</h3><p>迭代器模式也是一种行为型模式。迭代器模式允许对一组对象元素的遍历（也叫收集）以完成功能实现。</p>
<h4 id="模式中包括的类-15"><a href="#模式中包括的类-15" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>迭代器（Iterator）：它会实现一个用于定义迭代器的抽象迭代器接口。</li>
<li>具体迭代器（Concretel）：这是迭代器的实现（实现迭代器接口）。</li>
<li>抽象容器（Container）：这是用于定义聚合关系的接口。</li>
<li>具体容器（ConcreteContainer）：一个聚合关系的实现。</li>
</ul>
<h4 id="UML图-15"><a href="#UML图-15" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588848682603-c5da8658-bbda-4c63-9c3f-f9bc80a93299.png#align=left&display=inline&height=462&margin=%5Bobject%20Object%5D&name=image.png&originHeight=462&originWidth=816&size=135540&status=done&style=none&width=816" alt="image.png"></p>
<h4 id="功能及应用场景-15"><a href="#功能及应用场景-15" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>需要访问一个聚合（也称为容器）对象的内容，而无须了解其内部表示。-</li>
<li>支持对聚合对象的多种遍历方式。</li>
<li>为遍历不同的聚合结构提供统一的接口（即支持多态迭代）。</li>
<li>迭代器模式允许我们访问集合对象中的内容，而无须暴露其内部数据结构。</li>
<li>支持多个迭代器同时遍历集合对象。这意味着我们可以对相同的集合创建多个独立的迭代器。</li>
<li>为遍历不同的集合提供统一的接口。</li>
</ul>
<h3 id="中介者设计模式"><a href="#中介者设计模式" class="headerlink" title="中介者设计模式"></a>中介者设计模式</h3><p>中介者模式主要是关于数据交互的设计模式。中介者设计模式很容易理解，却难以实现。该模式的核心是一个中介者对象，负责协调一系列对象之间一系列不同的数据请求。这一系列对象称为同事类。<br>同事类会让中介者知道它们会发生变化这样中介者负责处理变化对不同对象之间交互的影响。</p>
<h4 id="模式中包括的类-16"><a href="#模式中包括的类-16" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>中介者接口（Mediator）：它定义了一个接口来实现同事类对象之间的沟通。</li>
<li>具体中介者（ ConcreteMediator）：它知道各个同事类，并和这些同事类保持相互引用。它实现了与同事类之间的通信和消息传递。</li>
<li>同事类（ Colleague）：这些类保存了对中介者的引用。无论它们想和任何其他同事类进行交互，都必须通过与中介类通信来实现。</li>
</ul>
<h4 id="UML图-16"><a href="#UML图-16" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588850989407-80696883-cc5d-472b-a4de-0d5f5edd4cc4.png#align=left&display=inline&height=437&margin=%5Bobject%20Object%5D&name=image.png&originHeight=437&originWidth=979&size=149617&status=done&style=none&width=979" alt="image.png"></p>
<h4 id="功能及应用场景-16"><a href="#功能及应用场景-16" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>一组对象使用了标准的通信方式，但整体通信的连接都非常复杂。由此产生的相互依赖的结果导致系统难以结构化，也很难理解。</li>
<li>由于对象之间的通信和相互引用，导致对象难以重用。</li>
<li>分布在多个类中的行为能够被统一定制化，而无须创建过多的子类。</li>
</ul>
<p><strong>需要注意的问题：</strong><br>实际使用中介者模式的时候，反而会让问题变得越来越复杂。所以最佳的实践是仅让中介者类负责对象之间的通信部分。</p>
<ul>
<li>定义一个对象来负责一系列对象之间的交互。</li>
<li>同事类发送和接收请求都需要通过中介者。</li>
</ul>
<p><strong>功能：</strong></p>
<ul>
<li>它对同事类进行解耦。中介类实现了同事类之间的松耦合。你可以相互独立地对不同的同事类进行修改和重用。</li>
<li>它简化了对象协议。中介者取代了许多交互作用，而实现了与多个同事类之间一对多的通信方式。一对多关系更容易理解、维护和扩展。</li>
<li>它集中了控制。中介者模式在中介者中集成了系统交互的复杂性。因此通过中介封装协议之后，它会比任何单一的同事类都更为复杂。这会使中介者作为一个整体也很难维护。</li>
<li>门面模式不同于中介者模式的是，它抽象了对象的子系统以提供一个更方便的接口。该种抽象是单向的。也就是说，门面对象会向子系统中的各个类发出请求，反之则不会。相比之下，中介者模式更像是同事类对象之间通过中介者的合作行为，系统的交互都是多向的。</li>
<li>当各个同事类只和一个中介者对象交互时，没有必要再去定义一个抽象的中介者类。抽象中介者只用于多个同事类通过多个抽象中介者的子类进行交互的情况，反之则不同。</li>
</ul>
<h3 id="备忘录设计模式"><a href="#备忘录设计模式" class="headerlink" title="备忘录设计模式"></a>备忘录设计模式</h3><p>我们每天至少会使用一次这种模式。备忘录模式提供了一种使对象恢复到其以前状态的能力（通过回滚撤销）。备忘录模式是通过两个对象实现的：发起者和管理者。发起者是具有内部状态的某个对象。管理者则会对发起者执行一些操作，并实现撤销更改。</p>
<h4 id="模式中包括的类-17"><a href="#模式中包括的类-17" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>发起者（Originator）：发起者知道如何保存自己。这是我们想要保存状态的类。</li>
<li>管理者（ Caretaker）：管理者是用于管理发起者进行状态保存的对象，具体处理发起者何时、如何、为何对状态进行存储。管理员应能够对发起者进行修改，同时也能够撤销这些修改。</li>
<li>备忘录（Memento）：备忘录会保存发起人的状态信息，而这些状态不能由管理者修改。</li>
</ul>
<h4 id="UML图-17"><a href="#UML图-17" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588858153516-9c6b4ce0-aa41-42c4-b4c5-ae14e7faae51.png#align=left&display=inline&height=360&margin=%5Bobject%20Object%5D&name=image.png&originHeight=360&originWidth=994&size=145133&status=done&style=none&width=994" alt="image.png"></p>
<h4 id="功能及应用场景-17"><a href="#功能及应用场景-17" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>当我们在实际应用中需要提供撤销机制，当一个对象有可能需要在后续操作中恢复其内部状态时，就需要使用备忘录模式。结合本设计模式实现对象状态序列化，能够使其易于保存对象的状态并进行状态回滚。<br>当一个对象状态的快照必须被存储，且在后续操作过程中需要被恢复时，就可以使用备忘录模式。</p>
<h3 id="观察者设计模式"><a href="#观察者设计模式" class="headerlink" title="观察者设计模式"></a>观察者设计模式</h3><p>在观察者模式中，一种叫作被观察者的对象维护了观察者对象的集合。当被观察者对象变化时，它会通知观察者。<br>在被观察者对象所维护的观察者集合中能够添加或删除观察者。被观察者的状态变化能够传递给观察者。这样观察者能够根据被观察者的状态变化做出相应的改变。</p>
<h4 id="模式中包括的类-18"><a href="#模式中包括的类-18" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>被观察者（Listener）：定义了向客户端添加和移除观察者操作的接口或抽象类。</li>
<li>具体被观察者（ ConcreteListener）：具体被观察者类。它维护了对象的状态，并在当其状态改变时通知各个观察者。</li>
<li>观察者（Observer）：定义了用于通知对象的接口或抽象类。</li>
<li>具体观察者（ ConcreteObserver）：具体实现了观察者。</li>
</ul>
<h4 id="UML图-18"><a href="#UML图-18" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588859146567-662ae183-11ae-475d-8d8d-a8549f3d4026.png#align=left&display=inline&height=431&margin=%5Bobject%20Object%5D&name=image.png&originHeight=431&originWidth=978&size=180698&status=done&style=none&width=978" alt="image.png"></p>
<h4 id="功能及应用场景-18"><a href="#功能及应用场景-18" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>当一个对象的改变需要其他对象同时改变，而我们并不知道需要有多少个对象一起改变时。</li>
<li>当一个对象必须通知其他对象，而无须了解这些对象是谁时。</li>
<li>当一个抽象包含有两个方面，其中一个依赖于另一个。将这些方面封装成独立的对象，以便我们独立改变和重复使用它们时。</li>
</ul>
<h3 id="状态设计模式"><a href="#状态设计模式" class="headerlink" title="状态设计模式"></a>状态设计模式</h3><p>状态模式是一种行为型模式。状态模式背后的理念是根据其状态变化来改变对象的行为。状态模式允许对象根据内部状态（内容类）实现不同的行为。内容类可以具有大量的内部状态，每当对内容类调用 request方法时，消息就被委托给状态类进行处理。<br>状态类接口定义了一个对所有具体状态类都有效的通用接口，并在其中封装了与特定状态相关的所有操作。具体状态类对请求提供各自具体的实现。当内容类的状态变化时，那么与之关联的具体状态类也会发生一定相应的改变。</p>
<h4 id="模式中包括的类-19"><a href="#模式中包括的类-19" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>内容类（ Context）：内容类主要用于状态模式的客户端。客户端并不直接访问对象的状态。内容类拥有一个具体的状态对象并根据其当前状态提供所需实现的行为。</li>
<li>抽象状态类（ State）：这个抽象类是所有具体状态类的基类。状态类定义了一个通用接口。内容类对象能够通过使用该接口实现对不同功能的改变。在状态类及其子类的各个条目或属性中，本身并没有任何的状态。</li>
<li>具体状态类（ ConcreteState）：具体状态类根据内容类所提供的状态实现真正的功能改变。每个状态类所提供的行为都适用于内容类对象的某一个状态。它们也包含着由内容类状态变化所下发的指令。</li>
</ul>
<h4 id="UML图-19"><a href="#UML图-19" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588860191434-2b5ff1d1-06e8-4036-8f95-0adfe7e383c1.png#align=left&display=inline&height=397&margin=%5Bobject%20Object%5D&name=image.png&originHeight=397&originWidth=1013&size=178430&status=done&style=none&width=1013" alt="image.png"></p>
<h4 id="功能及应用场景-19"><a href="#功能及应用场景-19" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><ul>
<li>状态模式为对象提供了一个清晰的状态表示。</li>
<li>它允许一个对象在运行时部分清晰明了地改变其类型。</li>
</ul>
<h3 id="策略设计模式"><a href="#策略设计模式" class="headerlink" title="策略设计模式"></a>策略设计模式</h3><p>策略模式主要用于需要使用不同的算法来处理不同的数据（对象）时。这意味着策略模式定义了一系列算法，并且使其可以替换使用。策略模式是一种可以在运行时选择算法的设计模式。<br>本模式可以使算法独立于调用算法的客户端。策略模式也称为政策模式。在使用多种不同的算法（每种算法都可以对应一个单独的类，而每个类的功能又各不相同）时可以运用策略模式。</p>
<h4 id="模式中包括的类-20"><a href="#模式中包括的类-20" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象策略类（Strategy）：定义一个所有算法都支持的通用接口。内容类会使用这个接口来调用由具体策略类定义的各个算法。</li>
<li>具体策略类（ ContreteStrategy）：每个具体策略类都会实现一个相应的算法。</li>
<li>内容类（ Context）：包含一个对策略对象的引用。它可以定义一个用于策略类访问内容类数据的接口。内容类对象包含了对将要使用的具体策略对象的引用。当需要进行特定操作时，会从对应的策略类对象中运行相应的算法。内容类本身觉察不到策略类的执行。如果有必要的话，还可以定义专用的对象来传递从内容类对象到策略类的数据。内容类对象接收来自客户端的请求，并将其委托给策略类对象。通常具体策略类是由客户端创建，并传递给内容类。从这一点来讲，客户端仅与内容类进行交互。</li>
</ul>
<h4 id="UML图-20"><a href="#UML图-20" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588861529453-aa147daa-653f-4559-b2ee-fdb0a370bf11.png#align=left&display=inline&height=426&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=1095&size=182081&status=done&style=none&width=1095" alt="image.png"></p>
<h4 id="功能及应用场景-20"><a href="#功能及应用场景-20" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>当我们有多种不同的算法可供选择（每种算法都可以对应一个单独的类，而每个类的功能又各不相同）时，可以应用策略模式。策略模式会定义一组算法并能够使其相互替代使用。</p>
<h3 id="模板方法设计模式"><a href="#模板方法设计模式" class="headerlink" title="模板方法设计模式"></a>模板方法设计模式</h3><p>模板方法会定义算法的各个执行步骤。算法的一个或多个步骤可以由子类通过重写来实现，同时保证算法的完整性并能够实现多种不同的功能。<br>类行为型模式使用继承来实现模式的功能。在模板方法模式中，会有一个方法（ Template method方法）来定义算法的各个步骤。这些步骤（即方法）的具体实现会放到子类中。也就是说，在模板方法中定义了特定算法，但该算法的具体步骤仍然需要通过子类来定义。模板方法会由一个抽象类来实现在这个抽象类中还会声明该算法的各个步骤（方法），最后将其具体实现的方法声明实现为抽象类的子类。</p>
<h4 id="模式中包括的类-21"><a href="#模式中包括的类-21" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>抽象类（ AbstractClass）：定义了算法的抽象操作，并交由具体的子类完成这些操作的具体实现。它实现了一个模板方法，它该方法包含了算法的各个步骤。该模板方法还会在抽象类中定义各个相应步骤的基本操作。</li>
<li>具体类（ ConcreteClass）：他们通过执行基本操作来实现算法类的具体步骤。当调用一个具体类时，模板方法代码会从基类执行，而模板方法所使用的各个方法由派生类实现和调用。</li>
</ul>
<h4 id="UML图-21"><a href="#UML图-21" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588862264475-f62b4542-a18a-410e-b841-96049a3f2b44.png#align=left&display=inline&height=427&margin=%5Bobject%20Object%5D&name=image.png&originHeight=561&originWidth=980&size=162268&status=done&style=none&width=746" alt="image.png"></p>
<h4 id="功能及应用场景-21"><a href="#功能及应用场景-21" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p><strong>应用场景：</strong></p>
<ul>
<li>当一个算法的功能需要能够改变，并通过在子类中对功能重写来实现这种改变。</li>
<li>当我们要避免代码重复时，能够在子类中实现算法不同的变化。</li>
<li>在一开始，模板方法可能不是一个显而易见的选择。最明显的现象会是当我们发现几乎完全一样的类在执行某些类似的逻辑。这时，我们就应该考虑使用模板方法模式来清理现有代码。</li>
</ul>
<h3 id="访问者设计模式"><a href="#访问者设计模式" class="headerlink" title="访问者设计模式"></a>访问者设计模式</h3><p>访问者模式用来简化对象相关操作的分组。这些操作是由访问者来执行的，而不是把这些代码放在被访问的类中。由于访问的操作是由访问者执行的，而不是由被访问的类，这样执行操作的代码会集中在访问者中，而不是分散在对象分组中。这为代码提供了更好的可维护性。访问者模式也避免了使用 instanceof运算符对相似的类执行计算。</p>
<h4 id="模式中包括的类-22"><a href="#模式中包括的类-22" class="headerlink" title="模式中包括的类"></a>模式中包括的类</h4><ul>
<li>访问者（ Visitor）：包括一个接口或抽象类，用于声明在所有类型的可访问对象中访问哪些操作。通常操作的名称是相同的，而是由该方法的参数来区分不同的操作。由输入对象类型来决定访问该方法中的哪一个。</li>
<li>具体访问者（ Concrete Visitor）：用于实现各个类型的访问者和各个类型的访问方法。它在抽象访问者中进行声明，并各自独立实现。每一个具体访问者会负责实现不同的功能。当定义一个新的访问者时，只需要将其传递给对象结构即可。</li>
<li>元素类（Element）：一个抽象对象用于声明所接受的操作。它是一个入口点，能够允许哪一类访问者对象访问。在集合中的每个对象都需要实现该抽象对象，以便相应访问者能够实现对其进行访问。</li>
<li>具体元素类（ Concrete Element）：这些类实现了抽象元素类的接口或类，并定义了所接受的操作。通过其可接受的操作，能够将访问者对象传递给该对象。</li>
<li>结构对象（ ObjectStruture）：这是一个包含了所有可访问对象的类。它提供了一种机制来遍历所有元素。这种结构不一定是一个集合，也可以是一个极其复杂的结构，如组合对象。</li>
</ul>
<h4 id="UML图-22"><a href="#UML图-22" class="headerlink" title="UML图"></a>UML图</h4><p><img src="/post/design_pattern_plus/1588863690354-5649da92-3741-4812-9f63-b5b7d0960238.png#align=left&display=inline&height=835&margin=%5Bobject%20Object%5D&name=image.png&originHeight=835&originWidth=1141&size=373163&status=done&style=none&width=1141" alt="image.png"></p>
<h4 id="功能及应用场景-22"><a href="#功能及应用场景-22" class="headerlink" title="功能及应用场景"></a>功能及应用场景</h4><p>在 visitCollection()方法中，我们调用 Visitable.accept(this)来实现对正确的访问者方法进行调用。这叫作双重分派。访问者调用元素类中的方法，又会回到对访问者类中进行调用。<br><strong>模式问题：</strong><br>在使用访问者模式的情况下，要想添加新的具体元素（数据结构）会更加困难。添加一个 ConcreteElement会涉及向访问者接口添加新的操作和在每一个具体访问者实现中添加对应的实现。<strong>访问者模式更适用于对象结构非常稳定，而对象的操作却需要经常变化的情况下。</strong><br>访问者模式只提供处理每种数据类型的方法，并且让数据对象确定调用哪个方法。由于数据对象本质上都知道其自身的类型，所以在访问者模式中算法决定所调用的方法所起到的作用是微不足道的。<br>因此，数据的整体处理包括对数据对象的分发以及通过对适当的访问者处理方法的二次分发。这就叫作双重分派。<br>使用访问者模式的一个主要优点是，对于在我们的数据结构中添加需要执行的新的操作来说，是非常容易的。我们所要做的就是创建一个新的访问者，并定义相应的操作。<br>访问者模式的主要问题是，因为每个访问者需要有相应的方法来处理每一种可能的具体数据，那么一旦实现了访问者模式，其具体类的数量和类型就不能被轻易改变。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo基础</title>
    <url>/post/hexo%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="hexo解析"><a href="#hexo解析" class="headerlink" title="hexo解析"></a>hexo解析</h1><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><blockquote>
<p><code>https://www.hippopx.com/zh</code>这个网站里面的图片链接可以使用</p>
</blockquote>
<p>导入时需要在md文件前面写上<code>cover: https://www.hippopx.com/zh</code> 即可。</p>
<h2 id="md语法"><a href="#md语法" class="headerlink" title="md语法"></a>md语法</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 示例文章</span><br><span class="line">date: 2023-06-01 10:00:00</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">  -</span> Hexo</span><br><span class="line"><span class="section">  - Markdown</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">这是一篇示例文章的内容。您可以在这里使用Markdown语法来编写您的文章。</span><br><span class="line"></span><br><span class="line"><span class="section"># 标题</span></span><br><span class="line"><span class="section">## 子标题</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 列表项1</span><br><span class="line"><span class="bullet">-</span> 列表项2</span><br><span class="line"></span><br><span class="line"><span class="strong">**粗体文本**</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">*斜体文本*</span></span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 引用文本</span></span><br><span class="line"></span><br><span class="line">![<span class="string">图片</span>](<span class="link">/path/to/image.jpg</span>)</span><br><span class="line"></span><br><span class="line">[<span class="string">链接文字</span>](<span class="link">https://www.example.com</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第一步-建立md文件"><a href="#第一步-建立md文件" class="headerlink" title="第一步 建立md文件"></a>第一步 建立md文件</h2><blockquote>
<p>hexo n test</p>
</blockquote>
<p>这个语句会在_post下面创建一个test.md的文件</p>
<h2 id="hexo-g"><a href="#hexo-g" class="headerlink" title="hexo g"></a>hexo g</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行命令 `hexo g` 用于生成静态文件，将您的 Hexo 博客的源文件转换为可部署的静态网页。</span><br><span class="line"></span><br><span class="line">当您运行 `hexo g` 命令时，Hexo 将处理您的 Markdown 文件、主题模板和其他配置，并生成对应的 HTML、CSS、JavaScript 等静态文件。这些文件将被生成到 Hexo 博客的默认输出目录 `public` 中。</span><br><span class="line"></span><br><span class="line">在运行 `hexo g` 后，您可以在 `public` 目录中找到生成的静态文件。这些文件可以通过将其部署到 web 服务器、托管平台或其他适当的方式进行发布。</span><br><span class="line"></span><br><span class="line">请注意，在运行 `hexo g` 之前，您需要确保已经完成了 Hexo 的初始化和配置，并且已经创建了至少一篇 Markdown 文章。</span><br><span class="line"></span><br><span class="line">如果您遇到任何问题或有其他需要帮助的事项，请随时提问。</span><br></pre></td></tr></table></figure>
<h2 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">运行命令 `hexo d` 用于将生成的静态文件部署到您指定的远程服务器或托管平台。</span><br><span class="line"></span><br><span class="line">当您运行 `hexo d` 命令时，Hexo 将根据您在配置文件（_config.yml）中设置的部署选项，将生成的静态文件上传到相应的目标位置。这可以是您的服务器、GitHub Pages、Netlify、Firebase Hosting 或其他支持静态网页托管的平台。</span><br><span class="line"></span><br><span class="line">在运行 `hexo d` 前，请确保已经在配置文件中正确设置了部署选项。您需要提供相关的认证信息、目标路径等，以便 Hexo 能够正确地将生成的文件部署到指定位置。</span><br><span class="line"></span><br><span class="line">请注意，在运行 `hexo d` 前，您需要先运行 `hexo g` 命令生成静态文件。只有在生成了静态文件后，才能进行部署操作。</span><br><span class="line"></span><br><span class="line">如果您在部署过程中遇到任何问题或需要更详细的帮助，请随时告诉我。我会尽力为您提供支持。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo基础</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo注意事项</title>
    <url>/post/hexo%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</url>
    <content><![CDATA[<h1 id="各种注意事项"><a href="#各种注意事项" class="headerlink" title="各种注意事项"></a>各种注意事项</h1><h2 id="标签要是2行"><a href="#标签要是2行" class="headerlink" title="标签要是2行"></a>标签要是2行</h2><p>例子：</p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">categories: </span><br><span class="line"><span class="code">    hexo</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo基础</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-es篇</title>
    <url>/post/gulimall-es.html</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>删掉容器，之前的数据会不会没有。<br>不会的，因为删除之前数据就保存在外部，重新映射就行</p>
<p>docker stop id<br>docker rm id<br>docker restart id</p>
<h2 id="安装es和kinana"><a href="#安装es和kinana" class="headerlink" title="安装es和kinana"></a>安装es和kinana</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.拉取镜像,es存储检索 kibana主要提供可视化的操作</span></span><br><span class="line">docker pull elasticsearch:7.4.2</span><br><span class="line">docker pull kibana:7.4.2</span><br><span class="line"></span><br><span class="line"><span class="comment">#2.创建挂载文件和配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/config</span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/elasticsearch/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#3.修改配置让es被远程连接</span></span><br><span class="line">vi /mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line">... <span class="string">&quot;http.host: 0.0.0.0&quot;</span> ...</span><br><span class="line"></span><br><span class="line"><span class="comment">#4.创建数据卷和容器</span></span><br><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.4.2 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.这时候启动还不行</span></span><br><span class="line"><span class="comment"># 递归更改权限，es需要访问</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 /mydata/elasticsearch/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动elasticsearch</span></span><br><span class="line">docker update elasticsearch --restart=always</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查方式 ip+:9200 如果有es相关信息说明启动成功</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#这个-e IP地址是虚拟机主机地址</span></span><br><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.56.10:9200 -p 5601:5601 -d kibana:7.4.2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置开机启动kibana</span></span><br><span class="line">docker update kibana  --restart=always</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[vagrant@localhost ~]$ sudo docker <span class="built_in">exec</span> -it elasticsearch /bin/bash</span><br><span class="line">[root@66718a266132 elasticsearch]<span class="comment"># pwd</span></span><br><span class="line">/usr/share/elasticsearch</span><br><span class="line">[root@66718a266132 elasticsearch]<span class="comment"># yum install wget</span></span><br><span class="line">[root@66718a266132 elasticsearch]<span class="comment"># wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.4.2/elasticsearch-analysis-ik-7.4.2.zip</span></span><br><span class="line">[root@66718a266132 elasticsearch]<span class="comment"># unzip elasticsearch-analysis-ik-7.4.2.zip -d ik</span></span><br><span class="line">[root@66718a266132 elasticsearch]<span class="comment"># mv ik plugins/</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 plugins/ik</span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure>

<h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull nginx:1.10</span><br><span class="line"><span class="comment"># 为了复制一个配置</span></span><br><span class="line">docker run -p 80:80 --name nginx -d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /mydata/nginx</span><br><span class="line">docker container <span class="built_in">cp</span> nginx:/etc/nginx .</span><br><span class="line"><span class="comment"># 然后在外部 /mydata/nginx/nginx 有了一堆文件</span></span><br><span class="line"><span class="built_in">mv</span> /mydata/nginx/nginx /mydata/nginx/conf</span><br><span class="line"><span class="comment"># 停掉nginx</span></span><br><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新的nginx</span></span><br><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /mydata/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /mydata/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意一下这个路径映射到了/usr/share/nginx/html，我们在nginx配置文件中是写/usr/share/nginx/html，不是写/mydata/nginx/html</span></span><br><span class="line">docker update nginx --restart=always</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><h2 id="nested"><a href="#nested" class="headerlink" title="nested"></a>nested</h2><p>克服扁平化处理的副作用。</p>
<h1 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h1><h1 id="Jrebel配置"><a href="#Jrebel配置" class="headerlink" title="Jrebel配置"></a>Jrebel配置</h1><p>需要在:帮助-&gt;VM进行下面配置。<br>-Drebel.base&#x3D;D:\JAVA\Jrebel<br>-Duser.home&#x3D;D:\JAVA\Jrebel</p>
<h1 id="thmleft"><a href="#thmleft" class="headerlink" title="thmleft"></a>thmleft</h1><p>页面修改实时更新</p>
<h1 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h1><p>正向：科学上网，隐藏客户端信息<br>反向：屏蔽内网信息，负载均衡访问</p>
<p>nginx 进行反向代理</p>
<p>所有来自于gulimall.com的请求，都转到商品服务。</p>
<p>查看日志<br>docker logs nginx</p>
<p>:set number  #显示行号</p>
<h1 id="nginx-反向代理成功"><a href="#nginx-反向代理成功" class="headerlink" title="nginx 反向代理成功"></a>nginx 反向代理成功</h1><p>我使用的是虚拟机部署nginx ,不是docker部署。</p>
<p>监听80端口，设置proxy_pass代理.</p>
<p>进入安装好的目录 &#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin</p>
<p>.&#x2F;nginx 启动<br>.&#x2F;nginx -s stop 快速停止<br>.&#x2F;nginx -s quit 优雅关闭，在退出前完成已经接受的连接请求<br>.&#x2F;nginx -s reload 重新加载配置</p>
<p>查看端口号：<br>netstat -ntlp</p>
<p>docker run -p 80:80 –name nginx -v &#x2F;mydata&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html -v &#x2F;mydata&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx -v &#x2F;mydata&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx -d nginx:1.10 </p>
<p>、安装nginx<br>随便启动一个 nginx 实例，只是为了复制出配置<br>docker run -p 80:80 –name nginx -d nginx:1.10</p>
<p>将容器内的配置文件拷贝到当前目录：docker container cp nginx:&#x2F;etc&#x2F;nginx .</p>
<p>别忘了后面的点</p>
<p>修改文件名称：mv nginx conf 把这个 conf 移动到&#x2F;mydata&#x2F;nginx 下</p>
<p>终止原容器：docker stop nginx</p>
<p>执行命令删除原容器：docker rm $ContainerId</p>
<p>创建新的 nginx；执行以下命令</p>
<h1 id="执行前确保上面的步骤执行了-创建了相关的配置文件-否则nginx无法启动"><a href="#执行前确保上面的步骤执行了-创建了相关的配置文件-否则nginx无法启动" class="headerlink" title="执行前确保上面的步骤执行了  创建了相关的配置文件 否则nginx无法启动"></a>执行前确保上面的步骤执行了  创建了相关的配置文件 否则nginx无法启动</h1><p>docker run -p 80:80 –name nginx <br>-v &#x2F;mydata&#x2F;nginx&#x2F;html:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html <br>-v &#x2F;mydata&#x2F;nginx&#x2F;logs:&#x2F;var&#x2F;log&#x2F;nginx <br>-v &#x2F;mydata&#x2F;nginx&#x2F;conf:&#x2F;etc&#x2F;nginx <br>-d nginx:1.10 </p>
<p>docker ID update –restart&#x3D;always</p>
<h1 id="P141-性能压测"><a href="#P141-性能压测" class="headerlink" title="P141- 性能压测"></a>P141- 性能压测</h1><h2 id="内存泄漏和并发与同步问题"><a href="#内存泄漏和并发与同步问题" class="headerlink" title="内存泄漏和并发与同步问题"></a>内存泄漏和并发与同步问题</h2><ul>
<li><p><strong>内存泄漏</strong>指的是程序在使用完内存后，没有释放它们，导致程序占用的内存越来越多，最终可能导致程序崩溃或者性能下降。</p>
</li>
<li><p><strong>并发与同步</strong>是指在多线程或多进程的程序中，如何确保不同部分的代码在资源访问上不会产生冲突，保证程序的正确性和稳定性。</p>
</li>
</ul>
<p>对于压力测试：</p>
<ol>
<li><p><strong>重复性</strong>：测试应该可以重复执行，以便确认结果的一致性。</p>
</li>
<li><p><strong>并发性</strong>：测试应该模拟多个用户或多个请求同时访问系统，以检查系统在负载下的性能表现。</p>
</li>
<li><p><strong>量级</strong>：测试应该覆盖各种量级，以确保系统在不同规模下的稳定性和性能。</p>
</li>
<li><p><strong>随机变化</strong>：通过引入随机性来模拟真实世界中的情况，以便发现系统可能存在的隐性问题。</p>
</li>
</ol>
<h2 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h2><ol>
<li><strong>响应时间（Response Time）</strong>：从发送请求到接收到响应的时间间隔。通常用毫秒（ms）或秒（s）来衡量。</li>
<li><strong>吞吐量（Throughput）</strong>：单位时间内处理的请求数量或事务数量。通常用每秒请求数（Requests Per Second，RPS）或每秒事务数（Transactions Per Second，TPS）来衡量。</li>
<li><strong>并发用户数（Concurrent Users）</strong>：同时访问系统的用户数量。对于网站或应用程序来说，这是一个重要的指标，影响着系统的性能。</li>
<li><strong>CPU 使用率（CPU Utilization）</strong>：CPU 在单位时间内被使用的百分比。高 CPU 使用率可能表示系统负载较高。</li>
<li><strong>内存使用率（Memory Utilization）</strong>：内存在单位时间内被使用的百分比。高内存使用率可能导致内存泄漏或需要优化。</li>
<li><strong>网络延迟（Network Latency）</strong>：数据在网络中传输的时间。通常用毫秒（ms）来衡量。</li>
<li><strong>错误率（Error Rate）</strong>：处理过程中出现错误的比例。这可以包括HTTP错误码、异常等。</li>
<li><strong>资源利用率（Resource Utilization）</strong>：其他硬件或软件资源（如数据库连接、磁盘I&#x2F;O）的使用情况。</li>
<li><strong>稳定性和可靠性（Stability and Reliability）</strong>：系统在一段时间内保持稳定和可靠的能力。</li>
<li><strong>容量（Capacity）</strong>：系统可以支持的最大负载或数据量。</li>
<li><strong>页面加载时间（Page Load Time）</strong>：网页从请求开始到完全加载完成的时间。</li>
<li><strong>事务成功率（Transaction Success Rate）</strong>：完成的事务中成功的比例。</li>
<li><strong>队列长度（Queue Length）</strong>：等待处理的请求或任务数量。</li>
<li><strong>数据吞吐量（Data Throughput）</strong>：单位时间内处理的数据量，通常用于数据库或存储系统。</li>
</ol>
<h2 id="P142-性能压测-压力测试-Apache-JMeter安装使用"><a href="#P142-性能压测-压力测试-Apache-JMeter安装使用" class="headerlink" title="P142 性能压测-压力测试-Apache JMeter安装使用"></a>P142 性能压测-压力测试-Apache JMeter安装使用</h2><ul>
<li>加大运行内存</li>
</ul>
<h1 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h1><p>1、有错误率同开发确认，确定是否允许错误的发生或者错误率允许在多大的范围内；<br>2、 Throughput 吞吐量每秒请求的数大于并发数，则可以慢慢的往上面增加；若在压测的机 器性能很好的情况下，出现吞吐量小于并发数，说明并发数不能再增加了，可以慢慢的 往下减，找到最佳的并发数；<br>3、压测结束，登陆相应的 web 服务器查看 CPU 等性能指标，进行数据的分析;<br>4、最大的 tps，不断的增加并发数，加到 tps 达到一定值开始出现下降，那么那个值就是 最大的 tps。<br>5、最大的并发数：最大的并发数和最大的 tps 是不同的概率，一般不断增加并发数，达到 一个值后，服务器出现请求超时，则可认为该值为最大的并发数。<br>6、压测过程出现性能瓶颈，若压力机任务管理器查看到的 cpu、网络和 cpu 都正常，未达到 90%以上，则可以说明服务器有问题，压力机没有问题。<br>7、影响性能考虑点包括： 数据库、应用程序、中间件（tomact、Nginx）、网络和操作系统等方面<br>8、首先考虑自己的应用属于 CPU 密集型还是 IO 密集型</p>
<p><code>docker stats</code> #命令可以监听dockers容器中的每一个容器的内存情况</p>
<h1 id="P144-对内存与垃圾回收"><a href="#P144-对内存与垃圾回收" class="headerlink" title="P144 对内存与垃圾回收"></a>P144 对内存与垃圾回收</h1><p><img src="/post/gulimall-es/1.jpg"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>记录的是正在执行的虚拟机字节码指令的地址，</p>
<p>此内存区域是唯一一个在JAVA虚拟机规范中没有规定任何OutOfMemoryError的区域</p>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>描述的是 JAVA 方法执行的内存模型，每个方法在执行的时候都会创建一个栈帧, 用于存储局部变量表，操作数栈，动态链接，方法接口等信息</p>
<p>局部变量表存储了编译期可知的各种基本数据类型、对象引用</p>
<p>虚拟机栈是线程隔离的，即每个线程都有自己独立的虚拟机栈</p>
<p>本地方法栈类似于虚拟机栈，只不过本地方法栈使用的是本地方法</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>几乎所有的对象实例都在堆上分配内存，所有的对象实例以及数组都要在堆上分配。堆是垃圾收集器管理的主要区域，也被称为“GC 堆”;<br>也是我们优化最多考虑的地方。 </p>
<p>分为老年代和新生代，Java8引入了元空间，替换了新生代，元空间里面存储的是整个类。</p>
<h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><p>内存不够了，存不下东西了。</p>
<h3 id="FULL-GC"><a href="#FULL-GC" class="headerlink" title="FULL GC"></a>FULL GC</h3><p>是指一种全局性的垃圾回收，它会尝试回收整个堆内存中的所有对象，包括年轻代和老年代的对象。</p>
<p>FULL GC 通常发生在以下情况下：</p>
<ol>
<li><p><strong>老年代空间不足</strong>：当老年代无法容纳新对象时，会触发一次 FULL GC，尝试回收老年代的内存。</p>
</li>
<li><p><strong>永久代或元空间空间不足</strong>：在早期的JVM版本中，当永久代（Permanent Generation）无法容纳新的类元信息时，会触发 FULL GC。在JDK 8及之后版本中，类元信息存储在元空间（Metaspace）中，FULL GC通常发生在元空间耗尽本地内存时。</p>
</li>
<li><p><strong>显式调用</strong>：程序员可以通过调用<code>System.gc()</code>或者使用诸如G1垃圾回收器的<code>jcmd</code>命令来触发 FULL GC。</p>
</li>
<li><p>**CMS回收器中的”Concurrent Mode Failure”**：在CMS（Concurrent Mark and Sweep）回收器中，如果并发标记过程中老年代空间不足，将触发 FULL GC。</p>
</li>
</ol>
<p>FULL GC 是一种代价高昂的操作，因为它会暂停整个应用程序的运行，导致停顿时间较长，可能会影响应用程序的响应性能。因此，尽管 FULL GC 是必要的，但尽量避免频繁触发 FULL GC 对于保持应用程序的稳定性和性能是很重要的。</p>
<blockquote>
<p>总结:老年代空间不足，新生代或者元空间内存不足，或者直接调用，都可以触发FGC。</p>
</blockquote>
<p><img src="/post/gulimall-es/2.jpg"></p>
<h1 id="P145-小工具说明"><a href="#P145-小工具说明" class="headerlink" title="P145 小工具说明"></a>P145 小工具说明</h1><h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>如果你的电脑，全局配置了JDK,<br>直接win+r, &gt;jconsole ,</p>
<h2 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h2><p>这个是上面的升级版</p>
<p>监控内存泄露，跟踪垃圾回收，执行时内存、cpu 分析，线程分析…</p>
<h1 id="P146-中间件指标"><a href="#P146-中间件指标" class="headerlink" title="P146 中间件指标"></a>P146 中间件指标</h1><ul>
<li>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线 程数最小值设置 50 和最大值设置 200 比较合适。</li>
<li>当前运行的 JDBC 连接数不能超过设定的最大值。一般情况下系统性能较好的情况下， JDBC 最小值设置 50 和最大值设置 200 比较合适。</li>
<li>GC频率不能频繁，特别是 FULL GC 更不能频繁，一般情况下系统性能较好的情况下，JVM 最小堆大小和最大堆大小分别设置 1024M 比较合适。</li>
</ul>
<h2 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h2><ul>
<li>SQL 耗时越小越好，一般情况下微秒级别。</li>
<li>命中率越高越好，一般情况下不能低于 95%。</li>
<li>锁等待次数越低越好，等待时间越短越好。</li>
</ul>
<h2 id="JVM-分析-amp-调优"><a href="#JVM-分析-amp-调优" class="headerlink" title="JVM 分析 &amp; 调优"></a>JVM 分析 &amp; 调优</h2><p>jvm 调优，调的是稳定，并不能带给你性能的大幅提升。服务稳定的重要性就不用多说了，保证服务的稳定，gc 永远会是 Java<br>程序员需要考虑的不稳定因素之一。复杂和高并发下的服务，必须保证每次 gc 不会出现性能下降，各种性能指标不会出现波动，gc 回收规律而且 干净，找到合适的<br>jvm 设置。Full gc 最会影响性能，根据代码问题，避免 full gc 频率。可以适当调大年轻代容量，让大对象可以在年轻代触发 yong<br>gc，调整大对象在年轻代的回收频次，尽可能保证大对象在年轻代回收，减小老年代缩短回收时间；</p>
<h2 id="优化吞吐量"><a href="#优化吞吐量" class="headerlink" title="优化吞吐量"></a>优化吞吐量</h2><ul>
<li>中间件越多，性能损失越大，大多都损失在网络交互了；</li>
<li>Db（MySQL 优化）</li>
<li>模板的渲染速度（缓存）</li>
<li>静态资源</li>
</ul>
<h2 id="nginx动静分离"><a href="#nginx动静分离" class="headerlink" title="nginx动静分离"></a>nginx动静分离</h2><p>把静态资源都放在Nginx那里,减轻服务的压力。</p>
<ul>
<li>Xmx:设置堆的最大大小</li>
<li>Xms:设置堆的初始大小</li>
<li>Xmn:设置堆的新生代大小</li>
</ul>
<h2 id="优化三级分类获取数据"><a href="#优化三级分类获取数据" class="headerlink" title="优化三级分类获取数据"></a>优化三级分类获取数据</h2><blockquote>
<p>优化前</p>
<blockquote>
<p>对二级菜单的每次遍历都需要查询数据库，浪费大量资源<br>优化后<br>仅查询一次数据库，剩下的数据通过遍历得到并封装</p>
</blockquote>
</blockquote>
<h1 id="P151-本地缓存-分布式缓存"><a href="#P151-本地缓存-分布式缓存" class="headerlink" title="P151 本地缓存-分布式缓存"></a>P151 本地缓存-分布式缓存</h1><p>在开发中，凡是放入缓存中的数据我们都应该指定过期时间，使其可以在系统即使没有主动更新数据也能自动触发数据加载进缓存的流程。避免业务崩溃导致的数据永久不一致问题。</p>
<h1 id="P153-修改三级缓存"><a href="#P153-修改三级缓存" class="headerlink" title="P153 修改三级缓存"></a>P153 修改三级缓存</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//给缓存中放JSON字符串，拿出来的JSON字符串，还用逆转为能用的额对象类型：【序列化与反序列化】</span></span><br><span class="line">    <span class="comment">//1、加入缓存逻辑，缓存中存在的数据是JSON字符串（JSON夸语言，跨平台兼容）</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">catalogJSON</span> <span class="operator">=</span> redisTemplate.opsForValue().get(<span class="string">&quot;catalogJSON&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isEmpty(catalogJSON))&#123;</span><br><span class="line">        <span class="comment">//2、缓存中没有  查询数据库</span></span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; catalogJsonFromDb = getCatalogJsonFromDb();</span><br><span class="line">        <span class="comment">//3、查到数据在放入缓存，将对象转为JSON放入缓存中</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(catalogJsonFromDb);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;catalogJSON&quot;</span>,s);</span><br><span class="line">        <span class="keyword">return</span> catalogJsonFromDb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转为我们指定的对象</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catalogJSON, <span class="keyword">new</span> <span class="title class_">TypeReference</span>&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDb</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;查询了数据库.....&quot;</span>);</span><br><span class="line">    List&lt;CategoryEntity&gt; selectList = baseMapper.selectList(<span class="literal">null</span>);</span><br><span class="line">    List&lt;CategoryEntity&gt; level1Categorys = getParent_cid(selectList, <span class="number">0L</span>);</span><br><span class="line">    <span class="comment">//2、封装数据</span></span><br><span class="line">    Map&lt;String, List&lt;Catelog2Vo&gt;&gt; parent_cid = level1Categorys.stream().collect(Collectors.toMap(k -&gt; k.getCatId().toString(), v -&gt; &#123;</span><br><span class="line">        <span class="comment">//1、每一个的一级分类，查到这个一级分类的二级分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; categoryEntities = getParent_cid(selectList, v.getCatId());</span><br><span class="line">        <span class="comment">//2、封装上面的结果</span></span><br><span class="line">        List&lt;Catelog2Vo&gt; catelog2Vos = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (categoryEntities != <span class="literal">null</span>) &#123;</span><br><span class="line">            catelog2Vos = categoryEntities.stream().map(l2 -&gt; &#123;</span><br><span class="line">                <span class="type">Catelog2Vo</span> <span class="variable">catelog2Vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catelog2Vo</span>(v.getCatId().toString(), <span class="literal">null</span>, l2.getCatId().toString(), l2.getName());</span><br><span class="line">                <span class="comment">//1、找当前二级分类的三级分类封装成vo</span></span><br><span class="line">                List&lt;CategoryEntity&gt; level3Catelog = getParent_cid(selectList, l2.getCatId());</span><br><span class="line">                <span class="keyword">if</span> (level3Catelog != <span class="literal">null</span>) &#123;</span><br><span class="line">                    List&lt;Catelog2Vo.Catelog3Vo&gt; collect = level3Catelog.stream().map(l3 -&gt; &#123;</span><br><span class="line">                        <span class="comment">//2、封装成指定格式</span></span><br><span class="line">                        Catelog2Vo.<span class="type">Catelog3Vo</span> <span class="variable">catelog3Vo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Catelog2Vo</span>.Catelog3Vo(l2.getCatId().toString(), l3.getCatId().toString(), l3.getName());</span><br><span class="line">                        <span class="keyword">return</span> catelog3Vo;</span><br><span class="line">                    &#125;).collect(Collectors.toList());</span><br><span class="line">                    catelog2Vo.setCatalog3List(collect);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> catelog2Vo;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> catelog2Vos;</span><br><span class="line">    &#125;));</span><br><span class="line">    <span class="keyword">return</span> parent_cid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="P154-内存溢出问题及其解决方案"><a href="#P154-内存溢出问题及其解决方案" class="headerlink" title="P154 内存溢出问题及其解决方案"></a>P154 内存溢出问题及其解决方案</h1><blockquote>
<p>内存溢出：OutOfDirectMemoryError</p>
</blockquote>
<p>解决方案：更换客户端</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="P155-缓存击穿-穿透-雪崩"><a href="#P155-缓存击穿-穿透-雪崩" class="headerlink" title="P155 缓存击穿-穿透-雪崩"></a>P155 缓存击穿-穿透-雪崩</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是数据库也无此记录，我们没有将这次查询的 null<br>写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。</p>
<p>在流量大时，可能 DB 就挂掉了，要是有人利用不存在的 key 频繁攻击我们的应用，这就是漏洞。</p>
<p><code>解决方案</code>：<br>缓存空结果、并且设置短的过期时间。</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>缓存雪崩是指在我们设置缓存时采用了相同的过期时间，导致缓存在某一时刻同时失效，请求全部转发到 DB，DB 瞬时压力过重雪崩。</p>
<p><code>解决方案</code>：<br>原有的失效时间基础上增加一个随机值，比如 1-5 分钟随机，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>对于一些设置了过期时间的 key，如果这些 key 可能会在某些时间点被超高并发地访问，是一种非常“热点”的数据。</p>
<p>这个时候，需要考虑一个问题：如果这个 key 在大量请求同时进来前正好失效，那么所 有对这个 key 的数据查询都落到 db，我们称为缓存击穿。</p>
<p><code>解决方案</code>：<br>加锁</p>
<h1 id="P156-加锁解决缓存击穿问题"><a href="#P156-加锁解决缓存击穿问题" class="headerlink" title="P156 加锁解决缓存击穿问题"></a>P156 加锁解决缓存击穿问题</h1><h2 id="本地锁"><a href="#本地锁" class="headerlink" title="本地锁"></a>本地锁</h2><p>使用本地锁解决缓存击穿的问题，如果是一个单体应用，我们可以用本地锁：synchronized，JUC（Lock），并且锁也是单列的，比如如果用synchronized （this）{ } 来加锁，这个this必须是单列的否则无法锁住，在分布式情况下，想要锁住所有，必须使用分布式锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从数据库查询并封装分类数据</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithLocalLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//只要是同一把锁，就能锁住需要这个锁的所有线程</span></span><br><span class="line">    <span class="comment">//1、synchronized (this)：SpringBoot所有的组件在容器中都是单例的。</span></span><br><span class="line">    <span class="comment">//TODO 本地锁：synchronized，JUC（Lock），在分布式情况下，想要锁住所有，必须使用分布式锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="comment">//得到锁以后，我们应该再去缓存中确定一次，如果没有才需要继续查询</span></span><br><span class="line">        <span class="keyword">return</span> getDataFromDb();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们在获取锁之后立马再去查询一次缓存，此时没有在去查询数据库，查询数据之后在把数据放入缓存，然后才能释放锁。</p>
<h1 id="P157-本地锁在分布式下的问题"><a href="#P157-本地锁在分布式下的问题" class="headerlink" title="P157 本地锁在分布式下的问题"></a>P157 本地锁在分布式下的问题</h1><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LockExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// synchronized 关键字用于保护临界区代码，确保只有一个线程能够进入该方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">increment</span><span class="params">()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    <span class="comment">// public synchronized void increment() &#123;</span></span><br><span class="line">    <span class="comment">//     count++;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// public synchronized int getCount() &#123;</span></span><br><span class="line">    <span class="comment">//     return count;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">LockExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LockExample</span>();</span><br><span class="line">        <span class="comment">// 创建两个线程，分别对共享资源进行操作</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                example.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                example.increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thread1.join();</span><br><span class="line">            thread2.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Final count: &quot;</span> + example.getCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>原子性</code><br>原子性是指一个操作是不可分割的单元，要么完全执行，要么完全不执行。在多线程环境中，原子性可以保证某些操作不会被中断，从而避免了竞态条件和并发问题。</p>
<p>IDEA创建三个运行实例，修改一下端口号即可，然后都跑一下，运行三个实例，然后测试，要用nginx转发网关，显然这个三个实列都会查一次。。</p>
<blockquote>
<p>本地锁，只能锁住当前进程，所以我们需要分布式锁。</p>
</blockquote>
<h1 id="P157-分布式锁原理与使用"><a href="#P157-分布式锁原理与使用" class="headerlink" title="P157 分布式锁原理与使用"></a>P157 分布式锁原理与使用</h1><p><img src="/post/gulimall-es/3-1.jpg"></p>
<blockquote>
<p>先去占位，占到就执行逻辑，占不到就等待，方法<code>自旋</code>。</p>
</blockquote>
<h2 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h2><ol>
<li>多个客户端尝试获取锁，可以同时去一个公共地方（如 Redis、数据库）占坑。</li>
<li>如果占坑成功，表示获取了锁，可以执行后续逻辑。</li>
<li>如果占坑失败，表示锁已经被其他客户端占用，等待一段时间后再次尝试。</li>
</ol>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJsonFromDbWithRedisLock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1、占分布式锁。去redis占坑</span></span><br><span class="line">    <span class="comment">//跟`setnx()`差不多</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, <span class="string">&quot;111&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb = getDataFromDb();</span><br><span class="line">        redisTemplate.delete(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> dataFromDb;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCatalogJsonFromDbwithRedisLock（）;<span class="comment">//自旋的方式、，</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><ul>
<li><p>setnx占好了位,业务代码异常或者程序在页面过程中宕机。没有执行删除锁逻辑,这就造成了死锁。</p>
<blockquote>
<p>解决: 设置锁的自动过期，即使没有删除，会自动删除。</p>
</blockquote>
</li>
<li><p>setnx设置好，正要去设置过期时间，宕机。又死锁了。</p>
<blockquote>
<p>解决:设置过期时间和占位必须是原子的。 使用setnx ex</p>
</blockquote>
</li>
<li><p>如果由于业务时间很长，锁自己过期了,我们直接删除，有可能把别人正在持有的锁删除了。</p>
<blockquote>
<p>解决:占锁的时候，值指定为uuid, 每个人匹配是自己的锁才删除。</p>
</blockquote>
</li>
<li><p>如果正好判断是当前值，正要删除锁的时候，锁已经过期,别人已经设置到了新的值。那么我们删除的是别人的锁。</p>
<blockquote>
<p>删除锁必须保证原子性。使用redis+Lua脚本完成。</p>
</blockquote>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> redis.call(<span class="string">&quot;get&quot;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>] <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&quot;del&quot;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<p>总结:保证加锁[占位+过期时间]和删除锁[判断+删除]的原子性。更难的事情,锁的自动续期。</p>
<p><code>手写代码</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; <span class="title function_">getCatalogJson</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">lock</span> <span class="operator">=</span> redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取分布式锁成功...&quot;</span>);</span><br><span class="line">        Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dataFromDb = getCatalogJsonFromDb();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">script</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">lock1</span> <span class="operator">=</span> redisTemplate.execute(<span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;Long&gt;(script, Long.class)</span><br><span class="line">                    , Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataFromDb;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取分布式锁失败...等待重试&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getCatalogJson();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="setnx-与-ex"><a href="#setnx-与-ex" class="headerlink" title="setnx 与 ex"></a>setnx 与 ex</h2><ol>
<li><code>SETNX</code>: 用于设置一个键的值，但只在该键不存在的情况下才进行设置。如果键已经存在，那么 <code>SETNX</code> 命令将不会做任何操作。</li>
<li><code>EX</code>: 用于为键设置过期时间。可以与 <code>SET</code> 命令一起使用，以设置键的值并为其设置过期时间。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET key value EX 10</span><br></pre></td></tr></table></figure></li>
</ol>
<p><code>并发与并行</code><br>并发强调多个任务能够交替执行，而并行强调多个任务同时执行。</p>
<h1 id="P161、缓存-分布式锁"><a href="#P161、缓存-分布式锁" class="headerlink" title="P161、缓存-分布式锁"></a>P161、缓存-分布式锁</h1><h2 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h2><p>当一个线程在持有锁的情况下，可以多次进入同步代码块或方法，而不会被阻塞，这个特性就叫做可重入（或递归）锁。这意味着线程可以反复地获得同一个锁，而不会因为自己已经持有锁而被阻塞。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">methodA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Entering methodA&quot;</span>);</span><br><span class="line">        methodB();</span><br><span class="line">        System.out.println(<span class="string">&quot;Exiting methodA&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">methodB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Inside methodB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="锁的续期"><a href="#锁的续期" class="headerlink" title="锁的续期"></a>锁的续期</h2><p>大家都知道，如果负责储存这个分布式锁的Redisson节点宕机以后，而且这个锁正好处于锁住的状态时，这个锁会出现锁死的状态。为了避免这种情况的发生，Redisson内<br>部提供了一个监控锁的看门狗，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。</p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>允许程序在进行某些耗时操作时不必等待操作完成，而是可以继续执行其他任务。在异步模型中，任务的执行不会阻塞程序的主线程，而是通过回调、事件处理等机制来处理任务的完成或者错误。</p>
<h2 id="看门狗"><a href="#看门狗" class="headerlink" title="看门狗()"></a>看门狗()</h2><p>自动延长锁的时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 加锁以后10秒钟自动解锁，看门狗不续命</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (res) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异步锁"><a href="#异步锁" class="headerlink" title="异步锁"></a>异步锁</h2><ol>
<li><p><code>lockAsync()</code> 方法会异步地获取锁，如果成功获取锁，返回一个 <code>Future</code> 对象，可以通过该对象来获取锁的状态。</p>
</li>
<li><p><code>lockAsync(10, TimeUnit.SECONDS)</code> 会在最多等待10秒的情况下异步获取锁，如果在指定时间内成功获取锁，也会返回一个 <code>Future</code> 对象。</p>
</li>
<li><p><code>tryLockAsync(100, 10, TimeUnit.SECONDS)</code> 会尝试在最多等待100毫秒的情况下异步获取锁，如果在指定时间内成功获取锁，也会返回一个 <code>Future</code> 对象，<code>Future</code> 的结果会是一个布尔值，表示是否成功获取锁。</p>
</li>
</ol>
<blockquote>
<p>RLock对象完全符合Java的Lock规范。也就是说只有拥有锁的进程才能解锁</p>
</blockquote>
<h1 id="P162"><a href="#P162" class="headerlink" title="P162"></a>P162</h1><h2 id="tryLock-和-lock"><a href="#tryLock-和-lock" class="headerlink" title="tryLock() 和 lock()"></a><code>tryLock()</code> 和 <code>lock()</code></h2><ol>
<li><code>tryLock()</code> 是非阻塞的，它会立即返回获取锁的结果；</li>
<li>而 <code>lock()</code> 是阻塞的，如果锁被其他线程占用，它会一直等待直到获取到锁为止。</li>
</ol>
<h2 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h2><ol>
<li><strong>读锁</strong>：允许多个线程同时获得锁并读取共享资源，但在读取期间不允许其他线程获取写锁。读锁可以提高并发读取性能，适用于读操作频繁的场景。</li>
<li><strong>写锁</strong>：只允许一个线程获得锁并对共享资源进行写操作，其他线程在此期间无法获取读锁或写锁。写锁用于保护写操作的原子性和一致性。</li>
</ol>
<p>基本案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">StringRedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保证一定能读到最新数据,修改期间，写锁是一个排他锁（互斥锁、独享锁）。读锁是一个共享锁</span></span><br><span class="line"><span class="comment">//写锁没释放读就必须等待</span></span><br><span class="line"><span class="comment">// 读 + 读： 相当于无锁，并发读，只会在redis中记录好，所有当前的读锁。他们都会同时加锁成功</span></span><br><span class="line"><span class="comment">// 写 + 读： 等待写锁释放</span></span><br><span class="line"><span class="comment">// 写 + 写： 阻塞方式</span></span><br><span class="line"><span class="comment">// 读 + 写： 有读锁。写也需要等待。</span></span><br><span class="line"><span class="comment">// 只要有写的存在，都必须等待</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">writeValue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.writeLock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1、改数据加写锁，读数据加读锁</span></span><br><span class="line">        rLock.lock();</span><br><span class="line">        System.out.println(<span class="string">&quot;写锁加锁成功...&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        s = UUID.randomUUID().toString();</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);<span class="comment">// 模仿执行服务</span></span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;<span class="comment">// 最后必跑这个语句</span></span><br><span class="line">        rLock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;写锁释放&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">readValue</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">RReadWriteLock</span> <span class="variable">lock</span> <span class="operator">=</span> redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">    <span class="comment">//ReentrantReadWriteLock writeLock = new ReentrantReadWriteLock();</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//加读锁</span></span><br><span class="line">    <span class="type">RLock</span> <span class="variable">rLock</span> <span class="operator">=</span> lock.readLock();</span><br><span class="line">    rLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;读锁加锁成功&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        s = redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        rLock.unlock();</span><br><span class="line">        System.out.println(<span class="string">&quot;读锁释放&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="P164-闭锁测试"><a href="#P164-闭锁测试" class="headerlink" title="P164 闭锁测试"></a>P164 闭锁测试</h1><h2 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 放假，锁门</span></span><br><span class="line"><span class="comment"> * 5个班全部走完，我们可以锁大门</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/lockDoor&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.trySetCount(<span class="number">5</span>);<span class="comment">// 表示5个班</span></span><br><span class="line">    door.await(); <span class="comment">//等待闭锁都完成</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;放假了...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span>&#123;</span><br><span class="line">    <span class="type">RCountDownLatch</span> <span class="variable">door</span> <span class="operator">=</span> redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">    door.countDown();<span class="comment">//这个是内部函数，调用的话，就计数减一。</span></span><br><span class="line">    <span class="keyword">return</span> id+<span class="string">&quot;班的人都走了...&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="P165-信号量测试"><a href="#P165-信号量测试" class="headerlink" title="P165 信号量测试"></a>P165 信号量测试</h1><p>可以用于限流场景，一个请求过来先获取一个信号，比如设置了1000个则1000个请求完必须先等其他的释放之后才能操作。</p>
<p>信号量为存储在redis中的一个数字，当这个数字大于0时，即可以调用acquire()方法增加数量，也可以调用release()方法减少数量，但是当调用release()之后小于0的话方法就会阻塞，直到数字大于0</p>
<p><code>RSemaphore</code> 是 Redisson 提供的分布式信号量（Semaphore）实现。</p>
<ul>
<li><code>semaphore.acquire()</code>：获取信号量，如果当前可用的信号量数量不足，则会阻塞等待直到可以获取到信号量。</li>
<li><code>semaphore.acquireAsync()</code>：异步获取信号量，如果当前可用的信号量数量不足，则会异步等待直到可以获取到信号量。</li>
<li><code>semaphore.acquire(int permits)</code>：获取指定数量的信号量，参数 <code>permits</code> 指定了需要获取的信号量数量。</li>
<li><code>semaphore.tryAcquire()</code>：尝试获取信号量，如果当前可用的信号量数量足够，则会立即返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>semaphore.tryAcquireAsync()</code>：异步尝试获取信号量，如果当前可用的信号量数量足够，则会立即返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>semaphore.tryAcquire(int permits, long waitTime, TimeUnit unit)</code>：在指定的等待时间内尝试获取信号量，如果在等待时间内能够获取到信号量，则返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>semaphore.tryAcquireAsync(int permits, long waitTime, TimeUnit unit)</code>：异步在指定的等待时间内尝试获取信号量，如果在等待时间内能够获取到信号量，则返回 <code>true</code>，否则返回 <code>false</code>。</li>
<li><code>semaphore.release(int permits)</code>：释放指定数量的信号量，参数 <code>permits</code> 指定了需要释放的信号量数量。</li>
<li><code>semaphore.release()</code>：释放一个信号量。</li>
<li><code>semaphore.releaseAsync(int permits)</code>：异步释放指定数量的信号量，参数 <code>permits</code> 指定了需要释放的信号量数量。</li>
<li><code>semaphore.releaseAsync()</code>：异步释放一个信号量。</li>
</ul>
<h1 id="P166-缓存一致性问题"><a href="#P166-缓存一致性问题" class="headerlink" title="P166 缓存一致性问题"></a>P166 缓存一致性问题</h1><blockquote>
<p>如果数据库中的某条数据，放入缓存之后，又立马被更新了，那么该如何更新缓存呢？</p>
</blockquote>
<p><code>解决方案</code></p>
<ol>
<li><p>先写缓存，再写数据库</p>
</li>
<li><p>先写数据库，再写缓存</p>
</li>
<li><p>先删缓存，再写数据库</p>
</li>
<li><p>先写数据库，再删缓存</p>
</li>
</ol>
<p>使用第四种方法。</p>
<h1 id="P167-SpringCache"><a href="#P167-SpringCache" class="headerlink" title="P167 SpringCache"></a>P167 SpringCache</h1><p>整合SpringCache简化缓存开发</p>
<ul>
<li><pre><code> 1）、引入依赖
</code></pre>
</li>
<li><pre><code>     spring-boot-starter-cache、spring-boot-starter-data-redis
</code></pre>
</li>
<li><pre><code> 2）、写配置
</code></pre>
</li>
<li><pre><code>     （1）、自动配置了哪些
</code></pre>
</li>
<li><pre><code>         CacheAuroConfiguration会导入 RedisCacheConfiguration；
</code></pre>
</li>
<li><pre><code>         自动配好了缓存管理器RedisCacheManager
</code></pre>
</li>
<li><pre><code>     （2）、配置使用redis作为缓存
</code></pre>
</li>
<li><pre><code>         spring.cache.type=redis
</code></pre>
</li>
<li><pre><code> 3）、测试使用缓存
</code></pre>
</li>
<li><pre><code>     @Cacheable: Triggers cache population.：触发将数据保存到缓存的操作
</code></pre>
</li>
<li><pre><code>     @CacheEvict: Triggers cache eviction.：触发将数据从缓存删除的操作
</code></pre>
</li>
<li><pre><code>     @CachePut: Updates the cache without interfering with the method execution.：不影响方法执行更新缓存
</code></pre>
</li>
<li><pre><code>     @Caching: Regroups multiple cache operations to be applied on a method.：组合以上多个操作
</code></pre>
</li>
<li><pre><code>     @CacheConfig: Shares some common cache-related settings at class-level.：在类级别共享缓存的相同配置
</code></pre>
</li>
<li><pre><code>     1）、开启缓存功能 @EnableCaching
</code></pre>
</li>
<li><pre><code>     2）、只需要使用注解就能完成缓存操作
</code></pre>
</li>
<li></li>
<li><pre><code> 4）、原理：
</code></pre>
</li>
<li><pre><code>     CacheAutoConfiguration -&gt;  RedisCacheConfiguration -&gt;
</code></pre>
</li>
<li><pre><code>     自动配置了RedisCacheManager-&gt;初始化所有的缓存-&gt;每个缓存决定使用什么配置
</code></pre>
</li>
<li><pre><code>     -&gt;如果redisCacheConfiguration有就用已有的，没有就用默认配置
</code></pre>
</li>
<li><pre><code>     -&gt;想改缓存的配置，只需要给容器中放一个RedisCacheConfiguration即可
</code></pre>
</li>
<li><pre><code>     -&gt;就会应用到当前RedisCacheManager管理的所有缓存分区中
</code></pre>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1、每一个需要缓存的数据我们都来指定要放到那个名字的缓存。【缓存的分区(按照业务类型分)】</span></span><br><span class="line"><span class="comment"> * 2、 <span class="doctag">@Cacheable</span>(&#123;&quot;category&quot;&#125;) 这个注解只是指定了缓存的名字（分区），并没有指定缓存的key那么就会默认的</span></span><br><span class="line"><span class="comment"> *      代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。</span></span><br><span class="line"><span class="comment"> *      如果缓存中没有，会调用方法，最后将方法的结果放入缓存</span></span><br><span class="line"><span class="comment"> * 3、默认行为</span></span><br><span class="line"><span class="comment"> *      1）、如果缓存中有，方法不用调用。</span></span><br><span class="line"><span class="comment"> *      2）、key默认自动生成；缓存的名字::SimpleKey [](自主生成的key值)</span></span><br><span class="line"><span class="comment"> *      3）、缓存的value的值。默认使用jdk序列化机制，将序列化后的数据存到redis</span></span><br><span class="line"><span class="comment"> * 4、Spring-Cache的不足；</span></span><br><span class="line"><span class="comment"> *      1）、读模式：</span></span><br><span class="line"><span class="comment"> *          缓存穿透：查询一个null数据。解决：缓存空数据；ache-null-values=true</span></span><br><span class="line"><span class="comment"> *          缓存击穿：大量并发进来同时查询一个正好过期的数据。解决：加锁；？默认是无加锁的;sync = true（加锁，解决击穿）</span></span><br><span class="line"><span class="comment"> *          缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间。：spring.cache.redis.time-to-live=3600000</span></span><br><span class="line"><span class="comment"> *      2）、写模式：（缓存与数据库一致）</span></span><br><span class="line"><span class="comment"> *          1）、读写加锁。</span></span><br><span class="line"><span class="comment"> *          2）、引入Canal，感知到MySQL的更新去更新数据库</span></span><br><span class="line"><span class="comment"> *          3）、读多写多，直接去数据库查询就行</span></span><br><span class="line"><span class="comment"> *    总结：</span></span><br><span class="line"><span class="comment"> *      常规数据（读多写少，即时性，一致性要求不高的数据）；完全可以使用Spring-Cache；写模式（只要缓存的数据有过期时间就足够了）</span></span><br><span class="line"><span class="comment"> *    原理：</span></span><br><span class="line"><span class="comment"> *      CacheManager(RedisCacheManager)-&gt;Cache(RedisCache)-&gt;Cache负责缓存的读写</span></span><br><span class="line"><span class="comment"> *  1、value = &#123;&quot;category&quot;&#125; : 相当于是一个分区</span></span><br><span class="line"><span class="comment"> *  2、key = &quot;#root.method.name&quot; 在category分区下的key为方法的名字如果指定常量为key key = &quot;‘k1’&quot;</span></span><br><span class="line"><span class="comment"> *  3、默认是无加锁的;sync = true（加锁，解决击穿  加的是本地的锁）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Cacheable(value = &#123;&quot;category&quot;&#125;,key = &quot;#root.method.name&quot;,sync = true)</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getLevel1Categorys</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    - `@Cacheable`: 表示该方法的返回值可以被缓存。</span></span><br><span class="line"><span class="comment">       - `value = &#123;&quot;category&quot;&#125;`: 指定缓存的名字为 &quot;category&quot;，这样在你的配置中可以配置关于 &quot;category&quot; 缓存的一些属性。</span></span><br><span class="line"><span class="comment">       - `key = &quot;#root.method.name&quot;`: 指定缓存的 key 为方法的名字。这意味着当调用这个方法时，使用方法的名字作为缓存的 key。</span></span><br><span class="line"><span class="comment">       - `sync = true`: 表示方法是同步的，这意味着当多个线程同时调用该方法时，只有一个线程会执行实际的方法调用，其他线程会等待缓存结果。这在防止缓存穿透时很有用。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    System.out.println(<span class="string">&quot;getLevel1Categorys.....&quot;</span>);</span><br><span class="line">    <span class="type">long</span> <span class="variable">l</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = baseMapper.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;CategoryEntity&gt;().eq(<span class="string">&quot;parent_cid&quot;</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> categoryEntities;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="P172-Spring-Cache的不足"><a href="#P172-Spring-Cache的不足" class="headerlink" title="P172 Spring-Cache的不足"></a>P172 Spring-Cache的不足</h1><p>1）、读模式：<br>    缓存穿透：查询一个null数据。解决：缓存空数据；ache-null-values&#x3D;true<br>    缓存击穿：大量并发进来同时查询一个正好过期的数据。解决：加锁；？默认是无加锁的;sync &#x3D; true（加锁，解决击穿）<br>    缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间。：spring.cache.redis.time-to-live&#x3D;3600000<br>2）、写模式：（缓存与数据库一致）<br>    1）、读写加锁。<br>    2）、引入Canal，感知到MySQL的更新去更新数据库<br>    3）、读多写多，直接去数据库查询就行</p>
<h2 id="锁-1"><a href="#锁-1" class="headerlink" title="锁"></a>锁</h2><blockquote>
<p>本地锁</p>
</blockquote>
<p>用于控制多个并发执行的线程或进程之间的访问和共享资源。</p>
<ol>
<li><p><strong>全局锁（Global Lock）</strong>：</p>
<ul>
<li>全局锁是在整个系统范围内起作用的锁，通常用于保护对全局资源的访问，例如数据库表、文件等。在分布式环境中，全局锁可能需要通过分布式锁来实现。</li>
</ul>
</li>
<li><p><strong>分布式锁（Distributed Lock）</strong>：</p>
<ul>
<li>分布式锁用于在分布式系统中控制多个节点对共享资源的访问。它能够确保在不同节点上的多个线程或进程之间的互斥访问。常见的实现方式包括基于数据库、基于缓存（如Redis）、基于ZooKeeper等。</li>
</ul>
</li>
<li><p><strong>悲观锁和乐观锁</strong>：</p>
<ul>
<li>悲观锁认为并发访问会导致数据冲突，因此在访问之前先获取锁，确保只有一个线程或进程能够访问。乐观锁则假设并发访问不会导致冲突，但在更新时会检查是否发生了冲突。</li>
</ul>
</li>
<li><p><strong>读写锁（Read-Write Lock）</strong>：</p>
<ul>
<li>读写锁允许多个线程同时读取共享资源，但只允许一个线程写入共享资源。这样可以提高读操作的并发性。</li>
</ul>
</li>
<li><p><strong>自旋锁（Spin Lock）</strong>：</p>
<ul>
<li>自旋锁是一种忙等待锁，在尝试获取锁时，如果锁被占用，线程会一直循环等待直到锁被释放。适用于短时间内锁被占用的情况。</li>
</ul>
</li>
<li><p><strong>公平锁和非公平锁</strong>：</p>
<ul>
<li>公平锁会按照线程请求锁的顺序依次获取，保证线程的公平性。非公平锁则不考虑等待队列的顺序，有可能会导致某些线程一直获取不到锁。</li>
</ul>
</li>
<li><p><strong>CAS（Compare and Swap）</strong>：</p>
<ul>
<li>CAS 是一种乐观锁的实现方式，通过比较当前内存中的值和期望值是否相等，如果相等则进行更新。它是一种基于硬件的原子操作，常用于实现非阻塞算法。</li>
</ul>
</li>
<li><p><strong>可重入锁（Reentrant Lock）</strong>：</p>
<ul>
<li>可重入锁允许一个线程在持有锁的情况下再次获取锁，避免死锁情况。</li>
</ul>
</li>
<li><p><strong>读写锁（Reentrant ReadWriteLock）</strong>：</p>
<ul>
<li>读写锁包括读锁和写锁，允许多个线程同时读取共享资源，但只允许一个线程写入共享资源。</li>
</ul>
</li>
<li><p><strong>偏向锁、轻量级锁和重量级锁</strong>：</p>
<ul>
<li>这是JVM对对象锁的优化实现。偏向锁会假设锁一直是被单一线程访问的，如果多次访问，则会升级为轻量级锁，再次竞争失败会升级为重量级锁。</li>
</ul>
</li>
</ol>
<p>这些锁都有各自的应用场景和特点，根据实际情况选择合适的锁机制是非常重要的。</p>
<h1 id="bug日志"><a href="#bug日志" class="headerlink" title="bug日志"></a>bug日志</h1><p>8-25日，8：20,es配置好了，卡了10天。</p>
<p>9-25日，开始学习谷粒商城，从P139开始学习，目前遇到的困难是:nginx 搞不明白。</p>
]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>es</tag>
      </tags>
  </entry>
  <entry>
    <title>面试计划</title>
    <url>/post/interview-plan.html</url>
    <content><![CDATA[<h1 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h1><p><a href="https://javaguide.cn/javaguide/use-suggestion.html">JavaGuide</a></p>
<p><a href="https://github.com/wolverinn/Waking-Up/blob/master/Design%20Pattern.md">字节大佬的面试基础总结</a></p>
<p><a href="https://juejin.cn/post/6844904125721772039#heading-70">稀土掘金</a></p>
<p>瑞吉外卖-&gt;谷粒商城</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo进阶</title>
    <url>/post/hexo%E8%BF%9B%E9%98%B6.html</url>
    <content><![CDATA[<h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><p>hexo server</p>
<h1 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h1><p>hexo new a</p>
<h1 id="新建草稿"><a href="#新建草稿" class="headerlink" title="新建草稿"></a>新建草稿</h1><p>hexo new draft b</p>
<h1 id="发布草稿成为文章"><a href="#发布草稿成为文章" class="headerlink" title="发布草稿成为文章"></a>发布草稿成为文章</h1><p>hexo publish b</p>
<h1 id="发布关于"><a href="#发布关于" class="headerlink" title="发布关于"></a>发布关于</h1><p>hexo new page c</p>
<h1 id="生成静态文章"><a href="#生成静态文章" class="headerlink" title="生成静态文章"></a>生成静态文章</h1><p>hexo generate 或者是 hexo g</p>
<h1 id="部署文章"><a href="#部署文章" class="headerlink" title="部署文章"></a>部署文章</h1><p>hexo deploy 或者是 hexo d</p>
<h1 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">实现步骤</span><br><span class="line">第一步：修改项目根目录下的_config.yml文件参数post_asset_folder值为true。</span><br><span class="line"></span><br><span class="line"># 开始使用本地静态资源</span><br><span class="line">post_asset_folder: true</span><br><span class="line">复制</span><br><span class="line">第二步：安装插件hexo-asset-image。</span><br><span class="line"></span><br><span class="line"># 在项目根目录下执行</span><br><span class="line">npm install https://github.com/xcodebuild/hexo-asset-image.git --save</span><br><span class="line">复制</span><br><span class="line">完成上述配置后，在使用命令hexo new post新建文章时，将会在source/_posts目录下创建一个与文章同名的目录。</span><br><span class="line"></span><br><span class="line">hexo new post &quot;测试文章&quot;</span><br><span class="line">复制</span><br><span class="line">|____scaffolds</span><br><span class="line">|____source</span><br><span class="line">| |_____posts</span><br><span class="line">| | |____测试文章.md</span><br><span class="line">| | |____测试文章 # 与文章同名的目录，用于保存在文章中引入的本地图片资源</span><br><span class="line">|____themes</span><br><span class="line">复制</span><br><span class="line">如上，新建“测试文章.md”时，将会在_posts目录下创建同名文件夹“测试文章”，在“测试文章.md”文件中需要引入的图片文件只要放在目录“测试文章”下即可。</span><br><span class="line"> 图片引用方式：</span><br><span class="line"></span><br><span class="line"># 引用图片的时候一定要带上目录名称作为路径</span><br><span class="line">![本地图片](测试文章/本地图片.jpg)</span><br><span class="line"></span><br><span class="line">使用该方式引用的图片既可以在本地预览，正式发布之后也能正常显示。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo进阶</tag>
      </tags>
  </entry>
  <entry>
    <title>java10</title>
    <url>/post/java10.html</url>
    <content><![CDATA[<h1 id="Java-8-新特性"><a href="#Java-8-新特性" class="headerlink" title="Java 8 新特性"></a>Java 8 新特性</h1><h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><p>Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">addition</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a + b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用类型声明</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">subtraction</span> <span class="operator">=</span> (a, b) -&gt; a - b;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 大括号中的返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">multiplication</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; &#123; <span class="keyword">return</span> a * b; &#125;;</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 没有大括号及返回语句</span></span><br><span class="line">      <span class="type">MathOperation</span> <span class="variable">division</span> <span class="operator">=</span> (<span class="type">int</span> a, <span class="type">int</span> b) -&gt; a / b;</span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;10 + 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, addition));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 - 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, subtraction));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 x 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, multiplication));</span><br><span class="line">      System.out.println(<span class="string">&quot;10 / 5 = &quot;</span> + tester.operate(<span class="number">10</span>, <span class="number">5</span>, division));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 不用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService1</span> <span class="operator">=</span> message -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 用括号</span></span><br><span class="line">      <span class="type">GreetingService</span> <span class="variable">greetService2</span> <span class="operator">=</span> (message) -&gt;</span><br><span class="line">      System.out.println(<span class="string">&quot;Hello &quot;</span> + message);</span><br><span class="line">        </span><br><span class="line">      greetService1.sayMessage(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">      greetService2.sayMessage(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">MathOperation</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="title function_">operation</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">interface</span> <span class="title class_">GreetingService</span> &#123;</span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> <span class="title function_">operate</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, MathOperation mathOperation)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> mathOperation.operation(a, b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><p>函数式接口(Functional Interface)就是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">GreetingService</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sayMessage</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数式接口实例"><a href="#函数式接口实例" class="headerlink" title="函数式接口实例"></a>函数式接口实例</h1><p><code>Predicate &lt;T&gt; </code>接口是一个函数式接口，它接受一个输入参数 T，返回一个布尔值结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate = n -&gt; true</span></span><br><span class="line">      <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">      <span class="comment">// n 如果存在则 test 方法返回 true</span></span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;输出所有数据:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt;<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate1 = n -&gt; n%2 == 0</span></span><br><span class="line">      <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">      <span class="comment">// 如果 n%2 为 0 test 方法返回 true</span></span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;输出所有偶数:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n%<span class="number">2</span> == <span class="number">0</span> );</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Predicate&lt;Integer&gt; predicate2 = n -&gt; n &gt; 3</span></span><br><span class="line">      <span class="comment">// n 是一个参数传递到 Predicate 接口的 test 方法</span></span><br><span class="line">      <span class="comment">// 如果 n 大于 3 test 方法返回 true</span></span><br><span class="line">      System.out.println(<span class="string">&quot;输出大于 3 的所有数字:&quot;</span>);</span><br><span class="line">      eval(list, n-&gt; n &gt; <span class="number">3</span> );</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eval</span><span class="params">(List&lt;Integer&gt; list, Predicate&lt;Integer&gt; predicate)</span> &#123;</span><br><span class="line">      <span class="keyword">for</span>(Integer n: list) &#123;</span><br><span class="line">        </span><br><span class="line">         <span class="keyword">if</span>(predicate.test(n)) &#123;</span><br><span class="line">            System.out.println(n + <span class="string">&quot; &quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h1><p>可以让你以一种声明的方式处理数据。<br>Stream 使用一种类似用 SQL 语句从数据库查询数据的直观方式来提供一种对 Java 集合运算和表达的高阶抽象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">生成流</span><br><span class="line">在 Java <span class="number">8</span> 中, 集合接口有两个方法来生成流：</span><br><span class="line"></span><br><span class="line">stream() − 为集合创建串行流。</span><br><span class="line"></span><br><span class="line">parallelStream() − 为集合创建并行流。</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line">forEach</span><br><span class="line">Stream 提供了新的方法 <span class="string">&#x27;forEach&#x27;</span> 来迭代流中的每个数据。以下代码片段使用 forEach 输出了<span class="number">10</span>个随机数：</span><br><span class="line"></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">map</span><br><span class="line">map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">// 获取对应的平方数</span></span><br><span class="line">List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());</span><br><span class="line">filter</span><br><span class="line">filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</span><br><span class="line"></span><br><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"><span class="comment">// 获取空字符串的数量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> strings.stream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">limit</span><br><span class="line">limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 <span class="number">10</span> 条数据：</span><br><span class="line"></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).forEach(System.out::println);</span><br><span class="line">sorted</span><br><span class="line">sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 <span class="number">10</span> 个随机数进行排序：</span><br><span class="line"></span><br><span class="line"><span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">random.ints().limit(<span class="number">10</span>).sorted().forEach(System.out::println);</span><br><span class="line">并行（parallel）程序</span><br><span class="line">parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line"><span class="comment">// 获取空字符串的数量</span></span><br><span class="line"><span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> strings.parallelStream().filter(string -&gt; string.isEmpty()).count();</span><br><span class="line">我们可以很容易的在顺序运行和并行直接切换。</span><br><span class="line"></span><br><span class="line">Collectors</span><br><span class="line">Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</span><br><span class="line"></span><br><span class="line">List&lt;String&gt;strings = Arrays.asList(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;bc&quot;</span>, <span class="string">&quot;efg&quot;</span>, <span class="string">&quot;abcd&quot;</span>,<span class="string">&quot;&quot;</span>, <span class="string">&quot;jkl&quot;</span>);</span><br><span class="line">List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;筛选列表: &quot;</span> + filtered);</span><br><span class="line"><span class="type">String</span> <span class="variable">mergedString</span> <span class="operator">=</span> strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="string">&quot;, &quot;</span>));</span><br><span class="line">System.out.println(<span class="string">&quot;合并字符串: &quot;</span> + mergedString);</span><br><span class="line">统计</span><br><span class="line">另外，一些产生统计结果的收集器也非常有用。它们主要用于<span class="type">int</span>、<span class="type">double</span>、<span class="type">long</span>等基本类型上，它们可以用来产生类似如下的统计结果。</span><br><span class="line"></span><br><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"> </span><br><span class="line"><span class="type">IntSummaryStatistics</span> <span class="variable">stats</span> <span class="operator">=</span> numbers.stream().mapToInt((x) -&gt; x).summaryStatistics();</span><br><span class="line"> </span><br><span class="line">System.out.println(<span class="string">&quot;列表中最大的数 : &quot;</span> + stats.getMax());</span><br><span class="line">System.out.println(<span class="string">&quot;列表中最小的数 : &quot;</span> + stats.getMin());</span><br><span class="line">System.out.println(<span class="string">&quot;所有数之和 : &quot;</span> + stats.getSum());</span><br><span class="line">System.out.println(<span class="string">&quot;平均数 : &quot;</span> + stats.getAverage());</span><br></pre></td></tr></table></figure>



<h1 id="Optional-类"><a href="#Optional-类" class="headerlink" title="Optional 类"></a>Optional 类</h1><p>Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。<br>Optional 类的引入很好的解决空指针异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">   </span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">java8Tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.ofNullable - 允许传递为 null 参数</span></span><br><span class="line">      Optional&lt;Integer&gt; a = Optional.ofNullable(value1);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.of - 如果传递的参数是 null，抛出异常 NullPointerException</span></span><br><span class="line">      Optional&lt;Integer&gt; b = Optional.of(value2);</span><br><span class="line">      System.out.println(java8Tester.sum(a,b));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">sum</span><span class="params">(Optional&lt;Integer&gt; a, Optional&lt;Integer&gt; b)</span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// Optional.isPresent - 判断值是否存在</span></span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;第一个参数值存在: &quot;</span> + a.isPresent());</span><br><span class="line">      System.out.println(<span class="string">&quot;第二个参数值存在: &quot;</span> + b.isPresent());</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// Optional.orElse - 如果值存在，返回它，否则返回默认值</span></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value1</span> <span class="operator">=</span> a.orElse(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">0</span>));</span><br><span class="line">        </span><br><span class="line">      <span class="comment">//Optional.get - 获取值，值需要存在</span></span><br><span class="line">      <span class="type">Integer</span> <span class="variable">value2</span> <span class="operator">=</span> b.get();</span><br><span class="line">      <span class="keyword">return</span> value1 + value2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="日期时间-API"><a href="#日期时间-API" class="headerlink" title="日期时间 API"></a>日期时间 API</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalTime;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.Month;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Java8Tester</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Java8Tester</span> <span class="variable">java8tester</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Java8Tester</span>();</span><br><span class="line">      java8tester.testLocalDateTime();</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testLocalDateTime</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 获取当前的日期时间</span></span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">currentTime</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间: &quot;</span> + currentTime);</span><br><span class="line">        </span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date1</span> <span class="operator">=</span> currentTime.toLocalDate();</span><br><span class="line">      System.out.println(<span class="string">&quot;date1: &quot;</span> + date1);</span><br><span class="line">        </span><br><span class="line">      <span class="type">Month</span> <span class="variable">month</span> <span class="operator">=</span> currentTime.getMonth();</span><br><span class="line">      <span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> currentTime.getDayOfMonth();</span><br><span class="line">      <span class="type">int</span> <span class="variable">seconds</span> <span class="operator">=</span> currentTime.getSecond();</span><br><span class="line">        </span><br><span class="line">      System.out.println(<span class="string">&quot;月: &quot;</span> + month +<span class="string">&quot;, 日: &quot;</span> + day +<span class="string">&quot;, 秒: &quot;</span> + seconds);</span><br><span class="line">        </span><br><span class="line">      <span class="type">LocalDateTime</span> <span class="variable">date2</span> <span class="operator">=</span> currentTime.withDayOfMonth(<span class="number">10</span>).withYear(<span class="number">2012</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;date2: &quot;</span> + date2);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 12 december 2014</span></span><br><span class="line">      <span class="type">LocalDate</span> <span class="variable">date3</span> <span class="operator">=</span> LocalDate.of(<span class="number">2014</span>, Month.DECEMBER, <span class="number">12</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;date3: &quot;</span> + date3);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 22 小时 15 分钟</span></span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">date4</span> <span class="operator">=</span> LocalTime.of(<span class="number">22</span>, <span class="number">15</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;date4: &quot;</span> + date4);</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 解析字符串</span></span><br><span class="line">      <span class="type">LocalTime</span> <span class="variable">date5</span> <span class="operator">=</span> LocalTime.parse(<span class="string">&quot;20:15:30&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;date5: &quot;</span> + date5);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="MySQL-连接"><a href="#MySQL-连接" class="headerlink" title="MySQL 连接"></a>MySQL 连接</h1><h1 id="Java实例"><a href="#Java实例" class="headerlink" title="Java实例"></a>Java实例</h1><p><a href="https://www.runoob.com/java/java-examples.html">一百多个Java实例</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第十阶段-一念永恒</tag>
      </tags>
  </entry>
  <entry>
    <title>java2</title>
    <url>/post/java2.html</url>
    <content><![CDATA[<h1 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h1><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;James&quot;</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> name <span class="keyword">instanceof</span> String; <span class="comment">// 由于 name 是 String 类型，所以返回真</span></span><br></pre></td></tr></table></figure>

<p><strong><code>基础运算跳过</code></strong></p>
<h1 id="Java-Math-类"><a href="#Java-Math-类" class="headerlink" title="Java Math 类"></a>Java Math 类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String []args)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class="number">0</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class="number">3</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;1的反正切值： &quot;</span> + Math.atan(<span class="number">1</span>));  </span><br><span class="line">        System.out.println(<span class="string">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));  </span><br><span class="line">        System.out.println(Math.PI);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><code> xxxValue() 方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; </span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">      <span class="comment">// 返回 byte 原生数据类型</span></span><br><span class="line">      System.out.println( x.byteValue() );</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 返回 double 原生数据类型</span></span><br><span class="line">      System.out.println(x.doubleValue());</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 返回 long 原生数据类型</span></span><br><span class="line">      System.out.println( x.longValue() );      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code> compareTo() 方法</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123; </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">3</span>));</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">5</span>));</span><br><span class="line">      System.out.println(x.compareTo(<span class="number">8</span>));            </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果指定的数与参数相等返回 <span class="number">0</span>。</span><br><span class="line"></span><br><span class="line">如果指定的数小于参数返回 -<span class="number">1</span>。</span><br><span class="line"></span><br><span class="line">如果指定的数大于参数返回 <span class="number">1</span>。</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">z</span> <span class="operator">=</span><span class="number">5</span>;</span><br><span class="line">                <span class="type">Short</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(x.equals(y));  </span><br><span class="line">                System.out.println(x.equals(z));</span><br><span class="line">                System.out.println(x.equals(a));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span>Integer.valueOf(<span class="number">9</span>);</span><br><span class="line">                <span class="type">Double</span> <span class="variable">c</span> <span class="operator">=</span> Double.valueOf(<span class="number">5</span>);</span><br><span class="line">                <span class="type">Float</span> <span class="variable">a</span> <span class="operator">=</span> Float.valueOf(<span class="string">&quot;80&quot;</span>);              </span><br><span class="line"></span><br><span class="line">                <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;444&quot;</span>,<span class="number">16</span>);   <span class="comment">// 使用 16 进制</span></span><br><span class="line"></span><br><span class="line">                System.out.println(x);</span><br><span class="line">                System.out.println(c);</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(x.toString());  </span><br><span class="line">        System.out.println(Integer.toString(<span class="number">12</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span>Integer.parseInt(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">        <span class="type">double</span> <span class="variable">c</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;444&quot;</span>,<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(x);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">11.635</span>;</span><br><span class="line">        <span class="type">double</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">2.76</span>;</span><br><span class="line"></span><br><span class="line">        System.out.printf(<span class="string">&quot;e 的值为 %.4f%n&quot;</span>, Math.E);</span><br><span class="line">        System.out.printf(<span class="string">&quot;pow(%.3f, %.3f) 为 %.3f%n&quot;</span>, x, y, Math.pow(x, y));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        System.out.println( Math.random() );</span><br><span class="line">        System.out.println( Math.random() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.runoob.com/java/java-number.html">具体函数点击这里</a></p>
<h1 id="Java-Character-类"><a href="#Java-Character-类" class="headerlink" title="Java Character 类"></a>Java Character 类</h1><table>
<thead>
<tr>
<th>项目</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td>&#39;</td>
<td align="right">在文中该处插入单引号</td>
</tr>
<tr>
<td>&quot;</td>
<td align="right">在文中该处插入双引号</td>
</tr>
<tr>
<td>\</td>
<td align="right">在文中该处插入反斜杠</td>
</tr>
</tbody></table>
<blockquote>
<p>1	isLetter()<br>    是否是一个字母<br>    2	isDigit()<br>    是否是一个数字字符<br>    3	isWhitespace()<br>    是否是一个空白字符<br>    4	isUpperCase()<br>    是否是大写字母<br>    5	isLowerCase()<br>    是否是小写字母<br>    6	toUpperCase()<br>    指定字母的大写形式<br>    7	toLowerCase()<br>    指定字母的小写形式<br>    8	toString()<br>    返回字符的字符串形式，字符串的长度仅为1</p>
</blockquote>
<h1 id="Java-String-类"><a href="#Java-String-类" class="headerlink" title="Java String 类"></a>Java String 类</h1><p>String 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;Runoob&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;Runoob&quot;</span>;              <span class="comment">// String 直接创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> s1;                    <span class="comment">// 相同引用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Runoob&quot;</span>);   <span class="comment">// String 对象创建</span></span><br><span class="line"><span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Runoob&quot;</span>);   <span class="comment">// String 对象创建</span></span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-string-1-2020-12-01.png" alt="图片"></p>
<ul>
<li>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</li>
<li>如果需要对字符串做很多修改，那么应该选择使用 StringBuffer &amp; StringBuilder 类。</li>
</ul>
<p>使用’+’操作符来连接字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;     </span><br><span class="line">        <span class="type">String</span> <span class="variable">string1</span> <span class="operator">=</span> <span class="string">&quot;菜鸟教程网址：&quot;</span>;     </span><br><span class="line">        System.out.println(<span class="string">&quot;1、&quot;</span> + string1 + <span class="string">&quot;www.runoob.com&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.printf(<span class="string">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class="line">                  <span class="string">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>


<blockquote>
<p>1	char charAt(int index)<br>返回指定索引处的 char 值。<br>2	int compareTo(Object o)<br>把这个字符串和另一个对象比较。<br>3	int compareTo(String anotherString)<br>按字典顺序比较两个字符串。<br>4	int compareToIgnoreCase(String str)<br>按字典顺序比较两个字符串，不考虑大小写。<br>5	String concat(String str)<br>将指定字符串连接到此字符串的结尾。<br>6	boolean contentEquals(StringBuffer sb)<br>当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真。<br>7	static String copyValueOf(char[] data)<br>返回指定数组中表示该字符序列的 String。<br>8	static String copyValueOf(char[] data, int offset, int count)<br>返回指定数组中表示该字符序列的 String。<br>9	boolean endsWith(String suffix)<br>测试此字符串是否以指定的后缀结束。<br>10	boolean equals(Object anObject)<br>将此字符串与指定的对象比较。<br>11	boolean equalsIgnoreCase(String anotherString)<br>将此 String 与另一个 String 比较，不考虑大小写。<br>12	byte[] getBytes()<br> 使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>13	byte[] getBytes(String charsetName)<br>使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。<br>14	void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)<br>将字符从此字符串复制到目标字符数组。<br>15	int hashCode()<br>返回此字符串的哈希码。<br>16	int indexOf(int ch)<br>返回指定字符在此字符串中第一次出现处的索引。<br>17	int indexOf(int ch, int fromIndex)<br>返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索。<br>18	int indexOf(String str)<br> 返回指定子字符串在此字符串中第一次出现处的索引。<br>19	int indexOf(String str, int fromIndex)<br>返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始。<br>20	String intern()<br> 返回字符串对象的规范化表示形式。<br>21	int lastIndexOf(int ch)<br> 返回指定字符在此字符串中最后一次出现处的索引。<br>22	int lastIndexOf(int ch, int fromIndex)<br>返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索。<br>23	int lastIndexOf(String str)<br>返回指定子字符串在此字符串中最右边出现处的索引。<br>24	int lastIndexOf(String str, int fromIndex)<br> 返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。<br>25	int length()<br>返回此字符串的长度。<br>26	boolean matches(String regex)<br>告知此字符串是否匹配给定的正则表达式。<br>27	boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len)<br>测试两个字符串区域是否相等。<br>28	boolean regionMatches(int toffset, String other, int ooffset, int len)<br>测试两个字符串区域是否相等。<br>29	String replace(char oldChar, char newChar)<br>返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。<br>30	String replaceAll(String regex, String replacement)<br>使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。<br>31	String replaceFirst(String regex, String replacement)<br> 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。<br>32	String[] split(String regex)<br>根据给定正则表达式的匹配拆分此字符串。<br>33	String[] split(String regex, int limit)<br>根据匹配给定的正则表达式来拆分此字符串。<br>34	boolean startsWith(String prefix)<br>测试此字符串是否以指定的前缀开始。<br>35	boolean startsWith(String prefix, int toffset)<br>测试此字符串从指定索引开始的子字符串是否以指定前缀开始。<br>36	CharSequence subSequence(int beginIndex, int endIndex)<br> 返回一个新的字符序列，它是此序列的一个子序列。<br>37	String substring(int beginIndex)<br>返回一个新的字符串，它是此字符串的一个子字符串。<br>38	String substring(int beginIndex, int endIndex)<br>返回一个新字符串，它是此字符串的一个子字符串。<br>39	char[] toCharArray()<br>将此字符串转换为一个新的字符数组。<br>40	String toLowerCase()<br>使用默认语言环境的规则将此 String 中的所有字符都转换为小写。<br>41	String toLowerCase(Locale locale)<br> 使用给定 Locale 的规则将此 String 中的所有字符都转换为小写。<br>42	String toString()<br> 返回此对象本身（它已经是一个字符串！）。<br>43	String toUpperCase()<br>使用默认语言环境的规则将此 String 中的所有字符都转换为大写。<br>44	String toUpperCase(Locale locale)<br>使用给定 Locale 的规则将此 String 中的所有字符都转换为大写。<br>45	String trim()<br>返回字符串的副本，忽略前导空白和尾部空白。<br>46	static String valueOf(primitive data type x)<br>返回给定data type类型x参数的字符串表示形式。<br>47	contains(CharSequence chars)<br>判断是否包含指定的字符系列。<br>48	isEmpty()<br>判断字符串是否为空。</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第二阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>java3</title>
    <url>/post/java3.html</url>
    <content><![CDATA[<h1 id="StringBuffer-和-StringBuilder-类"><a href="#StringBuffer-和-StringBuilder-类" class="headerlink" title="StringBuffer 和 StringBuilder 类"></a>StringBuffer 和 StringBuilder 类</h1><p>你需要考虑线程安全，那么使用 StringBuffer 是比较安全的选择。否则，你可以使用 StringBuilder，因为它的性能更好。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">10</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;Runoob..&quot;</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">        sb.append(<span class="string">&quot;!&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.insert(<span class="number">8</span>, <span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(sb); </span><br><span class="line">        sb.delete(<span class="number">5</span>,<span class="number">8</span>);</span><br><span class="line">        System.out.println(sb);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/2021-03-01-java-stringbuffer.svg" alt="图像"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>	<span class="keyword">public</span> StringBuffer <span class="title function_">append</span><span class="params">(String s)</span></span><br><span class="line">将指定的字符串追加到此字符序列。</span><br><span class="line"><span class="number">2</span>	<span class="keyword">public</span> StringBuffer <span class="title function_">reverse</span><span class="params">()</span></span><br><span class="line"> 将此字符序列用其反转形式取代。</span><br><span class="line"><span class="number">3</span>	<span class="keyword">public</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">移除此序列的子字符串中的字符。</span><br><span class="line"><span class="number">4</span>	<span class="keyword">public</span> <span class="title function_">insert</span><span class="params">(<span class="type">int</span> offset, <span class="type">int</span> i)</span></span><br><span class="line">将 <span class="type">int</span> 参数的字符串表示形式插入此序列中。</span><br><span class="line"><span class="number">5</span>	insert(<span class="type">int</span> offset, String str)</span><br><span class="line">将 str 参数的字符串插入此序列中。</span><br><span class="line"><span class="number">6</span>	replace(<span class="type">int</span> start, <span class="type">int</span> end, String str)</span><br><span class="line">使用给定 String 中的字符替换此序列的子字符串中的字符。</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>	<span class="type">int</span> <span class="title function_">capacity</span><span class="params">()</span></span><br><span class="line">返回当前容量。</span><br><span class="line"><span class="number">2</span>	<span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span></span><br><span class="line">返回此序列中指定索引处的 <span class="type">char</span> 值。</span><br><span class="line"><span class="number">3</span>	<span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">(<span class="type">int</span> minimumCapacity)</span></span><br><span class="line">确保容量至少等于指定的最小值。</span><br><span class="line"><span class="number">4</span>	<span class="keyword">void</span> <span class="title function_">getChars</span><span class="params">(<span class="type">int</span> srcBegin, <span class="type">int</span> srcEnd, <span class="type">char</span>[] dst, <span class="type">int</span> dstBegin)</span></span><br><span class="line">将字符从此序列复制到目标字符数组 dst。</span><br><span class="line"><span class="number">5</span>	<span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str)</span></span><br><span class="line">返回第一次出现的指定子字符串在该字符串中的索引。</span><br><span class="line"><span class="number">6</span>	<span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str, <span class="type">int</span> fromIndex)</span></span><br><span class="line">从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</span><br><span class="line"><span class="number">7</span>	<span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(String str)</span></span><br><span class="line">返回最右边出现的指定子字符串在此字符串中的索引。</span><br><span class="line"><span class="number">8</span>	<span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(String str, <span class="type">int</span> fromIndex)</span></span><br><span class="line">返回 String 对象中子字符串最后出现的位置。</span><br><span class="line"><span class="number">9</span>	<span class="type">int</span> <span class="title function_">length</span><span class="params">()</span></span><br><span class="line"> 返回长度（字符数）。</span><br><span class="line"><span class="number">10</span>	<span class="keyword">void</span> <span class="title function_">setCharAt</span><span class="params">(<span class="type">int</span> index, <span class="type">char</span> ch)</span></span><br><span class="line">将给定索引处的字符设置为 ch。</span><br><span class="line"><span class="number">11</span>	<span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">int</span> newLength)</span></span><br><span class="line">设置字符序列的长度。</span><br><span class="line"><span class="number">12</span>	CharSequence <span class="title function_">subSequence</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">返回一个新的字符序列，该字符序列是此序列的子序列。</span><br><span class="line"><span class="number">13</span>	String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> start)</span></span><br><span class="line">返回一个新的 String，它包含此字符序列当前所包含的字符子序列。</span><br><span class="line"><span class="number">14</span>	String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span></span><br><span class="line">返回一个新的 String，它包含此序列当前所包含的字符子序列。</span><br><span class="line"><span class="number">15</span>	String <span class="title function_">toString</span><span class="params">()</span></span><br><span class="line">返回此序列中数据的字符串表示形式</span><br></pre></td></tr></table></figure>

<h1 id="Java-数组"><a href="#Java-数组" class="headerlink" title="Java 数组"></a>Java 数组</h1><h2 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar;   <span class="comment">// 首选的方法</span></span><br><span class="line"><span class="comment">// 数组变量的声明，和创建数组可以用一条语句完成</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> <span class="title class_">dataType</span>[arraySize];</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 数组大小</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      <span class="comment">// 定义数组</span></span><br><span class="line">      <span class="type">double</span>[] myList = <span class="keyword">new</span> <span class="title class_">double</span>[size];</span><br><span class="line">      myList[<span class="number">0</span>] = <span class="number">5.6</span>;</span><br><span class="line">      myList[<span class="number">1</span>] = <span class="number">4.5</span>;</span><br><span class="line">      myList[<span class="number">2</span>] = <span class="number">3.3</span>;</span><br><span class="line">      myList[<span class="number">3</span>] = <span class="number">13.2</span>;</span><br><span class="line">      myList[<span class="number">4</span>] = <span class="number">4.0</span>;</span><br><span class="line">      myList[<span class="number">5</span>] = <span class="number">34.33</span>;</span><br><span class="line">      myList[<span class="number">6</span>] = <span class="number">34.0</span>;</span><br><span class="line">      myList[<span class="number">7</span>] = <span class="number">45.45</span>;</span><br><span class="line">      myList[<span class="number">8</span>] = <span class="number">99.993</span>;</span><br><span class="line">      myList[<span class="number">9</span>] = <span class="number">11123</span>;</span><br><span class="line">      <span class="comment">// 计算所有元素的总和</span></span><br><span class="line">      <span class="type">double</span> <span class="variable">total</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;总和为： &quot;</span> + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="For-Each-循环"><a href="#For-Each-循环" class="headerlink" title="For-Each 循环"></a>For-Each 循环</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestArray</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">double</span>[] myList = &#123;<span class="number">1.9</span>, <span class="number">2.9</span>, <span class="number">3.4</span>, <span class="number">3.5</span>&#125;;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 打印所有数组元素</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">double</span> element: myList) &#123;</span><br><span class="line">         System.out.println(element);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="数组作为函数的参数"><a href="#数组作为函数的参数" class="headerlink" title="数组作为函数的参数"></a>数组作为函数的参数</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.print(array[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##数组作为函数的返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] reverse(<span class="type">int</span>[] list) &#123;</span><br><span class="line">  <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[list.length];</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = result.length - <span class="number">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class="line">    result[j] = list[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">String[][] s = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>][];</span><br><span class="line">s[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">2</span>];</span><br><span class="line">s[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">3</span>];</span><br><span class="line">s[<span class="number">0</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Good&quot;</span>);</span><br><span class="line">s[<span class="number">0</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;Luck&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;to&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;you&quot;</span>);</span><br><span class="line">s[<span class="number">1</span>][<span class="number">2</span>] = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>

<h1 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h1><ul>
<li>1	public static int binarySearch(Object[] a, Object key)<br>用二分查找算法在给定数组中搜索给定值的对象(Byte,Int,double等)。数组在调用前必须排序好的。如果查找值包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。</li>
<li>2	public static boolean equals(long[] a, long[] a2)<br>如果两个指定的 long 型数组彼此相等，则返回 true。如果两个数组包含相同数量的元素，并且两个数组中的所有相应元素对都是相等的，则认为这两个数组是相等的。换句话说，如果两个数组以相同顺序包含相同的元素，则两个数组是相等的。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</li>
<li>3	public static void fill(int[] a, int val)<br>将指定的 int 值分配给指定 int 型数组指定范围中的每个元素。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</li>
<li>4	public static void sort(Object[] a)<br>对指定对象数组根据其元素的自然顺序进行升序排列。同样的方法适用于所有的其他基本数据类型（Byte，short，Int等）。</li>
</ul>
<hr>
<h1 id="Java-日期时间"><a href="#Java-日期时间" class="headerlink" title="Java 日期时间"></a>Java 日期时间</h1><blockquote>
<p>序号	方法和描述<br>1	boolean after(Date date)<br>若当调用此方法的Date对象在指定日期之后返回true,否则返回false。<br>2	boolean before(Date date)<br>若当调用此方法的Date对象在指定日期之前返回true,否则返回false。<br>3	Object clone( )<br>返回此对象的副本。<br>4	int compareTo(Date date)<br>比较当调用此方法的Date对象和指定日期。两者相等时候返回0。调用对象在指定日期之前则返回负数。调用对象在指定日期之后则返回正数。<br>5	int compareTo(Object obj)<br>若obj是Date类型则操作等同于compareTo(Date) 。否则它抛出ClassCastException。<br>6	boolean equals(Object date)<br>当调用此方法的Date对象和指定日期相等时候返回true,否则返回false。<br>7	long getTime( )<br>返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。<br>8	int hashCode( )<br> 返回此对象的哈希码值。<br>9	void setTime(long time)<br>用自1970年1月1日00:00:00 GMT以后time毫秒数设置时间和日期。<br>10	String toString( )<br>把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)。</p>
</blockquote>
<h2 id="使用-SimpleDateFormat-格式化日期"><a href="#使用-SimpleDateFormat-格式化日期" class="headerlink" title="使用 SimpleDateFormat 格式化日期"></a>使用 SimpleDateFormat 格式化日期</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.text.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Date</span> <span class="variable">dNow</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>( );</span><br><span class="line">      <span class="comment">//注意:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</span></span><br><span class="line">      <span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span> (<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="print输出例子"><a href="#print输出例子" class="headerlink" title="print输出例子"></a>print输出例子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">     <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">     <span class="comment">//c的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class="line">    <span class="comment">//f的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//d的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//r的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//t的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class="line">    <span class="comment">//R的使用  </span></span><br><span class="line">    System.out.printf(<span class="string">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p>
</blockquote>
<ul>
<li>索引必须紧跟在%后面，而且必须以$结束。例如：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">// 初始化 Date 对象</span></span><br><span class="line">       <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">       <span class="comment">// 使用toString()显示日期和时间</span></span><br><span class="line">       <span class="comment">////%1$s  代表输出字符串&quot;Due date:&quot;  ，， 后面的就是分割字符 代表月，日，年；</span></span><br><span class="line">       System.out.printf(<span class="string">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, </span><br><span class="line">                         <span class="string">&quot;Due date:&quot;</span>, date);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="解析字符串为时间"><a href="#解析字符串为时间" class="headerlink" title="解析字符串为时间"></a>解析字符串为时间</h3><blockquote>
<p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">ft</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span> (<span class="string">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">    t = ft.parse(input); </span><br><span class="line">    System.out.println(t); </span><br><span class="line">&#125; <span class="keyword">catch</span> (ParseException e) &#123; </span><br><span class="line">    System.out.println(<span class="string">&quot;Unparseable using &quot;</span> + ft); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Java-休眠-sleep"><a href="#Java-休眠-sleep" class="headerlink" title="Java 休眠(sleep)"></a>Java 休眠(sleep)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SleepDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123; </span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>( ) + <span class="string">&quot;\n&quot;</span>); </span><br><span class="line">         Thread.sleep(<span class="number">1000</span>*<span class="number">3</span>);   <span class="comment">// 休眠3秒</span></span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>( ) + <span class="string">&quot;\n&quot;</span>); </span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123; </span><br><span class="line">          System.out.println(<span class="string">&quot;Got an exception!&quot;</span>); </span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="测量时间"><a href="#测量时间" class="headerlink" title="测量时间"></a>测量时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiffDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis( );</span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>( ) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">         Thread.sleep(<span class="number">5</span>*<span class="number">60</span>*<span class="number">10</span>);</span><br><span class="line">         System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>( ) + <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">         <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis( );</span><br><span class="line">         <span class="type">long</span> <span class="variable">diff</span> <span class="operator">=</span> end - start;</span><br><span class="line">         System.out.println(<span class="string">&quot;Difference is : &quot;</span> + diff);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Got an exception!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Calendar</span> <span class="variable">c1</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line"><span class="comment">// 获得年份</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> c1.get(Calendar.YEAR);</span><br><span class="line"><span class="comment">// 获得月份</span></span><br><span class="line"><span class="type">int</span> <span class="variable">month</span> <span class="operator">=</span> c1.get(Calendar.MONTH) + <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 获得日期</span></span><br><span class="line"><span class="type">int</span> <span class="variable">date</span> <span class="operator">=</span> c1.get(Calendar.DATE);</span><br><span class="line"><span class="comment">// 获得小时</span></span><br><span class="line"><span class="type">int</span> <span class="variable">hour</span> <span class="operator">=</span> c1.get(Calendar.HOUR_OF_DAY);</span><br><span class="line"><span class="comment">// 获得分钟</span></span><br><span class="line"><span class="type">int</span> <span class="variable">minute</span> <span class="operator">=</span> c1.get(Calendar.MINUTE);</span><br><span class="line"><span class="comment">// 获得秒</span></span><br><span class="line"><span class="type">int</span> <span class="variable">second</span> <span class="operator">=</span> c1.get(Calendar.SECOND);</span><br><span class="line"><span class="comment">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class="line"><span class="type">int</span> <span class="variable">day</span> <span class="operator">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>














]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第三阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>java4</title>
    <url>/post/java4.html</url>
    <content><![CDATA[<h1 id="Java-正则表达式"><a href="#Java-正则表达式" class="headerlink" title="Java 正则表达式"></a>Java 正则表达式</h1><table>
<thead>
<tr>
<th>正则表达式</th>
<th align="right">描述</th>
</tr>
</thead>
<tbody><tr>
<td>this is text</td>
<td align="right">匹配字符串 “this is text”</td>
</tr>
<tr>
<td>this\s+is\s+text</td>
<td align="right">注意字符串中的 \s+。</td>
</tr>
<tr>
<td></td>
<td align="right">匹配单词 “this” 后面的 \s+ 可以匹配多个空格，之后匹配 is</td>
</tr>
<tr>
<td></td>
<td align="right">可以匹配这个实例：this is text</td>
</tr>
<tr>
<td>^\d+(.\d+)?</td>
<td align="right">^ 定义了以什么开始</td>
</tr>
<tr>
<td></td>
<td align="right">\d+ 匹配一个或多个数字</td>
</tr>
<tr>
<td></td>
<td align="right">? 设置括号内的选项是可选的</td>
</tr>
<tr>
<td></td>
<td align="right">. 匹配 “.”</td>
</tr>
<tr>
<td></td>
<td align="right">可以匹配的实例：”5”, “1.5” 和 “2.21”。</td>
</tr>
</tbody></table>
<blockquote>
<p>以下实例中使用了正则表达式 .<em>runoob.</em> 用于查找字符串中是否包了 runoob 子串：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.*;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RegexExample1</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="string">&quot;I am noob &quot;</span> +<span class="string">&quot;from runoob.com.&quot;</span>;</span><br><span class="line">      <span class="type">String</span> <span class="variable">pattern</span> <span class="operator">=</span> <span class="string">&quot;.*runoob.*&quot;</span>;</span><br><span class="line">      <span class="type">boolean</span> <span class="variable">isMatch</span> <span class="operator">=</span> Pattern.matches(pattern, content);</span><br><span class="line">      System.out.println(<span class="string">&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot;</span> + isMatch);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="捕获组"><a href="#捕获组" class="headerlink" title="捕获组"></a>捕获组</h1><blockquote>
<p><strong>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</strong></p>
</blockquote>
<p><code>有点麻烦，暂时不写</code></p>
<h1 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h1><blockquote>
<p>System.out.print(“\“);    &#x2F;&#x2F; 输出为 <br>   System.out.print(“\\“);  &#x2F;&#x2F; 输出为 \</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">符号`\`</span><br><span class="line"></span><br><span class="line"> &gt; 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如， n匹配字符 n。\n 匹配换行符。序列 \\\\ 匹配 \\ ，\\( 匹配 (。</span><br><span class="line"></span><br><span class="line">^</span><br><span class="line">匹配输入字符串开始的位置。</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">匹配输入字符串结尾的位置。</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">零次或多次匹配前面的字符或子表达式。例如，zo* 匹配<span class="string">&quot;z&quot;</span>和<span class="string">&quot;zoo&quot;</span>。* 等效于 &#123;<span class="number">0</span>,&#125;。</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">一次或多次匹配前面的字符或子表达式。例如，<span class="string">&quot;zo+&quot;</span>与<span class="string">&quot;zo&quot;</span>和<span class="string">&quot;zoo&quot;</span>匹配，但与<span class="string">&quot;z&quot;</span>不匹配。+ 等效于 &#123;<span class="number">1</span>,&#125;。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">零次或一次匹配前面的字符或子表达式。例如，<span class="string">&quot;do(es)?&quot;</span>匹配<span class="string">&quot;do&quot;</span>或<span class="string">&quot;does&quot;</span>中的<span class="string">&quot;do&quot;</span>。? 等效于 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;。</span><br><span class="line"></span><br><span class="line">&#123;n&#125;</span><br><span class="line">n 是非负整数。正好匹配 n 次。例如，<span class="string">&quot;o&#123;2&#125;&quot;</span>与<span class="string">&quot;Bob&quot;</span>中的<span class="string">&quot;o&quot;</span>不匹配，但与<span class="string">&quot;food&quot;</span>中的两个<span class="string">&quot;o&quot;</span>匹配。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">当此字符紧随任何其他限定符（*、+、?、&#123;n&#125;、&#123;n,&#125;、&#123;n,m&#125;）之后时，匹配模式是<span class="string">&quot;非贪心的&quot;</span>。<span class="string">&quot;非贪心的&quot;</span>模式匹配搜索到的、尽可能短的字符串，而默认的<span class="string">&quot;贪心的&quot;</span>模式匹配搜索到的、尽可能长的字符串。例如，在字符串<span class="string">&quot;oooo&quot;</span>中，<span class="string">&quot;o+?&quot;</span>只匹配单个<span class="string">&quot;o&quot;</span>，而<span class="string">&quot;o+&quot;</span>匹配所有<span class="string">&quot;o&quot;</span>。</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">匹配除<span class="string">&quot;\r\n&quot;</span>之外的任何单个字符。</span><br><span class="line"></span><br><span class="line">x|y</span><br><span class="line">匹配 x 或 y。例如，<span class="string">&#x27;z|food&#x27;</span> 匹配<span class="string">&quot;z&quot;</span>或<span class="string">&quot;food&quot;</span>。<span class="string">&#x27;(z|f)ood&#x27;</span> 匹配<span class="string">&quot;zood&quot;</span>或<span class="string">&quot;food&quot;</span>。</span><br><span class="line"></span><br><span class="line">[xyz]</span><br><span class="line">字符集。匹配包含的任一字符。例如，<span class="string">&quot;[abc]&quot;</span>匹配<span class="string">&quot;plain&quot;</span>中的<span class="string">&quot;a&quot;</span>。</span><br><span class="line"></span><br><span class="line">[^xyz]</span><br><span class="line">反向字符集。匹配未包含的任何字符。例如，<span class="string">&quot;[^abc]&quot;</span>匹配<span class="string">&quot;plain&quot;</span>中<span class="string">&quot;p&quot;</span>，<span class="string">&quot;l&quot;</span>，<span class="string">&quot;i&quot;</span>，<span class="string">&quot;n&quot;</span>。</span><br><span class="line"></span><br><span class="line">[a-z]</span><br><span class="line">字符范围。匹配指定范围内的任何字符。例如，<span class="string">&quot;[a-z]&quot;</span>匹配<span class="string">&quot;a&quot;</span>到<span class="string">&quot;z&quot;</span>范围内的任何小写字母。</span><br><span class="line"></span><br><span class="line">[^a-z]</span><br><span class="line">反向范围字符。匹配不在指定的范围内的任何字符。例如，<span class="string">&quot;[^a-z]&quot;</span>匹配任何不在<span class="string">&quot;a&quot;</span>到<span class="string">&quot;z&quot;</span>范围内的任何字符。</span><br><span class="line"></span><br><span class="line">\d</span><br><span class="line">数字字符匹配。等效于 [<span class="number">0</span>-<span class="number">9</span>]。</span><br><span class="line"></span><br><span class="line">\D</span><br><span class="line">非数字字符匹配。等效于 [^<span class="number">0</span>-<span class="number">9</span>]。</span><br><span class="line"></span><br><span class="line">\s</span><br><span class="line">匹配任何空白字符，包括空格、制表符、换页符等。与 [ \f\n\r\t\v] 等效。</span><br><span class="line"></span><br><span class="line">\S</span><br><span class="line">匹配任何非空白字符。与 [^ \f\n\r\t\v] 等效。</span><br><span class="line"></span><br><span class="line">\w</span><br><span class="line">匹配任何字类字符，包括下划线。与<span class="string">&quot;[A-Za-z0-9_]&quot;</span>等效。</span><br><span class="line"></span><br><span class="line">\W</span><br><span class="line">与任何非单词字符匹配。与<span class="string">&quot;[^A-Za-z0-9_]&quot;</span>等效。</span><br></pre></td></tr></table></figure>


<h1 id="Matcher-类的方法"><a href="#Matcher-类的方法" class="headerlink" title="Matcher 类的方法"></a>Matcher 类的方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexMatches</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;\\bcat\\b&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span></span><br><span class="line">                                    <span class="string">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span>&#123;</span><br><span class="line">       <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);</span><br><span class="line">       <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(INPUT); <span class="comment">// 获取 matcher 对象</span></span><br><span class="line">       <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">       <span class="keyword">while</span>(m.find()) &#123;</span><br><span class="line">         count++;</span><br><span class="line">         System.out.println(<span class="string">&quot;Match number &quot;</span>+count);</span><br><span class="line">         System.out.println(<span class="string">&quot;start(): &quot;</span>+m.start());</span><br><span class="line">         System.out.println(<span class="string">&quot;end(): &quot;</span>+m.end());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Match number 1<br>    start(): 0<br>    end(): 3<br>    Match number 2<br>    start(): 4<br>    end(): 7<br>    Match number 3<br>    start(): 8<br>    end(): 11<br>    Match number 4<br>    start(): 19<br>    end(): 22</p>
</blockquote>
<h2 id="matches-和-lookingAt-方法"><a href="#matches-和-lookingAt-方法" class="headerlink" title="matches 和 lookingAt 方法"></a>matches 和 lookingAt 方法</h2><blockquote>
<p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。<br>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexMatches</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INPUT2</span> <span class="operator">=</span> <span class="string">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Pattern pattern;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Matcher matcher;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Matcher matcher2;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span>&#123;</span><br><span class="line">       pattern = Pattern.compile(REGEX);</span><br><span class="line">       matcher = pattern.matcher(INPUT);</span><br><span class="line">       matcher2 = pattern.matcher(INPUT2);</span><br><span class="line"> </span><br><span class="line">       System.out.println(<span class="string">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class="line">       System.out.println(<span class="string">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class="line">       System.out.println(<span class="string">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       System.out.println(<span class="string">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class="line">       System.out.println(<span class="string">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class="line">       System.out.println(<span class="string">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>Current REGEX is: foo<br>    Current INPUT is: fooooooooooooooooo<br>    Current INPUT2 is: ooooofoooooooooooo<br>    lookingAt(): true<br>    matches(): false<br>    lookingAt(): false</p>
</blockquote>
<h2 id="replaceFirst-和-replaceAll-方法"><a href="#replaceFirst-和-replaceAll-方法" class="headerlink" title="replaceFirst 和 replaceAll 方法"></a>replaceFirst 和 replaceAll 方法</h2><blockquote>
<p>replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexMatches</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;dog&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;The dog says meow. &quot;</span> +</span><br><span class="line">                                    <span class="string">&quot;All dogs say meow.&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REPLACE</span> <span class="operator">=</span> <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);</span><br><span class="line">       <span class="comment">// get a matcher object</span></span><br><span class="line">       <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(INPUT); </span><br><span class="line">       INPUT = m.replaceAll(REPLACE);</span><br><span class="line">       System.out.println(INPUT);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>The cat says meow. All cats say meow.</p>
</blockquote>
<h2 id="appendReplacement-和-appendTail-方法"><a href="#appendReplacement-和-appendTail-方法" class="headerlink" title="appendReplacement 和 appendTail 方法"></a>appendReplacement 和 appendTail 方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexMatches</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REGEX</span> <span class="operator">=</span> <span class="string">&quot;a*b&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">INPUT</span> <span class="operator">=</span> <span class="string">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">REPLACE</span> <span class="operator">=</span> <span class="string">&quot;-&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(REGEX);</span><br><span class="line">      <span class="comment">// 获取 matcher 对象</span></span><br><span class="line">      <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(INPUT);</span><br><span class="line">      <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">      <span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">         m.appendReplacement(sb,REPLACE);</span><br><span class="line">      &#125;</span><br><span class="line">      m.appendTail(sb);</span><br><span class="line">      System.out.println(sb.toString());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="PatternSyntaxException-类的方法"><a href="#PatternSyntaxException-类的方法" class="headerlink" title="PatternSyntaxException 类的方法"></a>PatternSyntaxException 类的方法</h2><p><code>不学</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第四阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>java1</title>
    <url>/post/java1.html</url>
    <content><![CDATA[<h1 id="Java-基础语法"><a href="#Java-基础语法" class="headerlink" title="Java 基础语法"></a>Java 基础语法</h1><ul>
<li>对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>
<li>类：类是一个模板，它描述一类对象的行为和状态。</li>
<li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>
<li>实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="图像"></p>
<ul>
<li>类名：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 MyFirstJavaClass 。</li>
<li>方法名：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>
</ul>
<h1 id="Java-变量"><a href="#Java-变量" class="headerlink" title="Java 变量"></a>Java 变量</h1><ul>
<li>局部变量</li>
<li>类变量（静态变量）</li>
<li>成员变量（非静态变量）</li>
</ul>
<h1 id="Java-对象和类"><a href="#Java-对象和类" class="headerlink" title="Java 对象和类"></a>Java 对象和类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    String breed;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    String colour;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">name</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，<code>方法结束后，变量就会自动销毁</code>。</li>
<li>成员变量：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>
<li>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</li>
</ul>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Puppy</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Puppy</span><span class="params">(String name)</span>&#123;</span><br><span class="line">      <span class="comment">//这个构造器仅有一个参数：name</span></span><br><span class="line">      System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">      <span class="comment">// 下面的语句将创建一个Puppy对象</span></span><br><span class="line">      <span class="type">Puppy</span> <span class="variable">myPuppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Puppy</span>( <span class="string">&quot;tommy&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-基本数据类型"><a href="#Java-基本数据类型" class="headerlink" title="Java 基本数据类型"></a>Java 基本数据类型</h1><p>$byte$</p>
<ul>
<li>数据类型是8位、有符号的，以二进制补码表 示的整数；</li>
<li>最小值是 -128（-2^7）；</li>
<li>最大值是 127（2^7-1）；</li>
<li>默认值是 0；</li>
</ul>
<p>$short$</p>
<blockquote>
<p>short 数据类型是 16 位、有符号的以二进制补码表示的整数</p>
</blockquote>
<p>$boolean$</p>
<p>$char$</p>
<h1 id="Java-常量"><a href="#Java-常量" class="headerlink" title="Java 常量"></a>Java 常量</h1><ul>
<li>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</li>
</ul>
<blockquote>
<p>final double PI &#x3D; 3.1415927;</p>
</blockquote>
<h1 id="Java-变量类型"><a href="#Java-变量类型" class="headerlink" title="Java 变量类型"></a>Java 变量类型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Variable</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> allClicks=<span class="number">0</span>;    <span class="comment">// 类变量</span></span><br><span class="line"> </span><br><span class="line">    String str=<span class="string">&quot;hello world&quot;</span>;  <span class="comment">// 实例变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;  <span class="comment">// 局部变量</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h2><blockquote>
<p>类变量被声明为 public static final 类型时，类变量名称一般建议使用大写字母。如果静态变量不是 public 和 final 类型，其命名方式与实例变量以及局部变量的命名方式一致</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="comment">//salary是静态的私有变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="comment">// DEPARTMENT是一个常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEPARTMENT</span> <span class="operator">=</span> <span class="string">&quot;开发人员&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    salary = <span class="number">10000</span>;</span><br><span class="line">        System.out.println(DEPARTMENT+<span class="string">&quot;平均工资:&quot;</span>+salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-修饰符"><a href="#Java-修饰符" class="headerlink" title="Java 修饰符"></a>Java 修饰符</h1><ul>
<li>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 public static final,而接口里的方法默认情况下访问权限为 public。</li>
</ul>
<blockquote>
<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>
</blockquote>
<hr>
<ul>
<li><p>protected 可以修饰数据成员，构造方法，方法成员，不能修饰类（内部类除外）。</p>
</li>
<li><p>接口及接口的成员变量和成员方法不能声明为 protected。 可以看看下图演示：</p>
</li>
</ul>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-protected.gif" alt="图像"></p>
<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量<br>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">openSpeaker</span><span class="params">(Speaker sp)</span> &#123;</span><br><span class="line">      <span class="comment">// 实现细节</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StreamingAudioPlayer</span> <span class="keyword">extends</span> <span class="title class_">AudioPlayer</span> &#123;</span><br><span class="line">   <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">openSpeaker</span><span class="params">(Speaker sp)</span> &#123;</span><br><span class="line">      <span class="comment">// 实现细节</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="static-修饰符"><a href="#static-修饰符" class="headerlink" title="static 修饰符"></a>static 修饰符</h2><p><code>静态变量</code>：</p>
<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。<br><code>静态方法</code><br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceCounter</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">numInstances</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> numInstances;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addInstance</span><span class="params">()</span> &#123;</span><br><span class="line">      numInstances++;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   InstanceCounter() &#123;</span><br><span class="line">      InstanceCounter.addInstance();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] arguments)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting with &quot;</span> +</span><br><span class="line">      InstanceCounter.getCount() + <span class="string">&quot; instances&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">500</span>; ++i)&#123;</span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">InstanceCounter</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Created &quot;</span> +</span><br><span class="line">      InstanceCounter.getCount() + <span class="string">&quot; instances&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="final-变量："><a href="#final-变量：" class="headerlink" title="final 变量："></a>final 变量：</h2><p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>
<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="comment">// 下面是声明常量的实例</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BOXWIDTH</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TITLE</span> <span class="operator">=</span> <span class="string">&quot;Manager&quot;</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeValue</span><span class="params">()</span>&#123;</span><br><span class="line">     value = <span class="number">12</span>; <span class="comment">//将输出一个错误</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>final 方法</code></p>
<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。<br>声明 final 方法的主要目的是防止该方法的内容被修改。<br>如下所示，使用 final 修饰符声明方法。</p>
<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>
<h2 id="abstract-修饰符"><a href="#abstract-修饰符" class="headerlink" title="abstract 修饰符"></a>abstract 修饰符</h2><p>抽象类：</p>
<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>
<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。<br>抽象类可以包含抽象方法和非抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Caravan</span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">   <span class="keyword">private</span> String model;</span><br><span class="line">   <span class="keyword">private</span> String year;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">goFast</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">changeColor</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>抽象方法</code></p>
<p>抽象方法是一种没有任何实现的方法，该方法的具体实现由子类提供。<br>抽象方法能被声明成 final 和 static。<br>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。<br>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。<br>抽象方法的声明以分号结尾，例如：public abstract sample();。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>; <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubClass</span> <span class="keyword">extends</span> <span class="title class_">SuperClass</span>&#123;</span><br><span class="line">     <span class="comment">//实现抽象方法</span></span><br><span class="line">      <span class="keyword">void</span> <span class="title function_">m</span><span class="params">()</span>&#123;</span><br><span class="line">          .........</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第一阶段</tag>
      </tags>
  </entry>
  <entry>
    <title>java6</title>
    <url>/post/java6.html</url>
    <content><![CDATA[<h1 id="Java-Scanner-类"><a href="#Java-Scanner-类" class="headerlink" title="Java Scanner 类"></a>Java Scanner 类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner; </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// next方式接收字符串</span></span><br><span class="line">        System.out.println(<span class="string">&quot;next方式接收：&quot;</span>);</span><br><span class="line">        <span class="comment">// 判断是否还有输入</span></span><br><span class="line">        <span class="keyword">if</span> (scan.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> scan.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用-nextLine-方法："><a href="#使用-nextLine-方法：" class="headerlink" title="使用 nextLine 方法："></a>使用 nextLine 方法：</h2><p>###next() 与 nextLine() 区别<br><code>next():</code></p>
<ul>
<li>1、一定要读取到有效字符后才可以结束输入。</li>
<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>
<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>
<li>next() 不能得到带有空格的字符串。</li>
</ul>
<hr>
<p><code>nextLine()：</code></p>
<ul>
<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>
<li>2、可以获得空白。</li>
</ul>
<blockquote>
<p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="comment">// 从键盘接收数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">0.0f</span>;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入整数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextInt()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是整数</span></span><br><span class="line">            i = scan.nextInt();</span><br><span class="line">            <span class="comment">// 接收整数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;整数数据：&quot;</span> + i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是整数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;输入小数：&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (scan.hasNextFloat()) &#123;</span><br><span class="line">            <span class="comment">// 判断输入的是否是小数</span></span><br><span class="line">            f = scan.nextFloat();</span><br><span class="line">            <span class="comment">// 接收小数</span></span><br><span class="line">            System.out.println(<span class="string">&quot;小数数据：&quot;</span> + f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 输入错误的信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的不是小数！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入数字：&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"> </span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">while</span> (scan.hasNextDouble()) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> scan.nextDouble();</span><br><span class="line">            m = m + <span class="number">1</span>;</span><br><span class="line">            sum = sum + x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的和为&quot;</span> + sum);</span><br><span class="line">        System.out.println(m + <span class="string">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class="line">        scan.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-异常处理"><a href="#Java-异常处理" class="headerlink" title="Java 异常处理"></a>Java 异常处理</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名 : ExcepTest.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcepTest</span>&#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">         System.out.println(<span class="string">&quot;Access element three :&quot;</span> + a[<span class="number">3</span>]);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Out of the block&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多重捕获块"><a href="#多重捕获块" class="headerlink" title="多重捕获块"></a>多重捕获块</h2><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>
<h2 id="throws-x2F-throw-关键字："><a href="#throws-x2F-throw-关键字：" class="headerlink" title="throws&#x2F;throw 关键字："></a>throws&#x2F;throw 关键字：</h2><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。<br>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">className</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deposit</span><span class="params">(<span class="type">double</span> amount)</span> <span class="keyword">throws</span> RemoteException</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// Method implementation</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RemoteException</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//Remainder of class definition</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="finally关键字"><a href="#finally关键字" class="headerlink" title="finally关键字"></a>finally关键字</h2><p>finally 关键字用来创建在 try 代码块后面执行的代码块。<br>无论是否发生异常，finally 代码块中的代码总会被执行。<br>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。<br>finally 代码块出现在 catch 代码块最后</p>
<h2 id="try-with-resources"><a href="#try-with-resources" class="headerlink" title="try-with-resources"></a>try-with-resources</h2><p>JDK7 之后，Java 新增的 try-with-resource 语法糖来打开资源，并且可以在语句执行完毕后确保每个资源都被自动关闭 。<br>JDK7 之前所有被打开的系统资源，比如流、文件或者 Socket 连接等，都需要被开发者手动关闭，否则将会造成资源泄露</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (resource declaration) &#123;</span><br><span class="line">  <span class="comment">// 使用的资源</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType e1) &#123;</span><br><span class="line">  <span class="comment">// 异常块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    String line;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>))) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看下不使用 try-with-resources 而改成 finally 来关闭资源，整体代码量多了很多，而且更复杂繁琐了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String line;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering try block&quot;</span>);</span><br><span class="line">            br = <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;test.txt&quot;</span>));</span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Line =&gt;&quot;</span>+line);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IOException in try block =&gt;&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Entering finally block&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;IOException in finally block =&gt;&quot;</span>+e.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

















]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第六阶段-屠龙少年出世</tag>
      </tags>
  </entry>
  <entry>
    <title>java8</title>
    <url>/post/java8.html</url>
    <content><![CDATA[<h1 id="Java-封装"><a href="#Java-封装" class="headerlink" title="Java 封装"></a>Java 封装</h1><ol>
<li>修改属性的可见性来限制对属性的访问（一般限制为private）</li>
<li>对每个值属性提供对外的公共方法访问，也就是创建一对赋取值方法，用于对私有属性的访问。<br>采用 this 关键字是为了解决实例变量（private String name）和局部变量（setName(String name)中的name变量）之间发生的同名的冲突。</li>
</ol>
<h1 id="Java-接口"><a href="#Java-接口" class="headerlink" title="Java 接口"></a>Java 接口</h1><p>接口并不是类，编写接口的方式和类很相似，但是它们属于不同的概念。类描述对象的属性和方法。接口则包含类要实现的方法。<br>除非实现接口的类是抽象类，否则该类要定义接口中的所有方法。<br>接口无法被实例化，但是可以被实现。一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类。另外，在 Java 中，接口类型可用来声明一个变量，他们可以成为一个空指针，或是被绑定在一个以此接口实现的对象。</p>
<h2 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h2><ol>
<li>抽象类中的方法可以有方法体，就是能实现方法的具体功能，但是接口中的方法不行。</li>
<li>抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是 public static final 类型的。</li>
<li>接口中不能含有静态代码块以及静态方法(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li>
<li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NameOfInterface</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//任何类型 final, static 字段</span></span><br><span class="line">   <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="接口有以下特性："><a href="#接口有以下特性：" class="headerlink" title="接口有以下特性："></a>接口有以下特性：</h3><ul>
<li>接口是隐式抽象的，当声明一个接口的时候，不必使用abstract关键字。</li>
<li>接口中每一个方法也是隐式抽象的，声明时同样不需要abstract关键字。</li>
<li>接口中的方法都是公有的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h1><p>当类实现接口的时候，类要实现接口中所有的方法。否则，类必须声明为抽象的类。<br>类使用<code>implements</code>关键字实现接口。在类声明中，Implements关键字放在class声明后面。<br>实现一个接口的语法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>在实现接口的时候，也要注意一些规则：</p>
<ul>
<li>一个类可以同时实现多个接口。</li>
<li>一个类只能继承一个类，但是能实现多个接口。</li>
<li>一个接口能继承另一个接口，这和类之间的继承比较相似。</li>
</ul>
<h1 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名: Sports.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Sports</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHomeTeam</span><span class="params">(String name)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVisitingTeam</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Football.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Football</span> <span class="keyword">extends</span> <span class="title class_">Sports</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">homeTeamScored</span><span class="params">(<span class="type">int</span> points)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitingTeamScored</span><span class="params">(<span class="type">int</span> points)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endOfQuarter</span><span class="params">(<span class="type">int</span> quarter)</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 文件名: Hockey.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hockey</span> <span class="keyword">extends</span> <span class="title class_">Sports</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">homeGoalScored</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visitingGoalScored</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">endOfPeriod</span><span class="params">(<span class="type">int</span> period)</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">overtimePeriod</span><span class="params">(<span class="type">int</span> ot)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h1><blockquote>
<p>public interface Hockey extends Sports, Event</p>
</blockquote>
<h1 id="标记接口"><a href="#标记接口" class="headerlink" title="标记接口"></a>标记接口</h1><blockquote>
<p>标记接口是没有任何方法和属性的接口.它仅仅表明它的类属于一个特定的类型,供其他代码来测试允许做一些事情。<br>标记接口作用：简单形象的说就是给某个对象打个标（盖个戳），使对象拥有某个或某些特权。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EventListener</span></span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-枚举-enum"><a href="#Java-枚举-enum" class="headerlink" title="Java 枚举(enum)"></a>Java 枚举(enum)</h1><blockquote>
<p>Java 枚举是一个特殊的类，一般表示一组常量，比如一年的 4 个季节，一个年的 12 个月份，一个星期的 7 天，方向有东南西北等。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 执行输出结果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c1</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每个枚举都是通过 Class 在内部实现的，且所有的枚举值都是 public static final 的。</p>
<h1 id="迭代枚举元素"><a href="#迭代枚举元素" class="headerlink" title="迭代枚举元素"></a>迭代枚举元素</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (Color myVar : Color.values()) &#123;</span><br><span class="line">      System.out.println(myVar);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="values-ordinal-和-valueOf-方法"><a href="#values-ordinal-和-valueOf-方法" class="headerlink" title="values(), ordinal() 和 valueOf() 方法"></a>values(), ordinal() 和 valueOf() 方法</h2><p>enum 定义的枚举类默认继承了 java.lang.Enum 类，并实现了 java.lang.Serializable 和 java.lang.Comparable 两个接口。<br>values(), ordinal() 和 valueOf() 方法位于 java.lang.Enum 类中：<br>values() 返回枚举类中所有的值。<br>ordinal()方法可以找到每个枚举常量的索引，就像数组索引一样。<br>valueOf()方法返回指定字符串值的枚举常量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 调用 values()</span></span><br><span class="line">        Color[] arr = Color.values();</span><br><span class="line">        <span class="comment">// 迭代枚举</span></span><br><span class="line">        <span class="keyword">for</span> (Color col : arr)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 查看索引</span></span><br><span class="line">            System.out.println(col + <span class="string">&quot; at index &quot;</span> + col.ordinal());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用 valueOf() 返回枚举常量，不存在的会报错 IllegalArgumentException</span></span><br><span class="line">        System.out.println(Color.valueOf(<span class="string">&quot;RED&quot;</span>));</span><br><span class="line">        <span class="comment">// System.out.println(Color.valueOf(&quot;WHITE&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="枚举类成员"><a href="#枚举类成员" class="headerlink" title="枚举类成员"></a>枚举类成员</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span></span><br><span class="line">&#123;</span><br><span class="line">    RED, GREEN, BLUE;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Constructor called for : &quot;</span> + <span class="built_in">this</span>.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">colorInfo</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Universal Color&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span></span><br><span class="line">&#123;    </span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c1</span> <span class="operator">=</span> Color.RED;</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        c1.colorInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java-包-package"><a href="#Java-包-package" class="headerlink" title="Java 包(package)"></a>Java 包(package)</h1><ul>
<li>java.lang        打包基础的类</li>
<li>java.io       包含输入输出功能的函数</li>
</ul>
<h1 id="创建包"><a href="#创建包" class="headerlink" title="创建包"></a>创建包</h1><p>创建包的时候，你需要为这个包取一个合适的名字。之后，如果其他的一个源文件包含了这个包提供的类、接口、枚举或者注释类型的时候，都必须将这个包的声明放在这个源文件的开头。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文件名: Animal.java */</span></span><br><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> animals;</span><br><span class="line"><span class="comment">/* 文件名 : MammalInt.java */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MammalInt</span> <span class="keyword">implements</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal eats&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">travel</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Mammal travels&quot;</span>);</span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">noOfLegs</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">MammalInt</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MammalInt</span>();</span><br><span class="line">      m.eat();</span><br><span class="line">      m.travel();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="import-关键字"><a href="#import-关键字" class="headerlink" title="import 关键字"></a>import 关键字</h1><p>为了能够使用某一个包的成员，我们需要在 Java 程序中明确导入该包。<br>类文件中可以包含任意数量的 import 声明。import 声明必须在包声明之后，类声明之前。<br>下面是管理你自己 java 中文件的一种简单方式：<br>将类、接口等类型的源码放在一个文本中，这个文件的名字就是这个类型的名字，并以.java作为扩展名。<br>把源文件放在一个目录中，这个目录要对应类所在包的名字。</p>
<blockquote>
<p>通常，一个公司使用它互联网域名的颠倒形式来作为它的包名.例如：互联网域名是 runoob.com，所有的包名都以 com.runoob 开头。包名中的每一个部分对应一个子目录。</p>
</blockquote>
<p>编译的时候，编译器为包中定义的每个类、接口等类型各创建一个不同的输出文件，输出文件的名字就是这个类型的名字，并加上 .class 作为扩展后缀。</p>
<p>编译之后的 .class 文件应该和 .java 源文件一样，它们放置的目录应该跟包的名字对应起来。但是，并不要求 .class 文件的路径跟相应的 .java 的路径一样。你可以分开来安排源码和类的目录。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path-one</span>&gt;</span>\sources\com\runoob\test\Runoob.java</span><br><span class="line"><span class="tag">&lt;<span class="name">path-two</span>&gt;</span>\classes\com\runoob\test\Google.class</span><br></pre></td></tr></table></figure>

<p>这样，你可以将你的类目录分享给其他的编程人员，而不用透露自己的源码。用这种方法管理源码和类文件可以让编译器和java 虚拟机（JVM）可以找到你程序中使用的所有类型。</p>
<p>类目录的绝对路径叫做 class path。设置在系统变量 CLASSPATH 中。编译器和 java 虚拟机通过将 package 名字加到 class path 后来构造 .class 文件的路径。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path-</span> <span class="attr">two</span>&gt;</span>\classes 是 class path，package 名字是 com.runoob.test,而编译器和 JVM 会在 <span class="tag">&lt;<span class="name">path-two</span>&gt;</span>\classes\com\runoob\test 中找 .class 文件。</span><br></pre></td></tr></table></figure>

<p>一个 class path 可能会包含好几个路径，多路径应该用分隔符分开。默认情况下，编译器和 JVM 查找当前目录。JAR 文件按包含 Java 平台相关的类，所以他们的目录默认放在了 class path 中。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第八阶段-屠龙少年变身</tag>
      </tags>
  </entry>
  <entry>
    <title>java5</title>
    <url>/post/java5.html</url>
    <content><![CDATA[<h1 id="Java-方法"><a href="#Java-方法" class="headerlink" title="Java 方法"></a>Java 方法</h1><p>在前面几个章节中我们经常使用到 System.out.println()，那么它是什么呢？</p>
<ul>
<li>println() 是一个方法。</li>
<li>System 是系统类。</li>
<li>out 是标准输出对象。</li>
</ul>
<blockquote>
<p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p>
</blockquote>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/D53C92B3-9643-4871-8A72-33D491299653.jpg" alt="图像"></p>
<h1 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span> num1, <span class="type">double</span> num2)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (num1 &gt; num2)</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><h1 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h1><blockquote>
<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VarargsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用可变参数的方法</span></span><br><span class="line">        printMax(<span class="number">34</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">56.5</span>);</span><br><span class="line">        printMax(<span class="keyword">new</span> <span class="title class_">double</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printMax</span><span class="params">( <span class="type">double</span>... numbers)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No argument passed&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> numbers[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;  numbers.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class="line">                result = numbers[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;The max value is &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-流-Stream-、文件-File-和IO"><a href="#Java-流-Stream-、文件-File-和IO" class="headerlink" title="Java 流(Stream)、文件(File)和IO"></a>Java 流(Stream)、文件(File)和IO</h1><h2 id="从控制台读取多字符输入"><a href="#从控制台读取多字符输入" class="headerlink" title="从控制台读取多字符输入"></a>从控制台读取多字符输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 BufferedReader 在控制台读取字符</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRRead</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">char</span> c;</span><br><span class="line">        <span class="comment">// 使用 System.in 创建 BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        System.out.println(<span class="string">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class="line">        <span class="comment">// 读取字符</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            c = (<span class="type">char</span>) br.read();</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125; <span class="keyword">while</span> (c != <span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="从控制台读取字符串"><a href="#从控制台读取字符串" class="headerlink" title="从控制台读取字符串"></a>从控制台读取字符串</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用 BufferedReader 在控制台读取字符</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BRReadLines</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 使用 System.in 创建 BufferedReader</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        String str;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter lines of text.&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter &#x27;end&#x27; to quit.&quot;</span>);</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            str = br.readLine();</span><br><span class="line">            System.out.println(str);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!str.equals(<span class="string">&quot;end&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="控制台输出"><a href="#控制台输出" class="headerlink" title="控制台输出"></a>控制台输出</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//演示 System.out.write().</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> b;</span><br><span class="line">        b = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        System.out.write(b);</span><br><span class="line">        System.out.write(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>
</blockquote>
<h1 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h1><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/iostream2xx.png" alt="图像"></p>
<h2 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h2><p>该类用来创建一个文件并向文件中写数据。</p>
<blockquote>
<p>OutputStream f &#x3D; new FileOutputStream(“C:&#x2F;java&#x2F;hello”)</p>
</blockquote>
<ul>
<li>1	public void close() throws IOException{}<br>关闭此文件输入流并释放与此流有关的所有系统资源。抛出IOException异常。</li>
<li>2	protected void finalize()throws IOException {}<br>这个方法清除与该文件的连接。确保在不再引用文件输入流时调用其 close 方法。抛出IOException异常。</li>
<li>3	public void write(int w)throws IOException{}<br>这个方法把指定的字节写到输出流中。</li>
<li>4	public void write(byte[] w)<br>把指定数组中w.length长度的字节写到OutputStream中。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fileStreamTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span> bWrite[] = &#123; <span class="number">11</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">40</span>, <span class="number">5</span> &#125;;</span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class="line">                os.write(bWrite[x]); <span class="comment">// writes the bytes</span></span><br><span class="line">            &#125;</span><br><span class="line">            os.close();</span><br><span class="line"> </span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> is.available();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                System.out.print((<span class="type">char</span>) is.read() + <span class="string">&quot;  &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            is.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;Exception&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件名 :fileStreamTest2.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">fileStreamTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;a.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(f);</span><br><span class="line">        <span class="comment">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(fop, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class="line">        writer.append(<span class="string">&quot;中文输入&quot;</span>);</span><br><span class="line">        <span class="comment">// 写入到缓冲区</span></span><br><span class="line">        writer.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">        <span class="comment">// 换行</span></span><br><span class="line">        writer.append(<span class="string">&quot;English&quot;</span>);</span><br><span class="line">        <span class="comment">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class="line">        writer.close();</span><br><span class="line">        <span class="comment">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class="line">        fop.close();</span><br><span class="line">        <span class="comment">// 关闭输出流,释放系统资源</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(f);</span><br><span class="line">        <span class="comment">// 构建FileInputStream对象</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(fip, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">while</span> (reader.ready()) &#123;</span><br><span class="line">            sb.append((<span class="type">char</span>) reader.read());</span><br><span class="line">            <span class="comment">// 转成char加到StringBuffer对象中</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        reader.close();</span><br><span class="line">        <span class="comment">// 关读取流</span></span><br><span class="line">        fip.close();</span><br><span class="line">        <span class="comment">// 关闭输入流,释放系统资源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java中的目录"><a href="#Java中的目录" class="headerlink" title="Java中的目录"></a>Java中的目录</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateDir</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dirname</span> <span class="operator">=</span> <span class="string">&quot;/tmp/user/java/bin&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dirname);</span><br><span class="line">        <span class="comment">// 现在创建目录</span></span><br><span class="line">        d.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="读取目录"><a href="#读取目录" class="headerlink" title="读取目录"></a>读取目录</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">dirname</span> <span class="operator">=</span> <span class="string">&quot;/tmp&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dirname);</span><br><span class="line">        <span class="keyword">if</span> (f1.isDirectory()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目录 &quot;</span> + dirname);</span><br><span class="line">            String s[] = f1.list();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">                <span class="type">File</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dirname + <span class="string">&quot;/&quot;</span> + s[i]);</span><br><span class="line">                <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                    System.out.println(s[i] + <span class="string">&quot; 是一个目录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(s[i] + <span class="string">&quot; 是一个文件&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(dirname + <span class="string">&quot; 不是一个目录&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="删除目录或文件"><a href="#删除目录或文件" class="headerlink" title="删除目录或文件"></a>删除目录或文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeleteFileDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 这里修改为自己的测试目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/tmp/java/&quot;</span>);</span><br><span class="line">        deleteFolder(folder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 删除文件及目录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteFolder</span><span class="params">(File folder)</span> &#123;</span><br><span class="line">        File[] files = folder.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (files != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (File f : files) &#123;</span><br><span class="line">                <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">                    deleteFolder(f);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    f.delete();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        folder.delete();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第五阶段-新手村的噩梦</tag>
      </tags>
  </entry>
  <entry>
    <title>java万能基础</title>
    <url>/post/java%E4%B8%87%E8%83%BD%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>代码由<code>lmh</code>同学提供，我只是复习总结而已。</p>
</blockquote>
<p>代码下载链接：<a href="https://pan.baidu.com/s/1l4r0jbeZ-L-PNO98wOXAPw?pwd=1111">https://pan.baidu.com/s/1l4r0jbeZ-L-PNO98wOXAPw?pwd=1111</a><br>提取码：1111</p>
<h1 id="输入-Scanner"><a href="#输入-Scanner" class="headerlink" title="输入(Scanner)"></a>输入(Scanner)</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建键盘录入对象Scanner</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//通过Scanner对象调用方法，赋值给变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">year</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">//判断输入的是不是int类型,返回值是bool</span></span><br><span class="line">sc.hasNextInt();</span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line">sc.close();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>scanner可以输入各种类型数据，看java的数据提示即可</p>
</blockquote>
<h2 id="next-用法总结："><a href="#next-用法总结：" class="headerlink" title="next()用法总结："></a>next()用法总结：</h2><ol>
<li>一定要读取到有效字符后才可以结束输入。</li>
<li>对输入的有效字符之前所遇到的空白，会自动将其去除。</li>
<li>只有输入的有效字符后才将其后面输入的空白作为结束符。</li>
<li>next()不能得到带有空格的字符串。</li>
<li>读取结束后，该方法会将我们的鼠标定位在我们输入数据的那一行。</li>
</ol>
<h2 id="nextLine-用法总结："><a href="#nextLine-用法总结：" class="headerlink" title="nextLine()用法总结："></a>nextLine()用法总结：</h2><ol>
<li>以回车符作为结束标识符，获取到的是回车符前输入的所有字符串（包括空格）。</li>
<li>读取结束后，该方法会将我们的鼠标定位在我们输入数据的那一行的下一行。</li>
</ol>
<h2 id="先使用nextLine再使用next-、nextInt-等没问题，但是先使用next-和nextInt-等之后就不可以再紧跟nextLine使用。（这一点很重要！！！）"><a href="#先使用nextLine再使用next-、nextInt-等没问题，但是先使用next-和nextInt-等之后就不可以再紧跟nextLine使用。（这一点很重要！！！）" class="headerlink" title="先使用nextLine再使用next()、nextInt()等没问题，但是先使用next()和nextInt()等之后就不可以再紧跟nextLine使用。（这一点很重要！！！）"></a>先使用nextLine再使用next()、nextInt()等没问题，但是先使用next()和nextInt()等之后就不可以再紧跟nextLine使用。（这一点很重要！！！）</h2><ol>
<li>这是因为next()等这些方法读取结束后会紧跟一个回车符，而nextLine会直接读取到这个回车符，这就导致出现我们还没有来得及输入我们想要输入的数据，nextLine就以为我们已经输入完了这样的情况！</li>
<li>解决办法：我们直接在next()使用后加两个nextLine()就OK了，这样第一个nextLine()就会当一个‘替死鬼’，第二个nextLine()我们就可以输入自己想要输入的数据啦！</li>
</ol>
<h1 id="输出-System-out-println"><a href="#输出-System-out-println" class="headerlink" title="输出(System.out.println)"></a>输出(System.out.println)</h1><h2 id="println"><a href="#println" class="headerlink" title="println"></a>println</h2><blockquote>
<p>println()其实调用了print()再调用newLine()来实现换行。</p>
</blockquote>
<h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><blockquote>
<p>相当于c语言的printf,可以指定格式进行输出。</p>
</blockquote>
<h2 id="静态方法的特点"><a href="#静态方法的特点" class="headerlink" title="静态方法的特点"></a>静态方法的特点</h2><ol>
<li><p><strong>关联于类：</strong> 静态方法属于整个类，而不是属于类的实例。因此，可以通过类名来调用静态方法，无需创建类的实例。</p>
</li>
<li><p><strong>无需实例化：</strong> 由于静态方法不依赖于类的实例，所以在调用静态方法时，无需创建类的对象。这使得静态方法可以在没有实例的情况下使用。</p>
</li>
<li><p><strong>不访问实例变量：</strong> 静态方法不能直接访问类的实例变量（非静态成员变量），因为它们没有与任何特定实例相关联。但是，它们可以访问静态成员变量，因为静态成员变量也与类相关联。</p>
</li>
<li><p><strong>常用于工具方法：</strong> 静态方法通常用于定义工具方法，这些方法独立于类的实例，执行某些通用操作，例如数学计算、文件操作、字符串处理等。例如，<code>Math</code> 类中的所有方法都是静态方法，因为它们执行数学运算而无需创建 <code>Math</code> 的实例。</p>
</li>
<li><p><strong>静态块：</strong> 静态方法可以包含静态块（static block），静态块在类被加载时执行，通常用于初始化静态成员变量或执行其他一次性的初始化工作。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 静态块中的代码在类加载时执行</span></span><br><span class="line">        <span class="comment">// 用于初始化静态成员变量等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="6">
<li><strong>全局访问点：</strong> 静态方法可以提供一个全局的访问点，使得其他类和代码可以轻松地调用这些方法，而不必关心类的实例化和细节。</li>
</ol>
<p>需要注意的是，静态方法不能访问非静态方法和非静态变量，因为它们不依赖于类的实例。另外，静态方法不能被重写，因为它们是与类直接关联的，而不是与实例关联的。<br>总之，静态方法用就完了，无需创建实例。</p>
<h2 id="String-valueOf-num"><a href="#String-valueOf-num" class="headerlink" title="String.valueOf(num)"></a><code>String.valueOf(num)</code></h2><p>用于将不同类型的数据转换为字符串类型。它的作用是将给定的数据转换为字符串，无论数据的原始类型是什么。</p>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] arr = &#123; <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span> &#125;;</span><br><span class="line"><span class="type">int</span>[] newArr = Arrays.copyOf(arr, <span class="number">4</span>);</span><br><span class="line">System.out.println(Arrays.toString(newArr));</span><br><span class="line"><span class="comment">// 方法二</span></span><br><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span> [<span class="number">5</span>];</span><br><span class="line"><span class="comment">// 原数组 起始位置 目标数组 起始位置 复制个数</span></span><br><span class="line">System.arraycopy(arr, <span class="number">1</span>, a, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">System.out.println(Arrays.toString(a));</span><br></pre></td></tr></table></figure>

<h2 id="length与size的区别"><a href="#length与size的区别" class="headerlink" title="length与size的区别"></a>length与size的区别</h2><ol>
<li><code>length()</code> 方法：</li>
</ol>
<ul>
<li><code>length()</code> 是用于获取数组的长度的方法。它只能用于数组，而不能用于集合（如<code>List</code>、<code>String</code>等）。</li>
<li>在数组中，<code>length</code> 是一个属性，而不是方法，所以没有括号。</li>
<li>用于获取数组的元素数量，返回的是一个整数。</li>
</ul>
<ol start="2">
<li><code>size()</code> 方法：</li>
</ol>
<ul>
<li><code>size()</code> 通常用于获取集合类对象的大小，如 <code>List</code>、<code>Set</code>、<code>Map</code> 等。它是集合框架中通用的方法。</li>
<li>在集合类中，<code>size()</code> 是一个方法，需要使用括号进行调用。</li>
<li>用于获取集合中元素的数量，返回的是一个整数。</li>
</ul>
<h2 id="equalsIgnoreCase"><a href="#equalsIgnoreCase" class="headerlink" title="equalsIgnoreCase()"></a>equalsIgnoreCase()</h2><p><code>equalsIgnoreCase()</code> 方法是 Java 中的字符串比较方法，用于比较两个字符串的内容是否相等，但不考虑它们的大小写。</p>
<h2 id="重写与重载的区别"><a href="#重写与重载的区别" class="headerlink" title="重写与重载的区别"></a>重写与重载的区别</h2><ol>
<li>重载是在同一个类中定义多个同名方法，方法名相同但参数不同。</li>
<li>重写是子类覆盖父类中的同名方法，方法名和参数都必须相同。</li>
<li>重载是编译时的多态性（静态绑定），而重写是运行时的多态性（动态绑定）。</li>
<li>重载通常用于实现相似功能的方法，而重写用于实现父类方法的不同行为。</li>
</ol>
<h2 id="初始化数组的几种方式"><a href="#初始化数组的几种方式" class="headerlink" title="初始化数组的几种方式"></a>初始化数组的几种方式</h2><p>在Java中，你可以使用多种方式来初始化数组，具体取决于你的需求和代码风格。以下是一些初始化数组的常见方式：</p>
<ol>
<li><p><strong>使用大括号（Array Literal）初始化数组</strong>：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用<code>new</code>关键字初始化数组</strong>：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure></li>
<li><p><strong>动态初始化二维数组</strong>：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] matrix = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用数组工具类初始化</strong>：<br>Java提供了<code>Arrays</code>类，可以使用<code>Arrays.fill()</code>方法为数组的所有元素分配相同的初始值。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="type">int</span>[] numbers = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">Arrays.fill(numbers, <span class="number">0</span>); <span class="comment">// 将所有元素初始化为0</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>使用静态初始化块</strong>：<br>你可以在静态初始化块中初始化数组，这样可以在类加载时执行初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] numbers;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        numbers = <span class="keyword">new</span> <span class="title class_">int</span>[] &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="关于类中的super-方法"><a href="#关于类中的super-方法" class="headerlink" title="关于类中的super()方法"></a>关于类中的super()方法</h2><ol>
<li>调用父类的构造方法：通过<code>super()</code>语句，子类可以调用父类的构造方法，以确保在创建子类对象时，首先执行父类的初始化操作。</li>
<li>如果子类的构造方法没有显式调用<code>super()</code>，Java会默认调用父类的无参构造方法。</li>
</ol>
<h2 id="brak高级用法"><a href="#brak高级用法" class="headerlink" title="brak高级用法"></a>brak高级用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">outerLoop: <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= <span class="number">3</span>; j++) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;i: &quot;</span> + i + <span class="string">&quot;, j: &quot;</span> + j);</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">2</span> &amp;&amp; j == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span> outerLoop; <span class="comment">// 使用标签跳出外层循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="String的api"><a href="#String的api" class="headerlink" title="String的api"></a>String的api</h2><ol>
<li><code>charAt(index)</code>: 拿到下标<code>index</code>的字符</li>
</ol>
<h2 id="StringBuilder-和-StringBuffer"><a href="#StringBuilder-和-StringBuffer" class="headerlink" title="StringBuilder 和 StringBuffer"></a><code>StringBuilder</code> 和 <code>StringBuffer</code></h2><ol>
<li><p>线程安全性：</p>
<ul>
<li><code>StringBuilder</code>：是非线程安全的，适合在单线程环境下使用。由于它不需要考虑线程同步，因此在单线程情况下性能更高。</li>
<li><code>StringBuffer</code>：是线程安全的，适合在多线程环境下使用。它的方法都是同步的，可以确保多个线程同时操作时不会出现数据混乱的情况。</li>
</ul>
</li>
<li><p>性能：</p>
<ul>
<li><code>StringBuilder</code>：由于不需要线程同步，所以在单线程环境下通常比 <code>StringBuffer</code> 更快。</li>
<li><code>StringBuffer</code>：由于需要线程同步，所以在多线程环境下能够保证数据的一致性，但性能通常比 <code>StringBuilder</code> 稍差。</li>
</ul>
</li>
</ol>
<p>在选择使用 <code>StringBuilder</code> 还是 <code>StringBuffer</code> 时，通常考虑以下因素：</p>
<ul>
<li>如果在单线程环境下操作字符串，建议使用 <code>StringBuilder</code>，以获得更好的性能。</li>
<li>如果在多线程环境下操作字符串，需要确保线程安全性时，使用 <code>StringBuffer</code>。</li>
</ul>
<h1 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(arr[index]);</span><br><span class="line">        System.out.println(<span class="string">&quot;结果出来了&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException i) &#123;</span><br><span class="line">        i.printStackTrace();  <span class="comment">// printStackTrace()打印异常信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;i数组越界了&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();  <span class="comment">// printStackTrace()打印异常信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e数组越界了&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        sc.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭资源&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li>首先，程序尝试执行 <code>System.out.println(arr[index]);</code> </li>
<li>这行代码，如果 <code>index</code> 超出了数组 <code>arr</code> 的索引范围，就会抛出 <code>IndexOutOfBoundsException</code> 异常。</li>
<li>接下来，程序会捕获异常。它先检查是否是 <code>IndexOutOfBoundsException</code> 类型的异常，</li>
<li>如果是，就执行 <code>catch (IndexOutOfBoundsException i)</code> 块中的代码，打印出异常信息，然后显示 “i数组越界了”。</li>
<li>如果异常不是 <code>IndexOutOfBoundsException</code>，而是其他类型的异常，程序会进入 <code>catch (Exception e)</code> 块，同样打印出异常信息，然后显示 “e数组越界了”。</li>
<li>无论是哪种情况，最终都会执行 <code>finally</code> 块中的代码。这个块中的代码用于关闭资源（这里是关闭 <code>Scanner</code> 对象），然后显示 “关闭资源”。</li>
</ol>
<h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><ol>
<li><code>arr.addAll(arr1);</code><ul>
<li>这行代码将集合 <code>arr1</code> 中的所有元素添加到集合 <code>arr</code> 中。</li>
</ul>
</li>
<li><code>arr.removeAll(arr1);</code><ul>
<li>这行代码从集合 <code>arr</code> 中删除所有存在于集合 <code>arr1</code> 中的元素。</li>
</ul>
</li>
<li><code>arr.toArray();</code><ul>
<li>这行代码将集合 <code>arr</code> 中的元素转换为一个数组</li>
</ul>
</li>
</ol>
<h2 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line">    <span class="keyword">while</span> (it.hasNext()) &#123;<span class="comment">// 是否具有下一个元素</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> it.next();</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TreeSet&lt;User&gt; set = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1, o2) -&gt; &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> o1.getName().length() - o2.getName().length();</span><br><span class="line">        <span class="keyword">return</span>  i== <span class="number">0</span> ? o1.getAge() - o2.getAge() : i;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<ol>
<li><strong>有序性</strong></li>
<li><strong>唯一性</strong></li>
<li><strong>基于红黑树实现</strong>：<code>TreeSet</code> 的底层数据结构是一颗红黑树。这保证了元素的插入、删除和查找的时间复杂度都是 O(log n)。</li>
<li><strong>不允许 null 元素</strong>：由于要保持有序性，<code>TreeSet</code> 不允许插入 null 元素。</li>
<li><strong>快速查找</strong>：由于底层数据结构是一颗二叉搜索树，<code>TreeSet</code> 提供了快速的查找操作。</li>
<li><strong>不是线程安全的</strong>：如果多个线程同时访问一个 <code>TreeSet</code> 实例，并且至少有一个线程在结构上修改了集合，那么它必须保持外部同步。</li>
</ol>
<h2 id="Arrays-asList-arr-和Collections"><a href="#Arrays-asList-arr-和Collections" class="headerlink" title="Arrays.asList(arr)和Collections"></a><code>Arrays.asList(arr)</code>和<code>Collections</code></h2><ol>
<li><code>Arrays.asList(arr)</code> 将数组转换为一个固定大小的列表。这意味着你不能对这个列表进行增删操作。</li>
<li><code>Arrays.asList(&quot;11&quot;, &quot;22&quot;, &quot;33&quot;, &quot;44&quot;)</code> 将字符串数组转换为列表。</li>
<li>使用 <code>Collections.addAll()</code> 将元素添加到列表中。</li>
<li>使用 <code>Collections.sort()</code> 对列表进行排序。</li>
</ol>
<h1 id="线程并行"><a href="#线程并行" class="headerlink" title="线程并行"></a>线程并行</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread</span> <span class="variable">myThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>();</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(myThread);</span><br><span class="line">        t1.start(); <span class="comment">// start函数会默认执行myThread重载的run方法</span></span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Main抽到了&quot;</span> + i + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;抽到了&quot;</span> + i + <span class="string">&quot;号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="线程安全1"><a href="#线程安全1" class="headerlink" title="线程安全1"></a>线程安全1</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">// 定义票的个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (TicketDemo.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    num--;</span><br><span class="line">                    System.out.println(<span class="built_in">super</span>.getName() + <span class="string">&quot;已经卖出一张票，还剩&quot;</span> + num + <span class="string">&quot;张！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>解释： 定义一个类锁，锁住整个类，这样就可以保证每次只有一个线程进入代码块，从而保证了线程安全。<br>只有当A线程跑完后，B线程才能进入代码块，这样就保证了线程安全。</p>
</blockquote>
<h3 id="线程安全2"><a href="#线程安全2" class="headerlink" title="线程安全2"></a>线程安全2</h3><blockquote>
<p>Runnable接口实现方式</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TicketDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(num &gt; <span class="number">0</span> )&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    num--;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;已经卖出一张票，还剩&quot;</span> + num + <span class="string">&quot;张！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><ol>
<li><code>FileOutputStream</code>：用于向文件中写入数据。</li>
<li><code>FileInputStream</code>：用于从文件中读取数据。</li>
<li><code>FileReader</code>：用于读取字符流。</li>
<li><code>FileWriter</code>：用于写入字符流。</li>
</ol>
<blockquote>
<p><code>while ((len = in.read(ch)) != -1)</code>每次读取，最多读1024字节</p>
</blockquote>
<h1 id="课程"><a href="#课程" class="headerlink" title="课程"></a>课程</h1><p>Java代码运行的几个阶段，先编译成字节码，通过JVM加载到内存中，然后进行验证、准备、解析，在进行初始化，最后运行。</p>
<p><code>System.err.println(&quot;你好，这是自定义异常&quot;);</code>这个语句可以把输出字符标红，来表示这是错误信息。</p>
]]></content>
      <categories>
        <category>java万能基础</category>
      </categories>
      <tags>
        <tag>java万能基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java7</title>
    <url>/post/java7.html</url>
    <content><![CDATA[<h1 id="Java-继承"><a href="#Java-继承" class="headerlink" title="Java 继承"></a>Java 继承</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要写在主类外面</span></span><br><span class="line"><span class="comment">//公共父类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String myName, <span class="type">int</span> myid)</span> &#123; </span><br><span class="line">        name = myName; </span><br><span class="line">        id = myid;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在吃&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name+<span class="string">&quot;正在睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">introduction</span><span class="params">()</span> &#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;大家好！我是&quot;</span>         + id + <span class="string">&quot;号&quot;</span> + name + <span class="string">&quot;.&quot;</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//企鹅类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Penguin</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Penguin</span><span class="params">(String myName, <span class="type">int</span> myid)</span> &#123; </span><br><span class="line">        <span class="built_in">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//老鼠类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mouse</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mouse</span><span class="params">(String myName, <span class="type">int</span> myid)</span> &#123; </span><br><span class="line">        <span class="built_in">super</span>(myName, myid); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="继承类型"><a href="#继承类型" class="headerlink" title="继承类型"></a>继承类型</h2><blockquote>
<p>Java 不支持多继承，但支持多重继承。</p>
</blockquote>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-extends-2020-12-08.png" alt="图片"></p>
<h2 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h2><blockquote>
<p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>super关键字</code><br>我们可以通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;animal : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;dog : eat&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">eatTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">    <span class="built_in">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">    a.eat();</span><br><span class="line">    <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    d.eatTest();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>final 关键字</code></p>
<blockquote>
<p>使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</p>
</blockquote>
<ul>
<li><p>声明类：</p>
<blockquote>
<p>final class 类名 {&#x2F;&#x2F;类体}</p>
</blockquote>
</li>
<li><p>声明方法：</p>
</li>
</ul>
<blockquote>
<p>修饰符(public&#x2F;private&#x2F;default&#x2F;protected) final 返回值类型 方法名(){&#x2F;&#x2F;方法体}</p>
</blockquote>
<h1 id="Java-重写-Override-与重载-Overload"><a href="#Java-重写-Override-与重载-Overload" class="headerlink" title="Java 重写(Override)与重载(Overload)"></a>Java 重写(Override)与重载(Overload)</h1><h2 id="重写-Override"><a href="#重写-Override" class="headerlink" title="重写(Override)"></a>重写(Override)</h2><blockquote>
<p>重写是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。即外壳不变，核心重写！<br>重写的好处在于子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。<br>重写方法不能抛出新的检查异常或者比被重写方法申明更加宽泛的异常。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;动物可以移动&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;狗可以跑和走&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDog</span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>(); <span class="comment">// Animal 对象</span></span><br><span class="line">      <span class="type">Animal</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(); <span class="comment">// Dog 对象</span></span><br><span class="line"> </span><br><span class="line">      a.move();<span class="comment">// 执行 Animal 类的方法</span></span><br><span class="line"> </span><br><span class="line">      b.move();<span class="comment">//执行 Dog 类的方法</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>这是由于在编译阶段，只是检查参数的引用类型。<br>然而在运行时，Java 虚拟机(JVM)指定对象的类型并且运行该对象的方法。<br>因此在上面的例子中，之所以能编译成功，是因为 Animal 类中存在 move 方法，然而运行时，运行的是特定对象的方法。</p>
</blockquote>
<h2 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h2><ul>
<li>参数列表与被重写方法的参数列表必须完全相同。</li>
<li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li>
<li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li>
<li>父类的成员方法只能被它的子类重写。</li>
<li>声明为 final 的方法不能被重写。</li>
<li>声明为 static 的方法不能被重写，但是能够被再次声明。</li>
<li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li>
<li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li>
<li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li>
<li>构造方法不能被重写。</li>
<li>如果不能继承一个类，则不能重写该类的方法。</li>
</ul>
<h2 id="Super-关键字的使用"><a href="#Super-关键字的使用" class="headerlink" title="Super 关键字的使用"></a>Super 关键字的使用</h2><p>当需要在子类中调用父类的被重写方法时，要使用 super 关键字。</p>
<p>#重载(Overload)<br>重载(overloading) 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同<br>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。<br>最常用的地方就是构造器的重载。</p>
<h2 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则:"></a>重载规则:</h2><ul>
<li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li>
<li>被重载的方法可以改变返回类型；</li>
<li>被重载的方法可以改变访问修饰符；</li>
<li>被重载的方法可以声明新的或更广的检查异常；</li>
<li>方法能够在同一个类中或者在一个子类中被重载。</li>
<li>无法以返回值类型作为重载函数的区分标准。</li>
</ul>
<h1 id="Java-多态"><a href="#Java-多态" class="headerlink" title="Java 多态"></a>Java 多态</h1><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-polymorphism-111.png" alt="图像"></p>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/2DAC601E-70D8-4B3C-86CC-7E4972FC2466.jpg" alt="图像"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      show(<span class="keyword">new</span> <span class="title class_">Cat</span>());  <span class="comment">// 以 Cat 对象调用 show 方法</span></span><br><span class="line">      show(<span class="keyword">new</span> <span class="title class_">Dog</span>());  <span class="comment">// 以 Dog 对象调用 show 方法</span></span><br><span class="line">                </span><br><span class="line">      <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 向上转型  </span></span><br><span class="line">      a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;        <span class="comment">// 向下转型  </span></span><br><span class="line">      c.work();        <span class="comment">// 调用的是 Cat 的 work</span></span><br><span class="line">  &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Animal a)</span>  &#123;</span><br><span class="line">      a.eat();  </span><br><span class="line">        <span class="comment">// 类型判断</span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)  &#123;  <span class="comment">// 猫做的事情 </span></span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog) &#123; <span class="comment">// 狗做的事情 </span></span><br><span class="line">            <span class="type">Dog</span> <span class="variable">c</span> <span class="operator">=</span> (Dog)a;  </span><br><span class="line">            c.work();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><h1 id="Java-抽象类"><a href="#Java-抽象类" class="headerlink" title="Java 抽象类"></a>Java 抽象类</h1><blockquote>
<p>如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。<br>抽象类除了不能实例化对象之外，类的其它功能依然存在，成员变量、成员方法和构造方法的访问方式和普通类一样。<br>由于抽象类不能实例化对象，所以抽象类必须被继承，才能被使用。也是因为这个原因，通常在设计阶段决定要不要设计抽象类。<br>父类包含了子类集合的常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。<br>在 Java 中抽象类表示的是一种继承关系，一个类只能继承一个抽象类，而一个类却可以实现多个接口。</p>
</blockquote>
<p>在 Java 语言中使用 abstract class 来定义抽象类。如下实例</p>
<p><code>public abstract class Employee</code></p>
<h2 id="继承抽象类"><a href="#继承抽象类" class="headerlink" title="继承抽象类"></a>继承抽象类</h2><p>尽管我们不能实例化一个 Employee 类(抽象类)的对象，但是如果我们实例化一个 Salary 类对象，该对象将从 Employee 类继承7个成员方法，且通过该方法可以设置或获取三个成员变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AbstractDemo</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Salary</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Salary</span>(<span class="string">&quot;Mohd Mohtashim&quot;</span>, <span class="string">&quot;Ambehta, UP&quot;</span>, <span class="number">3</span>, <span class="number">3600.00</span>);</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Salary</span>(<span class="string">&quot;John Adams&quot;</span>, <span class="string">&quot;Boston, MA&quot;</span>, <span class="number">2</span>, <span class="number">2400.00</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Call mailCheck using Salary reference --&quot;</span>);</span><br><span class="line">      s.mailCheck();</span><br><span class="line">      System.out.println(<span class="string">&quot;\n Call mailCheck using Employee reference--&quot;</span>);</span><br><span class="line">      e.mailCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h2><p>如果你想设计这样一个类，该类包含一个特别的成员方法，该方法的具体实现由它的子类确定，那么你可以在父类中声明该方法为抽象方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String address;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> number;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">computePay</span><span class="params">()</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//其余代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继承抽象方法的子类必须重写该方法。</p>
<h1 id="抽象类总结规定"><a href="#抽象类总结规定" class="headerlink" title="抽象类总结规定"></a>抽象类总结规定</h1><ul>
<li>构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。</li>
<li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第七阶段-屠龙少年面对恶龙</tag>
      </tags>
  </entry>
  <entry>
    <title>java9</title>
    <url>/post/java9.html</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif" alt="图片"></p>
<p>从上面的集合框架图可以看到，Java 集合框架主要包括两种类型的容器，一种是集合（Collection），存储一个元素集合，另一种是图（Map），存储键&#x2F;值对映射。Collection 接口又有 3 种子类型，List、Set 和 Queue，再下面是一些抽象类，最后是具体实现类，常用的有 ArrayList、LinkedList、HashSet、LinkedHashSet、HashMap、LinkedHashMap 等等。</p>
<p>集合框架是一个用来代表和操纵集合的统一架构。所有的集合框架都包含如下内容：</p>
<p>接口：是代表集合的抽象数据类型。例如 Collection、List、Set、Map 等。之所以定义多个接口，是为了以不同的方式操作集合对象</p>
<p>实现（类）：是集合接口的具体实现。从本质上讲，它们是可重复使用的数据结构，例如：ArrayList、LinkedList、HashSet、HashMap。</p>
<p>算法：是实现集合接口的对象里的方法执行的一些有用的计算，例如：搜索和排序。这些算法被称为多态，那是因为相同的方法可以在相似的接口上有着不同的实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">     List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">     list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">     list.add(<span class="string">&quot;HAHAHAHA&quot;</span>);</span><br><span class="line">     <span class="comment">//第一种遍历方法使用 For-Each 遍历 List</span></span><br><span class="line">     <span class="keyword">for</span> (String str : list) &#123;            <span class="comment">//也可以改写 for(int i=0;i&lt;list.size();i++) 这种形式</span></span><br><span class="line">        System.out.println(str);</span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="comment">//第二种遍历，把链表变为数组相关的内容进行遍历</span></span><br><span class="line">     String[] strArray=<span class="keyword">new</span> <span class="title class_">String</span>[list.size()];</span><br><span class="line">     list.toArray(strArray);</span><br><span class="line">     <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strArray.length;i++) <span class="comment">//这里也可以改写为  for(String str:strArray) 这种形式</span></span><br><span class="line">     &#123;</span><br><span class="line">        System.out.println(strArray[i]);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//第三种遍历 使用迭代器进行相关遍历</span></span><br><span class="line">     </span><br><span class="line">     Iterator&lt;String&gt; ite=list.iterator();</span><br><span class="line">     <span class="keyword">while</span>(ite.hasNext())<span class="comment">//判断下一个元素之后有值</span></span><br><span class="line">     &#123;</span><br><span class="line">         System.out.println(ite.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h1 id="Java-ArrayList"><a href="#Java-ArrayList" class="headerlink" title="Java ArrayList"></a>Java ArrayList</h1><p>Java ArrayList 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add()	将元素插入到指定位置的 arraylist 中</span><br><span class="line">addAll()	添加集合中的所有元素到 arraylist 中</span><br><span class="line">clear()	删除 arraylist 中的所有元素</span><br><span class="line">clone()	复制一份 arraylist</span><br><span class="line"><span class="title function_">contains</span><span class="params">()</span>	判断元素是否在 arraylist</span><br><span class="line"><span class="title function_">get</span><span class="params">()</span>	通过索引值获取 arraylist 中的元素</span><br><span class="line">indexOf()	返回 arraylist 中元素的索引值</span><br><span class="line">removeAll()	删除存在于指定集合中的 arraylist 里的所有元素</span><br><span class="line">remove()	删除 arraylist 里的单个元素</span><br><span class="line">size()	返回 arraylist 里元素数量</span><br><span class="line">isEmpty()	判断 arraylist 是否为空</span><br><span class="line">subList()	截取部分 arraylist 的元素</span><br><span class="line">set()	替换 arraylist 中指定索引的元素</span><br><span class="line">sort()	对 arraylist 元素进行排序</span><br><span class="line">toArray()	将 arraylist 转换为数组</span><br><span class="line">toString()	将 arraylist 转换为字符串</span><br><span class="line">ensureCapacity()	设置指定容量大小的 arraylist</span><br><span class="line"><span class="title function_">lastIndexOf</span><span class="params">()</span>	返回指定元素在 arraylist 中最后一次出现的位置</span><br><span class="line">retainAll()	保留 arraylist 中在指定集合中也存在的那些元素</span><br><span class="line">containsAll()	查看 arraylist 是否包含指定集合中的所有元素</span><br><span class="line">trimToSize()	将 arraylist 中的容量调整为数组中的元素个数</span><br><span class="line">removeRange()	删除 arraylist 中指定索引之间存在的元素</span><br><span class="line">replaceAll()	将给定的操作内容替换掉数组中每一个元素</span><br><span class="line">removeIf()	删除所有满足特定条件的 arraylist 元素</span><br><span class="line">forEach()	遍历 arraylist 中每一个元素并执行特定操作</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Java-LinkedList"><a href="#Java-LinkedList" class="headerlink" title="Java LinkedList"></a>Java LinkedList</h1><p>以下情况使用 ArrayList :</p>
<p>频繁访问列表中的某一个元素。<br>只需要在列表末尾进行添加和删除元素操作。<br>以下情况使用 LinkedList :</p>
<p>你需要通过循环迭代来访问列表中的某些元素。<br>需要频繁的在列表开头、中间、末尾等位置进行添加和删除元素操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>	链表末尾添加元素，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span>	向指定位置插入元素。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection c)</span>	将一个集合的所有元素添加到链表后面，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection c)</span>	将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(E e)</span>	元素添加到头部。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLast</span><span class="params">(E e)</span>	元素添加到尾部。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span>	向链表末尾添加元素，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerFirst</span><span class="params">(E e)</span>	头部插入元素，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">offerLast</span><span class="params">(E e)</span>	尾部插入元素，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>	清空链表。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeFirst</span><span class="params">()</span>	删除并返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">removeLast</span><span class="params">()</span>	删除并返回最后一个元素。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span>	删除某一元素，返回是否成功，成功为 <span class="literal">true</span>，失败为 <span class="literal">false</span>。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>	删除指定位置的元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">poll</span><span class="params">()</span>	删除并返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">remove</span><span class="params">()</span>	删除并返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>	判断是否含有某一元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>	返回指定位置的元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">getFirst</span><span class="params">()</span>	返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">getLast</span><span class="params">()</span>	返回最后一个元素。</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span>	查找指定元素从前往后第一次出现的索引。</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span>	查找指定元素最后一次出现的索引。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peek</span><span class="params">()</span>	返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">element</span><span class="params">()</span>	返回第一个元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peekFirst</span><span class="params">()</span>	返回头部元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">peekLast</span><span class="params">()</span>	返回尾部元素。</span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E element)</span>	设置指定位置的元素。</span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span>	克隆该列表。</span><br><span class="line"><span class="keyword">public</span> Iterator <span class="title function_">descendingIterator</span><span class="params">()</span>	返回倒序迭代器。</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>	返回链表元素个数。</span><br><span class="line"><span class="keyword">public</span> ListIterator <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span>	返回从指定位置开始到末尾的迭代器。</span><br><span class="line"><span class="keyword">public</span> Object[] toArray()	返回一个由链表元素组成的数组。</span><br><span class="line"><span class="keyword">public</span> T[] toArray(T[] a)	返回一个由链表元素转换类型而成的数组。</span><br></pre></td></tr></table></figure>


<h1 id="Java-HashSet"><a href="#Java-HashSet" class="headerlink" title="Java HashSet"></a>Java HashSet</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashSet 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);  <span class="comment">// 重复的元素不会被添加</span></span><br><span class="line">        System.out.println(sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类      </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">        HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">        <span class="comment">// 添加键值对</span></span><br><span class="line">        Sites.put(<span class="number">1</span>, <span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">2</span>, <span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">3</span>, <span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        Sites.put(<span class="number">4</span>, <span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line">        System.out.println(Sites);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>方法	描述<br>clear()	删除 hashMap 中的所有键&#x2F;值对<br>clone()	复制一份 hashMap<br>isEmpty()	判断 hashMap 是否为空<br>size()	计算 hashMap 中键&#x2F;值对的数量<br>put()	将键&#x2F;值对添加到 hashMap 中<br>putAll()	将所有键&#x2F;值对添加到 hashMap 中<br>putIfAbsent()	如果 hashMap 中不存在指定的键，则将指定的键&#x2F;值对插入到 hashMap 中。<br>remove()	删除 hashMap 中指定键 key 的映射关系<br>containsKey()	检查 hashMap 中是否存在指定的 key 对应的映射关系。<br>containsValue()	检查 hashMap 中是否存在指定的 value 对应的映射关系。<br>replace()	替换 hashMap 中是指定的 key 对应的 value。<br>replaceAll()	将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。<br>get()	获取指定 key 对应对 value<br>getOrDefault()	获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值<br>forEach()	对 hashMap 中的每个映射执行指定的操作。<br>entrySet()	返回 hashMap 中所有映射项的集合集合视图。<br>keySet()	返回 hashMap 中所有 key 组成的集合视图。<br>values()	返回 hashMap 中存在的所有 value 值。<br>merge()	添加键值对到 hashMap 中<br>compute()	对 hashMap 中指定 key 的值进行重新计算<br>computeIfAbsent()	对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中<br>computeIfPresent()	对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</p>
</blockquote>
<h1 id="Java-Iterator（迭代器）"><a href="#Java-Iterator（迭代器）" class="headerlink" title="Java Iterator（迭代器）"></a>Java Iterator（迭代器）</h1><p>迭代器 it 的两个基本操作是 next 、hasNext 和 remove。<br>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。<br>调用 it.hasNext() 用于检测集合中是否还有元素。<br>调用 it.remove() 将迭代器返回的元素删除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 ArrayList 和 Iterator 类</span></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建集合</span></span><br><span class="line">        ArrayList&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        sites.add(<span class="string">&quot;Google&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Taobao&quot;</span>);</span><br><span class="line">        sites.add(<span class="string">&quot;Zhihu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = sites.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出集合中的第一个元素</span></span><br><span class="line">        System.out.println(it.next());</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 输出集合中的所有元素</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            System.out.println(it.next());</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java-Object-类"><a href="#Java-Object-类" class="headerlink" title="Java Object 类"></a>Java Object 类</h1><blockquote>
<p>1	protected Object clone()<br>创建并返回一个对象的拷贝<br>2	boolean equals(Object obj)<br>比较两个对象是否相等<br>3	protected void finalize()<br>当 GC (垃圾回收器)确定不存在对该对象的有更多引用时，由对象的垃圾回收器调用此方法。<br>4	Class&lt;?&gt; getClass()<br>获取对象的运行时对象的类<br>5	int hashCode()<br>获取对象的 hash 值<br>6	void notify()<br>唤醒在该对象上等待的某个线程<br>7	void notifyAll()<br>唤醒在该对象上等待的所有线程<br>8	String toString()<br>返回对象的字符串表示形式<br>9	void wait()<br>让当前线程进入等待状态。直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法。<br>10	void wait(long timeout)<br>让当前线程处于等待(阻塞)状态，直到其他线程调用此对象的 notify() 方法或 notifyAll() 方法，或者超过参数设置的timeout超时时间。<br>11	void wait(long timeout, int nanos)<br>与 wait(long timeout) 方法类似，多了一个 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。</p>
</blockquote>
<h1 id="Java-泛型"><a href="#Java-泛型" class="headerlink" title="Java 泛型"></a>Java 泛型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 泛型方法 printArray                         </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt; E &gt; <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">( E[] inputArray )</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">// 输出数组元素            </span></span><br><span class="line">      <span class="keyword">for</span> ( E element : inputArray )&#123;        </span><br><span class="line">         System.out.printf( <span class="string">&quot;%s &quot;</span>, element );</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h1 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">private</span> T t;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(T t)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.t = t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Box&lt;Integer&gt; integerBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;Integer&gt;();</span><br><span class="line">    Box&lt;String&gt; stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;String&gt;();</span><br><span class="line"> </span><br><span class="line">    integerBox.add(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>));</span><br><span class="line">    stringBox.add(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;菜鸟教程&quot;</span>));</span><br><span class="line"> </span><br><span class="line">    System.out.printf(<span class="string">&quot;整型值为 :%d\n\n&quot;</span>, integerBox.get());</span><br><span class="line">    System.out.printf(<span class="string">&quot;字符串为 :%s\n&quot;</span>, stringBox.get());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest</span> &#123;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; name = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        List&lt;Integer&gt; age = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        List&lt;Number&gt; number = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Number&gt;();</span><br><span class="line">        </span><br><span class="line">        name.add(<span class="string">&quot;icon&quot;</span>);</span><br><span class="line">        age.add(<span class="number">18</span>);</span><br><span class="line">        number.add(<span class="number">314</span>);</span><br><span class="line"> </span><br><span class="line">        getData(name);</span><br><span class="line">        getData(age);</span><br><span class="line">        getData(number);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(List&lt;?&gt; data)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;data :&quot;</span> + data.get(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java-序列化"><a href="#Java-序列化" class="headerlink" title="Java 序列化"></a>Java 序列化</h1><p>Java 提供了一种对象序列化的机制，该机制中，一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型。<br>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化，也就是说，对象的类型信息、对象的数据，还有对象中的数据类型可以用来在内存中新建对象。</p>
<h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializeDemo</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">      e.name = <span class="string">&quot;Reyan Ali&quot;</span>;</span><br><span class="line">      e.address = <span class="string">&quot;Phokka Kuan, Ambehta Peer&quot;</span>;</span><br><span class="line">      e.SSN = <span class="number">11122333</span>;</span><br><span class="line">      e.number = <span class="number">101</span>;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span></span><br><span class="line">         <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;/tmp/employee.ser&quot;</span>);</span><br><span class="line">         <span class="type">ObjectOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">         out.writeObject(e);</span><br><span class="line">         out.close();</span><br><span class="line">         fileOut.close();</span><br><span class="line">         System.out.printf(<span class="string">&quot;Serialized data is saved in /tmp/employee.ser&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">          i.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="反序列化对象"><a href="#反序列化对象" class="headerlink" title="反序列化对象"></a>反序列化对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializeDemo</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">Employee</span> <span class="variable">e</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;/tmp/employee.ser&quot;</span>);</span><br><span class="line">         <span class="type">ObjectInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line">         e = (Employee) in.readObject();</span><br><span class="line">         in.close();</span><br><span class="line">         fileIn.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException i)</span><br><span class="line">      &#123;</span><br><span class="line">         i.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;<span class="keyword">catch</span>(ClassNotFoundException c)</span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Employee class not found&quot;</span>);</span><br><span class="line">         c.printStackTrace();</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Deserialized Employee...&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Name: &quot;</span> + e.name);</span><br><span class="line">      System.out.println(<span class="string">&quot;Address: &quot;</span> + e.address);</span><br><span class="line">      System.out.println(<span class="string">&quot;SSN: &quot;</span> + e.SSN);</span><br><span class="line">      System.out.println(<span class="string">&quot;Number: &quot;</span> + e.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java-网络编程"><a href="#Java-网络编程" class="headerlink" title="Java 网络编程"></a>Java 网络编程</h1><p>网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。<br>java.net 包中 J2SE 的 API 包含有类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。<br>java.net 包中提供了两种常见的网络协议的支持：</p>
<ul>
<li>TCP：TCP（英语：Transmission Control Protocol，传输控制协议） 是一种面向连接的、可靠的、基于字节流的传输层通信协议，TCP 层是位于 IP层之上，应用层之下的中间层。TCP 保障了两个应用程序之间的可靠通信。通常用于互联网协议，被称 TCP &#x2F; IP。</li>
<li>UDP：UDP （英语：User Datagram Protocol，用户数据报协议），位于 OSI 模型的传输层。一个无连接的协议。提供了应用程序之间要发送数据的数据报。由于UDP缺乏可靠性且属于无连接协议，所以应用程序通常必须容许一些丢失、错误或重复的数据包。</li>
</ul>
<h1 id="Socket-编程"><a href="#Socket-编程" class="headerlink" title="Socket 编程"></a>Socket 编程</h1><p>套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。<br>当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p>
<h1 id="ServerSocket-类的方法"><a href="#ServerSocket-类的方法" class="headerlink" title="ServerSocket 类的方法"></a>ServerSocket 类的方法</h1><h1 id="Socket-客户端实例"><a href="#Socket-客户端实例" class="headerlink" title="Socket 客户端实例"></a>Socket 客户端实例</h1><p>如下的 GreetingClient 是一个客户端程序，该程序通过 socket 连接到服务器并发送一个请求，然后等待一个响应。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名 GreetingClient.java</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingClient</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">String</span> <span class="variable">serverName</span> <span class="operator">=</span> args[<span class="number">0</span>];</span><br><span class="line">      <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;连接到主机：&quot;</span> + serverName + <span class="string">&quot; ，端口号：&quot;</span> + port);</span><br><span class="line">         <span class="type">Socket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(serverName, port);</span><br><span class="line">         System.out.println(<span class="string">&quot;远程主机地址：&quot;</span> + client.getRemoteSocketAddress());</span><br><span class="line">         <span class="type">OutputStream</span> <span class="variable">outToServer</span> <span class="operator">=</span> client.getOutputStream();</span><br><span class="line">         <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(outToServer);</span><br><span class="line"> </span><br><span class="line">         out.writeUTF(<span class="string">&quot;Hello from &quot;</span> + client.getLocalSocketAddress());</span><br><span class="line">         <span class="type">InputStream</span> <span class="variable">inFromServer</span> <span class="operator">=</span> client.getInputStream();</span><br><span class="line">         <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(inFromServer);</span><br><span class="line">         System.out.println(<span class="string">&quot;服务器响应： &quot;</span> + in.readUTF());</span><br><span class="line">         client.close();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">      &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Socket-服务端实例"><a href="#Socket-服务端实例" class="headerlink" title="Socket 服务端实例"></a>Socket 服务端实例</h1><p>如下的GreetingServer 程序是一个服务器端应用程序，使用 Socket 来监听一个指定的端口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名 GreetingServer.java</span></span><br><span class="line"><span class="keyword">import</span> java.net.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GreetingServer</span> <span class="keyword">extends</span> <span class="title class_">Thread</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">private</span> ServerSocket serverSocket;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">GreetingServer</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> IOException</span><br><span class="line">   &#123;</span><br><span class="line">      serverSocket = <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(port);</span><br><span class="line">      serverSocket.setSoTimeout(<span class="number">10000</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="keyword">try</span></span><br><span class="line">         &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;等待远程连接，端口号为：&quot;</span> + serverSocket.getLocalPort() + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">server</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;远程主机地址：&quot;</span> + server.getRemoteSocketAddress());</span><br><span class="line">            <span class="type">DataInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataInputStream</span>(server.getInputStream());</span><br><span class="line">            System.out.println(in.readUTF());</span><br><span class="line">            <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(server.getOutputStream());</span><br><span class="line">            out.writeUTF(<span class="string">&quot;谢谢连接我：&quot;</span> + server.getLocalSocketAddress() + <span class="string">&quot;\nGoodbye!&quot;</span>);</span><br><span class="line">            server.close();</span><br><span class="line">         &#125;<span class="keyword">catch</span>(SocketTimeoutException s)</span><br><span class="line">         &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Socket timed out!&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">         &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">try</span></span><br><span class="line">      &#123;</span><br><span class="line">         <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GreetingServer</span>(port);</span><br><span class="line">         t.run();</span><br><span class="line">      &#125;<span class="keyword">catch</span>(IOException e)</span><br><span class="line">      &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<p><code>服务端：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Server</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DatagramSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">5060</span>);</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>], <span class="number">1024</span>);</span><br><span class="line">            server.receive(packet);</span><br><span class="line">            System.out.println(packet.getAddress().getHostName() + <span class="string">&quot;(&quot;</span> + packet.getPort() + <span class="string">&quot;):&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData()));</span><br><span class="line">            packet.setData(<span class="string">&quot;Hello Client&quot;</span>.getBytes());</span><br><span class="line">            packet.setPort(<span class="number">5070</span>);</span><br><span class="line">            packet.setAddress(InetAddress.getLocalHost());</span><br><span class="line">            server.send(packet);</span><br><span class="line">            server.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>客户端:</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DatagramSocket</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>(<span class="number">5070</span>);</span><br><span class="line">            <span class="type">DatagramPacket</span> <span class="variable">packet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>],<span class="number">1024</span>);</span><br><span class="line">            packet.setPort(<span class="number">5060</span>);</span><br><span class="line">            packet.setAddress(InetAddress.getLocalHost());</span><br><span class="line">            packet.setData(<span class="string">&quot;Hello Server&quot;</span>.getBytes());</span><br><span class="line">            client.send(packet);</span><br><span class="line">            client.receive(packet);</span><br><span class="line">            System.out.println(packet.getAddress().getHostName() + <span class="string">&quot;(&quot;</span> + packet.getPort() + <span class="string">&quot;):&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(packet.getData()));</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>服务端和客户端是指计算机网络中的两个角色。<br>服务端（Server）是提供服务的计算机，通常负责处理请求并返回响应。服务端通常需要运行在网络服务器上，并侦听来自客户端的连接。<br>客户端（Client）是使用服务的计算机，通常向服务端发送请求并接收响应。客户端通常是普通的个人计算机或移动设备。<br>在计算机网络中，服务端和客户端之间通常通过网络协议（如 HTTP、FTP、SMTP 等）进行通信。服务端和客户端的关系是一种客户-服务器（Client-Server）模型，即客户端向服务端发送请求，服务端返回响应。</p>
</blockquote>
<blockquote>
<p>请求（Request）是指客户端向服务端发送的一条消息，用于请求服务端提供特定的资源或执行特定的操作。<br>响应（Response）是指服务端向客户端发送的一条消息，用于响应客户端的请求并返回数据或结果。</p>
</blockquote>
<h1 id="Java-发送邮件"><a href="#Java-发送邮件" class="headerlink" title="Java 发送邮件"></a>Java 发送邮件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.*;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendEmail</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String [] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 收件人电子邮箱</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> <span class="string">&quot;3185087246@protonmail.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发件人电子邮箱</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="string">&quot;3185087246@qq.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定发送邮件的主机为 smtp.qq.com</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;smtp.qq.com&quot;</span>;  <span class="comment">//QQ 邮件服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取系统属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> System.getProperties();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置邮件服务器</span></span><br><span class="line">        properties.setProperty(<span class="string">&quot;mail.smtp.host&quot;</span>, host);</span><br><span class="line"></span><br><span class="line">        properties.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取默认session对象</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> Session.getDefaultInstance(properties,<span class="keyword">new</span> <span class="title class_">Authenticator</span>()&#123;</span><br><span class="line">            <span class="keyword">public</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(<span class="string">&quot;3185087246@qq.com&quot;</span>, <span class="string">&quot;wahauxunfbaydebg&quot;</span>); <span class="comment">//发件人邮件用户名、授权码</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// 创建默认的 MimeMessage 对象</span></span><br><span class="line">                <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(session);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set From: 头部头字段</span></span><br><span class="line">                message.setFrom(<span class="keyword">new</span> <span class="title class_">InternetAddress</span>(from));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set To: 头部头字段</span></span><br><span class="line">                message.addRecipient(Message.RecipientType.TO,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(to));</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Set Subject: 头部头字段</span></span><br><span class="line">                message.setSubject(<span class="string">&quot;This is the Subject Line!&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 设置消息体</span></span><br><span class="line">                message.setText(<span class="string">&quot;测试&quot;</span>+i);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 发送消息</span></span><br><span class="line">                Transport.send(message);</span><br><span class="line">                System.out.println(<span class="string">&quot;邮件发送成功！&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (MessagingException mex) &#123;</span><br><span class="line">                mex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="Java-多线程编程"><a href="#Java-多线程编程" class="headerlink" title="Java 多线程编程"></a>Java 多线程编程</h1><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/java-thread.jpg" alt="图像"></p>
<h1 id="Java-提供了三种创建线程的方法："><a href="#Java-提供了三种创建线程的方法：" class="headerlink" title="Java 提供了三种创建线程的方法："></a>Java 提供了三种创建线程的方法：</h1><ul>
<li>通过实现 Runnable 接口；</li>
<li>通过继承 Thread 类本身；</li>
<li>通过 Callable 和 Future 创建线程。</li>
</ul>
<p><code>下面是一个创建线程并开始让它执行的实例：</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RunnableDemo</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   RunnableDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">      R1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">RunnableDemo</span> <span class="variable">R2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunnableDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">      R2.start();</span><br><span class="line">   &#125;   </span><br></pre></td></tr></table></figure>

<p><code>通过继承Thread来创建线程</code><br>创建一个线程的第二种方法是创建一个新的类，该类继承 Thread 类，然后创建一个该类的实例。<br>继承类必须重写 run() 方法，该方法是新线程的入口点。它也必须调用 start() 方法才能执行。<br>该方法尽管被列为一种多线程实现方式，但是本质上也是实现了 Runnable 接口的一个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadDemo</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Thread t;</span><br><span class="line">   <span class="keyword">private</span> String threadName;</span><br><span class="line">   </span><br><span class="line">   ThreadDemo( String name) &#123;</span><br><span class="line">      threadName = name;</span><br><span class="line">      System.out.println(<span class="string">&quot;Creating &quot;</span> +  threadName );</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Running &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread: &quot;</span> + threadName + <span class="string">&quot;, &quot;</span> + i);</span><br><span class="line">            <span class="comment">// 让线程睡眠一会</span></span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; interrupted.&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(<span class="string">&quot;Thread &quot;</span> +  threadName + <span class="string">&quot; exiting.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span> <span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Starting &quot;</span> +  threadName );</span><br><span class="line">      <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123;</span><br><span class="line">         t = <span class="keyword">new</span> <span class="title class_">Thread</span> (<span class="built_in">this</span>, threadName);</span><br><span class="line">         t.start ();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread</span> &#123;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">      <span class="type">ThreadDemo</span> <span class="variable">T1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>( <span class="string">&quot;Thread-1&quot;</span>);</span><br><span class="line">      T1.start();</span><br><span class="line">      </span><br><span class="line">      <span class="type">ThreadDemo</span> <span class="variable">T2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadDemo</span>( <span class="string">&quot;Thread-2&quot;</span>);</span><br><span class="line">      T2.start();</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Thread-方法"><a href="#Thread-方法" class="headerlink" title="Thread 方法"></a>Thread 方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span></span><br><span class="line">使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</span><br><span class="line"><span class="number">2</span>	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</span><br><span class="line"><span class="number">3</span>	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span></span><br><span class="line">改变线程名称，使之与参数 name 相同。</span><br><span class="line"><span class="number">4</span>	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setPriority</span><span class="params">(<span class="type">int</span> priority)</span></span><br><span class="line"> 更改线程的优先级。</span><br><span class="line"><span class="number">5</span>	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setDaemon</span><span class="params">(<span class="type">boolean</span> on)</span></span><br><span class="line">将该线程标记为守护线程或用户线程。</span><br><span class="line"><span class="number">6</span>	<span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">join</span><span class="params">(<span class="type">long</span> millisec)</span></span><br><span class="line">等待该线程终止的时间最长为 millis 毫秒。</span><br><span class="line"><span class="number">7</span>	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">interrupt</span><span class="params">()</span></span><br><span class="line">中断线程。</span><br><span class="line"><span class="number">8</span>	<span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isAlive</span><span class="params">()</span></span><br><span class="line">测试线程是否处于活动状态。</span><br></pre></td></tr></table></figure>


<h1 id="通过-Callable-和-Future-创建线程"><a href="#通过-Callable-和-Future-创建线程" class="headerlink" title="通过 Callable 和 Future 创建线程"></a>通过 Callable 和 Future 创建线程</h1><ol>
<li>创建 Callable 接口的实现类，并实现 call() 方法，该 call() 方法将作为线程执行体，并且有返回值。</li>
<li>创建 Callable 实现类的实例，使用 FutureTask 类来包装 Callable 对象，该 FutureTask 对象封装了该 Callable 对象的 call() 方法的返回值。</li>
<li>使用 FutureTask 对象作为 Thread 对象的 target 创建并启动新线程。</li>
<li>调用 FutureTask 对象的 get() 方法来获得子线程执行结束后的返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CallableThreadTest</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">CallableThreadTest</span> <span class="variable">ctt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CallableThreadTest</span>();  </span><br><span class="line">        FutureTask&lt;Integer&gt; ft = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(ctt);  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; <span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 的循环变量i的值&quot;</span>+i);  </span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">20</span>)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Thread</span>(ft,<span class="string">&quot;有返回值的线程&quot;</span>).start();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">try</span>  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(<span class="string">&quot;子线程的返回值：&quot;</span>+ft.get());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e)  </span><br><span class="line">        &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span>(;i&lt;<span class="number">100</span>;i++)  </span><br><span class="line">        &#123;  </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &quot;</span>+i);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> i;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>创建线程的三种方式的对比</code></p>
<ol>
<li>采用实现 Runnable、Callable 接口的方式创建多线程时，线程类只是实现了 Runnable 接口或 Callable 接口，还可以继承其他类。</li>
<li>使用继承 Thread 类的方式创建多线程时，编写简单，如果需要访问当前线程，则无需使用 Thread.currentThread() 方法，直接使用 this 即可获得当前线程。</li>
</ol>
<h1 id="Java-文档注释"><a href="#Java-文档注释" class="headerlink" title="Java 文档注释"></a>Java 文档注释</h1><blockquote>
<p>@author	标识一个类的作者	@author description<br>    @deprecated	指名一个过期的类或成员	@deprecated description<br>    {@docRoot}	指明当前文档根目录的路径	Directory Path<br>    @exception	标志一个类抛出的异常	@exception exception-name explanation<br>    {@inheritDoc}	从直接父类继承的注释	Inherits a comment from the immediate surperclass.<br>    {@link}	插入一个到另一个主题的链接	{@link name text}<br>    {@linkplain}	插入一个到另一个主题的链接，但是该链接显示纯文本字体	Inserts an in-line link to another topic.<br>    @param	说明一个方法的参数	@param parameter-name explanation<br>    @return	说明返回值类型	@return explanation<br>    @see	指定一个到另一个主题的链接	@see anchor<br>    @serial	说明一个序列化属性	@serial description<br>    @serialData	说明通过writeObject( ) 和 writeExternal( )方法写的数据	@serialData description<br>    @serialField	说明一个ObjectStreamField组件	@serialField name type description<br>    @since	标记当引入一个特定的变化时	@since release<br>    @throws	和 @exception标签一样.	The @throws tag has the same meaning as the @exception tag.<br>    {@value}	显示常量的值，该常量必须是static属性。	Displays the value of a constant, which must be a static field.<br>    @version	指定类的版本	@version info</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这个类演示了文档注释</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Ayan Amhed</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SquareNum</span> &#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method returns the square of num.</span></span><br><span class="line"><span class="comment">   * This is a multiline description. You can use</span></span><br><span class="line"><span class="comment">   * as many lines as you like.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> num The value to be squared.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> num squared.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">square</span><span class="params">(<span class="type">double</span> num)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> num * num;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method inputs a number from the user.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> The value input as a double.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@exception</span> IOException On input error.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> IOException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getNumber</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">      <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in);</span><br><span class="line">      <span class="type">BufferedReader</span> <span class="variable">inData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">      String str;</span><br><span class="line">      str = inData.readLine();</span><br><span class="line">      <span class="keyword">return</span> (<span class="keyword">new</span> <span class="title class_">Double</span>(str)).doubleValue();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This method demonstrates square().</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> args Unused.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Nothing.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@exception</span> IOException On input error.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@see</span> IOException</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="type">SquareNum</span> <span class="variable">ob</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SquareNum</span>();</span><br><span class="line">      <span class="type">double</span> val;</span><br><span class="line">      System.out.println(<span class="string">&quot;Enter value to be squared: &quot;</span>);</span><br><span class="line">      val = ob.getNumber();</span><br><span class="line">      val = ob.square(val);</span><br><span class="line">      System.out.println(<span class="string">&quot;Squared value is &quot;</span> + val);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
























]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>第九阶段-集合框架</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab复习题</title>
    <url>/post/matlab.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>大三上</tag>
      </tags>
  </entry>
  <entry>
    <title>java集合</title>
    <url>/post/java%E9%9B%86%E5%90%88.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Markdown写作</title>
    <url>/post/md%E8%AF%B4%E6%98%8E.html</url>
    <content><![CDATA[<h1 id="Markdown-写作"><a href="#Markdown-写作" class="headerlink" title="Markdown 写作"></a>Markdown 写作</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>你的内容标题应该从二级标题（ <code>##</code> ）开始</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure>

<h2 id="强调，斜体，删除线"><a href="#强调，斜体，删除线" class="headerlink" title="强调，斜体，删除线"></a>强调，斜体，删除线</h2><p>我们只知道 <strong>地球</strong> 具有让人类生存的环境，还有 <del>火星</del> ，也许还有 <em>其它星球</em> 。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我们只知道 <span class="strong">**地球**</span> 具有让人类生存的环境，还有 ~~火星~~ ，也许还有 <span class="emphasis">*其它星球*</span> 。</span><br></pre></td></tr></table></figure>

<h2 id="分隔符"><a href="#分隔符" class="headerlink" title="分隔符"></a>分隔符</h2><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure>

<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>你应该避免直接内嵌 HTML 代码。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">link name</span>](<span class="link">link url</span>) 或者 <span class="language-xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">url</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li><p>多翻译引擎</p>
<ul>
<li>谷歌翻译</li>
<li>微软翻译</li>
<li>有道翻译</li>
<li>百度翻译</li>
<li>阿里翻译</li>
<li>DeepL 翻译</li>
</ul>
</li>
<li><p>多语言互译</p>
</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> 多翻译引擎</span><br><span class="line">  </span><br><span class="line"><span class="bullet">    *</span> 谷歌翻译</span><br><span class="line"><span class="bullet">    *</span> 微软翻译</span><br><span class="line"><span class="bullet">    *</span> 有道翻译</span><br><span class="line"><span class="bullet">    *</span> 百度翻译</span><br><span class="line"><span class="bullet">    *</span> 阿里翻译</span><br><span class="line"><span class="bullet">    *</span> DeepL 翻译</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> 多语言互译</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用单引号 <code>code</code> 来表示行内代码，使用三引号来表示代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure>

<p>并且对于代码块，你应该<strong>写上对应的语言</strong>。</p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>你应该避免内嵌 HTML 来插入图片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![link name](picture url)</span><br></pre></td></tr></table></figure>

<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>下面是一段注释</p>
<blockquote>
<p>这里是一段注释 (<code>&lt;blockquote&gt;&lt;/blockquote&gt;</code>)<br>这是注释的第二行</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这里是注释里面的代码段</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注释</p>
<blockquote>
<p>注释嵌套<br>注释嵌套</p>
</blockquote>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">下面是一段注释</span><br><span class="line"><span class="quote">&gt; 这里是一段注释 (`<span class="language-xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span>`)</span></span><br><span class="line"><span class="quote">&gt; 这是注释的第二行</span></span><br><span class="line"></span><br><span class="line"><span class="section"># 这里是注释里面的代码段</span></span><br><span class="line">print(&quot;hello&quot;)</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; 注释</span></span><br><span class="line">&gt;&gt; 注释嵌套</span><br><span class="line">&gt;&gt; 注释嵌套</span><br></pre></td></tr></table></figure>

<h2 id="Emoji"><a href="#Emoji" class="headerlink" title="Emoji"></a>Emoji</h2><p>暂不支持 <code>emoji</code> 语法，但是可以直接从 <code>emoji</code> 表情大全拷贝表情到文档，比如:<br>🍊 🍇 😀 😅 😇</p>
<blockquote>
<p>访问<a href="http://emojihomepage.com/">http://emojihomepage.com/</a>以获取更多emoji</p>
</blockquote>
<h2 id="上下标"><a href="#上下标" class="headerlink" title="上下标"></a>上下标</h2><p>H<del>2</del>O， y &#x3D; x^2^</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">H~2~O， y = x^2^</span><br></pre></td></tr></table></figure>

<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>我能干饭我自豪。<a href="%E8%80%81%E5%AD%90%E8%AF%B4%E9%81%93">^干饭人</a></p>
<p>这会在文章末尾进行注解</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">我能干饭我自豪。[^干饭人]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^干饭人</span>]: <span class="link">老子说道</span></span><br><span class="line">这会在文章末尾进行注解</span><br></pre></td></tr></table></figure>

<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table>
<thead>
<tr>
<th>Header 1</th>
<th><em>Header2</em></th>
</tr>
</thead>
<tbody><tr>
<td><code>Cell 1</code></td>
<td><a href="http://example.com/">Cell 2</a> link</td>
</tr>
<tr>
<td>Cell 3</td>
<td><strong>Cell 4</strong></td>
</tr>
</tbody></table>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| Header 1 | <span class="emphasis">*Header2*</span> |</span><br><span class="line">| -------- | -------- |</span><br><span class="line">| <span class="code">`Cell 1`</span> | [<span class="string">Cell 2</span>](<span class="link">http://example.com</span>) link |</span><br><span class="line">| Cell 3 | <span class="strong">**Cell 4**</span> |</span><br></pre></td></tr></table></figure>

<h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 任务1</li>
<li><input checked="" disabled="" type="checkbox"> 任务2</li>
<li><input disabled="" type="checkbox"> 任务3</li>
<li><input disabled="" type="checkbox"> 任务4</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 任务1</span><br><span class="line"><span class="bullet">-</span> [x] 任务2</span><br><span class="line"><span class="bullet">-</span> [ ] 任务3</span><br><span class="line"><span class="bullet">-</span> [ ] 任务4</span><br></pre></td></tr></table></figure>

<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>文档支持 <code>LaTeX</code> ，关于 <code>LaTeX</code> ，你可以访问 <a href="https://www.cnblogs.com/1024th/p/11623258.html">LaTeX公式手册</a> 来获取帮助。</p>
<h2 id="mermaid-支持"><a href="#mermaid-支持" class="headerlink" title="mermaid 支持"></a>mermaid 支持</h2><p>使用 mermaid 可以画很多类型的图表， 详细的语法和支持请看<a href="https://mermaid-js.github.io/">官网</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">  Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">  loop Healthcheck</span><br><span class="line">      John-&gt;&gt;John: Fight against hypochondria</span><br><span class="line">  end</span><br><span class="line">  Note right of John: Rational thoughts!</span><br><span class="line">  John--&gt;&gt;Alice: Great!</span><br><span class="line">  John-&gt;&gt;Bob: How about you?</span><br><span class="line">  Bob--&gt;&gt;John: Jolly good!</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```mermaid</span></span><br><span class="line"><span class="code">sequenceDiagram</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    loop Healthcheck</span></span><br><span class="line"><span class="code">        John-&gt;&gt;John: Fight against hypochondria</span></span><br><span class="line"><span class="code">    end</span></span><br><span class="line"><span class="code">    Note right of John: Rational thoughts!</span></span><br><span class="line"><span class="code">    John--&gt;&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    John-&gt;&gt;Bob: How about you?</span></span><br><span class="line"><span class="code">    Bob--&gt;&gt;John: Jolly good!</span></span><br></pre></td></tr></table></figure>
<pre><code>
</code></pre>
]]></content>
      <categories>
        <category>Markdown写作</category>
      </categories>
      <tags>
        <tag>md写作</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql</title>
    <url>/post/mysql.html</url>
    <content><![CDATA[<h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><blockquote>
<p>在windows中不区分大小写，在linux中区分大小写。</p>
</blockquote>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line">use mall_admin;</span><br><span class="line">show tables;</span><br><span class="line">select * from tb_user;</span><br></pre></td></tr></table></figure>

<h1 id="直接操作流程"><a href="#直接操作流程" class="headerlink" title="直接操作流程"></a>直接操作流程</h1><p>这是一个创建名为 <code>tb_user</code> 的表的DDL语句，其中包含了表的结构和约束。以下是对该DDL语句的解释：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user</span><br><span class="line">(</span><br><span class="line">    user_id     <span class="type">bigint</span> auto_increment</span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    username    <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    mobile      <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;手机号&#x27;</span>,</span><br><span class="line">    password    <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    create_time datetime    <span class="keyword">null</span> comment <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">constraint</span> index_tb_user_username</span><br><span class="line">        <span class="keyword">unique</span> (username),</span><br><span class="line">    <span class="keyword">constraint</span> username</span><br><span class="line">        <span class="keyword">unique</span> (username)</span><br><span class="line">)</span><br><span class="line">    comment <span class="string">&#x27;用户&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ul>
<li><code>create table tb_user</code>：创建名为 <code>tb_user</code> 的表。</li>
<li><code>user_id</code>：定义一个名为 <code>user_id</code> 的字段，类型为 <code>bigint</code>，并且具有自增特性，作为主键。</li>
<li><code>username</code>：定义一个名为 <code>username</code> 的字段，类型为 <code>varchar(50)</code>，不能为空，用于存储用户名。</li>
<li><code>mobile</code>：定义一个名为 <code>mobile</code> 的字段，类型为 <code>varchar(20)</code>，不能为空，用于存储手机号。</li>
<li><code>password</code>：定义一个名为 <code>password</code> 的字段，类型为 <code>varchar(64)</code>，可以为空，用于存储密码。</li>
<li><code>create_time</code>：定义一个名为 <code>create_time</code> 的字段，类型为 <code>datetime</code>，可以为空，用于存储创建时间。</li>
<li><code>constraint index_tb_user_username unique (username)</code>：创建一个名为 <code>index_tb_user_username</code> 的唯一索引，用于确保 <code>username</code> 的唯一性。</li>
<li><code>constraint username unique (username)</code>：创建一个名为 <code>username</code> 的唯一约束，也是为了确保 <code>username</code> 的唯一性。</li>
<li><code>comment &#39;用户&#39;</code>：给表添加注释，描述为“用户”。</li>
</ul>
<p>该DDL语句创建了一个名为 <code>tb_user</code> 的表，包含了主键、唯一索引和唯一约束等约束，以及对各个字段的数据类型和注释进行定义。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>leetcode</title>
    <url>/post/leetcode.html</url>
    <content><![CDATA[<h1 id="题目来自于剑指offer"><a href="#题目来自于剑指offer" class="headerlink" title="题目来自于剑指offer"></a>题目来自于<code>剑指offer</code></h1><blockquote>
<p>目的是为了总结leetcode上面自己不会的题目</p>
</blockquote>
<h1 id="第一题原题"><a href="#第一题原题" class="headerlink" title="第一题原题"></a>第一题<a href="https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/?envType=study-plan-v2&envId=coding-interviews">原题</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(b)&#123;</span><br><span class="line">            ans=a^b;</span><br><span class="line">            <span class="comment">// 注意优先级</span></span><br><span class="line">            b=((a&amp;b)&lt;&lt;<span class="number">1</span>);</span><br><span class="line">            a=ans;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>解析：<br>我们来看看代码是如何实现这个二进制加法的过程的：</p>
<ol>
<li>首先，定义一个整数变量 <code>ans</code> 并初始化为0，用来存储计算结果。</li>
<li>使用 <code>while</code> 循环进行加法计算，循环的结束条件是 <code>b</code> 不为0。这是因为当 <code>b</code> 为0时，说明没有进位了，加法运算已经结束，此时计算结果即为 <code>ans</code></li>
<li>在循环体内部，我们进行以下操作：<ul>
<li>通过异或运算 <code>a ^ b</code> 计算当前位的无进位和，并将结果存储在 <code>ans</code> 中。这是因为异或运算可以得到不考虑进位的加法结果。</li>
<li>然后，通过位运算 <code>(a &amp; b) &lt;&lt; 1</code> 计算当前位的进位，并将结果存储在 <code>b</code> 中。这里的 <code>&lt;&lt; 1</code> 表示将进位左移一位，这样它就能与下一位相加。通过 <code>a &amp; b</code>，我们可以得到当前位上的进位信息。</li>
</ul>
</li>
<li>重复执行步骤3，直到进位 <code>b</code> 为0，循环结束。</li>
<li>返回计算结果 <code>ans</code>，即两个整数的和。<br>下面是逐步解释代码中的例子 <code>a = 5</code> 和 <code>b = 3</code>：</li>
</ol>
<p>思路：拿到无进制和，拿到进制和，无进制和与进制和进行无进制和操作，直到，进制和变为0.</p>
<h1 id="第二题-思维题"><a href="#第二题-思维题" class="headerlink" title="第二题 思维题"></a>第二题 <a href="https://leetcode.cn/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/description/?envType=study-plan-v2&envId=coding-interviews">思维题</a></h1><p><code>注意：连续的正整数</code></p>
<blockquote>
<p>输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p>
</blockquote>
<p><img src="/post/leetcode/2.jpg"></p>
<h1 id="第三题-约瑟夫环"><a href="#第三题-约瑟夫环" class="headerlink" title="第三题 约瑟夫环"></a>第三题 <a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solutions/178427/huan-ge-jiao-du-ju-li-jie-jue-yue-se-fu-huan-by-as/?envType=study-plan-v2&envId=coding-interviews">约瑟夫环</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lastRemaining</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//只关心最终活着那个人的序号变化</span></span><br><span class="line">       <span class="type">int</span> pos=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">       <span class="comment">// 这个是逆推，最后剩余2个人的时候，推导最后剩余3个人的时候。</span></span><br><span class="line">       <span class="comment">// 一直推到，最后剩余n个人。</span></span><br><span class="line">            pos=(pos+m)%i;</span><br><span class="line">        <span class="keyword">return</span> pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="第四题-查找数字"><a href="#第四题-查找数字" class="headerlink" title="第四题 查找数字"></a>第四题 <a href="https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/description/?envType=study-plan-v2&envId=coding-interviews">查找数字</a></h1><blockquote>
<p>写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">strToInt</span><span class="params">(string str)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> sign = <span class="literal">true</span>;   <span class="comment">//默认为正数</span></span><br><span class="line">        <span class="comment">//先舍弃开头可能存在的空格</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.<span class="built_in">size</span>() &amp;&amp; str[i] == <span class="string">&#x27; &#x27;</span>) i++;</span><br><span class="line">        <span class="comment">//接着判断首个字符是否为正负号</span></span><br><span class="line">        <span class="keyword">if</span>(str[i] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            sign = <span class="literal">false</span>; </span><br><span class="line">            i++;      </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str[i] == <span class="string">&#x27;+&#x27;</span>) i++; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(str[i] &lt; <span class="string">&#x27;0&#x27;</span> || str[i] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;  </span><br><span class="line">        <span class="type">int</span> num;</span><br><span class="line">        <span class="type">int</span> border = INT_MAX / <span class="number">10</span>; </span><br><span class="line">        <span class="keyword">while</span>(i &lt; str.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(str[i] &lt; <span class="string">&#x27;0&#x27;</span> || str[i] &gt; <span class="string">&#x27;9&#x27;</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(res &gt; border || res == border &amp;&amp; str[i] &gt; <span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> sign == <span class="literal">true</span> ? INT_MAX : INT_MIN;</span><br><span class="line">            <span class="comment">//开始对数字字符进行转换</span></span><br><span class="line">            num = str[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            res = res * <span class="number">10</span> + num;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后结果根据符号添加正负号</span></span><br><span class="line">        <span class="keyword">return</span> sign == <span class="literal">true</span> ? res : -res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="接雨水原题"><a href="#接雨水原题" class="headerlink" title="接雨水原题"></a>接雨水<a href="https://leetcode.cn/problems/trapping-rain-water/">原题</a></h1><p><img src="/post/leetcode/3.jpg"></p>
<p><a href="https://www.bilibili.com/video/BV1Qg411q7ia/?vd_source=5c0fbacddc9b27f70f605f6cbf43d269">讲解视频链接</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">trap</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=height.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> pm=<span class="number">0</span>,sm=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            pm=<span class="built_in">max</span>(pm,height[l]);</span><br><span class="line">            sm=<span class="built_in">max</span>(sm,height[r]);</span><br><span class="line">            <span class="keyword">if</span>(pm&lt;sm)&#123;</span><br><span class="line">                ans+=(pm-height[l]);</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans+=(sm-height[r]);</span><br><span class="line">                r--;</span><br><span class="line">            &#125; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>




<h1 id="最长不包含重复的子串"><a href="#最长不包含重复的子串" class="headerlink" title="最长不包含重复的子串"></a><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/description/">最长不包含重复的子串</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;window;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>，res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">char</span> c=s[r];</span><br><span class="line">            r++;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span>(window[c]&gt;<span class="number">1</span>)&#123;<span class="comment">// 记录区间[l,r]是否含有重复子串</span></span><br><span class="line">                <span class="type">char</span> d=s[l];</span><br><span class="line">                l++;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">            res=<span class="built_in">max</span>(res,r-l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a><a href="https://leetcode.cn/problems/ju-zhen-zhong-de-lu-jing-lcof/description/?envType=study-plan-v2&envId=coding-interviews">矩阵中的路径</a></h1><blockquote>
<p>给定一个 m x n 二维字符网格 board 和一个字符串单词 word 。如果 word 存在于网格中，返回 true；否则，返回 false 。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">exist</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=board.<span class="built_in">size</span>(),m=board[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(board[i][j]==word[<span class="number">0</span>])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">dfs</span>(board,word,i,j))</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; board, string word,<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(word.<span class="built_in">size</span>()==<span class="number">0</span>)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=board.<span class="built_in">size</span>()||j&lt;<span class="number">0</span>||j&gt;=board[<span class="number">0</span>].<span class="built_in">size</span>())<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(board[i][j]!=word[<span class="number">0</span>])<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span> tem=board[i][j];</span><br><span class="line">        board[i][j]=<span class="string">&#x27;/&#x27;</span>;<span class="comment">// 标记被找过了 这个是很巧妙的</span></span><br><span class="line">        <span class="comment">// string nword(word.begin() + 1, word.end());</span></span><br><span class="line">        word=word.<span class="built_in">substr</span>(<span class="number">1</span>);<span class="comment">// 截取函数，从下标1开始截取</span></span><br><span class="line">        <span class="type">bool</span> ans=<span class="built_in">dfs</span>(board,word,i+<span class="number">1</span>,j)||</span><br><span class="line">                 <span class="built_in">dfs</span>(board,word,i,j+<span class="number">1</span>)||</span><br><span class="line">                 <span class="built_in">dfs</span>(board,word,i<span class="number">-1</span>,j)||</span><br><span class="line">                 <span class="built_in">dfs</span>(board,word,i,j<span class="number">-1</span>);</span><br><span class="line">        <span class="comment">// 回溯思想</span></span><br><span class="line">        board[i][j]=tem;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><blockquote>
<p>关键在于边界问题，传入0,n, i&#x3D;0-1,j&#x3D;n+1,找一个基准x，下标是i+j&gt;&gt;1;<br>按照i &lt; j 条件进行do while循环，找到左边大于x的，找到右边小于x的，进行swap;<br>递归  [l,j],[j+1,r]</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组是从0开始的。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 这里的l-1和r+1 越界了，但是使用的是do while 语句，不会越界</span></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-yu-shuang-xiang-lian-biao-lcof/description/?envType=study-plan-v2&envId=coding-interviews">二叉搜索树与双向链表</a></h1><blockquote>
<p>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的循环双向链表。要求不能创建任何新的节点，只能调整树中节点指针的指向。</p>
</blockquote>
<p><img src="/post/leetcode/4.jpg"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 前驱节点pre </span></span><br><span class="line">    Node* pre ,* head;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(Node* cur)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(cur==<span class="literal">nullptr</span>)<span class="keyword">return</span> ;</span><br><span class="line">        <span class="built_in">dfs</span>(cur-&gt;left);</span><br><span class="line">        <span class="comment">// 这个地方当前cur 是2，pre 是1 ，是cur左节点指向pre,</span></span><br><span class="line">        <span class="comment">// 需要修改成 pre 右节点指向cur,cur 左节点指向pre</span></span><br><span class="line">        <span class="keyword">if</span>(pre!=<span class="literal">nullptr</span>) pre-&gt;right=cur;</span><br><span class="line">        <span class="keyword">else</span> head=cur;<span class="comment">// 表示正在访问链表头节点 记录一下，最后要用到</span></span><br><span class="line">        cur-&gt;left=pre;</span><br><span class="line">        pre=cur;<span class="comment">// 更新一下前驱节点</span></span><br><span class="line">        <span class="built_in">dfs</span>(cur-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Node* <span class="title">treeToDoublyList</span><span class="params">(Node* root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!root)<span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(root);</span><br><span class="line">        head-&gt;left=pre;</span><br><span class="line">        pre-&gt;right=head;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a><a href="https://leetcode.cn/problems/zhong-jian-er-cha-shu-lcof/description/?envType=study-plan-v2&envId=coding-interviews">重建二叉树</a></h1><blockquote>
<p>输入某二叉树的前序遍历和中序遍历的结果，请构建该二叉树并返回其根节点。<br>假设输入的前序遍历和中序遍历的结果中都不含重复的数字。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">TreeNode* <span class="title">buildTree</span><span class="params">(vector&lt;<span class="type">int</span>&gt; preorder, vector&lt;<span class="type">int</span>&gt; inorder)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=preorder.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> rVal=preorder[<span class="number">0</span>],rIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="keyword">if</span>(inorder[i]==rVal)&#123;</span><br><span class="line">                rIndex=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        TreeNode* root=<span class="keyword">new</span> <span class="built_in">TreeNode</span>(rVal);</span><br><span class="line">        root-&gt;left = <span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>() + <span class="number">1</span>, preorder.<span class="built_in">begin</span>() + <span class="number">1</span> + rIndex),<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(inorder.<span class="built_in">begin</span>(), inorder.<span class="built_in">begin</span>() + rIndex));</span><br><span class="line">        root-&gt;right = <span class="built_in">buildTree</span>(<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(preorder.<span class="built_in">begin</span>() + <span class="number">1</span> + rIndex, preorder.<span class="built_in">end</span>()),<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(inorder.<span class="built_in">begin</span>() + rIndex + <span class="number">1</span>, inorder.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="最长不含重复子串"><a href="#最长不含重复子串" class="headerlink" title="最长不含重复子串"></a><a href="https://leetcode.cn/problems/zui-chang-bu-han-zhong-fu-zi-fu-de-zi-zi-fu-chuan-lcof/submissions/?envType=study-plan-v2&envId=coding-interviews">最长不含重复子串</a></h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;<span class="type">char</span>,<span class="type">int</span>&gt;window;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(r&lt;s.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="type">char</span> c=s[r];</span><br><span class="line">            r++;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">while</span>(window[c]&gt;<span class="number">1</span>)&#123;<span class="comment">// 记录区间[l,r]是否含有重复子串</span></span><br><span class="line">                <span class="type">char</span> d=s[l];</span><br><span class="line">                l++;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">            res=<span class="built_in">max</span>(res,r-l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="二叉搜索树的后续遍历"><a href="#二叉搜索树的后续遍历" class="headerlink" title="二叉搜索树的后续遍历"></a><a href="https://leetcode.cn/problems/er-cha-sou-suo-shu-de-hou-xu-bian-li-xu-lie-lcof/description/?envType=study-plan-v2&envId=coding-interviews">二叉搜索树的后续遍历</a></h1><blockquote>
<p>熟练掌握二叉搜索树。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp;v,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;=r)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> mx=v[r],idx=l;</span><br><span class="line">        <span class="keyword">while</span>(v[idx]&lt;mx)idx++;</span><br><span class="line">        <span class="type">int</span> m=idx;<span class="comment">//右子树第一个点</span></span><br><span class="line">        <span class="keyword">while</span>(idx&lt;r)&#123;</span><br><span class="line">            <span class="comment">// 如果m~r 区间出现比mx小的点，则不会是后续遍历</span></span><br><span class="line">            <span class="keyword">if</span>(v[idx]&lt;mx)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(v,l,m<span class="number">-1</span>)&amp;&amp;<span class="built_in">dfs</span>(v,m,r<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">verifyPostorder</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(postorder,<span class="number">0</span>,postorder.<span class="built_in">size</span>()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="comment">//递归的终止情况</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//第一步：分成子问题</span></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//第二步：递归处理子问题</span></span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="comment">//第三步：合并子问题</span></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">    <span class="comment">//第四步：复制回原数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) </span><br><span class="line">        q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://leetcode.cn/problems/shu-zu-zhong-de-ni-xu-dui-lcof/description/?envType=study-plan-v2&envId=coding-interviews">例题P51</a>：</p>
<blockquote>
<p>在数组中的两个数字，如果前面一个数字大于后面的数字，则这两个数字组成一个逆序对。输入一个数组，求出这个数组中的逆序对的总数。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">merge_sort</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; q,vector&lt;<span class="type">int</span>&gt;&amp; tmp, <span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans=<span class="built_in">merge_sort</span>(q,tmp, l, mid)+<span class="built_in">merge_sort</span>(q,tmp, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">            <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ],ans+=(j-mid<span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ],ans+=(j-mid<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line">        <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) </span><br><span class="line">            q[i] = tmp[j];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reversePairs</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">tmp</span>(n);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">merge_sort</span>(nums,tmp,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><blockquote>
<p>KMP算法的本质就是寻找子串的最长前后缀</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n, m, ne[N];</span><br><span class="line"><span class="type">char</span> p[N], s[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%s%d%s&quot;</span>, &amp;n, p + <span class="number">1</span>, &amp;m, s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        ne[i] = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">        <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j++;</span><br><span class="line">        <span class="keyword">if</span> (j == n) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, i - n);</span><br><span class="line">            j = ne[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>




























































]]></content>
      <categories>
        <category>面试刷题</category>
      </categories>
      <tags>
        <tag>面试刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统复习题</title>
    <url>/post/os_class.html</url>
    <content><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><p><img src="/post/os_class/1-1.jpg"><br>解答：<br><img src="/post/os_class/1-2.jpg"></p>
]]></content>
      <categories>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>大三上</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-订单服务</title>
    <url>/post/order-search.html</url>
    <content><![CDATA[<p><code>商城业务</code></p>
<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>虚拟机Nginx的全局配置：&#x2F;mydata&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<p>虚拟机ip和一个域名进行绑定（本地）</p>
<p>正向代理：隐藏客户端(VPN)<br>反向代理：隐藏服务器(Nginx)</p>
<p><img src="http://t.csdnimg.cn/V7KrN" alt="nginx配置链接"></p>
<h1 id="Nginx-动静分离"><a href="#Nginx-动静分离" class="headerlink" title="Nginx 动静分离"></a>Nginx 动静分离</h1><p>参考链接:<a href="https://www.cnblogs.com/javahr/p/15704733.html#_label1_1">https://www.cnblogs.com/javahr/p/15704733.html#_label1_1</a></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a><code>nginx.conf</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream gulimall&#123;</span><br><span class="line">    # 这个是gateway的接口。</span><br><span class="line">    server 主机ip:88;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gulimall-conf"><a href="#gulimall-conf" class="headerlink" title="gulimall.conf"></a><code>gulimall.conf</code></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;  # 监听80端口</span><br><span class="line">    server_name gulimall.com;  # 服务器名</span><br><span class="line"></span><br><span class="line">    location /static &#123;</span><br><span class="line">        # 这里跟mydata哪里是映射关系，直接填这个就行。</span><br><span class="line">        root /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://gulimall;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="gateway"><a href="#gateway" class="headerlink" title="gateway"></a><code>gateway</code></h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gulimall_host_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Host=gulimall.com</span></span><br></pre></td></tr></table></figure>





<h1 id="P173-检索服务"><a href="#P173-检索服务" class="headerlink" title="P173 检索服务"></a>P173 检索服务</h1><h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p><code>2023-10-11</code>日，使用虚拟机配置docker运行Nginx服务器，把hello world跑出来了。</p>
<p><code>2023-10-15</code>日，nginx动静分离搭配好了，感谢链接<code>https://www.cnblogs.com/javahr/p/15704733.html#_label1_1</code>。</p>
<h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1>]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>订单搜索</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本语法</title>
    <url>/post/python3.html</url>
    <content><![CDATA[<h1 id="python基本语法"><a href="#python基本语法" class="headerlink" title="python基本语法"></a>python基本语法</h1><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul>
<li>第一个字符必须是字母表中字母或下划线 _ 。    </li>
<li>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</li>
<li>Python通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句</li>
</ul>
<p>Python 中单引号 ‘ 和双引号 “ 使用完全相同。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;123456789&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)                 <span class="comment"># 输出字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])           <span class="comment"># 输出第一个到倒数第二个的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>])              <span class="comment"># 输出字符串第一个字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])            <span class="comment"># 输出从第三个开始到第五个的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:])             <span class="comment"># 输出从第三个开始后的所有字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>])          <span class="comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> * <span class="number">2</span>)             <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span> + <span class="string">&#x27;你好&#x27;</span>)         <span class="comment"># 连接字符串</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------------------&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello\nrunoob&#x27;</span>)      <span class="comment"># 使用反斜杠(\)+n转义特殊字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;hello\nrunoob&#x27;</span>)     <span class="comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义</span></span><br></pre></td></tr></table></figure>

<ul>
<li>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。 空行也是程序代码的一部分。</li>
</ul>
<h3 id="等待用户输入"><a href="#等待用户输入" class="headerlink" title="等待用户输入"></a>等待用户输入</h3><ul>
<li>input(“\n\n按下 enter 键后退出。”)</li>
<li>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割，</li>
<li>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end&#x3D;” “<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x=<span class="string">&quot;a&quot;</span></span><br><span class="line">y=<span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="comment"># 换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x )</span><br><span class="line"><span class="built_in">print</span>( y )</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;---------&#x27;</span>)</span><br><span class="line"><span class="comment"># 不换行输出</span></span><br><span class="line"><span class="built_in">print</span>( x, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>( y, end=<span class="string">&quot; &quot;</span> )</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="在-python-用-import-或者-from…import-来导入相应的模块。"><a href="#在-python-用-import-或者-from…import-来导入相应的模块。" class="headerlink" title="在 python 用 import 或者 from…import 来导入相应的模块。"></a>在 python 用 import 或者 from…import 来导入相应的模块。</h2><ul>
<li>将整个模块(somemodule)导入，格式为： import somemodule</li>
<li>从某个模块中导入某个函数,格式为： from somemodule import somefunction</li>
<li>从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc</li>
<li>将某个模块中的全部函数导入，格式为： from somemodule import *</li>
</ul>
<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><blockquote>
<p>a, b, c &#x3D; 1, 2, “runoob”</p>
</blockquote>
<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>)            <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>])         <span class="comment"># 输出列表第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>])       <span class="comment"># 从第二个开始输出到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:])        <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span>)    <span class="comment"># 输出两次列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist) <span class="comment"># 连接列表</span></span><br></pre></td></tr></table></figure>

<h2 id="列表截取"><a href="#列表截取" class="headerlink" title="列表截取"></a>列表截取</h2><ul>
<li>Python 列表截取可以接收第三个参数，参数作用是截取的步长。</li>
<li>List[start,end,step]</li>
<li>如果第三个参数为负数表示逆向读取</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">reverseWords</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">     </span><br><span class="line">    <span class="comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span></span><br><span class="line">    inputWords = <span class="built_in">input</span>.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 翻转字符串</span></span><br><span class="line">    <span class="comment"># 假设列表 list = [1,2,3,4],  </span></span><br><span class="line">    <span class="comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span></span><br><span class="line">    <span class="comment"># inputWords[-1::-1] 有三个参数</span></span><br><span class="line">    <span class="comment"># 第一个参数 -1 表示最后一个元素</span></span><br><span class="line">    <span class="comment"># 第二个参数为空，表示移动到列表末尾</span></span><br><span class="line">    <span class="comment"># 第三个参数为步长，-1 表示逆向</span></span><br><span class="line">    inputWords=inputWords[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 重新组合字符串</span></span><br><span class="line">    output = <span class="string">&#x27; &#x27;</span>.join(inputWords)</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">        <span class="built_in">input</span> = <span class="string">&#x27;I like runoob&#x27;</span></span><br><span class="line">        rw = reverseWords(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">print</span>(rw)</span><br></pre></td></tr></table></figure>

<h2 id="元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号-里，元素之间用逗号隔开。"><a href="#元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号-里，元素之间用逗号隔开。" class="headerlink" title="元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。"></a>元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">uple = ( <span class="string">&#x27;abcd&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;runoob&#x27;</span>, <span class="number">70.2</span>  )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;runoob&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>)             <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>])          <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>])        <span class="comment"># 输出从第二个元素开始到第三个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:])         <span class="comment"># 输出从第三个元素开始的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>)     <span class="comment"># 输出两次元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple) <span class="comment"># 连接元组</span></span><br></pre></td></tr></table></figure>

<p><em>特殊情况</em><br>tup2 &#x3D; (20,) # 一个元素，需要在元素后添加逗号</p>
<ul>
<li>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</li>
<li>基本功能是进行成员关系测试和删除重复元素。</li>
<li>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">sites = &#123;<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Facebook&#x27;</span>, <span class="string">&#x27;Zhihu&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(sites)   <span class="comment"># 输出集合，重复的元素被自动去掉</span></span><br><span class="line"> 成员测试</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Runoob&#x27;</span> <span class="keyword">in</span> sites :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 在集合中&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Runoob 不在集合中&#x27;</span>)</span><br><span class="line"><span class="comment"># set可以进行集合运算</span></span><br><span class="line">a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line">b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(a - b)     <span class="comment"># a 和 b 的差集</span></span><br><span class="line"><span class="built_in">print</span>(a | b)     <span class="comment"># a 和 b 的并集</span></span><br><span class="line"><span class="built_in">print</span>(a &amp; b)     <span class="comment"># a 和 b 的交集</span></span><br><span class="line"><span class="built_in">print</span>(a ^ b)     <span class="comment"># a 和 b 中不同时存在的元素</span></span><br></pre></td></tr></table></figure>


<blockquote>
<p>字典（dictionary）是Python中另一个非常有用的内置数据类型。列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;1 - 菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>]     = <span class="string">&quot;2 - 菜鸟工具&quot;</span></span><br><span class="line"></span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;www.runoob.com&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>])       <span class="comment"># 输出键为 &#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])           <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict)          <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())   <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>dict(Runoob&#x3D;1, Google&#x3D;2, Taobao&#x3D;3)<br>   {‘Runoob’: 1, ‘Google’: 2, ‘Taobao’: 3}</p>
</blockquote>
<h2 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="built_in">int</span>(<span class="number">1</span>)   <span class="comment"># x 输出结果为 1</span></span><br><span class="line">y = <span class="built_in">int</span>(<span class="number">2.8</span>) <span class="comment"># y 输出结果为 2</span></span><br><span class="line">z = <span class="built_in">int</span>(<span class="string">&quot;3&quot;</span>) <span class="comment"># z 输出结果为 3</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">float</span>(<span class="number">1</span>)     <span class="comment"># x 输出结果为 1.0</span></span><br><span class="line">y = <span class="built_in">float</span>(<span class="number">2.8</span>)   <span class="comment"># y 输出结果为 2.8</span></span><br><span class="line">z = <span class="built_in">float</span>(<span class="string">&quot;3&quot;</span>)   <span class="comment"># z 输出结果为 3.0</span></span><br><span class="line">w = <span class="built_in">float</span>(<span class="string">&quot;4.2&quot;</span>) <span class="comment"># w 输出结果为 4.2</span></span><br><span class="line"></span><br><span class="line">x = <span class="built_in">str</span>(<span class="string">&quot;s1&quot;</span>) <span class="comment"># x 输出结果为 &#x27;s1&#x27;</span></span><br><span class="line">y = <span class="built_in">str</span>(<span class="number">2</span>)    <span class="comment"># y 输出结果为 &#x27;2&#x27;</span></span><br><span class="line">z = <span class="built_in">str</span>(<span class="number">3.0</span>)  <span class="comment"># z 输出结果为 &#x27;3.0&#x27;</span></span><br></pre></td></tr></table></figure>

<h2 id="Python-推导式"><a href="#Python-推导式" class="headerlink" title="Python 推导式"></a>Python 推导式</h2><p><code>list</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">//过滤掉长度小于或等于<span class="number">3</span>的字符串列表，并将剩下的转换成大写字母：</span><br><span class="line">    names = [<span class="string">&#x27;Bob&#x27;</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="string">&#x27;Wendy&#x27;</span>,<span class="string">&#x27;Smith&#x27;</span>]</span><br><span class="line">    new_names = [name.upper()<span class="keyword">for</span> name <span class="keyword">in</span> names <span class="keyword">if</span> <span class="built_in">len</span>(name)&gt;<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(new_names)</span><br><span class="line">    [<span class="string">&#x27;ALICE&#x27;</span>, <span class="string">&#x27;JERRY&#x27;</span>, <span class="string">&#x27;WENDY&#x27;</span>, <span class="string">&#x27;SMITH&#x27;</span>]</span><br><span class="line"></span><br><span class="line">//计算 <span class="number">30</span> 以内可以被 <span class="number">3</span> 整除的整数：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>multiples = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>) <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(multiples)</span><br><span class="line">[<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">21</span>, <span class="number">24</span>, <span class="number">27</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>dictory</code><br>使用字符串及其长度创建字典：</p>
<blockquote>
<p>listdemo &#x3D; [‘Google’,’Runoob’, ‘Taobao’]</p>
</blockquote>
<h2 id="将列表中各字符串值为键，各字符串的长度为值，组成键值对"><a href="#将列表中各字符串值为键，各字符串的长度为值，组成键值对" class="headerlink" title="将列表中各字符串值为键，各字符串的长度为值，组成键值对"></a>将列表中各字符串值为键，各字符串的长度为值，组成键值对</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict = &#123;key:<span class="built_in">len</span>(key) <span class="keyword">for</span> key <span class="keyword">in</span> listdemo&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>newdict</span><br><span class="line">&#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">6</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">6</span>&#125;</span><br><span class="line"></span><br><span class="line">提供三个数字，以三个数字为键，三个数字的平方为值来创建字典：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic = &#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dic</span><br><span class="line">&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(dic)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>set</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">计算数字 <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> 的平方数：</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew = &#123;i**<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>setnew</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line">判断不是 abc 的字母并输出：</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;r&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;set&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p><code>元组推导式</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&lt;generator <span class="built_in">object</span> &lt;genexpr&gt; at <span class="number">0x7faf6ee20a50</span>&gt;  <span class="comment"># 返回的是生成器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">tuple</span>(a)       <span class="comment"># 使用 tuple() 函数，可以直接将生成器对象转换成元组</span></span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Python算术运算符"><a href="#Python算术运算符" class="headerlink" title="Python算术运算符"></a>Python算术运算符</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line">**      幂 - 返回x的y次幂</span><br><span class="line"></span><br><span class="line">//      取整除 - 向下取接近商的整数</span><br><span class="line"></span><br><span class="line">:=      海象运算符，可在表达式内部为变量赋值</span><br><span class="line"></span><br><span class="line">逻辑运算符</span><br><span class="line"></span><br><span class="line">and     </span><br><span class="line">or</span><br><span class="line">not</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - 变量 a 在给定的列表中 list 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;1 - 变量 a 不在给定的列表中 list 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> ( b <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - 变量 b 不在给定的列表中 list 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;2 - 变量 b 在给定的列表中 list 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 的值</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> ( a <span class="keyword">in</span> <span class="built_in">list</span> ):</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;3 - 变量 a 在给定的列表中 list 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;3 - 变量 a 不在给定的列表中 list 中&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><code>is 与 == 区别</code>：</p>
<blockquote>
<p>is 用于判断两个变量引用对象是否为同一个， &#x3D;&#x3D; 用于判断引用变量的值是否相等。</p>
</blockquote>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><blockquote>
<p>从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。</p>
</blockquote>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><blockquote>
<p>var1 &#x3D; ‘Hello World!’<br>    print (“已更新字符串 : “, var1[:6] + ‘Runoob!’)</p>
</blockquote>
<blockquote>
<p>[ : ]	截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。<br>    in	成员运算符 - 如果字符串中包含给定的字符返回 True<br>    not in	成员运算符 - 如果字符串中不包含给定的字符返回 True</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello&quot;</span></span><br><span class="line">b = <span class="string">&quot;Python&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a + b 输出结果：&quot;</span>, a + b)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a * 2 输出结果：&quot;</span>, a * <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1] 输出结果：&quot;</span>, a[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a[1:4] 输出结果：&quot;</span>, a[<span class="number">1</span>:<span class="number">4</span>])</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;H&quot;</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;H 不在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( <span class="string">&quot;M&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> a) :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 不在变量 a 中&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;M 在变量 a 中&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">r&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">R&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h2 id="Python-字符串格式化"><a href="#Python-字符串格式化" class="headerlink" title="Python 字符串格式化"></a>Python 字符串格式化</h2><blockquote>
<p>. print (“我叫 %s 今年 %d 岁!” % (‘小明’, 10))</p>
</blockquote>
<blockquote>
<p>python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">para_str = <span class="string">&quot;&quot;&quot;这是一个多行字符串的实例</span></span><br><span class="line"><span class="string">多行字符串可以使用制表符</span></span><br><span class="line"><span class="string">TAB ( \t )。</span></span><br><span class="line"><span class="string">也可以使用换行符 [ \n ]。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span> (para_str)</span><br></pre></td></tr></table></figure>

<p><code>count()</code> 方法用于统计字符串里某个字符出现的次数。可选参数为在字符串搜索的开始与结束位置。<br><code>find()</code>同理</p>
<blockquote>
<p>str.count(sub, start&#x3D; 0,end&#x3D;len(string))</p>
</blockquote>
<p> <code>join()</code> 方法用于将序列中的元素以指定的字符连接生成一个新的字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s1 = <span class="string">&quot;-&quot;</span></span><br><span class="line">s2 = <span class="string">&quot;&quot;</span></span><br><span class="line">seq = (<span class="string">&quot;r&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;b&quot;</span>) <span class="comment"># 字符串序列</span></span><br><span class="line"><span class="built_in">print</span> (s1.join( seq ))</span><br><span class="line"><span class="built_in">print</span> (s2.join( seq ))</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(<span class="built_in">str</span>)             <span class="comment"># 字符串长度</span></span><br><span class="line"></span><br><span class="line">//返回最大字符</span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;最大字符: &quot;</span> + <span class="built_in">max</span>(<span class="built_in">str</span>))</span><br><span class="line"></span><br><span class="line">split() 通过指定分隔符对字符串进行切片，如果第二个参数 num 有指定值，则分割为 num+<span class="number">1</span> 个子字符串。</span><br><span class="line"></span><br><span class="line">tr = <span class="string">&quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>.split( ))       <span class="comment"># 以空格为分隔符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>.split(<span class="string">&#x27;i&#x27;</span>,<span class="number">1</span>))   <span class="comment"># 以 i 为分隔符 这个1是指定分割次数</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>.split(<span class="string">&#x27;w&#x27;</span>))     <span class="comment"># 以 w 为分隔符</span></span><br><span class="line"></span><br><span class="line">upper() 方法将字符串中的小写字母转为大写字母。</span><br><span class="line"><span class="built_in">str</span>.upper()</span><br></pre></td></tr></table></figure>
























]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基本语法</tag>
      </tags>
  </entry>
  <entry>
    <title>python高级编程</title>
    <url>/post/python4.html</url>
    <content><![CDATA[<h1 id="python高级编程"><a href="#python高级编程" class="headerlink" title="python高级编程"></a>python高级编程</h1><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern）</p>
<blockquote>
<p>&#x2F;[1-9][0-9]<em>&#x2F;<br>    [1-9]设置第一个数字不是 0，[0-9]</em> 表示任意多个数字：<br>     + 表示 1 次或多次出现。</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python高级编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python菜鸟教程例题笔记</title>
    <url>/post/python7.html</url>
    <content><![CDATA[<h1 id="python菜鸟教程例题笔记"><a href="#python菜鸟教程例题笔记" class="headerlink" title="python菜鸟教程例题笔记"></a>python菜鸟教程例题笔记</h1><ul>
<li>import math</li>
<li>import random </li>
<li>import unicodedata<h1 id="引入日历模块-import-calendar"><a href="#引入日历模块-import-calendar" class="headerlink" title="引入日历模块 import calendar"></a>引入日历模块 import calendar</h1><h1 id="用于获取昨天日期-import-datetime"><a href="#用于获取昨天日期-import-datetime" class="headerlink" title="用于获取昨天日期   import datetime"></a>用于获取昨天日期   import datetime</h1><h1 id="实现秒表-import-time"><a href="#实现秒表-import-time" class="headerlink" title="实现秒表   import time"></a>实现秒表   import time</h1><h1 id="引入url-import-re"><a href="#引入url-import-re" class="headerlink" title="引入url    import re"></a>引入url    import re</h1></li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 笛卡尔积</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cartesian</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    count=<span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self._data_list=[]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_data</span>(<span class="params">self,data=[]</span>): <span class="comment">#添加生成笛卡尔积的数据列表</span></span><br><span class="line">        self._data_list.append(data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">self</span>): <span class="comment">#计算笛卡尔积</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> itertools.product(*self._data_list):</span><br><span class="line">            <span class="built_in">print</span>(item,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">            self.count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> self.count%<span class="number">16</span>==<span class="number">0</span>:</span><br><span class="line">                <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    car=cartesian()</span><br><span class="line">    car.add_data([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    car.add_data([<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line">    car.add_data([<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>])</span><br><span class="line">    car.build()</span><br></pre></td></tr></table></figure>


<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># a = int(input(&quot;请输入圆半径：&quot;))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;圆面积是：&#123;0:.2f&#125;&quot;.format(math.pi * a * a))</span></span><br><span class="line"><span class="comment"># print(random.randint(0,9))</span></span><br><span class="line"><span class="comment"># print(&#x27;%0.1f 摄氏温度转为华氏温度为 %0.1f &#x27; % (celsius, fahrenheit))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;a是%0.2f,b是%d&#x27; % (a, b))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lower=int(input(&#x27;最小值是：&#x27;))</span></span><br><span class="line"><span class="comment"># upper=int(input(&#x27;最大值是：&#x27;))</span></span><br><span class="line"><span class="comment"># for x in range(lower,upper+1):</span></span><br><span class="line"><span class="comment">#     sum=0</span></span><br><span class="line"><span class="comment">#     n=len(str(x))</span></span><br><span class="line"><span class="comment">#     temp=x</span></span><br><span class="line"><span class="comment">#     while temp&gt;0:</span></span><br><span class="line"><span class="comment">#         d=temp%10</span></span><br><span class="line"><span class="comment">#         sum+=d**n</span></span><br><span class="line"><span class="comment">#         temp//=10</span></span><br><span class="line"><span class="comment">#     if x==sum:</span></span><br><span class="line"><span class="comment">#         print(x,end=&quot; &quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   bin()  oct() hex()</span></span><br><span class="line"><span class="comment">#   asc码与字符转化 ord()     cha()</span></span><br><span class="line"><span class="comment">#   range（）函数是左闭右开</span></span><br><span class="line"><span class="comment">#    print(a, &#x27;/&#x27;, b, &#x27;=&#x27;, chu(a, b))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   print(calendar.month(y,x))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&#x27;测试.txt&#x27;,&#x27;w&#x27;) as wile:</span></span><br><span class="line"><span class="comment">#    wile.write(&#x27;厉害！&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取今天日期</span></span><br><span class="line"><span class="comment">#   print(datetime.date.today())</span></span><br><span class="line"><span class="comment">#   print(datetime.date.today()-datetime.timedelta(days=1))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#   li.pop()  # pop 会做两件事: 删除 list 的最后一个元素, 然后返回删除元素的值</span></span><br><span class="line"><span class="comment"># append    index   insert  remove  pop     extend</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&#x27;,&#x27;.join(list))</span></span><br><span class="line"><span class="comment"># s=&#x27;,&#x27;.join(list)</span></span><br><span class="line"><span class="comment"># print(s.split(&#x27;,&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># time.sleep(1.1)   秒</span></span><br><span class="line"><span class="comment"># round(end-start,2)    时间精确到后面2位</span></span><br><span class="line"><span class="comment"># a,b=b,a   可以达到交换的作用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  li_copy = li1[:] 复制列表</span></span><br><span class="line"><span class="comment">#  ord() 把给定的字符转化为ascII码</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>




<h2 id="判断字符串是否存在子字符串"><a href="#判断字符串是否存在子字符串" class="headerlink" title="判断字符串是否存在子字符串"></a>判断字符串是否存在子字符串</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">string, sub_str</span>): </span><br><span class="line">    <span class="keyword">if</span> (string.find(sub_str) == -<span class="number">1</span>): </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;不存在！&quot;</span>) </span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;存在！&quot;</span>) </span><br><span class="line"> </span><br><span class="line">string = <span class="string">&quot;www.runoob.com&quot;</span></span><br><span class="line">sub_str =<span class="string">&quot;runoob&quot;</span></span><br><span class="line">check(string, sub_str)</span><br></pre></td></tr></table></figure>

<h2 id="使用正则表达式提取字符串中的-URL"><a href="#使用正则表达式提取字符串中的-URL" class="headerlink" title="使用正则表达式提取字符串中的 URL"></a>使用正则表达式提取字符串中的 URL</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Find</span>(<span class="params">string</span>): </span><br><span class="line">    <span class="comment"># findall() 查找匹配正则表达式的字符串</span></span><br><span class="line">    url = re.findall(<span class="string">&#x27;https?://(?:[-\w.]|(?:%[\da-fA-F]&#123;2&#125;))+&#x27;</span>, string)</span><br><span class="line">    <span class="keyword">return</span> url </span><br><span class="line">    </span><br><span class="line">string = <span class="string">&#x27;Runoob 的网页地址为：https://www.runoob.com，Google 的网页地址为：https://www.google.com&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Urls: &quot;</span>, Find(string))</span><br></pre></td></tr></table></figure>

<h2 id="将字符串作为代码执行"><a href="#将字符串作为代码执行" class="headerlink" title="将字符串作为代码执行"></a>将字符串作为代码执行</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">exec_code</span>(): </span><br><span class="line">    LOC = <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">def factorial(num): </span></span><br><span class="line"><span class="string">    fact=1 </span></span><br><span class="line"><span class="string">    for i in range(1,num+1): </span></span><br><span class="line"><span class="string">        fact = fact*i </span></span><br><span class="line"><span class="string">    return fact </span></span><br><span class="line"><span class="string">print(factorial(5)) </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">exec</span>(LOC) </span><br><span class="line"> </span><br><span class="line">exec_code()</span><br></pre></td></tr></table></figure>

<h2 id="字符串翻转"><a href="#字符串翻转" class="headerlink" title="字符串翻转"></a>字符串翻转</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span>=<span class="string">&#x27;Runoob&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;</span>.join(<span class="built_in">reversed</span>(<span class="built_in">str</span>)))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>中间是一个开区间，最右边表示方向</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s=<span class="string">&quot;hyl ekil ylemertxe ma i&quot;</span></span><br><span class="line">y=s[:<span class="number">3</span>:-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure>

<p><em>按键(key)或值(value)对字典进行排序</em></p>
<blockquote>
<p>sorted (key_value) </p>
</blockquote>
<blockquote>
<p>sorted(key_value.items(), key &#x3D; lambda kv:(kv[1], kv[0]))</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> - lis = [&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Taobao&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">100</span>&#125;,  </span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Runoob&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">7</span> &#125;, </span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Google&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">100</span> &#125;, </span><br><span class="line">&#123; <span class="string">&quot;name&quot;</span> : <span class="string">&quot;Wiki&quot;</span> , <span class="string">&quot;age&quot;</span> : <span class="number">200</span> &#125;] </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 通过 age 升序排序</span></span><br><span class="line"> &gt; <span class="built_in">print</span> (<span class="string">&quot;列表通过 age 升序排序: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">sorted</span>(lis, key = <span class="keyword">lambda</span> i: i[<span class="string">&#x27;age&#x27;</span>]) )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\r&quot;</span>) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 先按 age 排序，再按 name 排序</span></span><br><span class="line"> &gt; <span class="built_in">print</span> (<span class="string">&quot;列表通过 age 和 name 排序: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">sorted</span>(lis, key = <span class="keyword">lambda</span> i: (i[<span class="string">&#x27;age&#x27;</span>], i[<span class="string">&#x27;name&#x27;</span>])) )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\r&quot;</span>) </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 按 age 降序排序</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;列表通过 age 降序排序: &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">sorted</span>(lis, key = <span class="keyword">lambda</span> i: i[<span class="string">&#x27;age&#x27;</span>],reverse=<span class="literal">True</span>) )</span><br></pre></td></tr></table></figure>

<h2 id="移除字典点键值-key-x2F-value-对。"><a href="#移除字典点键值-key-x2F-value-对。" class="headerlink" title="移除字典点键值(key&#x2F;value)对。"></a>移除字典点键值(key&#x2F;value)对。</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">test_dict = &#123;<span class="string">&quot;Runoob&quot;</span> : <span class="number">1</span>, <span class="string">&quot;Google&quot;</span> : <span class="number">2</span>, <span class="string">&quot;Taobao&quot;</span> : <span class="number">3</span>, <span class="string">&quot;Zhihu&quot;</span> : <span class="number">4</span>&#125; </span><br><span class="line"><span class="keyword">del</span> test_dict[<span class="string">&#x27;Zhihu&#x27;</span>] </span><br><span class="line">test_dict.pop(<span class="string">&#x27;Zhihu&#x27;</span>)</span><br><span class="line">new_dict = &#123;key:val <span class="keyword">for</span> key, val <span class="keyword">in</span> test_dict.items() <span class="keyword">if</span> key != <span class="string">&#x27;Zhihu&#x27;</span>&#125; </span><br></pre></td></tr></table></figure>

<h3 id="给定两个字典，然后将它们合并为一个字典。"><a href="#给定两个字典，然后将它们合并为一个字典。" class="headerlink" title="给定两个字典，然后将它们合并为一个字典。"></a>给定两个字典，然后将它们合并为一个字典。</h3><blockquote>
<p>dict2.update(dict1)<br>&#x2F;&#x2F;方法二<br>res &#x3D; {**dict1, **dict2} </p>
</blockquote>
<h3 id="将字符串的时间转换为时间戳"><a href="#将字符串的时间转换为时间戳" class="headerlink" title="将字符串的时间转换为时间戳"></a>将字符串的时间转换为时间戳</h3><blockquote>
<p>a1 &#x3D; “2019-5-10 23:40:00”</p>
</blockquote>
<h2 id="先转换为时间数组"><a href="#先转换为时间数组" class="headerlink" title="先转换为时间数组"></a>先转换为时间数组</h2><blockquote>
<p>timeArray &#x3D; time.strptime(a1, “%Y-%m-%d %H:%M:%S”)</p>
</blockquote>
<h2 id="转换为时间戳"><a href="#转换为时间戳" class="headerlink" title="转换为时间戳"></a>转换为时间戳</h2><blockquote>
<p>timeStamp &#x3D; int(time.mktime(timeArray))<br>    print(timeStamp)</p>
</blockquote>
<h2 id="格式转换-转为-x2F"><a href="#格式转换-转为-x2F" class="headerlink" title="格式转换 - 转为 &#x2F;"></a>格式转换 - 转为 &#x2F;</h2><blockquote>
<p>a2 &#x3D; “2019&#x2F;5&#x2F;10 23:40:00”</p>
</blockquote>
<h2 id="先转换为时间数组-然后转换为其他格式"><a href="#先转换为时间数组-然后转换为其他格式" class="headerlink" title="先转换为时间数组,然后转换为其他格式"></a>先转换为时间数组,然后转换为其他格式</h2><blockquote>
<p>timeArray &#x3D; time.strptime(a2, “%Y&#x2F;%m&#x2F;%d %H:%M:%S”)<br>otherStyleTime &#x3D; time.strftime(“%Y&#x2F;%m&#x2F;%d %H:%M:%S”, timeArray)<br>print(otherStyleTime)</p>
</blockquote>
<h2 id="获得当前时间"><a href="#获得当前时间" class="headerlink" title="获得当前时间"></a>获得当前时间</h2><blockquote>
<p>now &#x3D; datetime.datetime.now()<br>timeArray &#x3D; time.localtime(now)</p>
</blockquote>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">arr, left, right</span>):</span><br><span class="line">    i = left - <span class="number">1</span></span><br><span class="line">    pivot = arr[right]<span class="comment"># 基准值</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(left, right):</span><br><span class="line">        <span class="keyword">if</span> arr[j] &lt; pivot:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">    arr[i + <span class="number">1</span>], arr[right] = arr[right], arr[i + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> i + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quickSort</span>(<span class="params">arr, left, right</span>):</span><br><span class="line">    <span class="keyword">if</span> left &lt; right:</span><br><span class="line">        p = partition(arr, left, right)</span><br><span class="line">        quickSort(arr, left, p - <span class="number">1</span>)</span><br><span class="line">        quickSort(arr, p + <span class="number">1</span>, right)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">10</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">99</span>, <span class="number">87</span>, <span class="number">3</span>]</span><br><span class="line">quickSort(arr, <span class="number">0</span>, <span class="built_in">len</span>(arr) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure>
<h2 id="归并"><a href="#归并" class="headerlink" title="归并"></a>归并</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">arr, l, m, r</span>): </span><br><span class="line">    n1 = m - l + <span class="number">1</span></span><br><span class="line">    n2 = r- m </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 创建临时数组</span></span><br><span class="line">    L = [<span class="number">0</span>] * (n1)</span><br><span class="line">    R = [<span class="number">0</span>] * (n2)</span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 拷贝数据到临时数组 arrays L[] 和 R[] </span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> , n1): </span><br><span class="line">        L[i] = arr[l + i] </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span> , n2): </span><br><span class="line">        R[j] = arr[m + <span class="number">1</span> + j] </span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 归并临时数组到 arr[l..r] </span></span><br><span class="line">    i = <span class="number">0</span>     <span class="comment"># 初始化第一个子数组的索引</span></span><br><span class="line">    j = <span class="number">0</span>     <span class="comment"># 初始化第二个子数组的索引</span></span><br><span class="line">    k = l     <span class="comment"># 初始归并子数组的索引</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> i &lt; n1 <span class="keyword">and</span> j &lt; n2 : </span><br><span class="line">        <span class="keyword">if</span> L[i] &lt;= R[j]: </span><br><span class="line">            arr[k] = L[i] </span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>: </span><br><span class="line">            arr[k] = R[j] </span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 拷贝 L[] 的保留元素</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; n1: </span><br><span class="line">        arr[k] = L[i] </span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 拷贝 R[] 的保留元素</span></span><br><span class="line">    <span class="keyword">while</span> j &lt; n2: </span><br><span class="line">        arr[k] = R[j] </span><br><span class="line">        j += <span class="number">1</span></span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mergeSort</span>(<span class="params">arr,l,r</span>): </span><br><span class="line">    <span class="keyword">if</span> l &lt; r: </span><br><span class="line">  </span><br><span class="line">        </span><br><span class="line">        m = <span class="built_in">int</span>((l+(r-<span class="number">1</span>))/<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">       </span><br><span class="line">        mergeSort(arr, l, m) </span><br><span class="line">        mergeSort(arr, m+<span class="number">1</span>, r) </span><br><span class="line">        merge(arr, l, m, r) </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">arr = [<span class="number">12</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] </span><br><span class="line">n = <span class="built_in">len</span>(arr) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;给定的数组&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d&quot;</span> %arr[i]), </span><br><span class="line">  </span><br><span class="line">mergeSort(arr,<span class="number">0</span>,n-<span class="number">1</span>) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\n\n排序后的数组&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;%d&quot;</span> %arr[i]),</span><br></pre></td></tr></table></figure>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countSort</span>(<span class="params">arr</span>):</span><br><span class="line"></span><br><span class="line">    output = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    count = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line"></span><br><span class="line">    ans = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> arr]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        count[<span class="built_in">ord</span>(i)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        count[i] += count[i-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        output[count[<span class="built_in">ord</span>(arr[i])]-<span class="number">1</span>] = arr[i]</span><br><span class="line">        count[<span class="built_in">ord</span>(arr[i])] -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">        ans[i] = output[i]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">arr = <span class="string">&quot;wwwrunoobcom&quot;</span></span><br><span class="line">ans = countSort(arr)</span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;字符数组排序 %s&quot;</span>  %(<span class="string">&quot;&quot;</span>.join(ans)) )</span><br></pre></td></tr></table></figure>
<h2 id="计数排序plus版"><a href="#计数排序plus版" class="headerlink" title="计数排序plus版"></a>计数排序plus版</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">countSort</span>(<span class="params">arr</span>):</span><br><span class="line">   count = [ <span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>)]</span><br><span class="line">   output = [<span class="string">&quot;&quot;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> arr]</span><br><span class="line">   mx, mn = <span class="number">0</span>, <span class="number">255</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">      idx = <span class="built_in">ord</span>(i)</span><br><span class="line">      <span class="keyword">if</span> idx &gt; mx: mx = idx</span><br><span class="line">      <span class="keyword">if</span> idx &lt; mn: mn = idx</span><br><span class="line">      count[idx] += <span class="number">1</span></span><br><span class="line">   idx = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(mn, mx + <span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> count[i] == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(count[i]):</span><br><span class="line">         output[idx] = <span class="built_in">chr</span>(i)</span><br><span class="line">         idx += <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> output</span><br><span class="line">arr = <span class="string">&quot;wwwrunoobcom&quot;</span></span><br><span class="line">ans = countSort(arr) </span><br><span class="line"><span class="built_in">print</span> ( <span class="string">&quot;字符数组排序 %s&quot;</span>  %(<span class="string">&quot;&quot;</span>.join(ans)) )</span><br></pre></td></tr></table></figure>

<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shellSort</span>(<span class="params">arr</span>): </span><br><span class="line">  </span><br><span class="line">    n = <span class="built_in">len</span>(arr)</span><br><span class="line">    gap = <span class="built_in">int</span>(n/<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>: </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap,n): </span><br><span class="line">  </span><br><span class="line">            temp = arr[i] </span><br><span class="line">            j = i </span><br><span class="line">            <span class="keyword">while</span>  j &gt;= gap <span class="keyword">and</span> arr[j-gap] &gt;temp: </span><br><span class="line">                arr[j] = arr[j-gap] </span><br><span class="line">                j -= gap </span><br><span class="line">            arr[j] = temp </span><br><span class="line">        gap = <span class="built_in">int</span>(gap/<span class="number">2</span>)</span><br><span class="line">  </span><br><span class="line">arr = [ <span class="number">12</span>, <span class="number">34</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">3</span>] </span><br><span class="line">  </span><br><span class="line">n = <span class="built_in">len</span>(arr) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;排序前:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span>(arr[i]), </span><br><span class="line">  </span><br><span class="line">shellSort(arr) </span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;\n排序后:&quot;</span>) </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): </span><br><span class="line">    <span class="built_in">print</span>(arr[i]),</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python菜鸟教程例题笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>python模块</title>
    <url>/post/python5.html</url>
    <content><![CDATA[<h1 id="python模块"><a href="#python模块" class="headerlink" title="python模块"></a>python模块</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;命令行参数如下:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">   <span class="built_in">print</span>(i)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nPython 路径为：&#x27;</span>, sys.path, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="引用几个指定函数"><a href="#引用几个指定函数" class="headerlink" title="引用几个指定函数"></a>引用几个指定函数</h2><blockquote>
<p>from fibo import fib, fib2<br>   fib(500)</p>
</blockquote>
<blockquote>
<p>内置的函数 dir() 可以找到模块内定义的所有名称</p>
</blockquote>
<ul>
<li>str()： 函数返回一个用户易读的表达形式。 </li>
<li>repr()： 产生一个解释器易读的表达形式。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt; s = <span class="string">&#x27;Hello, Runoob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(s)</span><br><span class="line"><span class="string">&#x27;Hello, Runoob&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">repr</span>(s)</span><br><span class="line"><span class="string">&quot;&#x27;Hello, Runoob&#x27;&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">1</span>/<span class="number">7</span>)</span><br><span class="line"><span class="string">&#x27;0.14285714285714285&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = <span class="number">10</span> * <span class="number">3.25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = <span class="number">200</span> * <span class="number">200</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">&#x27;x 的值为： &#x27;</span> + <span class="built_in">repr</span>(x) + <span class="string">&#x27;,  y 的值为：&#x27;</span> + <span class="built_in">repr</span>(y) + <span class="string">&#x27;...&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(s)</span><br><span class="line">x 的值为： <span class="number">32.5</span>,  y 的值为：<span class="number">40000.</span>..</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment">#  repr() 函数可以转义字符串中的特殊字符</span></span><br><span class="line"><span class="meta">... </span>hello = <span class="string">&#x27;hello, runoob\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hellos = <span class="built_in">repr</span>(hello)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(hellos)</span><br><span class="line"><span class="string">&#x27;hello, runoob\n&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># repr() 的参数可以是 Python 的任何对象</span></span><br><span class="line"><span class="meta">... </span><span class="built_in">repr</span>((x, y, (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>)))</span><br><span class="line"><span class="string">&quot;(32.5, 40000, (&#x27;Google&#x27;, &#x27;Runoob&#x27;))&quot;</span></span><br></pre></td></tr></table></figure>

<p><code>rjust()</code> 方法, 它可以将字符串靠右, 并在左边填充空格。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt; <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">repr</span>(x).rjust(<span class="number">2</span>), <span class="built_in">repr</span>(x*x).rjust(<span class="number">3</span>), end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="meta">... </span>    <span class="comment"># 注意前一行 &#x27;end&#x27; 的使用</span></span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="built_in">repr</span>(x*x*x).rjust(<span class="number">4</span>))</span><br><span class="line">...</span><br><span class="line"> <span class="number">1</span>   <span class="number">1</span>    <span class="number">1</span></span><br><span class="line"> <span class="number">2</span>   <span class="number">4</span>    <span class="number">8</span></span><br><span class="line"> <span class="number">3</span>   <span class="number">9</span>   <span class="number">27</span></span><br><span class="line"> <span class="number">4</span>  <span class="number">16</span>   <span class="number">64</span></span><br><span class="line"> <span class="number">5</span>  <span class="number">25</span>  <span class="number">125</span></span><br><span class="line"> <span class="number">6</span>  <span class="number">36</span>  <span class="number">216</span></span><br><span class="line"> <span class="number">7</span>  <span class="number">49</span>  <span class="number">343</span></span><br><span class="line"> <span class="number">8</span>  <span class="number">64</span>  <span class="number">512</span></span><br><span class="line"> <span class="number">9</span>  <span class="number">81</span>  <span class="number">729</span></span><br><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;&#125;网址： &quot;&#123;&#125;!&quot;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;菜鸟教程&#x27;</span>, <span class="string">&#x27;www.runoob.com&#x27;</span>))</span><br><span class="line">菜鸟教程网址： <span class="string">&quot;www.runoob.com!&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;0&#125; 和 &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">Google 和 Runoob</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;&#123;1&#125; 和 &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>))</span><br><span class="line">Runoob 和 Google</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 : 后传入一个整数, 可以保证该域至少有这么多的宽度。 用于美化表格时很有用。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>table = &#123;<span class="string">&#x27;Google&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Runoob&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Taobao&#x27;</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> name, number <span class="keyword">in</span> table.items():</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(<span class="string">&#x27;&#123;0:10&#125; ==&gt; &#123;1:10d&#125;&#x27;</span>.<span class="built_in">format</span>(name, number))</span><br><span class="line">...</span><br><span class="line">Google     ==&gt;          <span class="number">1</span></span><br><span class="line">Runoob     ==&gt;          <span class="number">2</span></span><br><span class="line">Taobao     ==&gt;          <span class="number">3</span></span><br></pre></td></tr></table></figure>
<p><code>读取键盘输入</code></p>
<blockquote>
<p>str &#x3D; input(“请输入：”);</p>
</blockquote>
<p><code>读和写文件</code></p>
<blockquote>
<p>open(filename, mode)</p>
</blockquote>
<ul>
<li>r   以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</li>
<li>w<br>打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</li>
<li>a<br>打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</li>
</ul>
<h2 id="打开一个文件"><a href="#打开一个文件" class="headerlink" title="打开一个文件"></a>打开一个文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f = open(&quot;/tmp/foo.txt&quot;, &quot;w&quot;)</span><br><span class="line">f.write( &quot;Python 是一个非常好的语言。\n是的，的确非常好!!\n&quot; )</span><br><span class="line">str = f.read()//用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。</span><br><span class="line">print(str)</span><br></pre></td></tr></table></figure>
<h2 id="关闭打开的文件"><a href="#关闭打开的文件" class="headerlink" title="关闭打开的文件"></a>关闭打开的文件</h2><p><code>f.close()</code></p>
<blockquote>
<p>f.readline() 会从文件中读取单独的一行。换行符为 ‘\n’。f.readline() 如果返回一个空字符串, 说明已经已经读取到最后一行。<br>如果设置可选参数 sizehint, 则读取指定长度的字节, 并且将这些字节按行分割。<br>str &#x3D; f.readline()<br>print(str)</p>
</blockquote>
<ul>
<li>f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。<br>f.seek() 如果要改变文件指针当前的位置, 可以使用 f.seek(offset, from_what) 函数。<br> from_what<br>的值, 如果是 0 表示开头, 如果是 1 表示当前位置, 2 表示文件的结尾，</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;/tmp/foo.txt&#x27;</span>, <span class="string">&#x27;rb+&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.write(<span class="string">b&#x27;0123456789abcdef&#x27;</span>)</span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">5</span>)     <span class="comment"># 移动到文件的第六个字节</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当处理一个文件对象时, 使用 with 关键字是非常好的方式。<br>文件自动close</p>
</blockquote>
<blockquote>
<p>with open(‘&#x2F;tmp&#x2F;foo.txt’, ‘r’) as f:<br>        read_data &#x3D; f.read()</p>
</blockquote>
<p><code>writelines()</code> 方法用于向文件中写入一序列的字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line">seq = [<span class="string">&quot;菜鸟教程 1\n&quot;</span>, <span class="string">&quot;菜鸟教程 2&quot;</span>]</span><br><span class="line">fo.writelines( seq )</span><br></pre></td></tr></table></figure>

<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><blockquote>
<p>fo.close()</p>
</blockquote>
<p><code>read() </code></p>
<ul>
<li>如果未给定参数 size 或 size 为负数则读取文件所有内容。</li>
</ul>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"></span><br><span class="line">line = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;读取的字符串: %s&quot;</span> % (line))</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;runoob.txt&quot;</span>, <span class="string">&quot;r&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fo.readlines():                          <span class="comment">#依次读取每行  </span></span><br><span class="line">    line = line.strip()                             <span class="comment">#去掉每行头尾空白  </span></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;读取的数据为: %s&quot;</span> % (line))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>

<ul>
<li>tell() 方法返回文件的当前位置，即文件指针当前位置。<br>truncate() 方法用于从文件的首行首字节开始截断，截断文件为 size 个字节，<br> 无 size 表示从当前位置截断； 截断之后 V<br>后面的所有字节被删除，其中 Widnows 系统下的换行代表2个字节大小。 。</li>
</ul>
<h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入一个数字: &quot;</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您输入的不是数字，请再次尝试输入！&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>以下实例在 try 语句中判断文件是否可以打开，如果打开文件时正常的没有发生异常则执行 else 部分的语句，读取文件内容</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        f = <span class="built_in">open</span>(arg, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> IOError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cannot open&#x27;</span>, arg)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(arg, <span class="string">&#x27;has&#x27;</span>, <span class="built_in">len</span>(f.readlines()), <span class="string">&#x27;lines&#x27;</span>)</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    runoob()</span><br><span class="line"><span class="keyword">except</span> AssertionError <span class="keyword">as</span> error:</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;file.log&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            read_data = file.read()</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError <span class="keyword">as</span> fnf_error:</span><br><span class="line">        <span class="built_in">print</span>(fnf_error)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这句话，无论异常是否发生都会执行。&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">raise</span> 语句抛出一个指定的异常。</span><br></pre></td></tr></table></figure>


<h2 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;mmmm&#x27;</span>,<span class="string">&#x27;iope&#x27;</span>,<span class="string">&#x27;hero&#x27;</span>,<span class="string">&#x27;koplk&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">list</span>))</span><br><span class="line">s=<span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">list</span>)</span><br><span class="line"><span class="built_in">print</span>(s.split(<span class="string">&#x27;,&#x27;</span>))</span><br></pre></td></tr></table></figure>

























]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python模块</tag>
      </tags>
  </entry>
  <entry>
    <title>python第一章</title>
    <url>/post/python1.html</url>
    <content><![CDATA[<h1 id="python第一章"><a href="#python第一章" class="headerlink" title="python第一章"></a>python第一章</h1><p>关键字end可以用于将结果输出到同一行，或者在输出的末尾添加不同的字符，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">1000</span>:</span><br><span class="line">    <span class="built_in">print</span>(b, end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    a, b = b, a+b</span><br><span class="line"></span><br><span class="line">结果是：<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">13</span>,<span class="number">21</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">144</span>,<span class="number">233</span>,<span class="number">377</span>,<span class="number">610</span>,<span class="number">987</span>,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> condition_1:</span><br><span class="line">    statement_block_1</span><br><span class="line"><span class="keyword">elif</span> condition_2:</span><br><span class="line">    statement_block_2</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_block_3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">age = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入你家狗狗的年龄: &quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> counter &lt;= n:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + counter</span><br><span class="line">    counter += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> var == <span class="number">1</span> :  <span class="comment"># 表达式永远为 true</span></span><br><span class="line">   num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;输入一个数字  :&quot;</span>))</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;你输入的数字是: &quot;</span>, num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 小于 5&quot;</span>)</span><br><span class="line">   count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">   <span class="built_in">print</span> (count, <span class="string">&quot; 大于或等于 5&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;&gt;a = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Baidu&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="string">&#x27;Taobao&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(i, a[i])</span><br><span class="line"><span class="meta">... </span></span><br><span class="line"><span class="number">0</span> Google</span><br><span class="line"><span class="number">1</span> Baidu</span><br><span class="line"><span class="number">2</span> Runoob</span><br><span class="line"><span class="number">3</span> Taobao</span><br><span class="line"><span class="number">4</span> QQ</span><br></pre></td></tr></table></figure>

<h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><p>迭代器有两个基本的方法：iter() 和 next()。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))   <span class="comment"># 输出迭代器的下一个元素</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line"><span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys         <span class="comment"># 引入 sys 模块</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">list</span>=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">it = <span class="built_in">iter</span>(<span class="built_in">list</span>)    <span class="comment"># 创建迭代器对象</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(it))</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fibonacci</span>(<span class="params">n</span>): <span class="comment"># 生成器函数 - 斐波那契</span></span><br><span class="line">    a, b, counter = <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> (counter &gt; n): </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">yield</span> a</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">f = fibonacci(<span class="number">10</span>) <span class="comment"># f 是一个迭代器，由生成器返回生成</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span> (<span class="built_in">next</span>(f), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> StopIteration:</span><br><span class="line">        sys.exit()</span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>def 函数名（参数列表）:<br>       函数体</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">a=<span class="string">&quot;Runoob&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h2><ul>
<li><p>不可变类型：类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。</p>
</li>
<li><p>可变类型：类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响</p>
</li>
</ul>
<blockquote>
<p>lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。<br>虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。</p>
</blockquote>
<blockquote>
<p>x &#x3D; lambda a : a + 10<br>print(x(5))</p>
</blockquote>
<h2 id="可写函数说明"><a href="#可写函数说明" class="headerlink" title="可写函数说明"></a>可写函数说明</h2><blockquote>
<p>sum &#x3D; lambda arg1, arg2: arg1 + arg2</p>
</blockquote>
<h2 id="调用sum函数"><a href="#调用sum函数" class="headerlink" title="调用sum函数"></a>调用sum函数</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">10</span>, <span class="number">20</span> ))</span><br><span class="line"> <span class="built_in">print</span> (<span class="string">&quot;相加后的值为 : &quot;</span>, <span class="built_in">sum</span>( <span class="number">20</span>, <span class="number">20</span> ))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">myfunc</span>(<span class="params">n</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> a : a * n</span><br><span class="line">mydoubler = myfunc(<span class="number">2</span>)</span><br><span class="line">mytripler = myfunc(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(mydoubler(<span class="number">11</span>))</span><br><span class="line"><span class="built_in">print</span>(mytripler(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">66.25</span>, <span class="number">333</span>, <span class="number">333</span>, <span class="number">1</span>, <span class="number">1234.5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a.count(<span class="number">333</span>), a.count(<span class="number">66.25</span>), a.count(<span class="string">&#x27;x&#x27;</span>))</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.insert(<span class="number">2</span>, -<span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append(<span class="number">333</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">66.25</span>, <span class="number">333</span>, -<span class="number">1</span>, <span class="number">333</span>, <span class="number">1</span>, <span class="number">1234.5</span>, <span class="number">333</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.index(<span class="number">333</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="元组由若干逗号分隔的值组成，"><a href="#元组由若干逗号分隔的值组成，" class="headerlink" title="元组由若干逗号分隔的值组成，"></a>元组由若干逗号分隔的值组成，</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>t = <span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t[<span class="number">0</span>]</span><br><span class="line"><span class="number">12345</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>t</span><br><span class="line">(<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># Tuples may be nested:</span></span><br><span class="line"><span class="meta">... </span>u = t, (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>u</span><br><span class="line">((<span class="number">12345</span>, <span class="number">54321</span>, <span class="string">&#x27;hello!&#x27;</span>), (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure>

<h2 id="集合是一个无序不重复元素的集"><a href="#集合是一个无序不重复元素的集" class="headerlink" title="集合是一个无序不重复元素的集"></a>集合是一个无序不重复元素的集</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&gt;&gt; a = <span class="built_in">set</span>(<span class="string">&#x27;abracadabra&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="built_in">set</span>(<span class="string">&#x27;alacazam&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a                                  <span class="comment"># a 中唯一的字母</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a - b                              <span class="comment"># 在 a 中的字母，但不在 b 中</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a | b                              <span class="comment"># 在 a 或 b 中的字母</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a &amp; b                              <span class="comment"># 在 a 和 b 中都有的字母</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a ^ b                              <span class="comment"># 在 a 或 b 中的字母，但不同时在 a 和 b 中</span></span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;l&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abracadabra&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">&#123;<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;d&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel = &#123;<span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>, <span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">&#x27;guido&#x27;</span>] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;<span class="string">&#x27;sape&#x27;</span>: <span class="number">4139</span>, <span class="string">&#x27;guido&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"><span class="number">4098</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tel[<span class="string">&#x27;sape&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel[<span class="string">&#x27;irv&#x27;</span>] = <span class="number">4127</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tel</span><br><span class="line">&#123;<span class="string">&#x27;guido&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;irv&#x27;</span>: <span class="number">4127</span>, <span class="string">&#x27;jack&#x27;</span>: <span class="number">4098</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(tel.keys())</span><br><span class="line">[<span class="string">&#x27;irv&#x27;</span>, <span class="string">&#x27;guido&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">sorted</span>(tel.keys())</span><br><span class="line">[<span class="string">&#x27;guido&#x27;</span>, <span class="string">&#x27;irv&#x27;</span>, <span class="string">&#x27;jack&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;guido&#x27;</span> <span class="keyword">in</span> tel</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;jack&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> tel</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h2 id="items-方法"><a href="#items-方法" class="headerlink" title="items()方法"></a>items()方法</h2><blockquote>
<p> knights &#x3D; {‘gallahad’: ‘the pure’, ‘robin’: ‘the brave’}<br> for k, v in knights.items():<br>         print(k, v)</p>
</blockquote>
<h2 id="索引位置和对应值可以使用-enumerate-函数同时得到："><a href="#索引位置和对应值可以使用-enumerate-函数同时得到：" class="headerlink" title="索引位置和对应值可以使用 enumerate() 函数同时得到："></a>索引位置和对应值可以使用 enumerate() 函数同时得到：</h2><blockquote>
<p>for i, v in enumerate([‘tic’, ‘tac’, ‘toe’]):<br>…     print(i, v)</p>
</blockquote>
<h2 id="要反向遍历一个序列，首先指定这个序列，然后调用-reversed-函数："><a href="#要反向遍历一个序列，首先指定这个序列，然后调用-reversed-函数：" class="headerlink" title="要反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数："></a>要反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数：</h2><blockquote>
<p>for i in reversed(range(1, 10, 2)):<br>…     print(i)</p>
</blockquote>
<h2 id="要按顺序遍历一个序列，使用-sorted-函数返回一个已排序的序列，并不修改原值："><a href="#要按顺序遍历一个序列，使用-sorted-函数返回一个已排序的序列，并不修改原值：" class="headerlink" title="要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值："></a>要按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值：</h2><blockquote>
<p>basket &#x3D; [‘apple’, ‘orange’, ‘apple’, ‘pear’, ‘orange’, ‘banana’]<br>   for f in sorted(set(basket)):<br>        print(f)</p>
</blockquote>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python第一章</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖</title>
    <url>/post/reggie.html</url>
    <content><![CDATA[<h1 id="瑞吉外卖全栈解释"><a href="#瑞吉外卖全栈解释" class="headerlink" title="瑞吉外卖全栈解释"></a>瑞吉外卖全栈解释</h1><p> <code>POM（Project Object Model）</code></p>
<ul>
<li><p>文件是用于管理和构建Maven项目的核心文件之一。POM文件是一个XML文件，通常命名为pom.xml，位于Maven项目的根目录下。</p>
</li>
<li><p>POM文件包含了描述项目结构、依赖关系、构建配置和其他项目相关信息的元数据。它定义了项目的基本配置，包括项目的坐标（groupId、artifactId、version）、项目的依赖关系、构建插件和目标、项目的版本控制信息等。</p>
</li>
</ul>
<p> <code>Maven</code></p>
<ul>
<li>Maven是一个用于构建和管理Java项目的强大工具和项目管理工具链。它提供了一种规范化的项目结构、一套标准化的构建生命周期和一系列丰富的插件，使得项目的构建、依赖管理和部署变得更加简单和可靠。</li>
</ul>
<h1 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h1><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">druid:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/reggie?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">111111</span></span><br></pre></td></tr></table></figure>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这段代码是一个MySQL数据库连接的URL，其中包含了一些参数和配置选项。让我逐个解释这些参数的含义：</p>
<ul>
<li><p><code>jdbc:mysql://localhost:3306/reggie</code>: 这是数据库的连接地址。<code>jdbc</code>表示使用JDBC连接方式，<code>mysql</code>表示数据库类型，<code>localhost</code>表示数据库服务器的主机名，<code>3306</code>表示MySQL服务的默认端口号，<code>reggie</code>是数据库的名称。</p>
</li>
<li><p><code>?serverTimezone=Asia/Shanghai</code>: 这个参数用于设置数据库的时区，将其设置为”Asia&#x2F;Shanghai”表示使用上海的时区。</p>
</li>
<li><p><code>&amp;useUnicode=true</code>: 这个参数指定使用Unicode字符集。</p>
</li>
<li><p><code>&amp;characterEncoding=utf-8</code>: 这个参数指定使用UTF-8字符编码。</p>
</li>
<li><p><code>&amp;zeroDateTimeBehavior=convertToNull</code>: 这个参数指定当数据库中的日期时间字段为零值（”0000-00-00”）时的处理方式，将其转换为<code>NULL</code>值。</p>
</li>
<li><p><code>&amp;useSSL=false</code>: 这个参数用于指定是否使用SSL加密连接。在这里，设置为<code>false</code>表示禁用SSL。</p>
</li>
<li><p><code>&amp;allowPublicKeyRetrieval=true</code>: 这个参数用于指定是否允许从数据库获取公钥。在这里，设置为<code>true</code>表示允许获取公钥。</p>
</li>
</ul>
<h2 id="utf8mb4"><a href="#utf8mb4" class="headerlink" title="utf8mb4"></a>utf8mb4</h2><p><code>utf8mb4</code>是一种字符编码，用于支持存储和处理包含四字节字符（如表情符号）的Unicode字符集。它是对传统的UTF-8编码进行扩展，以便能够正确表示和处理更广泛的字符范围。</p>
<blockquote>
<p>创建maven项目后，一定要检查项目的编码，maven仓库的配置，jdk的配置等；</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/577d56316ac244c08371e50f2fd40aa6.png"></p>
<p><img src="https://img-blog.csdnimg.cn/1a0262a93bf8495a9b9892216a7a4519.png"></p>
<p><img src="https://img-blog.csdnimg.cn/d96d70510ba44b24b4451cafede42ab9.png" alt="图片3"></p>
<h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>在Spring中，spring.redis.database属性用于指定要使用的Redis数据库的索引。Redis数据库是一个键值存储系统，其中数据以键值对的形式存储在内存中。每个Redis实例可以包含多个数据库，通过索引来区分不同的数据库。</p>
<p>默认情况下，Redis实例包含16个数据库，索引从0到15。通过设置spring.redis.database属性，可以指定要使用的数据库索引。例如，spring.redis.database: 1表示使用索引为1的Redis数据库。</p>
<h2 id="MyBatis-Plus配置项"><a href="#MyBatis-Plus配置项" class="headerlink" title="MyBatis-Plus配置项"></a>MyBatis-Plus配置项</h2><p><code>log-impl: org.apache.ibatis.logging.stdout.StdOutImpl </code>是 MyBatis-Plus 中的一个配置项，用于指定 MyBatis-Plus 在记录日志时所使用的日志实现类。</p>
<h2 id="常用库"><a href="#常用库" class="headerlink" title="常用库"></a>常用库</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li><p><code>spring-boot-starter</code>: 提供了 Spring Boot 应用程序的基本依赖，包括 Spring 核心功能、自动配置和开发工具。</p>
</li>
<li><p><code>spring-boot-starter-test</code>: 提供了在 Spring Boot 应用程序中进行单元测试和集成测试的支持，包括 JUnit、Mockito 等测试框架和工具。</p>
</li>
<li><p><code>spring-boot-starter-web</code>: 提供了构建基于 Spring MVC 的 Web 应用程序所需的依赖，包括 Servlet、Tomcat 等。它简化了开发 Web 应用程序的过程。</p>
</li>
<li><p><code>mybatis-plus-boot-starter</code>: 提供了 MyBatis-Plus 的 Spring Boot 集成支持，简化了 MyBatis 的配置和使用。MyBatis-Plus 是一个基于 MyBatis 的增强工具，提供了更简洁的 API 和便捷的 CRUD 操作。</p>
</li>
<li><p><code>lombok</code>: 是一个 Java 库，通过注解来减少 Java 代码中的冗余，简化了实体类的编写和 Getter&#x2F;Setter 方法的生成。</p>
</li>
<li><p><code>fastjson</code>: 是一个高性能的 JSON 解析和序列化库，用于处理 JSON 数据。</p>
</li>
<li><p><code>commons-lang</code>: 是 Apache Commons 项目中的一个库，提供了许多常用的工具类和方法，用于处理字符串、集合、日期等。</p>
</li>
<li><p><code>mysql-connector-java</code>: 是 MySQL 数据库的 Java 连接器，用于在 Java 应用程序中与 MySQL 数据库进行交互。</p>
</li>
<li><p><code>druid-spring-boot-starter</code>: 提供了 Druid 数据库连接池的 Spring Boot 集成支持，用于管理和监控数据库连接。</p>
</li>
</ol>
<h2 id="主键手动配置"><a href="#主键手动配置" class="headerlink" title="主键手动配置"></a>主键手动配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">global-config:</span><br><span class="line">  db-config:</span><br><span class="line">    id-type: ASSIGN_ID</span><br></pre></td></tr></table></figure>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul>
<li><p>在上述配置中，<code>global-config</code> 是 MyBatis-Plus 的全局配置项。其中，<code>db-config</code> 是全局配置项中的数据库配置项。</p>
</li>
<li><p><code>id-type: ASSIGN_ID</code> 是数据库配置项中的一个属性，用于指定 MyBatis-Plus 的 ID 生成策略为 <code>ASSIGN_ID</code>。这意味着在使用 MyBatis-Plus 进行数据库操作时，主键 ID 的生成策略将采用手动分配方式，即由开发人员在插入数据时手动指定主键的值。</p>
</li>
<li><p>通过设置 <code>id-type: ASSIGN_ID</code>，开发人员可以灵活地控制主键的生成方式，而不是依赖数据库自动生成的方式。这在某些情况下可能很有用，例如当需要在数据插入之前生成唯一的自定义主键时，或者在某些业务逻辑下需要精确地控制主键的取值范围和顺序时。</p>
</li>
</ul>
<h2 id="导入前端文件"><a href="#导入前端文件" class="headerlink" title="导入前端文件"></a>导入前端文件</h2><p>注意前端文件的位置，在Boot项目中，前台默认就只能访问<code>resource</code>目录下的<code>static</code>和<code>template</code>文件夹下的文件；所以如果要使用这种方式，直接创建一个static目录就行，然后把这些前端资源放在这个static目录下就行；</p>
<p><img src="https://img-blog.csdnimg.cn/2ccd159f824e48568fdf26532919c75e.png"></p>
<h2 id="实体类和mapper的开发-BaseMapper-lt-Employee-gt"><a href="#实体类和mapper的开发-BaseMapper-lt-Employee-gt" class="headerlink" title="实体类和mapper的开发(BaseMapper&lt;Employee&gt;)"></a>实体类和mapper的开发(<code>BaseMapper&lt;Employee&gt;</code>)</h2><p>在<code>entity</code>导入实体类<code>employee</code>类；</p>
<p>使用mybatis-plus提供的自动生成mapper:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.mapper;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Employee&gt; &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/5865ca23fa174b8ca311068bc433594c.png"></p>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">该代码片段是一个基于MyBatis-Plus的Mapper接口的示例。</span><br><span class="line"></span><br><span class="line">在Java中，Mapper通常用于定义与数据库交互的接口。它提供了一种将数据库操作映射为方法调用的方式，使开发人员可以通过调用Mapper接口的方法来执行数据库的增删改查操作。</span><br><span class="line"></span><br><span class="line">在示例中，EmployeeMapper接口继承自BaseMapper<span class="language-xml"><span class="tag">&lt;<span class="name">Employee</span>&gt;</span></span>，BaseMapper是MyBatis-Plus提供的通用Mapper接口，它提供了一组默认的CRUD（增删改查）方法，无需开发人员手动编写SQL语句。</span><br><span class="line"></span><br><span class="line">@Mapper注解用于标识该接口为MyBatis的Mapper接口，这样MyBatis就能够扫描到该接口，并生成对应的实现类。</span><br><span class="line"></span><br><span class="line">该EmployeeMapper接口用于操作名为employee的数据表，通过继承BaseMapper<span class="language-xml"><span class="tag">&lt;<span class="name">Employee</span>&gt;</span></span>，可以直接使用其中定义的一些常用方法，如插入数据、更新数据、删除数据和查询数据等。</span><br><span class="line"></span><br><span class="line">开发人员可以根据具体的业务需求，在EmployeeMapper接口中自定义方法，并在方法上添加相应的注解来实现更复杂的数据库操作。</span><br></pre></td></tr></table></figure>

<h2 id="Mapper介绍"><a href="#Mapper介绍" class="headerlink" title="Mapper介绍"></a>Mapper介绍</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在软件开发中，Mapper是一种常见的设计模式，用于将数据存储层与业务逻辑层分离。它负责处理数据存储层（如数据库）与应用程序之间的交互，提供一种将数据从一种表示形式转换为另一种表示形式的机制。</span><br><span class="line"></span><br><span class="line">在Java开发中，Mapper通常用于将对象和关系数据库之间进行映射。它的主要作用是将数据库表中的行数据映射到Java对象或将Java对象映射到数据库表中的行数据。</span><br><span class="line"></span><br><span class="line">在持久层框架（如MyBatis、Hibernate）中，Mapper通常指的是数据访问对象（DAO）或数据访问层（DAL）。它是一个接口或类，用于定义与数据库交互的方法。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.service;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Employee;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Employee&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.service.impl;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.mapper.EmployeeMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span>            <span class="comment">//这两个泛型一个是实体类对应的mapper,一个是实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;EmployeeMapper,Employee&gt; <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/133908d5ef064a619daa6d50f7a2b3a7.png"></p>
<h2 id="IService"><a href="#IService" class="headerlink" title="IService"></a>IService<Employee></h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`IService&lt;Employee&gt;`</span> 是一个泛型接口，是 MyBatis-Plus 框架提供的用于定义<span class="code">`服务层`</span>接口的接口。</span><br><span class="line"></span><br><span class="line">在这段代码中，<span class="code">`EmployeeService`</span> 接口继承了 <span class="code">`IService&lt;Employee&gt;`</span> 接口，通过泛型参数 <span class="code">`&lt;Employee&gt;`</span> 指定了实体类的类型，即 <span class="code">`Employee`</span>。</span><br><span class="line"></span><br><span class="line"><span class="code">`IService&lt;Employee&gt;`</span> 接口定义了一些常见的数据库操作方法，例如增加、删除、修改、查询等。通过继承 <span class="code">`IService&lt;Employee&gt;`</span> 接口，<span class="code">`EmployeeService`</span> 接口可以直接使用这些数据库操作方法，而无需自己编写具体的实现代码。</span><br><span class="line"></span><br><span class="line">在 <span class="code">`EmployeeService`</span> 接口中，可以定义自己的业务方法，以及对 <span class="code">`Employee`</span> 实体类的特定操作方法。这些方法可以在 <span class="code">`EmployeeServiceImpl`</span> 类中进行具体的实现。</span><br><span class="line"></span><br><span class="line">通过定义 <span class="code">`EmployeeService`</span> 接口，可以在应用程序中进行面向接口的编程，提高代码的可维护性和可扩展性。同时，<span class="code">`EmployeeService`</span> 接口的实现类可以通过依赖注入的方式注入到其他组件中使用。</span><br></pre></td></tr></table></figure>

<h2 id="ServiceImpl-lt-EmployeeMapper-Employee-gt"><a href="#ServiceImpl-lt-EmployeeMapper-Employee-gt" class="headerlink" title="ServiceImpl&lt;EmployeeMapper,Employee&gt;"></a>ServiceImpl&lt;EmployeeMapper,Employee&gt;</h2><figure class="highlight md"><table><tr><td class="code"><pre><span class="line"><span class="code">`ServiceImpl&lt;EmployeeMapper, Employee&gt;`</span> 是 MyBatis-Plus 框架提供的一个通用服务实现类。在这段代码中，<span class="code">`EmployeeServiceImpl`</span> 类继承了 <span class="code">`ServiceImpl&lt;EmployeeMapper, Employee&gt;`</span>，表示 <span class="code">`EmployeeServiceImpl`</span> 是对 <span class="code">`Employee`</span> 实体类进行数据库操作的服务实现类。</span><br><span class="line"></span><br><span class="line"><span class="code">`ServiceImpl&lt;EmployeeMapper, Employee&gt;`</span> 是一个泛型类，它接收两个参数：<span class="code">`EmployeeMapper`</span> 和 <span class="code">`Employee`</span>。<span class="code">`EmployeeMapper`</span> 是 <span class="code">`Employee`</span> 实体类对应的 Mapper 接口，用于执行数据库操作。<span class="code">`Employee`</span> 是实体类的类型，用于指定具体的实体类。</span><br><span class="line"></span><br><span class="line">通过继承 <span class="code">`ServiceImpl&lt;EmployeeMapper, Employee&gt;`</span>，<span class="code">`EmployeeServiceImpl`</span> 可以使用 MyBatis-Plus 提供的一些通用方法，如保存实体、根据主键查询实体、更新实体、删除实体等。这些通用方法的实现已经由 MyBatis-Plus 框架提供，无需开发者自己实现。</span><br><span class="line"></span><br><span class="line">此外，开发者还可以在 <span class="code">`EmployeeServiceImpl`</span> 类中根据业务需求添加自定义的方法，以实现特定的业务逻辑。通过继承 <span class="code">`ServiceImpl&lt;EmployeeMapper, Employee&gt;`</span>，<span class="code">`EmployeeServiceImpl`</span> 类可以充分利用 MyBatis-Plus 提供的便捷功能，并扩展自定义的业务逻辑，提高开发效率和代码可维护性。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/133908d5ef064a619daa6d50f7a2b3a7.png"></p>
<h2 id="封装返回的结果类"><a href="#封装返回的结果类" class="headerlink" title="封装返回的结果类"></a>封装返回的结果类</h2><blockquote>
<p>创建一个新的包，common，用来存放共同使用的类，把这个返回结果类放入这个公共包；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用返回结果类，服务端响应的数据最终都会封装成此对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//编码：1成功，0和其它数字为失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="comment">//错误信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="comment">//动态数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">success</span><span class="params">(T object)</span> &#123;</span><br><span class="line">        R&lt;T&gt; r = <span class="keyword">new</span> <span class="title class_">R</span>&lt;T&gt;();</span><br><span class="line">        r.data = object;</span><br><span class="line">        r.code = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; R&lt;T&gt; <span class="title function_">error</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一个 &lt;T&gt; 是方法的类型参数，第二个 &lt;T&gt; 是类的类型参数。</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.msg = msg;</span><br><span class="line">        r.code = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="细讲"><a href="#细讲" class="headerlink" title="细讲"></a>细讲</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> R&lt;T&gt; <span class="title function_">add</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.map.put(key, value);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的<code>return this</code>是返回当前对象指针，可以保证能够被链式调用</p>
<h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><blockquote>
<p>先处理业务逻辑，然后再编码！！！</p>
</blockquote>
<ul>
<li>1、将页面提交的密码password进行md5加密处理</li>
<li>2、根据页面提交的用户名username查询数据库</li>
<li>3、如果没有查询到则返回登录失败结果</li>
<li>4、密码比对，如果不一致则返回登录失败结果</li>
<li>5、查看员工状态，如果为已禁用状态，则返回员工已禁用结果</li>
<li>6、登录成功，将员工id存入Session并返回登录成功结果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.common.R;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie.service.EmployeeService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.DigestUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span> <span class="comment">//使用restful风格开发</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">login</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> employee.getPassword();</span><br><span class="line">        password = DigestUtils.md5DigestAsHex(password.getBytes());</span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (emp == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!emp.getPassword().equals(password)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;密码不正确&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (emp.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;账号已禁用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        request.getSession().setAttribute(<span class="string">&quot;employee&quot;</span>, emp.getId());</span><br><span class="line">        <span class="keyword">return</span> R.success(emp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">//清理session中的用户id</span></span><br><span class="line">        request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping()</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">save</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        employee.setPassword(DigestUtils.md5DigestAsHex(<span class="string">&quot;123456&quot;</span>.getBytes()));</span><br><span class="line">        employeeService.save(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;新增员工成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Page&gt; <span class="title function_">page</span><span class="params">(<span class="type">int</span> page, <span class="type">int</span> pageSize, String name)</span> &#123;</span><br><span class="line">       </span><br><span class="line">        log.info(<span class="string">&quot;page = &#123;&#125;,pageSize = &#123;&#125;,name = &#123;&#125;&quot;</span>, page, pageSize, name);</span><br><span class="line">        <span class="type">Page</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Page</span>(page, pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>();</span><br><span class="line">        queryWrapper.like(StringUtils.isNotEmpty(name), Employee::getName, name);</span><br><span class="line">        queryWrapper.orderByDesc(Employee::getUpdateTime);</span><br><span class="line">        employeeService.page(pageInfo, queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(pageInfo);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">update</span><span class="params">(HttpServletRequest request, <span class="meta">@RequestBody</span> Employee employee)</span> &#123;</span><br><span class="line">        log.info(employee.toString());</span><br><span class="line"></span><br><span class="line">        <span class="type">Long</span> <span class="variable">empId</span> <span class="operator">=</span> (Long) request.getSession().getAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">        employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">        employee.setUpdateUser(empId);</span><br><span class="line">        employeeService.updateById(employee);</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;员工信息修改成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">if</span> (employee != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.success(employee);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有查询到该员工信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>HttpServletRequest request</code>是一个参数，用于获取HTTP请求的相关信息。它是由Spring框架自动注入的，用于处理HTTP请求的头部、参数、Cookie等信息。在这个控制器方法中，<code>HttpServletRequest request</code>被用来存储登录成功后的员工id到Session中。</p>
<p><code>@RequestBody Employee employee</code>是一个注解和参数的组合，用于将HTTP请求的请求体中的JSON数据映射到<code>Employee</code>对象上。<code>@RequestBody</code>注解告诉Spring MVC框架将请求体中的数据反序列化为<code>Employee</code>对象。在这个控制器方法中，前端传递的JSON数据包含了用户名和密码信息，通过<code>@RequestBody Employee employee</code>将其转换为<code>Employee</code>对象供后续处理。</p>
<h3 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LambdaQueryWrapper&lt;Employee&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line"><span class="comment">// 意思是构建一个等于条件 queryWrapper本身是一个条件器</span></span><br><span class="line">queryWrapper.eq(Employee::getUsername, employee.getUsername());</span><br><span class="line"><span class="comment">//在设计数据库的时候我们对username使用了唯一索引,所以这里可以使用getOne方法</span></span><br><span class="line"><span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> employeeService.getOne(queryWrapper);</span><br></pre></td></tr></table></figure>


<h3 id="304状态码"><a href="#304状态码" class="headerlink" title="304状态码"></a>304状态码</h3><ul>
<li><p>HTTP状态码304表示”未修改”（Not Modified）。它是一种用于缓存机制的状态码，用于优化网络传输和减少服务器负载。</p>
</li>
<li><p>当客户端发出一个条件GET请求（通常是GET请求）时，如果服务器端的资源在上次请求之后没有发生变化，则服务器会返回304状态码。这告诉客户端可以使用本地缓存的副本，而不必再次下载资源。</p>
</li>
</ul>
<h3 id="前端的本地存储"><a href="#前端的本地存储" class="headerlink" title="前端的本地存储"></a>前端的本地存储</h3><blockquote>
<p>localStorage.setItem(‘userInfo’,JSON.stringify(res.data))</p>
</blockquote>
<h3 id="后台系统退出功能"><a href="#后台系统退出功能" class="headerlink" title="后台系统退出功能"></a>后台系统退出功能</h3><blockquote>
<p>后端代码处理：</p>
</blockquote>
<ul>
<li>①在controller中创建对应的处理方法来接受前端的请求，请求方式为post；</li>
<li>②清理session中的用户id</li>
<li>③返回结果（前端页面会进行跳转到登录页面）</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/da92d3f05d3d481b86139aa0ec501d05.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/logout&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">logout</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    <span class="comment">//清理session中的用户id</span></span><br><span class="line">    request.getSession().removeAttribute(<span class="string">&quot;employee&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="string">&quot;退出成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="六、员工管理模块"><a href="#六、员工管理模块" class="headerlink" title="六、员工管理模块"></a>六、员工管理模块</h3><blockquote>
<p>前面的登陆存在一个问题，如果用户不进行登陆，直接访问系统的首页，照样可以正常访问，这种设计是不合理的，我们希望看到的效果是只有完成了登陆后才可以访问系统中的页面，如果没有登陆则跳转到登陆页面；</p>
</blockquote>
<p><em>答案就是使用过滤器或者是拦截器，在拦截器或者是过滤器中判断用户是否已经完成了登陆，如果没有登陆则跳转到登陆页面；</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(filterName = &quot;LongCheckFilter&quot;,urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LongCheckFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 通过强制类型转换，可以获得更具体的HTTP请求和响应对象，从而可以使用更多与HTTP相关的方法和功能。例如，可以获取请求的URL、请求参数、请求头信息，以及设置响应的状态码、响应头信息等。</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> (HttpServletResponse) servletResponse;</span><br><span class="line">        log.info(<span class="string">&quot;拦截到的请求:&#123;&#125;&quot;</span>,request.getRequestURL());</span><br><span class="line">        <span class="comment">//对请求进行放行</span></span><br><span class="line">        filterChain.doFilter(request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="路径匹配器"><a href="#路径匹配器" class="headerlink" title="路径匹配器"></a>路径匹配器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">AntPathMatcher</span> <span class="variable">PATH_MATCHER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">把浏览器发过来的请求和我们定义的不拦截的url做比较，匹配则放行</span><br><span class="line"><span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> PATH_MATCHER.match(url, requestURI);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="完善过滤器的处理逻辑"><a href="#完善过滤器的处理逻辑" class="headerlink" title="完善过滤器的处理逻辑"></a>完善过滤器的处理逻辑</h3><p><img src="https://img-blog.csdnimg.cn/ccee02d7db30467697f337f0ac3a8775.png"></p>
<h3 id="数据响应"><a href="#数据响应" class="headerlink" title="数据响应"></a>数据响应</h3><blockquote>
<p>response.getWriter().write(JSON.toJSONString(R.error(“NOTLOGIN”)));</p>
</blockquote>
<p>这行代码的作用是向客户端发送响应数据。<br>具体地，response.getWriter()获取一个字符输出流，可以使用它向客户端发送字符数据。通过调用write()方法，将需要发送的数据作为参数传递进去。<br>在这行代码中，R.error(“NOTLOGIN”)创建了一个通用返回结果对象，表示登录失败的情况。然后使用JSON.toJSONString()方法将该对象转换为JSON格式的字符串。最后，通过调用write()方法将JSON字符串作为响应发送给客户端。</p>
<h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><p><img src="https://img-blog.csdnimg.cn/332e11ea40ea464496b1692084c66dac.png"></p>
<p><code>@RequestBody</code></p>
<p><code>@RequestBody</code>是一个Spring MVC注解，用于指示方法参数应该绑定到请求的主体部分。它可以用于接收请求体中的数据，并将其转换为方法参数所需的对象。</p>
<p>在这段代码中，<code>@RequestBody Employee employee</code>表示将请求体中的数据转换为<code>Employee</code>对象。当前端发送POST请求时，请求体中的JSON数据会被反序列化为<code>Employee</code>对象，并作为方法参数传递给<code>save</code>方法。</p>
<p>通过使用<code>@RequestBody</code>注解，可以方便地将请求体中的数据绑定到方法参数，避免了手动解析请求体和数据转换的繁琐过程。<br>接收前端传递的员工信息，并将其保存到数据库中。</p>
<h3 id="全局异常捕获"><a href="#全局异常捕获" class="headerlink" title="全局异常捕获"></a>全局异常捕获</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</span> <span class="comment">//表示拦截哪些类型的controller注解</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理SQLIntegrityConstraintViolationException异常的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">exceptionHandle</span><span class="params">(SQLIntegrityConstraintViolationException exception)</span>&#123;</span><br><span class="line">        log.error(exception.getMessage()); <span class="comment">//报错记得打日志</span></span><br><span class="line">        <span class="keyword">if</span> (exception.getMessage().contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            <span class="comment">//获取已经存在的用户名，这里是从报错的异常信息中获取的</span></span><br><span class="line">            String[] split = exception.getMessage().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> split[<span class="number">2</span>] + <span class="string">&quot;这个用户名已经存在&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> R.error(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;未知错误&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="注解1"><a href="#注解1" class="headerlink" title="注解1"></a>注解1</h4><blockquote>
<p>@ControllerAdvice(annotations &#x3D; {RestController.class, Controller.class}) </p>
</blockquote>
<blockquote>
<p>通过@ControllerAdvice注解，我们可以定义一个全局的异常处理器，用于处理应用程序中抛出的异常。在上述代码中，通过annotations属性指定了需要拦截的控制器注解类型，包括@RestController和@Controller。</p>
</blockquote>
<p>这段代码是一个全局异常处理器，用于捕获和处理特定类型的异常，并返回对应的错误信息。</p>
<p>以下是代码中的关键部分解释：</p>
<ul>
<li><code>@ControllerAdvice(annotations = &#123;RestController.class, Controller.class&#125;)</code>: 注解标识该类为全局异常处理器，并指定要拦截的控制器注解类型为<code>RestController</code>和<code>Controller</code>。</li>
<li><code>@ResponseBody</code>: 注解表示方法的返回值将作为响应体返回。</li>
<li><code>@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</code>: 注解表示该方法用于处理<code>SQLIntegrityConstraintViolationException</code>类型的异常。</li>
<li><code>public R&lt;String&gt; exceptionHandle(SQLIntegrityConstraintViolationException exception)</code>: 方法声明，接收一个<code>SQLIntegrityConstraintViolationException</code>类型的异常作为参数，并返回一个<code>R&lt;String&gt;</code>类型的通用返回结果对象。</li>
</ul>
<p>在方法实现中，首先通过日志记录异常信息。然后，根据异常信息判断具体的错误类型。如果异常信息中包含”Duplicate entry”，则表示出现了重复插入数据的错误，从异常信息中提取出已存在的用户名，并构造相应的错误信息返回。否则，返回一个默认的未知错误信息。</p>
<p>该全局异常处理器的作用是捕获特定类型的异常并返回对应的错误信息，以提供统一的异常处理机制。</p>
<h4 id="注解2"><a href="#注解2" class="headerlink" title="注解2"></a>注解2</h4><p><code>@ExceptionHandler(SQLIntegrityConstraintViolationException.class)</code> </p>
<p>作用：当发生 <code>SQLIntegrityConstraintViolationException</code> 异常时，全局异常处理器会自动调用被标记的方法来处理该异常。在该方法中，可以根据具体的业务需求进行异常处理逻辑的编写，例如记录日志、返回自定义的错误信息等。<br>通过使用 <code>@ExceptionHandler</code> 注解，可以将异常处理逻辑集中在一个类中，从而实现全局的异常处理，统一处理项目中出现的特定异常。这样可以提高代码的可维护性和可读性，避免在多个地方重复编写相同的异常处理逻辑。</p>
]]></content>
      <categories>
        <category>瑞吉外卖</category>
      </categories>
      <tags>
        <tag>瑞吉外卖</tag>
      </tags>
  </entry>
  <entry>
    <title>python面向对象</title>
    <url>/post/python6.html</url>
    <content><![CDATA[<h1 id="python面向对象"><a href="#python面向对象" class="headerlink" title="python面向对象"></a>python面向对象</h1><blockquote>
<p>类有一个名为 <strong>init</strong>() 的特殊方法（构造方法），该方法在类实例化时会自动调</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.data = []</span><br></pre></td></tr></table></figure>

<p>类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称,<br>self 不是 python 关键字<br>self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    //定义基本属性</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    //定义私有属性,私有属性在类外部无法直接进行访问</span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    //定义构造方法</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br></pre></td></tr></table></figure>
<h1 id="实例化类"><a href="#实例化类" class="headerlink" title="实例化类"></a>实例化类</h1><blockquote>
<p>p &#x3D; people(‘runoob’,10,30)<br>p.speak()</p>
</blockquote>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br></pre></td></tr></table></figure>

<h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br></pre></td></tr></table></figure>
<h2 id="单继承示例"><a href="#单继承示例" class="headerlink" title="单继承示例"></a>单继承示例</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;Tim&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中参数位置排前父类的方法</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>super(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法</p>
</blockquote>
<h2 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h2><blockquote>
<p>两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问<br>类的私有方法,两个下划线开头，声明该方法为私有方法</p>
</blockquote>
<figure class="highlight md"><table><tr><td class="code"><pre><span class="line">类的专有方法：</span><br><span class="line"></span><br><span class="line"><span class="bullet"> -</span> <span class="strong">__init__</span> : 构造函数，在生成对象时调用</span><br><span class="line">   <span class="strong">__del__</span> : 析构函数，释放对象时使用</span><br><span class="line">   <span class="strong">__repr__</span> : 打印，转换</span><br><span class="line">   <span class="strong">__setitem__</span> : 按照索引赋值</span><br><span class="line">   <span class="strong">__getitem__</span>: 按照索引获取值</span><br><span class="line">   <span class="strong">__len__</span>: 获得长度</span><br><span class="line">   <span class="strong">__cmp__</span>: 比较运算</span><br><span class="line">   <span class="strong">__call__</span>: 函数调用</span><br><span class="line">   <span class="strong">__add__</span>: 加运算</span><br><span class="line">   <span class="strong">__sub__</span>: 减运算</span><br><span class="line">   <span class="strong">__mul__</span>: 乘运算</span><br><span class="line">   <span class="strong">__truediv__</span>: 除运算</span><br><span class="line">   <span class="strong">__mod__</span>: 求余运算</span><br><span class="line">   <span class="strong">__pow__</span>: 乘方</span><br></pre></td></tr></table></figure>

<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,other</span>):</span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> (v1 + v2)</span><br><span class="line"></span><br><span class="line">当内部作用域想修改外部作用域的变量时，就要用到 <span class="keyword">global</span> 关键字</span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun1</span>():</span><br><span class="line">    <span class="keyword">global</span> num  <span class="comment"># 需要使用 global 关键字声明</span></span><br><span class="line">    <span class="built_in">print</span>(num) </span><br><span class="line">    num = <span class="number">123</span></span><br><span class="line">    <span class="built_in">print</span>(num)</span><br><span class="line">fun1()</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure>

<p>如果要修改嵌套作用域（enclosing 作用域，外层非全局作用域）中的变量则需要 nonlocal 关键字了，</p>
<p>random提供了生成随机数的工具。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> random</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;pear&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>])</span><br><span class="line"><span class="string">&#x27;apple&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.sample(<span class="built_in">range</span>(<span class="number">100</span>), <span class="number">10</span>)   <span class="comment"># sampling without replacement</span></span><br><span class="line">[<span class="number">30</span>, <span class="number">83</span>, <span class="number">16</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">81</span>, <span class="number">41</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">33</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.random()    <span class="comment"># random float</span></span><br><span class="line"><span class="number">0.17970987693706186</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.randrange(<span class="number">6</span>)    <span class="comment"># random integer chosen from range(6)</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>字符串正则匹配</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.findall(<span class="string">r&#x27;\bf[a-z]*&#x27;</span>, <span class="string">&#x27;which foot or hand fell fastest&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;foot&#x27;</span>, <span class="string">&#x27;fell&#x27;</span>, <span class="string">&#x27;fastest&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;(\b[a-z]+) \1&#x27;</span>, <span class="string">r&#x27;\1&#x27;</span>, <span class="string">&#x27;cat in the the hat&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;cat in the hat&#x27;</span></span><br></pre></td></tr></table></figure>
<p>日期和时间</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now = date.today()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now</span><br><span class="line">datetime.date(<span class="number">2003</span>, <span class="number">12</span>, <span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>now.strftime(<span class="string">&quot;%m-%d-%y. %d %b %Y is a %A on the %d day of %B.&quot;</span>)</span><br><span class="line"><span class="string">&#x27;12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># dates support calendar arithmetic</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>birthday = date(<span class="number">1964</span>, <span class="number">7</span>, <span class="number">31</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age = now - birthday</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>age.days</span><br><span class="line"><span class="number">14368</span></span><br></pre></td></tr></table></figure>

<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h3 id="处理get请求，不传data，则为get请求"><a href="#处理get请求，不传data，则为get请求" class="headerlink" title="处理get请求，不传data，则为get请求"></a>处理get请求，不传data，则为get请求</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://www.xxx.com/login&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">req_data=urlencode(data)<span class="comment">#将字典类型的请求数据转变为url编码</span></span><br><span class="line">res=urlopen(url+<span class="string">&#x27;?&#x27;</span>+req_data)<span class="comment">#通过urlopen方法访问拼接好的url</span></span><br><span class="line">res=res.read().decode()<span class="comment">#read()方法是读取返回数据内容，decode是转换返回数据的bytes格式为str</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"><span class="comment">#处理post请求,如果传了data，则为post请求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> Request</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">url=<span class="string">&#x27;http://www.xxx.com/login&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="number">123456</span>&#125;</span><br><span class="line">data=urlencode(data)<span class="comment">#将字典类型的请求数据转变为url编码</span></span><br><span class="line">data=data.encode(<span class="string">&#x27;ascii&#x27;</span>)<span class="comment">#将url编码类型的请求数据转变为bytes类型</span></span><br><span class="line">req_data=Request(url,data)<span class="comment">#将url和请求数据处理为一个Request对象，供urlopen调用</span></span><br><span class="line"><span class="keyword">with</span> urlopen(req_data) <span class="keyword">as</span> res:</span><br><span class="line">    res=res.read().decode()<span class="comment">#read()方法是读取返回数据内容，</span></span><br><span class="line">    decode是转换返回数据的<span class="built_in">bytes</span>格式为<span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure>









]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python面向对象</tag>
      </tags>
  </entry>
  <entry>
    <title>图解网络</title>
    <url>/post/%E5%9B%BE%E8%A7%A3%E7%BD%91%E7%BB%9C.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>图解网络</category>
      </categories>
      <tags>
        <tag>图解网络</tag>
      </tags>
  </entry>
  <entry>
    <title>python基本数据结构</title>
    <url>/post/python2.html</url>
    <content><![CDATA[<h1 id="python基本数据结构"><a href="#python基本数据结构" class="headerlink" title="python基本数据结构"></a>python基本数据结构</h1><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><ul>
<li>list1 &#x3D; [‘Google’, ‘Runoob’, 1997, 2000] </li>
<li>list2 &#x3D; [1, 2, 3, 4, 5 ]</li>
<li>list3 &#x3D; [“a”, “b”, “c”, “d”] </li>
<li>list4 &#x3D; [‘red’, ‘green’, ‘blue’,’yellow’, ‘white’, ‘black’]</li>
</ul>
<h1 id="从第二位开始（包含）截取到倒数第二位（不包含）"><a href="#从第二位开始（包含）截取到倒数第二位（不包含）" class="headerlink" title="从第二位开始（包含）截取到倒数第二位（不包含）"></a>从第二位开始（包含）截取到倒数第二位（不包含）</h1><blockquote>
<p>print (“list[1:-2]: “, list[1:-2])&#x2F;&#x2F;左闭右开</p>
</blockquote>
<p>列表比较<br>列表比较需要引入 operator 模块的 eq 方法</p>
<h1 id="导入-operator-模块"><a href="#导入-operator-模块" class="headerlink" title="导入 operator 模块"></a>导入 operator 模块</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">b = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">c = [<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.eq(a,b): &quot;</span>, operator.eq(a,b))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;operator.eq(c,b): &quot;</span>, operator.eq(c,b))</span><br></pre></td></tr></table></figure>
<h2 id="把元组或者字符串转化成列表"><a href="#把元组或者字符串转化成列表" class="headerlink" title="把元组或者字符串转化成列表"></a>把元组或者字符串转化成列表</h2><blockquote>
<p>list( seq )<br>seq – 要转换为列表的元组或字符串。</p>
</blockquote>
<ul>
<li>append() 方法用于在列表末尾添加新的对象。</li>
<li>list.append(obj)</li>
<li>count() 方法用于统计某个元素在列表中出现的次数。</li>
<li>list.count(obj)</li>
</ul>
<p>extend() 函数用于在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</p>
<blockquote>
<p>list.extend(seq)</p>
</blockquote>
<p>seq – 元素列表，可以是列表、元组、集合、字典，若为字典,则仅会将键(key)作为元素依次添加至原列表的末尾。</p>
<p>index() 函数用于从列表中找出某个值第一个匹配项的索引位置。</p>
<blockquote>
<p>list.index(x, start, end)</p>
</blockquote>
<ul>
<li>x– 查找的对象。 </li>
<li>start– 可选，查找的起始位置。 </li>
<li>end– 可选，查找的结束位置。</li>
</ul>
<p>pop() 函数用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。</p>
<blockquote>
<p>list.pop([index&#x3D;-1])<br>该方法返回从列表中移除的元素对象。</p>
</blockquote>
<p>insert() 函数用于将指定对象插入列表的指定位置。</p>
<ul>
<li>list.insert(index, obj)</li>
<li>list.remove(obj) </li>
<li>list.reverse() </li>
<li>list.sort( key&#x3D;None, reverse&#x3D;False)</li>
</ul>
<h1 id="降序"><a href="#降序" class="headerlink" title="降序"></a>降序</h1><blockquote>
<p>vowels.sort(reverse&#x3D;True)</p>
</blockquote>
<h1 id="获取列表的第二个元素"><a href="#获取列表的第二个元素" class="headerlink" title="获取列表的第二个元素"></a>获取列表的第二个元素</h1><blockquote>
<p>def takeSecond(elem):<br>    return elem[1]<br>    random &#x3D; [(2, 2), (3, 4), (4, 1), (1, 3)]</p>
</blockquote>
<h1 id="指定第二个元素排序"><a href="#指定第二个元素排序" class="headerlink" title="指定第二个元素排序"></a>指定第二个元素排序</h1><blockquote>
<p>random.sort(key&#x3D;takeSecond)<br>    list.clear()<br>    list2 &#x3D; list1.copy()</p>
</blockquote>
<p>元组 字典 集合</p>
<p>元组的不可变指的是元组所指向的内存中的内容不可变。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python基本数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建vpn</title>
    <url>/post/%E6%90%AD%E5%BB%BAvpn.html</url>
    <content><![CDATA[<h1 id="打开网站"><a href="#打开网站" class="headerlink" title="打开网站"></a>打开网站</h1><blockquote>
<p><a href="https://一元机场.com/#/register?code=TU3Ylkfw">https://xn--4gq62f52gdss.com/#/register?code=TU3Ylkfw</a></p>
</blockquote>
<h1 id="注册账号-使用qq邮箱即可"><a href="#注册账号-使用qq邮箱即可" class="headerlink" title="注册账号,使用qq邮箱即可"></a>注册账号,使用qq邮箱即可</h1><h1 id="点击12元的传家宝，付款，不过要先充钱"><a href="#点击12元的传家宝，付款，不过要先充钱" class="headerlink" title="点击12元的传家宝，付款，不过要先充钱"></a>点击12元的传家宝，付款，不过要先充钱</h1><p><img src="/post/%E6%90%AD%E5%BB%BAvpn/1.jpg"></p>
<h1 id="点击windows教程"><a href="#点击windows教程" class="headerlink" title="点击windows教程"></a>点击windows教程</h1><p><img src="/post/%E6%90%AD%E5%BB%BAvpn/2.jpg"></p>
<h1 id="仪表盘-一键订阅，复制您的订阅链接，"><a href="#仪表盘-一键订阅，复制您的订阅链接，" class="headerlink" title="仪表盘 - 一键订阅，复制您的订阅链接，"></a>仪表盘 - 一键订阅，复制您的订阅链接，</h1><p><img src="/post/%E6%90%AD%E5%BB%BAvpn/3.jpg"></p>
<h1 id="并粘贴到界面刚才下载的软件的的输入框中，然后点击“Download”按钮。"><a href="#并粘贴到界面刚才下载的软件的的输入框中，然后点击“Download”按钮。" class="headerlink" title="并粘贴到界面刚才下载的软件的的输入框中，然后点击“Download”按钮。"></a>并粘贴到界面刚才下载的软件的的输入框中，然后点击“Download”按钮。</h1><p><img src="/post/%E6%90%AD%E5%BB%BAvpn/5.jpg"></p>
<h1 id="选择rule模式，节点不要选择香港，其它都行。"><a href="#选择rule模式，节点不要选择香港，其它都行。" class="headerlink" title="选择rule模式，节点不要选择香港，其它都行。"></a>选择rule模式，节点不要选择香港，其它都行。</h1><p><img src="/post/%E6%90%AD%E5%BB%BAvpn/4.jpg"></p>
<blockquote>
<p>如果节点点不动，刷新一下，刷新按钮是那个长得像wifi的按钮。</p>
</blockquote>
<h1 id="最后就可以愉快的玩耍了！"><a href="#最后就可以愉快的玩耍了！" class="headerlink" title="最后就可以愉快的玩耍了！"></a>最后就可以愉快的玩耍了！</h1>]]></content>
      <categories>
        <category>vpn</category>
      </categories>
      <tags>
        <tag>vpn</tag>
      </tags>
  </entry>
  <entry>
    <title>你的野心要配得上你的努力</title>
    <url>/post/%E4%BD%A0%E7%9A%84%E9%87%8E%E5%BF%83%E8%A6%81%E9%85%8D%E5%BE%97%E4%B8%8A%E4%BD%A0%E7%9A%84%E5%8A%AA%E5%8A%9B.html</url>
    <content><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><p>比口袋更贫穷的，是一个人习惯了这样的生活，从内心深处不想有什么改变。</p>
<p>在大城市搞废一个人最简单的方式就是给他个小房间和一根网线，如果再给个外卖电话，好了，这人就废了。因为底层的舒适区，十分容易废掉一个人。</p>
<p>一个人离自己想要的生活，就差一个野心，一个愿意改变现有状态的野心。</p>
<p>资源可能是有限的，但如果我们能够拥有一种积极的心态，寻求合作、创造和共享，我们就能够更好地应对稀缺的挑战，找到更多的机会和解决方案。相比于资源的<br>稀缺性，人们的心态和态度对于我们如何应对挑战和追求发展更加重要。</p>
<h2 id="你讲的话，可能就决定了你的一生"><a href="#你讲的话，可能就决定了你的一生" class="headerlink" title="你讲的话，可能就决定了你的一生"></a>你讲的话，可能就决定了你的一生</h2><p>当一个人没有实力，或者能力不足时，越积极的心理暗示，反而越会造成意想不到的失落。</p>
<p>如果说口乃心之门户，那么，你的口头禅就决定了你的意识和思维，这可能就决定了一生。</p>
<p>语言的魅力太强大了，竟然能无形之中塑造着我们的大脑，改变着我们的一生。</p>
<p>因为口头禅的不同，在遇到重大事情时，他们的思维方式也发生了本质的区别：一个默默承受着外界的改变，一个想着如何通过自己改变。</p>
<h2 id="你怎么过一天，你就怎么过一年"><a href="#你怎么过一天，你就怎么过一年" class="headerlink" title="你怎么过一天，你就怎么过一年"></a>你怎么过一天，你就怎么过一年</h2><p>一年是由三百多个日子组成的，三百多个日子每天都做一点点改变，别小看它，积累起来，三百多天的变化也是令人震惊的。</p>
<p>这世间许多美好都源于坚持。</p>
<p>聪明人用笨功夫，一步步地坚持罢了。</p>
<p>坚持做一件事情不累，累的是浑浑噩噩地生活。</p>
<p>一个人按照自己的意愿生活，其实并不累，比如，下班给自己报一个班，每天利用下班的时间学习迭代，别人都觉得你很累，你却乐在其中。</p>
<p>这世界的幸福就是这样，给自己一点期待，坚持下去，珍惜每天的时间，按自己的意愿生活，一年下来，你觉得谁会辜负你？</p>
<p>如果你不对生活有一些要求，不去死磕、坚持一些事情，不去坚持一些美好，生活也不会善待你。</p>
<blockquote>
<p>人最可怕的不是遇到黑暗，而是在见过黑暗后，不再相信光明。</p>
</blockquote>
<p>有些苦，持续一段时间就麻木了。</p>
<p>一旦大脑认定某种行为跟往常一样，就会拼命地维持这种行为。而习惯，就是把重复的行动化为无意识的行动。</p>
<p>有时候，一个人坚持了一半就号啕大哭是不明智的，那样自怜的感觉，甚至有些作秀的意味，要知道，所有的坚持仅仅是为了到达目的地，只有到达目的地后的流<br>泪，才有意义。</p>
<p>把事情做好，朝着目标看，钱不过是身外之物，而且会滚滚而来的。</p>
<p>赚钱很重要，但一定是自我实现后的附加品，人一旦为了赚钱而工作，工作就会特别无聊，也走不远。</p>
<p>把精力集中在能做的事情上，这个决定让一个孩子完全有能力比成人挣到更多的钱，因为成人经常把一生的时间都用来考虑他们不能做的、没有的或不知道的事情上<br>。</p>
<h2 id="学习的假象"><a href="#学习的假象" class="headerlink" title="学习的假象"></a>学习的假象</h2><p>这个时代，有太多人充满着知识焦虑，他们选择了用自己的收入去购买一部分知识，从而改变命运。但千万别忘了，消费只是第一步，消费不代表学习，学习就是学<br>习，消费是门槛，学习才是核心。</p>
<p>学习的第二个假象：认为知道等于知识。其实不是，知道就是知道，但凡不能变成实用的，变成知识晶体的，都不能算作知识。</p>
<p>那些知道的东西，都像碎片一样占据在脑子里，只有结成晶体的，才是有用的。</p>
<ul>
<li>例子：长视频把知识点做成知识体系。</li>
</ul>
<p>主动学习比被动学习要重要得多。</p>
<p>表达能力提高最快的时候就是当老师的那段日子，因为每天都要讲课，所以逼着我不停地读书，逼着我不停地去表达，也逼着我不停地去学习，用<code>输出倒逼输入</code>。</p>
<h1 id="总在进步的人，永远不会老"><a href="#总在进步的人，永远不会老" class="headerlink" title="总在进步的人，永远不会老"></a>总在进步的人，永远不会老</h1><h2 id="做人要有边界感"><a href="#做人要有边界感" class="headerlink" title="做人要有边界感"></a>做人要有边界感</h2><h2 id="别把低情商当成直爽"><a href="#别把低情商当成直爽" class="headerlink" title="别把低情商当成直爽"></a>别把低情商当成直爽</h2><p>你不能把你的不体面当成直爽，你不能光把自己爽了当成直爽，真正的直爽，一定在体面之上，一定会考虑到别人。</p>
<p>每天晚上我们的聚会时间是固定的，这个时间甚至我们都无法陪伴家人，这个晚上在时间的长河上，仅此一回，没有第二次。既然如此，为什么不开心地过呢？为什<br>么不跟好朋友过呢？为什么要不体面地过呢？</p>
<p>所谓善良，应该是刽子手抬起却没有落下的刀，应该是强者最后的留情，是得理者能骂却收回的言语。</p>
<p>难得的，不是一无所有时的示好，而是散发光芒时，依旧一心向善，不做坏事。</p>
<h2 id="格调，可以毁掉一个人"><a href="#格调，可以毁掉一个人" class="headerlink" title="格调，可以毁掉一个人"></a>格调，可以毁掉一个人</h2><p>当一个人停止进步，就开始产生格调，格调让他排斥新事物，从而更加停止进步，接着，恶性循环，他的圈子越来越小，格局越来越窄，到最后，一无所有。所以，<br>要进步。</p>
<p>因为他们的思路，决定了阶层，这世界，最可怕的，是认知固化。认知固化，决定命运在哪儿。</p>
<p>等你长大，一定要明白，当人停止改变，停止进步，格局就会越来越小，格调就会越来越高。无理由的格调高，必然毁掉一个人，所以，要进步，要改变。</p>
<p>原来以为日子往低处活容易，后来发现，你越往低处活，低层次的人就越多，你受到的阻碍都是低层次的，反而往高处活，遇到的圈子都是高阶层的，大家对鸡毛<br>蒜皮的事情不感兴趣，自己活得也容易得多，可惜的是，我知道这个事情时已经晚了。</p>
<p>当一个人不进步了，只剩下自信和品位，格调占了生命的主题，悲剧就来了。</p>
<p>但改变生命的人，永远是少数，甚至是极少数，这些人不用固有的经验去判断这个世界，相反，他们在读书，在进步，在改变。</p>
<p>1．年轻时多赚点钱没错。<br>2．永远不要廉价出卖自己的时间和注意力。</p>
<h2 id="学会管理自己的注意力"><a href="#学会管理自己的注意力" class="headerlink" title="学会管理自己的注意力"></a>学会管理自己的注意力</h2><p>《心流》这本书给出几个提高注意力的建议：<br>1．要有清晰的目标。不要三心二意，同时占用自己的视觉、听觉等多个渠道。<br>2．即时反馈。每做一件事，都要有一个反馈的机制。<br>3．挑战难度和能力匹配的事情。太简单和太难，都容易让自己开小差。</p>
<p>工具是给人服务的，不是控制人的。<br>你要主动使用它们，而不是被它们拖着走。</p>
<h2 id="远离强盗逻辑"><a href="#远离强盗逻辑" class="headerlink" title="远离强盗逻辑"></a>远离强盗逻辑</h2><p>随着我们年龄增长，越来越容易犯这个错误：我们只读自己认可的文章，只相信自己同意的观点，看自己赞同的书，我们认定了观点，再去寻找证据支撑我们认定<br>的观点，久而久之，我们的世界就越来越小了。</p>
<p>权威可以相信，但不要盲从。</p>
<p>朕给你的，才是你的。朕不给你，你不能抢。</p>
<p>大众总是透着一种“正确”的含义，但真理却时常掌握在少数人手中。</p>
<p>要时刻提醒自己独立思考，要对自己发问自己到底想要什么，而不是被众人带着走。</p>
<p><code>胡乱做一件事情，还不如不做，耽误了自己的时间，影响了自己能力的提高。</code></p>
<p>当你把一份时间卖给更多的人，把一份工作做到足够好，财富自由就变得容易了很多。</p>
<p>工资的秘密不是月薪、年薪，而是时薪。</p>
<p>要知道出卖时间永远是划不来的，因为总有人愿意购买你的时间，换句话说，没有买亏的，只有卖亏的。</p>
<ul>
<li>时间的重要性，我们要有时间的概念。以时薪为基准。</li>
</ul>
<h2 id="总在进步的人，从来不会老"><a href="#总在进步的人，从来不会老" class="headerlink" title="总在进步的人，从来不会老"></a>总在进步的人，从来不会老</h2><p>你要明白，你的善良，一定要有成本。</p>
<p>我们要善良，永远不要因为一两个伤害我们的人，而放弃这世界最美好的品质。</p>
<p>你需行善，但同时要保持收回善良的权利，尤其是，当你遇到贪婪和邪恶时。</p>
<h1 id="永远给生活埋彩蛋"><a href="#永远给生活埋彩蛋" class="headerlink" title="永远给生活埋彩蛋"></a>永远给生活埋彩蛋</h1><p>那么，生活把人逼到绝境，而我们能做点儿什么？</p>
<ul>
<li>其实答案很简单：要学会给生活留白，留彩蛋</li>
</ul>
<p>当生活把一个人逼到一个角落时，你唯一能做的就是愤然反击，给自己留下一丝自由的时光，让自己去积极地面对它。</p>
<p>比如在学习压力极大的时候，你可以找个没人的地方，把音乐打开到最大声，大声喊出来。<br>比如在工作压力太大的时候，你可以找个能说上话的朋友喝一顿酒，把所有的事情全部讲出来。</p>
<p>谁也不想天天吃白米饭，吃到最后，看到盐就想使劲往嘴里扒，从一个极端到另一个极端，人要么缺碘要么齁死。</p>
<ul>
<li>生活不能太单调，要找点乐子。</li>
</ul>
<p>我相信最好的休息是切换大脑，人分为左半脑和右半脑，一半负责创造，一半负责重复，重复的用累了，可以用创造的那边，都累了，还可以跑步，通过运动让自<br>己兴奋。</p>
<p>那些不可控、不确定的东西，正是能让你幸福的因素。</p>
<p>在你意识到它注定无意义时，还要给它赋予更多的乐趣。</p>
<p>只要做，就要做绝，要不然，就不要去做。</p>
<h2 id="成就你或者毁掉你的，都是那些小事"><a href="#成就你或者毁掉你的，都是那些小事" class="headerlink" title="成就你或者毁掉你的，都是那些小事"></a>成就你或者毁掉你的，都是那些小事</h2><p>人一站在时间的长河上，许多小事就会被放大，变成大事。有些事情一旦养成了习惯，更改起来就更麻烦了。</p>
<p>从鸡汤变成了毒鸡汤，从毒鸡汤变成了毒药。</p>
<p>无论做什么，都要做到最好，无论你走得多慢，都不要停下来，无论路途多么遥远，都不要去走那该死的捷径。无论你写的是网络文学、生活感悟，还是鸡汤，都应<br>该尝试着写到最好，不留遗憾。</p>
<h2 id="忙，但不要穷忙"><a href="#忙，但不要穷忙" class="headerlink" title="忙，但不要穷忙"></a>忙，但不要穷忙</h2><p>无论多忙，都要给自己一些空余的时间，这些时间，要给自己放空，思考一下有没有更好的方向，有没有更棒的路。</p>
<p>就像你读了大学，只代表你交了学费，不代表你读了书。<br>就像你去了健身房，只代表你交了钱，不代表你健了身。</p>
<p>要有清晰的逻辑、全面的信息、多角度看问题的思路，孰真孰假，才能一目了然。</p>
<p>注意力和主动思考的稀缺，让所有人眼光里都失去了光芒。街道上，人来人往，地铁里，人山人海，我们，何去何从。</p>
<p>本能驱使了我们的生与死、行动与决策、性格与命运，而我们却全然不知，只是默默地接受了结果。</p>
<p>一些牛人的生活习惯很有趣：他们永远从小的事情学会去破除本能的枷锁，不让自己被物质奴役，被习惯奴役，被制度和规则奴役，他们的世界，比我们的都大。</p>
<p>要么出众，要么出局，没有中间选项。</p>
<p>马太效应：凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来。</p>
<p>面对这个时代，我们唯一能做的是，要相信个体从未固化，并且个人可以通过疯狂的努力改变。<br>要相信，这个时代，要么你选择成为一个偏执狂，用生命去努力，要么就压根别努力。</p>
<p>那些不学习的人，不愿意进步的人，一知半解的人，只按照经验和直觉做决定的人，注定没有希望。</p>
<p>我们不得不接受生活的残忍，但同时还要固执地相信未来。</p>
<p>正能量不是什么胡乱鼓励别人要坚强、要相信，而是见证世间丑恶，依旧相信美好的心境。</p>
<p>你看到的不是真的，你看到的，是我想让你看到的。</p>
<h1 id="有没有一刻，让你忽然长大"><a href="#有没有一刻，让你忽然长大" class="headerlink" title="有没有一刻，让你忽然长大"></a>有没有一刻，让你忽然长大</h1><p>体制化一旦形成，人形成了习惯，也就没有了灵魂。</p>
<ul>
<li>这就是为什么有的人循规蹈矩，不敢打破一些东西。</li>
</ul>
<ul>
<li>日子长，我们终会长大；</li>
<li>青春痛，我们终会度过；</li>
<li>爱情虐，我们终会结果；</li>
<li>生活难，我们终会坚强。</li>
</ul>
<p>他答应那个人的这件事情，其实是答应了过去的自己。</p>
<p>可是，一旦一个人的思维变成了“那又怎么样？”时，他也就失去了对自由的渴望，失去了对希望的执着。但那<code>只叫活着，不叫生活</code>。</p>
<p>所有的自由背后都是自律，没有自律的人，是没有自由的。</p>
<p>我认为的自由是承担自己的责任，对自己负责，有自己的长久规划，足够自律。只有这样，才能按照自己的意愿过一生。</p>
<p>年轻的时候什么都想知道，所以焦虑地读书、认人、看世界，然后随着时间的流逝，你忽然发现，人不焦虑了。不焦虑了不是因为什么都知道，相反，还是有很多东<br>西不知道，但就是不焦虑了，焦虑没了，青春也就过了。</p>
<p>有时候我不太明白为什么这么多人把日子过得这么拧巴，后来我慢慢明白，是因为他们在每个该干什么的时刻都做错了选择。</p>
<p>能用钱解决的事情都是小事，伟大的东西都和钱无关。</p>
<p>再极限的苦难，一旦找到了意义，痛苦就不再是痛苦了。</p>
<p>要学会去爱，先爱自己，再爱别人。</p>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统</title>
    <url>/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.html</url>
    <content><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ol>
<li>CPU 可以1秒操作好多进程，这叫并发。</li>
<li>CPU 可以从一个进程（做菜）切换到另外一个进程（买可乐），在切换前必须要记录当前进程中运行的状态信息，以备下次切换回来的时候可以恢复执行，这叫并行。</li>
</ol>
<p>并发与并行</p>
<p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/1.jpg"></p>
<h2 id="进程的状态"><a href="#进程的状态" class="headerlink" title="进程的状态"></a>进程的状态</h2><blockquote>
<p>在一个进程的活动期间至少具备三种基本状态</p>
</blockquote>
<ol>
<li>运行状态（Running）：该时刻进程占用 CPU；</li>
<li>就绪状态（Ready）：可运行，由于其他进程处于运行状态而暂时停止运行；</li>
<li>阻塞状态（Blocked）：该进程正在等待某一事件发生（如等待输入&#x2F;输出操作的完成）而暂时停止运行，这时，即使给它CPU控制权，它也无法运行；</li>
</ol>
<p>在虚拟内存管理的操作系统中，通常会把阻塞状态的进程的物理内存空间换出到硬盘，等需要再次运行的时候，再从硬盘换入到物理内存。</p>
<ol start="4">
<li>创建状态（new）：进程正在被创建时的状态；</li>
<li>结束状态（Exit）：进程正在从系统中消失时的状态；</li>
</ol>
<p>描述进程没有占用实际的物理内存空间的情况，这个状态就是挂起状态</p>
<ol>
<li>阻塞挂起状态：进程在外存（硬盘）并等待某个事件的出现；</li>
<li>就绪挂起状态：进程在外存（硬盘），但只要进入内存，即刻立刻运行；</li>
</ol>
<p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/2.jpg"></p>
<h2 id="进程的数据结构-PCB"><a href="#进程的数据结构-PCB" class="headerlink" title="进程的数据结构(PCB)"></a>进程的数据结构(PCB)</h2><ol>
<li>PCB 是进程存在的唯一标识</li>
<li>描述信息：进程标识符，用户标识符</li>
<li>进程当前状态，进程优先级</li>
<li>内存地址信息和虚拟地址空间信息</li>
<li>CPU中寄存器的值，进程重新执行时，可在断点处继续执行</li>
</ol>
<blockquote>
<p>PCB 是通过链表或者索引进行组织的，一般使用链表</p>
</blockquote>
<p>组织好后有两种状态，就绪状态和阻塞状态。</p>
<h2 id="进程的控制操作"><a href="#进程的控制操作" class="headerlink" title="进程的控制操作"></a>进程的控制操作</h2><h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><p>操作系统允许一个进程创建另一个进程，而且允许子进程继承父进程所拥有的资源。</p>
<h3 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h3><p>进程可以有 3 种终止方式：正常结束、异常结束以及外界干预（信号 kill 掉）。</p>
<p>当子进程被终止时，其在父进程处继承的资源应当还给父进程。而当父进程被终止时，该父进程的子进程就变为孤儿进程，会被 1 号进程收养，并由 1 号进程对它们完成状态收集工作。</p>
<h3 id="阻塞进程"><a href="#阻塞进程" class="headerlink" title="阻塞进程"></a>阻塞进程</h3><p>当进程需要等待某一事件完成时，它可以调用阻塞语句把自己阻塞等待。而一旦被阻塞等待，它只能由另一个进程唤醒。</p>
<h3 id="唤醒进程"><a href="#唤醒进程" class="headerlink" title="唤醒进程"></a>唤醒进程</h3><p>进程由「运行」转变为「阻塞」状态是由于进程必须等待某一事件的完成，所以处于阻塞状态的进程是绝对不可能叫醒自己的。<br>如果某进程正在等待 I&#x2F;O 事件，需由别的进程发消息给它，则只有当该进程所期待的事件出现时，才由发现者进程用唤醒语句叫醒它。</p>
<h2 id="进程的上下文切换"><a href="#进程的上下文切换" class="headerlink" title="进程的上下文切换"></a>进程的上下文切换</h2><blockquote>
<p>一个进程切换到另一个进程运行</p>
</blockquote>
<p>同时要学会CPU的上下文切换</p>
<h3 id="发生进程上下文切换有哪些场景？"><a href="#发生进程上下文切换有哪些场景？" class="headerlink" title="发生进程上下文切换有哪些场景？"></a>发生进程上下文切换有哪些场景？</h3><ul>
<li>了保证所有进程可以得到公平调度，CPU 时间被划分为一段段的时间片，这些时间片再被轮流分配给各个进程。这样，当某个进程的时间片耗尽了，进程就从运行状态变为就绪状态，系统从就绪队列选择另外一个进程运行；</li>
<li>进程在系统资源不足（比如内存不足）时，要等到资源满足后才可以运行，这个时候进程也会被挂起，并由系统调度其他进程运行；</li>
<li>当进程通过睡眠函数 sleep 这样的方法将自己主动挂起时，自然也会重新调度；</li>
<li>当有优先级更高的进程运行时，为了保证高优先级进程的运行，当前进程会被挂起，由高优先级进程来运行；</li>
<li>发生硬件中断时，CPU 上的进程会被中断挂起，转而执行内核中的中断服务程序；</li>
</ul>
<h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><blockquote>
<p>线程之间可以并发运行且共享相同的地址空间</p>
</blockquote>
<h2 id="什么是线程"><a href="#什么是线程" class="headerlink" title="什么是线程"></a>什么是线程</h2><p>线程是进程当中的一条执行流程。</p>
<ul>
<li><p>线程的优点：<br>一个进程中可以同时存在多个线程；<br>各个线程之间可以并发执行；<br>各个线程之间可以共享地址空间和文件等资源；</p>
</li>
<li><p>线程的缺点：<br>当进程中的一个线程崩溃时，会导致其所属进程的所有线程崩溃（这里是针对 C&#x2F;C++ 语言，Java语言中的线程奔溃不会造成进程崩溃</p>
</li>
</ul>
<h2 id="线程与进程的比较"><a href="#线程与进程的比较" class="headerlink" title="线程与进程的比较"></a>线程与进程的比较</h2><ol>
<li>进程是资源（包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位。</li>
<li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈。</li>
<li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系。</li>
<li>线程能减少并发执行的时间和空间开销。</li>
</ol>
<p>对比而言，线程相比进程能减少开销，体现在以下几个方面：</p>
<ul>
<li><p>线程的创建时间比进程快，因为进程在创建的过程中还需要资源管理信息，如内存管理信息、文件管理信息，而线程在创建的过程中不涉及这些资源管理信息，它们是共享的。</p>
</li>
<li><p>线程的终止时间比进程快，因为线程释放的资源相比进程少很多。</p>
</li>
<li><p>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换时不需要切换页表。而对于进程之间的切换，切换时要切换页表，而页表的切换过程开销较大。</p>
</li>
<li><p>由于同一进程的各线程间共享内存和文件资源，线程之间数据传递时无需经过内核，使得线程之间的数据交互效率更高。</p>
</li>
</ul>
<h2 id="线程上下文切换的是什么？"><a href="#线程上下文切换的是什么？" class="headerlink" title="线程上下文切换的是什么？"></a>线程上下文切换的是什么？</h2><ol>
<li>当两个线程不是属于同一个进程，则切换的过程就跟进程上下文切换一样；</li>
<li>当两个线程是属于同一个进程，因为虚拟内存是共享的，所以在切换时，虚拟内存这些资源就保持不动，只需要切换线程的私有数据、寄存器等不共享的数据；</li>
</ol>
<h2 id="线程的实现"><a href="#线程的实现" class="headerlink" title="线程的实现"></a>线程的实现</h2><h2 id="三种线程"><a href="#三种线程" class="headerlink" title="三种线程"></a>三种线程</h2><ul>
<li>用户线程（User Thread）：在用户空间实现的线程，不是由内核管理的线程，是由用户态的线程库来完成线程的管理；</li>
<li>内核线程（Kernel Thread）：在内核中实现的线程，是由内核管理的线程；</li>
<li>轻量级进程（LightWeight Process）：在内核中来支持用户线程；</li>
</ul>
<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><blockquote>
<p>操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</p>
</blockquote>
<ul>
<li>我们程序所使用的内存地址叫做虚拟内存地址</li>
<li>实际存在硬件里面的空间地址叫物理内存地址</li>
</ul>
<h2 id="操作系统是如何管理虚拟地址与物理地址之间的关系？"><a href="#操作系统是如何管理虚拟地址与物理地址之间的关系？" class="headerlink" title="操作系统是如何管理虚拟地址与物理地址之间的关系？"></a>操作系统是如何管理虚拟地址与物理地址之间的关系？</h2><blockquote>
<p>有以下2种方式</p>
</blockquote>
<h3 id="内存分段"><a href="#内存分段" class="headerlink" title="内存分段"></a>内存分段</h3><p>操作系统给每一个进程分段，一个进程有一个段ID，然后有一个段表，段表里面有基础物理内存地址，还有偏移量。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ol>
<li>内存碎片<ol>
<li>各个程序之间的内存间隔</li>
</ol>
</li>
<li>内存交换的效率低<ol>
<li>为了解决内存碎片问题，就要使用内存交换，碎片多，交换的也多，所以时间长，显现的效率低。</li>
</ol>
</li>
</ol>
<h3 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h3><p>分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小。<br>在 <code>Linux</code> 下，每一页的大小为 4KB。</p>
<p>之间通过<code>页表</code>进行映射。</p>
<h4 id="分页是怎么解决分段的「外部内存碎片和内存交换效率低」的问题？"><a href="#分页是怎么解决分段的「外部内存碎片和内存交换效率低」的问题？" class="headerlink" title="分页是怎么解决分段的「外部内存碎片和内存交换效率低」的问题？"></a>分页是怎么解决分段的「外部内存碎片和内存交换效率低」的问题？</h4><blockquote>
<p>采用了分页，页与页之间是紧密排列的，所以不会有外部碎片。不过会出现内存浪费的情况，这个叫做<code>内部内存碎片</code>。</p>
</blockquote>
<p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉。</p>
<p>只有在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。<br>什么时候使用，什么时候就加载它。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>把虚拟内存地址，切分成页号和偏移量；</li>
<li>根据页号，从页表里面，查询对应的物理页号；</li>
<li>直接拿物理页号，加上前面的偏移量，就得到了物理内存地址。</li>
</ul>
<h4 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h4><blockquote>
<p>一个进程，一个页表</p>
</blockquote>
<p>进程多的话，页表就多，这个对内存会有一个很大的消耗。</p>
<p>所以引入多级列表。</p>
<h5 id="64位系统"><a href="#64位系统" class="headerlink" title="64位系统"></a>64位系统</h5><ul>
<li>全局页目录项 PGD</li>
<li>上层页目录项 PUD</li>
<li>中间页目录项 PMD</li>
<li>页表项 PTE</li>
</ul>
<p>多级页表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。</p>
<p>程序是有局部性的，即在一段时间内，整个程序的执行仅限于程序中的某一部分。相应地，执行所访问的存储空间也局限于某个内存区域。</p>
<p>我们就可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件，于是计算机科学家们，就在 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的<br>Cache，这个 Cache 就是 TLB，通常称为页表缓存、转址旁路缓存、快表等。</p>
<h4 id="段页式内存管理"><a href="#段页式内存管理" class="headerlink" title="段页式内存管理"></a>段页式内存管理</h4><p>先分段，然后分页，先是段表，每个段表里面是页表。</p>
<h2 id="Linux-内存布局"><a href="#Linux-内存布局" class="headerlink" title="Linux 内存布局"></a>Linux 内存布局</h2><p>虚拟内存有什么作用？</p>
<ul>
<li>虚拟内存可以使得进程对运行内存超过物理内存大小，因为程序运行符合局部性原理，CPU 访问内存会有很明显的重复访问的倾向性，对于那些没有被经常使用到的内存，我们可以把它换出到物理内存之外，比如硬盘上的 swap 区域。</li>
<li>由于每个进程都有自己的页表，所以每个进程的虚拟内存空间就是相互独立的。进程也没有办法访问其他进程的页表，所以这些页表是私有的，这就解决了多进程之间地址冲突的问题。</li>
<li>页表里的页表项中除了物理地址之外，还有一些标记属性的比特，比如控制一个页的读写权限，标记该页是否存在等。在内存访问方面，操作系统提供了更好的安全性。</li>
</ul>
<h2 id="malloc-是如何分配内存的？"><a href="#malloc-是如何分配内存的？" class="headerlink" title="malloc 是如何分配内存的？"></a>malloc 是如何分配内存的？</h2><h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li><p>从就绪态 -&gt; 运行态：当进程被创建时，会进入到就绪队列，操作系统会从就绪队列选择一个进程运行；</p>
</li>
<li><p>从运行态 -&gt; 阻塞态：当进程发生 I&#x2F;O 事件（此时该进程需要等待I&#x2F;O完成后，才可以重新运行）而阻塞时，操作系统必须选择另外一个进程运行；</p>
</li>
<li><p>从运行态 -&gt; 结束态：当进程退出结束后，操作系统得从就绪队列选择另外一个进程运行；</p>
</li>
<li><p>非抢占式调度算法挑选一个进程，然后让该进程运行直到被阻塞，或者直到该进程退出，才会调用另外一个进程。</p>
</li>
<li><p>抢占式调度算法挑选一个进程，然后让该进程只运行某段时间，如果在该时段结束时，该进程仍然在运行时，则会把它挂起，接着调度程序从就绪队列挑选另外一个进程，也就是常说的时间片机制。</p>
</li>
</ul>
<h2 id="调度原则"><a href="#调度原则" class="headerlink" title="调度原则"></a>调度原则</h2><ol>
<li><code>I/O</code> 事件</li>
<li>吞吐量：CPU 在单位时间内完成的进程数量</li>
<li>等待时间：进程处于就绪队列的时间</li>
<li>周期时间：进程运行+阻塞时间+等待时间的总和</li>
<li>响应时间</li>
</ol>
<h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务调度算法"><a href="#先来先服务调度算法" class="headerlink" title="先来先服务调度算法"></a>先来先服务调度算法</h3><p>每次从就绪队列选择最先进入队列的进程，然后一直运行，直到进程退出或被阻塞，才会继续从队列中选择第一个进程接着运行。</p>
<h3 id="最短作业优先调度算法"><a href="#最短作业优先调度算法" class="headerlink" title="最短作业优先调度算法"></a>最短作业优先调度算法</h3><p>会优先选择运行时间最短的进程来运行</p>
<h3 id="时间片轮转调度算法"><a href="#时间片轮转调度算法" class="headerlink" title="时间片轮转调度算法"></a>时间片轮转调度算法</h3><p>每个进程被分配一个时间段，称为时间片（Quantum），即允许该进程在该时间段中运行。</p>
<h3 id="最高优先级调度算法"><a href="#最高优先级调度算法" class="headerlink" title="最高优先级调度算法"></a>最高优先级调度算法</h3><p>从就绪队列中选择最高优先级的进程进行运行</p>
<blockquote>
<p>小故事:</p>
</blockquote>
<p>办理业务的客户相当于进程，银行窗口工作人员相当于<br>CPU。现在，假设这个银行只有一个窗口（单核 CPU<br>），那么工作人员一次只能处理一个业务。</p>
<p>那么最简单的处理方式，就是先来的先处理，后面来的就乖乖排队，这就是先来先服务（FCFS）调度算法。但是万一先来的这位老哥是来贷款的，这一谈就好几个小时，一直占用着窗口，这样后面的人只能干等，或许后面的人只是想简单的取个钱，几分钟就能搞定，却因为前面老哥办长业务而要等几个小时，你说气不气人？</p>
<p>有客户抱怨了，那我们就要改进，我们干脆优先给那些几分钟就能搞定的人办理业务，这就是短作业优先（SJF）调度算法。听起来不错，但是依然还是有个极端情况，万一办理短业务的人非常的多，这会导致长业务的人一直得不到服务，万一这个长业务是个大客户，那不就捡了芝麻丢了西瓜</p>
<p>那就公平起见，现在窗口工作人员规定，每个人我只处理 10 分钟。如果 10 分钟之内处理完，就马上换下一个人。如果没处理完，依然换下一个人，但是客户自己得记住办理到哪个步骤了。这个也就是时间片轮转（RR）调度算法。但是如果时间片设置过短，那么就会造成大量的上下文切换，增大了系统开销。如果时间片过长，相当于退化成 FCFS 算法了。</p>
<p>既然公平也可能存在问题，那银行就对客户分等级，分为普通客户、VIP 客户、SVIP 客户。只要高优先级的客户一来，就第一时间处理这个客户，这就是最高优先级（HPF）调度算法。但依然也会有极端的问题，万一当天来的全是高级客户，那普通客户不是没有被服务的机会，不把普通客户当人是吗？那我们把优先级改成动态的，如果客户办理业务时间增加，则降低其优先级，如果客户等待时间增加，则升高其优先级。</p>
<p>那有没有兼顾到公平和效率的方式呢？这里介绍一种算法，考虑的还算充分的，多级反馈队列（MFQ）调度算法，它是时间片轮转算法和优先级算法的综合和发展。它的工作方式：</p>
<ul>
<li>银行设置了多个排队（就绪）队列，每个队列都有不同的优先级，各个队列优先级从高到低，同时每个队列执行时间片的长度也不同，优先级越高的时间片越短。</li>
<li>新客户（进程）来了，先进入第一级队列的末尾，按先来先服务原则排队等待被叫号（运行）。如果时间片用完客户的业务还没办理完成，则让客户进入到下一级队列的末尾，以此类推，直至客户业务办理完成。</li>
<li>当第一级队列没人排队时，就会叫号二级队列的客户。如果客户办理业务过程中，有新的客户加入到较高优先级的队列，那么此时办理中的客户需要停止办理，回到原队列的末尾等待再次叫号，因为要把窗口让给刚进入较高优先级队列的客户。</li>
</ul>
<h2 id="多线程冲突了怎么办"><a href="#多线程冲突了怎么办" class="headerlink" title="多线程冲突了怎么办"></a>多线程冲突了怎么办</h2><p>对于共享资源，如果没有上锁，在多线程的环境里，那么就可能会发生翻车现场。</p>
<h3 id="互斥"><a href="#互斥" class="headerlink" title="互斥"></a>互斥</h3><p>由于多线程执行操作共享变量的这段代码可能会导致竞争状态，因此我们将此段代码称为临界区，它是访问共享资源的代码片段，一定不能给多线程同时执行。</p>
<p>我们希望这段代码是互斥的，也就说这段代码执行过程中，最多只能出现一个线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">sharedCounter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Java实现的竞争资源的代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">IncrementTask</span>());</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">IncrementTask</span>());</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">// thread1.join();// 等待前面线程执行完毕</span></span><br><span class="line">        System.out.println(sharedCounter);</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">// thread2.join();</span></span><br><span class="line">        System.out.println(sharedCounter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IncrementTask</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 模拟竞争状态</span></span><br><span class="line">                sharedCounter++;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;Thread &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; finished. Counter: &quot;</span> + sharedCounter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="互斥与同步的实现和使用"><a href="#互斥与同步的实现和使用" class="headerlink" title="互斥与同步的实现和使用"></a>互斥与同步的实现和使用</h3><p>两种方法：</p>
<ol>
<li>锁：加锁、解锁操作；</li>
<li>信号量：P、V 操作；</li>
</ol>
<p>那什么是原子操作呢？原子操作就是要么全部执行，要么都不执行，不能出现执行到一半的中间状态</p>
<ol>
<li>忙等待锁(自旋锁)</li>
</ol>
<ul>
<li>意思就是一直跑while循环，直到前面那个线程传过来解锁消息，我才可以解锁，故而：忙着等待。</li>
</ul>
<ol start="2">
<li>无等待锁</li>
</ol>
<ul>
<li>那当没获取到锁的时候，就把当前线程放入到锁的等待队列，然后执行调度程序，把 CPU 让给其他线程执行。</li>
</ul>
<h3 id="P-x2F-V-操作"><a href="#P-x2F-V-操作" class="headerlink" title="P&#x2F;V 操作"></a>P&#x2F;V 操作</h3><p>P(减一) 操作是用在进入临界区之前，V(加一) 操作是用在离开临界区之后，这两个操作是必须成对出现的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="comment">// 5个线程给2个通路</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreExample</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">NUM_THREADS</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">2</span>); <span class="comment">// 允许同时访问的线程数量为2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; NUM_THREADS; i++) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Worker</span>(i));</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Worker</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread &quot;</span> + id + <span class="string">&quot; is waiting to acquire permit.&quot;</span>);</span><br><span class="line">                semaphore.acquire(); <span class="comment">// 获取许可</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Thread &quot;</span> + id + <span class="string">&quot; has acquired permit.&quot;</span>);</span><br><span class="line">                <span class="comment">// 执行临界区代码</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>); <span class="comment">// 模拟工作</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Thread &quot;</span> + id + <span class="string">&quot; is releasing permit.&quot;</span>);</span><br><span class="line">                semaphore.release(); <span class="comment">// 释放许可</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p><code>信号量实现互斥</code></p>
<p><code>信号量实现事件访问</code></p>
<p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3-1.jpg"></p>
<h2 id="生产者-消费者问题"><a href="#生产者-消费者问题" class="headerlink" title="生产者-消费者问题"></a>生产者-消费者问题</h2><p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3-2.jpg"></p>
<p>需要三个信号量，才可以实现上面问题。</p>
<ol>
<li>互斥信号量 mutex：用于互斥访问缓冲区，初始化值为 1；</li>
<li>资源信号量 fullBuffers：用于消费者询问缓冲区是否有数据，有数据则读取数据，初始化值为 0（表明缓冲区一开始为空）；</li>
<li>资源信号量 emptyBuffers：用于生产者询问缓冲区是否有空位，有空位则生成数据，初始化值为 n （缓冲区大小）；</li>
</ol>
<p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3-3.jpg"></p>
<h3 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h3><p><img src="/post/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/3-4.jpg"></p>
<p>优秀方案：<br>即让偶数编号的哲学家「先拿左边的叉子后拿右边的叉子」，奇数编号的哲学家「先拿右边的叉子后拿左边的叉子」。</p>
<h3 id="读-写者问题"><a href="#读-写者问题" class="headerlink" title="读-写者问题"></a>读-写者问题</h3><p>这个有点小难。</p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁只有同时满足互斥、持有并等待、不可剥夺、环路等待这四个条件的时候才会发生。</p>
<p>所以要避免死锁问题，就是要破坏其中一个条件即可，最常用的方法就是使用资源有序分配法来破坏环路等待条件。</p>
<blockquote>
<p>那什么是资源有序分配法呢？</p>
</blockquote>
<p>线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。也就是说，线程 A 和 线程 B 总是以相同的顺序申请自己想要的资源。</p>
<p>我们使用资源有序分配法的方式来修改前面发生死锁的代码，我们可以不改动线程 A 的代码。</p>
<p>我们先要清楚线程 A 获取资源的顺序，它是先获取互斥锁 A，然后获取互斥锁 B。</p>
<p>所以我们只需将线程 B 改成以相同顺序的获取资源，就可以打破死锁了。</p>
<h2 id="进程-x2F-线程同步"><a href="#进程-x2F-线程同步" class="headerlink" title="进程&#x2F;线程同步"></a>进程&#x2F;线程同步</h2><p>所谓同步，举个生活的同步例子，你肚子饿了想要吃饭，你叫妈妈早点做菜，妈妈听到后就开始做菜，但是在妈妈没有做完饭之前，你必须阻塞等待，等妈妈做完饭后，自然会通知你，接着你吃饭的事情就可以进行了。</p>
<p>同步就好比：「操作 A 应在操作 B 之前执行」，「操作 C 必须在操作 A 和操作 B 都完成之后才能执行」等；<br>互斥就好比：「操作 A 和操作 B 不能在同一时刻执行」；</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>本站介绍</title>
    <url>/post/%E6%9C%AC%E7%AB%99%E4%BB%8B%E7%BB%8D.html</url>
    <content><![CDATA[<p>该博客搭建于2023-1-18日,记录自己上大学以来的所有学习内容。</p>
<blockquote>
<p>该页面，记录网站遇到的bug。</p>
</blockquote>
<h1 id="博客介绍"><a href="#博客介绍" class="headerlink" title="博客介绍"></a>博客介绍</h1><h2 id="搭建方式"><a href="#搭建方式" class="headerlink" title="搭建方式"></a>搭建方式</h2><p>该博客由hexo搭建，主题是butterfly.</p>
<h2 id="6-2日"><a href="#6-2日" class="headerlink" title="6-2日"></a>6-2日</h2><p>开始进行网站操作，不知道为啥都是导入的是同一个md文件，急需修复<br><code>已修复</code></p>
<h2 id="2023-9-11"><a href="#2023-9-11" class="headerlink" title="2023-9-11"></a>2023-9-11</h2><p>终于把bug修复好了</p>
<p>bug情况：网站挂掉，pages设置无法使用，coplite也无法使用<br>登录git时，你的账号被认定为骗子账号，限制一些你的操作权限。</p>
<p>解决周期：大约14天，一直有事，没有解决该问题，最后打算使用gitee了，它的实名认证比较麻烦🤣。</p>
<p>解决方案：向github support提交英文说明，过几天就行了。</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO:"></a>TODO:</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 加上<code>猫娘</code>小宠物</li>
<li><input checked="" disabled="" type="checkbox"> 加上自定义音乐播放器</li>
<li><input checked="" disabled="" type="checkbox"> 加上收款码</li>
<li>[] 加上广告啥的</li>
<li><input checked="" disabled="" type="checkbox"> 搜索功能</li>
</ul>
]]></content>
      <categories>
        <category>站点记录</category>
      </categories>
      <tags>
        <tag>站点记录</tag>
      </tags>
  </entry>
  <entry>
    <title>比赛心得</title>
    <url>/post/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%AF%94%E8%B5%9B%E5%BF%83%E5%BE%97.html</url>
    <content><![CDATA[<h1 id="数学建模比赛心得"><a href="#数学建模比赛心得" class="headerlink" title="数学建模比赛心得"></a>数学建模比赛心得</h1><p>经历了个五天四夜的建模生活，让我感受到了什么是越长大越熬不起夜。</p>
<p>​还是那句话说的好，年轻就是资本。年轻的时候想干什么就干什么，而且精力很旺盛。而当你熬夜的时候，发现第二天再也不会像以前那样有活力时，那么恭喜你，你已经不在年轻。</p>
<p>数学建模比赛一般是专家出五到六个题，供大家从中选择一道来完成比赛文档的撰写。没错就是一个题，一个题下面一般有三到四个子问题，给你五天四夜的时间去完成，当然了比赛是以团队进行报名的，需要团队来完成。在比赛期间你可以充分利用所有资源来解决问题，并把解决问题的思路和提出的模型撰写成论文，最后提交就算完成比赛。</p>
<p>如果没参加过比赛的，可能会觉得五天四夜解决一个大问题时间是充裕的，其实不是这样的，别小看了这一个大问题，这可是专家辛辛苦苦花了很久才想出来的，如果让别人一两天就解决，是不是水平太不行了。一个题目需要花多久时间来完成，可能他们在出题的时候已经衡量过，所以基本上不要去想有容易的题目。</p>
<p>其实在拿到所有题目的时候，第一件要做的事情就是先把所有的题目都过一篇，再从这些题目中挑选一个题目来作为自己的题目。一开始的时候，大家过题目后都会凭感觉认为其中有些容易的题目，也有那种第一眼看上去的就不想去做的题目，实在是太难。其实，当你选择那些看上去比较容易的题目时，做着做着的就会发现哪有什么容易的题目呀，都是被表象所迷惑，人哪就是感情动物，很容易用情绪思考问题。</p>
<p>哪里有什么岁月静好，只不过是有人替你负重前行而已，用在数学建模上，就是岁月静好是不存在的，更没有人替你负重前行，自己选的路，跪着也要走完是不是这个理。</p>
<p>可能有的人会说，选择的这个题目做不出来可以换其他的题目，换题是可以的，但是换题是不可取的，主要是这个时候这个题目做一天之后发现做不出来，换另外一个题，对于团队来说已经过去一天，这个时候时间已经不太允许，剩下的时间如果在换到另外一个题目，又要从头开始去研究，还有就是你不知道换的这个题目是不是一定能做出来。对于别的选择这个题目的团队来说，别人肯定是比你占有优势的，毕竟别的团队已经研究一天了。</p>
<p>因为最后评奖的时候是根据每个题进行评奖的，而不是所有的题目在一起评奖，选同样题目的团队在一起评奖，所以如果中途换题实在是两难，一难是自己不占优势，二难对于别的团队是优势，总之换题还是要慎重慎重。</p>
<p>选择好题目后，剩下的时间基本上都是在分析和解题过程中。数模比赛规定的是一个团队必须要有三人，所以在一开始的时候就要分工明确。</p>
<p>比赛第一天的时间，前半天基本上把所有题浏览一遍，在脑子里有个思路，对题目有大概的了解，以及看到这个题目的时候应该从哪里入手去解决。最好能在第一天上午结束就确定题目。</p>
<p>数学建模的题目一般都是为了解决某个难以攻克的问题，比如今年的几个题目，大家可以感受一下：</p>
<blockquote>
<p>A. 无线智能传播模型<br>B. 天文导航中的星途识别<br>C. 视觉情报信息分析（典型的例子，大庆油田事件）<br>D. 汽车行驶工况构建<br>E. 全球变暖<br>F. 多约束条件下智能飞行器航迹快速规划</p>
</blockquote>
<p>看着这些题目是不是就觉得很高大上，有的题目用途压根就没有想过，对于这样的题目就直接建议掉过，如果选择这样的题目首先需要去熟悉相关领域的内容，会比较花时间，还是建议选择比较贴近实际的。在比赛第一天上午结束的时候，团队应该确定选择哪个题目。</p>
<p>第一天上午题目确定后，比赛第一天下午和第二天的时间基本上是在解决这个题目的第一个小问题，没错花一天多的时间来解决一小问，有时候一天多的时间可能也不能解决，难点的一般需要花到两天多的时间，这个有多方因素确定。</p>
<p>如果题目的第一小问比较顺利的解决，这往往会给团队带来很大的激励，对做后面的题目会有很大帮助。但是在这里提个醒，做第一小问的时候别把问题想的太过于简单，因为出题人哪里有那么傻，人家又不是吃白饭的。做题的时候多思考一些边界条件，多和队友交流讨论，交流讨论会发现不少问题。最后可能你会感慨，哪里有简单的题目，只有做过之后才知道里面有多少坑。</p>
<p>第一个问题解决后，基本上就来到比赛时间的第二天下午或者第三天，这个时候需要去着手做两件事情，第一件事当然是接着去做第二个小问题，第二件事是可以开始着手写论文，没错第二天的时候就可以开始写，提前写论文的话会给后面减轻不少压力。这里写论文可以让队友去完成，最起码要先把问题重述一些什么的写掉。另一方面是这个时候第一个小问题一般也基本上解决，也可以接着写进去，这样剩下的时间可以更好的投入到解决第二个问题和第三个问题。</p>
<p>第二个问题解决的时间基本上也需要一天左右的时间，第二个问题做的差不多的时候会发现时间已经到比赛的第三天或者第四天。这个时候还是那两件事需要去做，如果前面第二天的时候没有去着手写论文的话，这个时候在去从头开始写，就会发现有点吃力，已经有点挤压的状态，如果前面开始就把一些要完成的做完，这个时候只需要把解决的问题写到论文中就可以，这个时候还是比较很轻松的。</p>
<p>如果前面解决第一问的时候没有开始写论文，那么解决第二问的时候一定要开始写论文了，不然时间真会有点来不及，这个要切记切记。因为时间越到最后会发现事情越到，在加上前面几天不断的输出和每天都熬夜，情绪上面还会有点反应，很容易就会影响整个团队的进度。</p>
<p>如果第二问也顺利的解决了，那么要恭喜你们自己，因为这已经是很不错的，如果一个题目就三个问题的话，解决两个问题基本上是可以获奖的，这个对剩下的时间就靠团队坚持和再坚持。第二问解决后来到比赛时间的第四天左右，基本是这个时间段是在解决问题三的过程中，还有加班加点的写论文过程中。</p>
<p>最后一天一夜的时间，基本上都是在猛补论文，主要是因为前面没有去早点准备写，一直在解决问题而不太在意写论文，把写论文都挤压到最后的时间，这个时候基本上第三问如果没有解决掉，可能大部分就会放弃掉，直接把论文写好再说，因为最后要提交的就是一篇 pdf 的论文，别人不看你是怎么解决问题的，要看的就是论文，所以有想法就把所有的想法都写到论文中去。</p>
<p>比赛时间的最后一个晚上和半个白天的时间都是在熬夜写论文，没错基本上会发现参加数模的，最后一个晚上都是通宵干到第二天交论文截止，最后才会疏松一口气。</p>
<p>比赛期间加班加点是很正常的，一般会每天晚上干到夜里两三点是常有的事。如果前面每天加班加点做，最后会轻松不少。如果前面没有加班加点后面就会用通宵来换，看每个人的习惯吧。这个生活中任务有 deadline 是一个例子，有的人喜欢把事情都堆在最后那个时间点，有的人喜欢提前把事情做完。</p>
<p>整个建模过程中保持精神才是最重要的，期间要注意生活饮食，因为如果身体上在有点不舒服，在加上这期间肯定是要熬夜的，不管对身体来说，还是对脑袋来说都是受不了的。</p>
<p>五天四夜后就会感受到原来的自己早已不在年轻，身体一下子投入到长时间工作中，已不再是年少轻狂的自己，每天干到半夜第二天还是活蹦乱跳的，及时第二天能蹦跶，那第三天第四天你还能蹦跶不，人生一长一短，还是把身体搞好才是最重要的。</p>
<p>俗话说：身体是革命的本钱。</p>
<p>最后，祝大家都能取得好的成绩。</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>数学建模</title>
    <url>/post/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1.html</url>
    <content><![CDATA[<h1 id="数学建模资源"><a href="#数学建模资源" class="headerlink" title="数学建模资源"></a>数学建模资源</h1><p><code>摘选自guthub,如有侵权，请联系删除</code><br><a href="https://github.com/zhanwen/MathModel">github源地址</a></p>
<h2 id="更新模块"><a href="#更新模块" class="headerlink" title="更新模块"></a>更新模块</h2><ul>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/2023%E5%B9%B4%E6%95%B0%E6%A8%A1%E6%82%89%E7%9F%A5%26%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88">2023年数模建模 第二十届大赛</a></strong></li>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/2022%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">2022年获奖名单</a></strong></li>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/2022%E5%B9%B4%E6%95%B0%E6%A8%A1%E6%82%89%E7%9F%A5%26%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88">2022年研究生数模比赛模版（Word&#x2F;Latex）</a></strong></li>
<li>更新 </font>**<a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2021 年优秀论文</a>**（2022年6月25日）<a href="https://pan.baidu.com/s/1j0rqd6tvKv4LxGRG0kUaKw">⏬下载链接</a>，key:<code>eyzf</code></li>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/2022%E5%B9%B4%E6%95%B0%E6%A8%A1%E6%82%89%E7%9F%A5%26%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88">2022年研究生数模比赛通知</a></strong></li>
<li>—————-以下是历史更新版本—————-</li>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/2021%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">2021年获奖名单</a></strong></li>
<li>更新 <strong><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2021%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2021年研究生数学建模竞赛试题</a></strong></li>
<li>更新 **<a href="https://github.com/zhanwen/MathModel/tree/master/2021%E5%B9%B4%E6%95%B0%E6%A8%A1%E6%82%89%E7%9F%A5%26%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88">2021年论文模版</a>**（包括 word 版本、Latex 版本） </li>
<li>更新 **<a href="https://www.shumo.com/home/html/category/cpmcm">数学建模网论坛上提问</a>**（比赛期间，论坛解答）   </li>
<li>更新 </font>**<a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2020 年优秀论文</a>**（2021年8月21日）<a href="https://pan.baidu.com/s/1NK3_QXdU6gPH27_gABMUIw">⏬下载链接</a>，key:<code>odt5</code></li>
<li>更新 **<a href="https://github.com/zhanwen/MathModel/tree/master/2020%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88">2020年论文模版</a>**（包括 word 版本、Latex 版本） </li>
<li>更新 **<a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2019 年优秀论文</a>**（2020年7月21日）<a href="https://pan.baidu.com/s/1xt8R7ad_o7zBEZGZvqA3MA">⏬下载链接</a>，key:<code>2uyl</code></li>
<li>2019年“华为杯”第十六届中国研究生数学建模竞赛——<strong>选题、命题介绍分析：</strong> <a href="https://github.com/zhanwen/MathModel/blob/master/%E9%80%89%E9%A2%98%E3%80%81%E5%91%BD%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%88%86%E6%9E%90.md"><strong>选题、命题介绍分析</strong></a></li>
<li><strong>所有文件下载地址更新到微盘：<a href="https://share.weiyun.com/Lk0sE1o4">微盘下载</a>，key：<code>uzw9mf</code></strong></li>
<li>同步所有文件到<a href="https://pan.baidu.com/s/1dOl-MRXtkLBU2l_UWPpYdA">百度云网盘</a>，key:<code>bxdy</code>（2020年6月24日）</li>
<li>百度云备用链接1: <a href="https://pan.baidu.com/s/1t6KIxwGky0p_1STrIxOQMQ">点击下载</a>，key:<code>0rm9</code></li>
<li>百度云备用链接2: <a href="https://pan.baidu.com/s/1nO2oCk2_Dt8ED7Ff1IZ61w">点击下载</a>，key:<code>5s6y</code></li>
<li>百度云备用链接3: <a href="https://pan.baidu.com/s/1eOq1-YcU3OGvlsenNQrmXw">点击下载</a>，key:<code>29vl</code></li>
</ul>
<h2 id="2023-年研究生数模-新"><a href="#2023-年研究生数模-新" class="headerlink" title="2023 年研究生数模 (新)"></a>2023 年研究生数模 (新)</h2><p><em>LaTex 论文模版使用方式：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/README.md"><strong>如何编译 Latex 文件</strong></a>（Latex 模版一般在官方给出 word 模版后更新，时间大概在比赛前一星期左右）</p>
<p><em>主题：</em> <a href="https://cpipc.acge.org.cn/cw/hp/4"><strong>“华为杯”第二十届中国研究生数学建模竞赛</strong></a>（只允许2023级跨校组队，大家注意一下。）  </p>
<p><em>报名时间：</em> <strong>2023年6月1日8:00——9月19日17:00</strong><br><em>审核时间：</em> <strong>2023年6月1日8:00——9月21日17:00</strong><br><em>交费时间：</em> <strong>2023年6月1日8:00——9月21日17:00</strong><br><em>比赛时间：</em> <strong>2023年9月22日8:00——9月26日12:00</strong><br><em>上传论文MD5码时间：</em> <strong>2023年9月25日12:00——9月26日12:00</strong><br><em>上传PDF格式论文时间：</em> <strong>2023年9月26日14:00——9月27日24:00</strong></p>
<h4 id="官网报名地址：官网地址"><a href="#官网报名地址：官网地址" class="headerlink" title="官网报名地址：官网地址"></a>官网报名地址：<a href="https://cpipc.acge.org.cn/cw/hp/4">官网地址</a></h4><hr>  

<h2 id="2022-年研究生数模"><a href="#2022-年研究生数模" class="headerlink" title="2022 年研究生数模"></a>2022 年研究生数模</h2><h4 id="2022-12-30-比赛结果公示，获奖名单"><a href="#2022-12-30-比赛结果公示，获奖名单" class="headerlink" title="2022.12.30 比赛结果公示，获奖名单"></a>2022.12.30 比赛结果公示，<a href="https://github.com/zhanwen/MathModel/tree/master/2022%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">获奖名单</a></h4><h4 id="2022-10-6—2022-10-10-比赛已经结束，大家耐心等待获奖吧（-o-o-）"><a href="#2022-10-6—2022-10-10-比赛已经结束，大家耐心等待获奖吧（-o-o-）" class="headerlink" title="2022.10.6—2022.10.10 比赛已经结束，大家耐心等待获奖吧（(o^^o)）"></a>2022.10.6—2022.10.10 比赛已经结束，大家耐心等待获奖吧（(o^^o)）</h4><p><em>MD5文件校验和使用说明：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/MD5%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md"><strong>论文提交（MD5使用方法）</strong></a></p>
<p><em>LaTex 论文模版使用方式：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/README.md"><strong>如何编译 Latex 文件</strong></a>（Latex 模版一般在官方给出 word 模版后更新，时间大概在比赛前一星期左右）</p>
<p><em>主题：</em> <a href="https://cpipc.acge.org.cn/cw/hp/4"><strong>“华为杯”第十九届中国研究生数学建模竞赛</strong></a>（只允许2022级跨校组队，大家注意一下。）  </p>
<p><em>报名时间：</em> <del><strong>2022年6月1日8:00——9月14日17:00</strong></del> <font color='red'>截止：2022年09月26日17:00</font><br><em>审核时间：</em> <del><strong>2022年6月1日8:00——9月16日17:00</strong></del> <font color='red'>截止：2022年09月27日17:00</font><br><em>交费时间：</em> <del><strong>2022年6月1日8:00——9月19日17:00</strong></del> <font color='red'>截止：2022年09月30日17:00</font><br><em>比赛时间：</em> <del><strong>2022年9月22日8:00——9月26日12:00</strong></del> <font color='red'>2022年10月06日8:00——10月10日12:00</font><br><em>上传论文MD5码时间：</em> <del><strong>2022年9月25日12:00——9月26日12:00</strong></del> <font color='red'>2022年10月09日12:00——10月10日12:00</font><br><em>上传PDF格式论文时间：</em> <del><strong>2022年9月26日14:00——9月27日24:00</strong></del> <font color='red'>2022年10月10日14:00——10月11日24:00</font>   </p>
<h4 id="官网报名地址：官网地址-1"><a href="#官网报名地址：官网地址-1" class="headerlink" title="官网报名地址：官网地址"></a>官网报名地址：<a href="https://cpipc.acge.org.cn/cw/hp/4">官网地址</a></h4><hr>  

<h2 id="2021-年研究生数模"><a href="#2021-年研究生数模" class="headerlink" title="2021 年研究生数模"></a>2021 年研究生数模</h2><h4 id="2021-12-10-比赛结果公示，获奖名单"><a href="#2021-12-10-比赛结果公示，获奖名单" class="headerlink" title="2021.12.10 比赛结果公示，获奖名单"></a>2021.12.10 比赛结果公示，<a href="https://github.com/zhanwen/MathModel/tree/master/2021%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">获奖名单</a></h4><h4 id="2021-10-14—2021-10-28-比赛已经结束，大家耐心等待获奖吧（-o-o-）"><a href="#2021-10-14—2021-10-28-比赛已经结束，大家耐心等待获奖吧（-o-o-）" class="headerlink" title="2021.10.14—2021.10.28 比赛已经结束，大家耐心等待获奖吧（(o^^o)）"></a>2021.10.14—2021.10.28 比赛已经结束，大家耐心等待获奖吧（(o^^o)）</h4><h4 id="2021-10-13-明天早八点开始，祝大家比赛开心-（-）"><a href="#2021-10-13-明天早八点开始，祝大家比赛开心-（-）" class="headerlink" title="2021.10.13 明天早八点开始，祝大家比赛开心 （^_^）"></a>2021.10.13 明天早八点开始，祝大家比赛开心 （^_^）</h4><p><em>MD5文件校验和使用说明：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/MD5%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md"><strong>论文提交（MD5使用方法）</strong></a><br><em>LaTex 论文模版使用方式：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/README.md"><strong>如何编译 Latex 文件</strong></a><br><em>主题：</em> <a href="https://cpipc.acge.org.cn/cw/hp/4"><strong>“华为杯”第十八届中国研究生数学建模竞赛</strong></a>（只允许2021级跨校组队，大家注意一下。）<br><font color='red'>引用官网原文：由于今年的新冠疫情形势导致部分高校的工作安排较往年同期有一定变化，教学科研进度也相应作出调整。为让意向参赛的师生有更加充裕的时间报名、备赛，经研究决定，现对原定的各时间节点予以延期。</font><a href="https://cpipc.acge.org.cn//cw/detail/4/2c9080127bca23bf017bca55e4060317">延期举办等相关事宜的通知</a><br><em>报名时间：</em> <del><strong>2021年6月1日8:00——9月10日17:00</strong></del> <font color='red'>截止：2021年10月8日17:00</font><br><em>审核时间：</em> <del><strong>2021年6月1日8:00——9月12日17:00</strong></del>   <font color='red'>截止：2021年10月10日17:00</font><br><em>交费时间：</em> <del><strong>2021年6月6日8:00——9月13日17:00</strong></del>   <font color='red'>截止：2021年10月11日17:00</font><br><em>比赛时间：</em> <del><strong>2021年9月16日8:00——9月20日12:00</strong></del>  <font color='red'>2021年10月14日8:00——10月18日12:00</font>  </p>
<h4 id="官网报名地址：官网地址-2"><a href="#官网报名地址：官网地址-2" class="headerlink" title="官网报名地址：官网地址"></a>官网报名地址：<a href="https://cpipc.acge.org.cn/cw/hp/4">官网地址</a></h4><hr>  

<h2 id="2020-年研究生数模"><a href="#2020-年研究生数模" class="headerlink" title="2020 年研究生数模"></a>2020 年研究生数模</h2><h4 id="2020-11-24-今年比去年晚两个礼拜，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力吧。-o-o"><a href="#2020-11-24-今年比去年晚两个礼拜，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力吧。-o-o" class="headerlink" title="2020.11.24 今年比去年晚两个礼拜，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力吧。(o^o)"></a>2020.11.24 今年比去年晚两个礼拜，比赛结果经过一个半月的评审，在这一天公布了<a href="https://github.com/zhanwen/MathModel/tree/master/2020%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">获奖名单</a>，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力吧。(o^o)</h4><h4 id="预告一下，按照往年成绩公布时间，应该是在双十一那天。要么喜上加喜，要么少买点东西-o-o-。"><a href="#预告一下，按照往年成绩公布时间，应该是在双十一那天。要么喜上加喜，要么少买点东西-o-o-。" class="headerlink" title="预告一下，按照往年成绩公布时间，应该是在双十一那天。要么喜上加喜，要么少买点东西 (o^^o)。"></a><font color='red'>预告一下，按照往年成绩公布时间，应该是在双十一那天。要么喜上加喜，要么少买点东西 (o^^o)。</font></h4></hr>

<h4 id="论文提交（MD5使用方法）"><a href="#论文提交（MD5使用方法）" class="headerlink" title="论文提交（MD5使用方法）"></a>论文提交（MD5使用方法）</h4><p><em>MD5文件校验和使用说明：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/MD5%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md"><strong>MD5文件校验和使用说明</strong></a></p>
<h4 id="论文模版更新"><a href="#论文模版更新" class="headerlink" title="论文模版更新"></a>论文模版更新</h4><p><em>LaTex 论文模版使用方式：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/README.md"><strong>如何编译 Latex 文件</strong></a></p>
<p><em>主题：</em> <a href="https://cpipc.chinadegrees.cn/cw/hp/4"><strong>“华为杯”第十七届中国研究生数学建模竞赛</strong></a>（今年不允许跨校组队，大家注意一下。）<br><em>报名时间：</em> <strong>2020年6月1日8:00——9月10日17:00</strong><br><em>审核时间：</em> <strong>2020年6月1日8:00——9月13日17:00</strong><br><em>交费时间：</em> <strong>2020年7月1日8:00——9月14日17:00</strong><br><em>比赛时间：</em> <strong>2020年9月17日8:00——9月21日12:00</strong>    </p>
<h4 id="官网报名地址：官网地址-3"><a href="#官网报名地址：官网地址-3" class="headerlink" title="官网报名地址：官网地址"></a>官网报名地址：<a href="https://cpipc.chinadegrees.cn/cw/hp/4">官网地址</a></h4><hr>  

<h2 id="2019-年研究生数模"><a href="#2019-年研究生数模" class="headerlink" title="2019 年研究生数模"></a>2019 年研究生数模</h2><h4 id="2019-11-11-又是双十一，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。-o-o"><a href="#2019-11-11-又是双十一，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。-o-o" class="headerlink" title="2019.11.11 又是双十一，比赛结果经过一个半月的评审，在这一天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。(o^o)"></a>2019.11.11 又是双十一，比赛结果经过一个半月的评审，在这一天公布了<a href="2019%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">获奖名单</a>，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。(o^o)</h4><h3 id="2019-9-19—2019-9-23-比赛已经结束，大家耐心等待获奖吧（-o-o-）"><a href="#2019-9-19—2019-9-23-比赛已经结束，大家耐心等待获奖吧（-o-o-）" class="headerlink" title="2019.9.19—2019.9.23 比赛已经结束，大家耐心等待获奖吧（(o^^o)）"></a>2019.9.19—2019.9.23 比赛已经结束，大家耐心等待获奖吧（(o^^o)）</h3><h4 id="论文提交（MD5使用方法）-1"><a href="#论文提交（MD5使用方法）-1" class="headerlink" title="论文提交（MD5使用方法）"></a>论文提交（MD5使用方法）</h4><p><em>MD5文件校验和使用说明：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/MD5%E6%96%87%E4%BB%B6%E6%A0%A1%E9%AA%8C%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.md"><strong>MD5文件校验和使用说明</strong></a></p>
<h4 id="论文模版更新-1"><a href="#论文模版更新-1" class="headerlink" title="论文模版更新"></a>论文模版更新</h4><p><em>LaTex 论文模版：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/2019%E5%B9%B4Latex%E6%A8%A1%E7%89%88.zip"><strong>LaTex 论文模版</strong></a><br><em>Word 论文模版：</em> <a href="https://github.com/zhanwen/MathModel/blob/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/%E2%80%9C%E5%8D%8E%E4%B8%BA%E6%9D%AF%E2%80%9D%E7%AC%AC%E5%8D%81%E5%85%AD%E5%B1%8A%E4%B8%AD%E5%9B%BD%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AE%BA%E6%96%87%E6%A0%BC%E5%BC%8F%E8%A7%84%E8%8C%83.doc"><strong>Word 论文模版（已更新最新）</strong></a><br><em>LaTex 论文模版使用方式：</em> <a href="https://github.com/zhanwen/MathModel/tree/master/2019%E5%B9%B4%E8%AE%BA%E6%96%87%E6%A8%A1%E7%89%88/latex_note.md"><strong>如何编译 Latex 文件</strong></a></p>
<h4 id="下载方式-仓库比较大，建议单个文件下载"><a href="#下载方式-仓库比较大，建议单个文件下载" class="headerlink" title="下载方式(仓库比较大，建议单个文件下载)"></a>下载方式(仓库比较大，建议单个文件下载)</h4><img src="https://github.com/zhanwen/MathModel/blob/master/images/downloaddemo2.gif?raw=true" /> 
 
<hr>  

<p><em>主题：</em> <a href="https://cpipc.chinadegrees.cn/cw/hp/4"><strong>“华为杯”第十六届中国研究生数学建模竞赛</strong></a><br><em>报名时间：</em> <strong>2019年6月1日8:00——9月10日17:00</strong><br><em>审核时间：</em> <strong>2019年6月1日8:00——9月12日17:00</strong><br><em>交费时间：</em> <strong>2019年7月1日8:00——9月15日17:00</strong><br><em>比赛时间：</em> <strong>2019年9月19日8:00——9月23日12:00</strong>    </p>
<h4 id="官网报名地址：官网地址-4"><a href="#官网报名地址：官网地址-4" class="headerlink" title="官网报名地址：官网地址"></a>官网报名地址：<a href="https://cpipc.chinadegrees.cn/cw/hp/4">官网地址</a></h4><hr>  
   
<h3 id="2018-9-15-祝大家比赛开心-（-）"><a href="#2018-9-15-祝大家比赛开心-（-）" class="headerlink" title="2018.9.15 祝大家比赛开心 （^_^）"></a>2018.9.15 祝大家比赛开心 （^_^）</h3><h3 id="2018-9-19-比赛已经结束，大家耐心等待获奖吧（-o-）"><a href="#2018-9-19-比赛已经结束，大家耐心等待获奖吧（-o-）" class="headerlink" title="2018.9.19 比赛已经结束，大家耐心等待获奖吧（^o^）"></a>2018.9.19 比赛已经结束，大家耐心等待获奖吧（^o^）</h3><h4 id="2018-11-11-比赛结果经过一个半月的评审，终于在昨天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。-o-o"><a href="#2018-11-11-比赛结果经过一个半月的评审，终于在昨天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。-o-o" class="headerlink" title="2018.11.11 比赛结果经过一个半月的评审，终于在昨天公布了获奖名单，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。(o^^o)"></a>2018.11.11 比赛结果经过一个半月的评审，终于在昨天公布了<a href="https://github.com/zhanwen/MathModel/tree/master/2018%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/2018%E5%B9%B4%E6%9C%80%E7%BB%88%E8%8E%B7%E5%A5%96%E5%90%8D%E5%8D%95">获奖名单</a>，大家的努力相信都会有所收获。余生还有很多有意义的事情需要我们去做，让我们一起努力。(o^^o)</h4><hr>  

<h4 id="更新-x2F-添加比赛官网地址戳这里"><a href="#更新-x2F-添加比赛官网地址戳这里" class="headerlink" title="更新&#x2F;添加比赛官网地址戳这里"></a>更新&#x2F;添加比赛官网地址<a href="https://cpipc.chinadegrees.cn/">戳这里</a></h4><ul>
<li><a href="https://cpipc.chinadegrees.cn/cw/hp/4">数学建模竞赛</a>     </li>
<li><a href="https://cpipc.chinadegrees.cn/cw/hp/6">电子设计竞赛</a>     </li>
<li><a href="https://cpipc.chinadegrees.cn/cw/hp/2c9088a5696cbf370169a3f8101510bd">人工智能创新大赛</a>     </li>
<li><a href="https://cpipc.chinadegrees.cn/cw/hp/2c9088a5696cbf370169a3f8934810be">机器人创新设计大赛</a></li>
</ul>
<hr/>

<h3 id="下载与使用（由于整个项目直接下载比较慢，可以看方式四）"><a href="#下载与使用（由于整个项目直接下载比较慢，可以看方式四）" class="headerlink" title="下载与使用（由于整个项目直接下载比较慢，可以看方式四）"></a>下载与使用（由于整个项目直接下载比较慢，可以看方式四）</h3><ul>
<li><p>方式一：使用 <code>git</code> 下载。<br><code>git clone https://github.com/zhanwen/MathModel.git</code></p>
</li>
<li><p>方式二：直接下载压缩包。  </p>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/downloaddemo.gif?raw=true" height="250" width="500" align=center />
</li>
<li><p>方式三</p>
<ul>
<li>可以单个文件下载，选择自己需要的某篇论文，直接在对应的页面点击下载即可。<img src="https://github.com/zhanwen/MathModel/blob/master/images/download3.gif?raw=true" height="250" width="500" align=center /></li>
</ul>
</li>
<li><p>方式四：百度云下载（推荐）</p>
<ul>
<li>使用百度云下载，正常的客户端会出现限速，导致下载的很慢，这里给大家推荐一个绕过百度云下载限速的方式。具体怎么下载，请参照 <a href="https://github.com/GangZhuo/BaiduPCS">绕过限速</a>。</li>
<li>该项目的百度云链接 <a href="https://pan.baidu.com/s/1wcCcc8pICGx5mBiwP6jwnw">https://pan.baidu.com/s/1wcCcc8pICGx5mBiwP6jwnw</a>，密码：<code>7sog</code></li>
<li><strong>更新：这个链接失效没影响，直接访问这个网址<a href="https://github.com/GangZhuo/BaiduPCS">绕过限速</a>，看 README 部分，有针对不同操作系统安装方法，根据自己的操作系统安装即可，大部分方式都是将项目git clone，在后续。</strong></li>
</ul>
</li>
</ul>
<h3 id="国赛试题"><a href="#国赛试题" class="headerlink" title="国赛试题"></a>国赛试题</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2021%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2021年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2020%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2020年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2019%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2019年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2018%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2018年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2017%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2017年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2016%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2016年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2015%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2015年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2014%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2014年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2013%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2013年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2012%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2012年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2011%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2011年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2010%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2010年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2009%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2009年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2008%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2008年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2007%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2007年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2006%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2006年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2005%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2005年研究生数学建模竞赛试题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AF%95%E9%A2%98/2004%E5%B9%B4%E7%A0%94%E7%A9%B6%E7%94%9F%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AB%9E%E8%B5%9B%E8%AF%95%E9%A2%98">2004年研究生数学建模竞赛试题</a></li>
</ul>
<h3 id="国赛论文"><a href="#国赛论文" class="headerlink" title="国赛论文"></a>国赛论文</h3><ul>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2021年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：相关矩阵组的低复杂度计算和存储建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：空气质量预报二次建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：帕金森病的脑深部电刺激治疗建模研究</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：抗胰腺癌候选药物的优化建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：信号干扰下的超宽带（UWB）精确定位问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2021%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：航空公司机组优化排班问题</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2020年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：华为题_芯片相噪算法设计</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：汽油辛烷值建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：面向康复工程的脑电信号分析和判别模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：无人机集群协同对抗</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：能见度估计与预测</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2020%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：飞行器质心平衡供油策略优化</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2019年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：无线智能传播模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：天文导航中的星图识别</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：视觉情报信息分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：汽车行驶工况构建</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：多全球变暖气候预测分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2019%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：多约束条件下智能飞行器航迹快速规划</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2018年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：关于跳台跳水体型系数设置的建模分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：光传送网建模与价值评估</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：对恐怖袭击事件记录数据的量化分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：基于卫星高度计海面高度异常资料获取潮汐调和常数方法及应用</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：多无人机对组网雷达的协同干扰</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2018%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：航站楼扩增评估</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2017年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：无人机在抢险救灾中的优化运用</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：面向下一代光通信的 VCSEL 激光器仿真模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：航班恢复问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：基于监控视频的前景目标提取</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：多波次导弹发射中的规划问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：地下物流系统网络</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2016年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：多无人机协同任务规划</a> </li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：具有遗传性疾病和性状的遗传位点分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：基于无线通信基站的室内三维定位问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：军事行动避空侦察的时机和路线选择</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：粮食最低收购价政策问题研究</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2015年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：水面舰艇编队防空和信息化战争评估模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：数据的多流形结构分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：移动通信中的无线信道“指纹”特征建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：面向节能的单&#x2F;多列车优化决策问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：数控加工刀具运动的优化控制</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：旅游路线规划问题</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2014年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：小鼠视觉感受区电位信号(LFP)与视觉刺激之间的关系研究</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：机动目标的跟踪与反跟踪</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：无线通信中的快时变信道建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：人体营养健康角度的中国果蔬发展战略研究</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：乘用车物流运输计划问题</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2013年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：变循环发动机部件法建模及优化</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：功率放大器非线性特性及预失真模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：微蜂窝环境中无线接收信号的特性分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：空气中PM2.5问题的研究 attachment</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/E">E题：中等收入定位与人口度量模型研究</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/F">F题：可持续的中国城乡居民养老保险体系的数学模型研究</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2012年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：基因识别问题及其算法实现</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：基于卫星无源探测的空间飞行器主动段轨道估计与误差分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：有杆抽油系统的数学建模及诊断</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：基于卫星云图的风失场(云导风)度量模型与算法探讨</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2011年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：基于光的波粒二象性一种猜想的数学仿真</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：吸波材料与微波暗室问题的数学建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：小麦发育后期茎杆抗倒性的数学模型</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：房地产行业的数学建模</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2010年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：确定肿瘤的重要基因信息</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：与封堵渍口有关的重物落水后运动过程的数学建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：神经元的形态分类和识别</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：特殊工件磨削加工的数学建模</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2009年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：我国就业人数或城镇登记失业率的数学建模</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：枪弹头痕迹，自动比对方法的研究</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：多传感器数据融合与航迹预测</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：110 警车配置及巡逻方案</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2008%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2008年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2008%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：汶川地震中唐家山堪塞湖泄洪问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2008%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：城市道路交通信号实时控制问题</a></li>
<li><a href="">C题：货运列车的编组调度问题</a></li>
<li><a href="">D题：中央空调系统节能设计问题</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2007年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：建立食品卫生安全保障体系数学模型及改进模型的若干理论问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：械臂运动路径设计问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：探讨提高高速公路路面质量的改进方案</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：邮政运输网络中的邮路规划和邮车调运</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2006年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：Ad Hoc 网络中的区域划分和资源分配问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：确定高精度参数问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：维修线性流量阀时的内筒设计问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：学生面试问题</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2005年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：Highway Traveling time Estimate and Optimal Routing</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：空中加油</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：城市交通管理中的出租车规划</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：仓库容量有限条件下的随机存贮管理</a></li>
</ul>
</li>
<li><p><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87">2004年优秀论文</a></p>
<ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/A">A题：发现黄球并定位</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/B">B题：使用下料问题</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/C">C题：售后服务数据的运用</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E5%9B%BD%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E5%B9%B4%E4%BC%98%E7%A7%80%E8%AE%BA%E6%96%87/D">D题：研究生录取问题</a></li>
</ul>
</li>
</ul>
<h3 id="美赛论文"><a href="#美赛论文" class="headerlink" title="美赛论文"></a>美赛论文</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2017%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2017年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2016%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2016年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2015%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2015年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2014%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2014年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2013%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2013年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2012%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2012年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2011%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2011年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2010%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2010年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2009%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2009年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2008%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2008年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2007%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2007年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2006%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2006年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2005%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2005年特等奖论文</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%BE%8E%E8%B5%9B%E8%AE%BA%E6%96%87/2004%E7%BE%8E%E8%B5%9B%E7%89%B9%E7%AD%89%E5%A5%96%E5%8E%9F%E7%89%88%E8%AE%BA%E6%96%87%E9%9B%86">2004年特等奖论文</a></li>
</ul>
<h3 id="数学建模算法"><a href="#数学建模算法" class="headerlink" title="数学建模算法"></a>数学建模算法</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%AE%97%E6%B3%95">经典算法</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95">现代算法</a><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BB%BF%E7%9C%9F">计算机仿真</a> </li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E7%B2%92%E5%AD%90%E7%BE%A4%E7%AE%97%E6%B3%95">粒子群算法</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E9%A9%AC%E5%B0%94%E5%8F%AF%E5%A4%AB%E9%93%BE">马尔可夫链</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E8%92%99%E7%89%B9%E5%8D%A1%E6%B4%9B%E6%B3%95">蒙特卡洛法</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E6%B3%95">模拟退火法</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">神经网络</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E5%B0%8F%E6%B3%A2%E5%88%86%E6%9E%90">小波分析</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E7%8E%B0%E4%BB%A3%E7%AE%97%E6%B3%95/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95">遗传算法</a></li>
</ul>
</li>
</ul>
<h3 id="教材及课件"><a href="#教材及课件" class="headerlink" title="教材及课件"></a>教材及课件</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E6%95%99%E6%9D%90%E5%8F%8A%E8%AF%BE%E4%BB%B6/%E5%9B%BD%E9%98%B2%E7%A7%91%E6%8A%80%E6%9C%AF%E5%A4%A7%E5%AD%A6">国防科技术大学</a></li>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/%E6%95%99%E6%9D%90%E5%8F%8A%E8%AF%BE%E4%BB%B6/%E6%B5%99%E6%B1%9F%E5%A4%A7%E5%AD%A6%E8%AF%BE%E4%BB%B6/PPT%E8%AF%BE%E4%BB%B6">浙江大学课件</a></li>
</ul>
<h3 id="数学建模算法思维导图"><a href="#数学建模算法思维导图" class="headerlink" title="数学建模算法思维导图"></a>数学建模算法思维导图</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/Mind">思维导图</a></li>
</ul>
<h3 id="Matlab-入门教程"><a href="#Matlab-入门教程" class="headerlink" title="Matlab 入门教程"></a>Matlab 入门教程</h3><ul>
<li><a href="https://github.com/zhanwen/MathModel/tree/master/Matlab%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B">Matlab入门和在线性代数中的应用</a></li>
</ul>
<hr> 
   
<h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><ul>
<li>其中有些内容整理自互联网，如有侵权，请联系，我将及时处理。</li>
</ul>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>选题、命题、介绍分析</title>
    <url>/post/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E9%80%89%E9%A2%98%E3%80%81%E5%91%BD%E9%A2%98%E4%BB%8B%E7%BB%8D%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<h1 id="2019年“华为杯”第十六届中国研究生数学建模竞赛——选题、命题介绍分析："><a href="#2019年“华为杯”第十六届中国研究生数学建模竞赛——选题、命题介绍分析：" class="headerlink" title="2019年“华为杯”第十六届中国研究生数学建模竞赛——选题、命题介绍分析："></a>2019年“华为杯”第十六届中国研究生数学建模竞赛——<strong>选题、命题介绍分析：</strong></h1><blockquote>
<p>本文来自公众号——《中国研究生数学建模竞赛》   </p>
</blockquote>
<p>介绍人是彭国华老师关于2019年第16届研究生数学建模竞赛的选题、命题及命题方向的介绍分析。</p>
<blockquote>
<p>彭国华<br>西北工业大学理学院教授，博士生导师，陕西计算数学学会副理事长，主持国家自然基金等项目10余项。<br>曾获省部级科技进步奖、省级教学一等奖及全国研究生建模杰出贡献奖等多重奖项，并多年致力于中国研究生数学建模竞赛的命题和审题等工作。</p>
</blockquote>
<h3 id="A题：无线智能传播模型-（关键词：5G）"><a href="#A题：无线智能传播模型-（关键词：5G）" class="headerlink" title="A题：无线智能传播模型 （关键词：5G）"></a>A题：无线智能传播模型 （<font color='red'>关键词：5G</font>）</h3><p>A题主要是针对当前<strong>5G技术</strong>的发展和应用命制的。随着5G应用范围的扩大，运营商在部署5G网络过程中间，需要合理选择覆盖区域的基站站点，进而通过部署基站来满足用户的通讯要求。在整个<strong>无线网络规划</strong>的流程中，高校的网络估算对于精确度以及网络的部署有着非常重要的意义，所以这道题与5G的应用技术有很好的契合，具有前沿性和较大的创新空间。</p>
<p>其中选取了来自清华大学<em>O(logn)队</em>提出的无限智能传播建模思路，该队获得一等奖。<br><img src="https://github.com/zhanwen/MathModel/blob/master/images/A1.jpeg?raw=true"/><br><img src="https://github.com/zhanwen/MathModel/blob/master/images/A2.png?raw=true"/><br><img src="https://github.com/zhanwen/MathModel/blob/master/images/A3.jpeg?raw=true"/></p>
<h3 id="B题：天文导航中的星图识别-（关键词：人工智能）"><a href="#B题：天文导航中的星图识别-（关键词：人工智能）" class="headerlink" title="B题：天文导航中的星图识别 （关键词：人工智能）"></a>B题：天文导航中的星图识别 （<font color='red'>关键词：人工智能</font>）</h3><p>B题是很富有挑战性的一套题。<strong>天文导航</strong>是基于天体的已知的坐标定位和运动规律，观测天体的天文坐标值来确定航行体的空间位置等参数。与其他导航系统相比，天文导航是一种<strong>自主导航</strong>，不需要地面设备，不受人工或者自然形成的电磁场的干扰，不向外界辐射能量，隐蔽性非常好，而且定向、定位精度高，定位误差与时间无关，天体导航已广泛应用于卫星、航天飞机、远程弹道导弹等<strong>航天器</strong>。</p>
<p>其中选取了来自浙江大学<em>浙江大学夏骏鹏队</em>提出的天文导航中的星图识别建模思路，该队获得一等奖。</p>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/B1.jpg?raw=true"  width="800" height="400"/>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/B2.jpg?raw=true"/>

<h3 id="C题：视觉情报信息分歧-（关键词：大数据分析）"><a href="#C题：视觉情报信息分歧-（关键词：大数据分析）" class="headerlink" title="C题：视觉情报信息分歧 （关键词：大数据分析）"></a>C题：视觉情报信息分歧 （<font color='red'>关键词：大数据分析</font>）</h3><p>C题也属于<strong>人工智能</strong>的范畴，现在人工驾驶技术发展迅速，一般人获得的信息80%来自视觉系统，视觉信息的主要载体是图像和视频，视觉情报就是指通过情报或者视频获取信息，提取物体特有的特征。比如，日本可以通过中国的一张画报来获取大庆油田的一些信息，现在当前热门的机器人、无人驾驶等都与命题内容是有关的，所以这个问题的切入点是作为问题的逆问题来提出的，很有特色。</p>
<p>其中选取了来自东南大学<em>东南大学伶飞贺队</em>提出的视觉情报信息分歧建模思路，该队获得一等奖。</p>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/C1.jpg?raw=true"/>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/C2.jpg?raw=true"/>

<h3 id="D题：汽车行驶工况构建-（关键词：绿色环保）"><a href="#D题：汽车行驶工况构建-（关键词：绿色环保）" class="headerlink" title="D题：汽车行驶工况构建 （关键词：绿色环保）"></a>D题：汽车行驶工况构建 （<font color='red'>关键词：绿色环保</font>）</h3><p>D题是被参赛选手选择<strong>最多</strong>的一道题，这道题有很好的切入点，<strong>专业入口非常广</strong>。这道题属于绿色环保的主题，主要针对近年来我国道路交通状况与汽车增长之间的关系以及每一个城市道路特点与汽车实际耗油的关系。欧洲在多年的实践中发现了工况里形成的很多系统性不足的问题，针对这个问题，我国目前在北京、上海对于汽车的工况生成的大数据的分析也做了一定量的工作，这道题就是通过<strong>数字特征</strong>、<strong>大数据分析</strong>来分析<strong>汽车和道路之间内在的关系</strong>。</p>
<p>其中选取了来自福州大学<em>福州大学宇宙巨无霸队</em>提出的汽车行驶工况构建建模思路，该队获得一等奖。</p>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/D1.jpg?raw=true"/>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/D2.jpg?raw=true"/>

<h3 id="E题：全球变暖-（关键词：气候变化）"><a href="#E题：全球变暖-（关键词：气候变化）" class="headerlink" title="E题：全球变暖 （关键词：气候变化）"></a>E题：全球变暖 （<font color='red'>关键词：气候变化</font>）</h3><p>E题是针对目前气候变化提出来的问题，许多科学家认为全球变暖会导致更多的其他极端气象的产生，导致全球降水量的重新分配，造成冰川消融、海平面上升等现象，威胁人类生存。这道题需要<strong>利用现有的统计数据特征</strong>，建立简化的<strong>气候模型</strong>和<strong>极端天气模型</strong>，区别于传统复杂的气候模型。希望研究生们做出一个简单的、实用的模型，有利于非专业的人士来理解和认识<strong>全球气候变化的态势</strong>，解释极端天气现象的发生，求证影响气候变化因素的<strong>内在特征</strong>，增强人们对于气候变化的认识，督促决策者迅速制定应对气候的政策。</p>
<p>其中选取了来自同济大学<em>同济大学Fighting之声队</em>提出的全球变暖建模思路，该队获得一等奖。</p>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/E1.jpg?raw=true"/>
<img src="https://github.com/zhanwen/MathModel/blob/master/images/E2.jpg?raw=true"/>

<h3 id="F题：多约束条件下智能飞行器航迹快速规划-（关键词：飞行器航迹）"><a href="#F题：多约束条件下智能飞行器航迹快速规划-（关键词：飞行器航迹）" class="headerlink" title="F题：多约束条件下智能飞行器航迹快速规划 （关键词：飞行器航迹）"></a>F题：多约束条件下智能飞行器航迹快速规划 （<font color='red'>关键词：飞行器航迹</font>）</h3><p>F题的命制是考虑到的是在飞行过程中，对<strong>定位误差</strong>进行<strong>校对</strong>是<strong>智能飞行器规划</strong>中非常重要的任务，主要是智能飞行器在精度定位有限制的条件下，来进行航迹快速规划的问题。</p>
]]></content>
      <categories>
        <category>数学建模</category>
      </categories>
      <tags>
        <tag>数学建模</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-中阶</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E4%B8%AD%E9%98%B6.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-前言</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E5%89%8D%E8%A8%80.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>算法</code>是一个需要持续热爱的东西，如果不喜欢，趁早转工程吧。</p>
<h1 id="优质网站推荐"><a href="#优质网站推荐" class="headerlink" title="优质网站推荐"></a>优质网站推荐</h1><p>算法学习网站:<code>acwing</code>;<br>面试刷题网站：<code>力扣</code>;<br>程序员面试求职网站:<code>牛客</code>;</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法-前言</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-蓝桥杯</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E8%93%9D%E6%A1%A5%E6%9D%AF.html</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>写于6-7日，快蓝桥杯了，速通一下吧。</p>
<h1 id="蒙题技巧"><a href="#蒙题技巧" class="headerlink" title="蒙题技巧"></a>蒙题技巧</h1><h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><h2 id="冶炼金属"><a href="#冶炼金属" class="headerlink" title="冶炼金属"></a>冶炼金属</h2><p>小蓝有一个神奇的炉子用于将普通金属 O 冶炼成为一种特殊金属 X。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> Min=<span class="number">0</span>,Max=<span class="number">2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">0</span>,b=<span class="number">0</span>;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        <span class="type">int</span> r=a/b,l=(a/(b+<span class="number">1</span>))+<span class="number">1</span>;</span><br><span class="line">        Max=<span class="built_in">min</span>(Max,r);</span><br><span class="line">        Min=<span class="built_in">max</span>(Min,l);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;Min&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Max&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>






<h1 id="国赛后的感悟"><a href="#国赛后的感悟" class="headerlink" title="国赛后的感悟"></a>国赛后的感悟</h1><blockquote>
<p>写于6-12日下午 16：29分 </p>
</blockquote>
<p>似乎寄啦，以后有空更新题解吧！！！</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法-蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-期末复习总结</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E6%9D%82%E9%A1%B9.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>主要是记录一下课堂上面老师讲过的东西</p>
</blockquote>
<hr>
<h1 id="最近更新：-6-7-9：08"><a href="#最近更新：-6-7-9：08" class="headerlink" title="最近更新： 6-7 9：08"></a>最近更新： 6-7 9：08</h1>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>瑞吉外卖笔记汇总</title>
    <url>/post/%E7%91%9E%E5%90%89%E5%A4%96%E5%8D%96%E7%AC%94%E8%AE%B0%E6%B1%87%E6%80%BB.html</url>
    <content><![CDATA[<h1 id="git-操作"><a href="#git-操作" class="headerlink" title="git 操作"></a>git 操作</h1><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><blockquote>
<p>git config –global user.name “用户名”   &#x2F;&#x2F;设置用户名，</p>
</blockquote>
<blockquote>
<p>git config –global user.email “邮箱”   &#x2F;&#x2F;设置邮箱</p>
</blockquote>
<h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><blockquote>
<p>git config –list –global</p>
</blockquote>
<h2 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h2><blockquote>
<p>git remote</p>
</blockquote>
<h2 id="查看远程仓库详细信息"><a href="#查看远程仓库详细信息" class="headerlink" title="查看远程仓库详细信息"></a>查看远程仓库详细信息</h2><blockquote>
<p>git remote -v</p>
</blockquote>
<h2 id="拉取最新仓库代码"><a href="#拉取最新仓库代码" class="headerlink" title="拉取最新仓库代码"></a>拉取最新仓库代码</h2><blockquote>
<p>git pll</p>
</blockquote>
<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><blockquote>
<p>git remote add origin <url></p>
</blockquote>
<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><blockquote>
<p>git push –set-upstream origin master</p>
</blockquote>
<blockquote>
<p>用于将本地分支的提交推送到远程仓库的 master 分支，并建立本地分支与远程分支的关联。</p>
</blockquote>
<h2 id="然后才能直接使用下面命令"><a href="#然后才能直接使用下面命令" class="headerlink" title="然后才能直接使用下面命令"></a>然后才能直接使用下面命令</h2><ol>
<li><blockquote>
<p>git push</p>
</blockquote>
</li>
<li><blockquote>
<p>git push origin master</p>
</blockquote>
</li>
<li><blockquote>
<p>git pull origin master</p>
</blockquote>
</li>
<li><blockquote>
<p>git commmit -m ‘nihao’  &lt;文件名&gt;</p>
</blockquote>
</li>
</ol>
<blockquote>
<p>如果本地仓库不是从远程创建的，直接拉取会报错</p>
</blockquote>
<p><span style="color: red;">在git pull命令后面加上：–allow-unrelated-histories</span></p>
<h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><ul>
<li><blockquote>
<p>git branch <name></p>
</blockquote>
</li>
<li><blockquote>
<p>git checkout <name></p>
</blockquote>
</li>
<li><blockquote>
<p>git merge <name></p>
</blockquote>
</li>
<li><blockquote>
<p>git checkout -b <name></p>
</blockquote>
</li>
</ul>
<h2 id="进入编辑模式"><a href="#进入编辑模式" class="headerlink" title="进入编辑模式"></a>进入编辑模式</h2><ul>
<li>：wq 保存退出</li>
<li>esc 直接退出</li>
<li>i 插入模式</li>
<li>:q! 不保存退出</li>
</ul>
<h2 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h2><ul>
<li>在b1分支下面修改b1.txt文件</li>
<li>在master下面修改b1.txt文件</li>
<li>再次进行合并时, 会发生冲突</li>
<li>需要<code>手动处理</code></li>
</ul>
<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><blockquote>
<p>相当于进行代码快照，记录当前状态。</p>
</blockquote>
<ul>
<li>git tag</li>
<li>git tag v0.1</li>
<li>git push origin v0.1</li>
</ul>
<h2 id="在IDEA中实现git"><a href="#在IDEA中实现git" class="headerlink" title="在IDEA中实现git"></a>在IDEA中实现git</h2><p>所有操作点击右下角即可。</p>
<p>签出的意思是转换分支。</p>
<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><h2 id="vim修改配置"><a href="#vim修改配置" class="headerlink" title="vim修改配置"></a>vim修改配置</h2><ul>
<li>退出vim<ul>
<li>esc</li>
</ul>
</li>
<li>保存退出<ul>
<li>:wq</li>
</ul>
</li>
<li>强制退出<ul>
<li>:q!</li>
</ul>
</li>
</ul>
<h2 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h2><ol>
<li>找到 ip addr</li>
<li>拿到ip地址 ens33 下面的东西</li>
</ol>
<blockquote>
<p>新建文件-&gt;配置文件</p>
</blockquote>
<p>在xshell中需要输入用户名和密码</p>
<h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><ul>
<li>ls list 查看当前目录下的内容</li>
<li>pwd print work directory,查看当期那所在目录</li>
<li>touch [文件名]   如果文件不存在，新建文件</li>
<li>rm [文件名]      删除指定文件</li>
<li>rmdir [文件名]   删除文件夹</li>
</ul>
<blockquote>
<p>在执行Linux时，显示乱码,修改其编码模式。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认语言为英语（美国）并使用UTF-8编码。</span></span><br><span class="line">echo &#x27;LANG =&quot;en_US.UTF-8&quot;&#x27; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载配置文件</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>

<h2 id="命令使用技巧"><a href="#命令使用技巧" class="headerlink" title="命令使用技巧"></a>命令使用技巧</h2><ul>
<li>Tab键 自动补全</li>
<li>使用上下键调出曾经使用过的命令</li>
<li>ctrl+l 实现清屏的效果</li>
</ul>
<h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><ul>
<li>-a 显示所有文件及其目录</li>
<li>-l 显示文件详细信息</li>
<li>-al 上面两个的综合</li>
</ul>
<p>简化：ll</p>
<h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><ul>
<li>cat [文件]     显示文件内容</li>
<li>cat -n [文件]  显示文件内容，并且显示行号</li>
</ul>
<h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><blockquote>
<p>如果文件太多，分页看</p>
</blockquote>
<p>more [文件]</p>
<ul>
<li>回车键 向下滚动一行</li>
<li>空格键 向下滚动一屏</li>
<li>b 返回上一屏</li>
<li>q 退出</li>
</ul>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><blockquote>
<p>查看文件末尾内容</p>
</blockquote>
<p><code>tail [-n]  filename</code></p>
<p>显示文件最后n行内容,通常用于 log 查询</p>
<h2 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h2><p>创建双层目录</p>
<p><code>mkdir -p it/test</code></p>
<blockquote>
<p>-p选项表示递归创建目录，即如果父级目录不存在，则同时创建父级目录和子级目录。</p>
</blockquote>
<h2 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h2><blockquote>
<p>rmdir是一个用于删除空目录的命令。它只能删除空目录，如果目录中包含文件或其他子目录，则无法删除。</p>
</blockquote>
<h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><blockquote>
<p>删除文件或者目录</p>
</blockquote>
<p>-r 把目录中的所有文件逐一删除<br>-f 强制删除<br>-rf 随便删除 使用频率最多</p>
<p><code> rm -r directory</code></p>
<h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><blockquote>
<p>复制文件或者目录</p>
</blockquote>
<p><code>cp [-r] src tar</code></p>
<ul>
<li>-r 代表着复制的是文件夹</li>
<li>cp -r it&#x2F;* .&#x2F;it1 把it目录下的所有文件复制到it1下面</li>
<li>cp -r it&#x2F; .&#x2F;it1 把it目录和其目录下的内容复制到it1下面</li>
</ul>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><blockquote>
<p>重命名或者移动位置</p>
</blockquote>
<p><code>mv src tar</code></p>
<ul>
<li>mv 1.txt 2.txt <pre>把1.txt 该名成 2.txt</li>
<li>mv 1.txt it/   <pre>把1.txt 移动到 it目录下面</li>
<li>mv it/ it1/    <pre>把it目录移动到it1目录中</li>
<li>mv 1.txt it/2.txt  <pre>把1.txt移动到it目录中,并且改名为2.txt</li>
<li>mv 1.txt it/   <pre>把1.txt 移动到it目录下面</li>
</ul>
<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><p><code>tar [-zcxvf] filename [files]</code></p>
<h4 id="打包命令-十分重要"><a href="#打包命令-十分重要" class="headerlink" title="打包命令,十分重要"></a>打包命令,十分重要</h4><p>包文件后缀是.tar 只是对文件进行了打包,并没有压缩<br><br>后缀是 .tar.gz 表示打包的时候还进行了压缩</p>
<ul>
<li>z 对文件进行压缩或者解压</li>
<li>c 打包</li>
<li>x 解包</li>
<li>v 显示命令的执行过程</li>
<li>f 指定包文件名称</li>
</ul>
<h4 id="常用组合-："><a href="#常用组合-：" class="headerlink" title="常用组合 ："></a>常用组合 ：</h4><ul>
<li>cvf 打包</li>
<li>zcvf 打包且压缩</li>
<li>xvf 解包</li>
<li>zxvf 解压缩包</li>
</ul>
<h2 id="vi-和-vim"><a href="#vi-和-vim" class="headerlink" title="vi 和 vim"></a>vi 和 vim</h2><blockquote>
<p>vim 是从vi 进化的</p>
</blockquote>
<p><code>yum install vim</code></p>
<h4 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h4><h4 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h4><p>按下a i o 任意一个键即可</p>
<h4 id="底行模式"><a href="#底行模式" class="headerlink" title="底行模式"></a>底行模式</h4><ul>
<li>可以对文件内容进行查找，显示行号，退出等操作</li>
<li>在命令模式下按下[:,/]就可以进入底行模式</li>
<li>按下/ ,可以对文件内容进行查找</li>
<li>按下： ,wq 保存退出 q! 不保存退出 set nu 显示行号</li>
</ul>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><blockquote>
<p>查找命令</p>
</blockquote>
<ol>
<li>find . -name "*.java" 在当前文件夹下面找java文件</li>
<li>find /it -name "*.java" 在 it 文件夹下面找java文件</li>
</ol>
<h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><blockquote>
<p>从指定文件中查找指定的文本内容</p>
</blockquote>
<ol>
<li>grep hello 1.txt 查找1.txt文件中出现hello 字符串的位置</li>
<li><code>grep hello *.java</code>   查找当前目录中所有.java结尾的文件中包含 hello 的位置</li>
</ol>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="主从复制的原理"><a href="#主从复制的原理" class="headerlink" title="主从复制的原理"></a>主从复制的原理</h2><blockquote>
<p>主从复制主要用于备份和提高读取性能。在主从复制中，有一个主服务器（Master）和一个或多个从服务器（Slave）。</p>
</blockquote>
<ol>
<li><strong>主服务器</strong>：主服务器处理写操作（INSERT, UPDATE, DELETE等）。每当主服务器完成一个写操作，它都会在其二进制日志（Binary<br>Log）中记录下这个操作。</li>
</ol>
<ul>
<li>二进制日志是一个记录主服务器所有写操作的日志文件，每个事件（写操作）在二进制日志中都有一个唯一的位置。</li>
</ul>
<ol start="2">
<li><strong>从服务器</strong>：从服务器开始时会从主服务器复制其整个数据集（这个过程叫做快照）。之后，从服务器将持续读取主服务器的二进制日志，并在本地应用这些日志中的写操作，从而保持与主服务器的数据同步。</li>
</ol>
<ul>
<li>从服务器也可以配置成定期从主服务器取得二进制日志的更新。</li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>准备好2台服务器<br>实现主从复制的步骤大致如下：</p>
<ol>
<li><p>在主库上操作：<br>首先，你需要在主库中打开二进制日志（binary log），这是 MySQL 的一种日志文件，用于记录数据的修改情况。你可以在 MySQL<br>配置文件（如 <code>my.ini</code>）中添加或修改以下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin <span class="comment"># 开启二进制日志</span></span><br><span class="line">server-id=1       <span class="comment"># 设置 server-id，主库和从库的 server-id 必须不同</span></span><br></pre></td></tr></table></figure>
<p>然后重启 MySQL 服务以应用配置更改。</p>
<p>接着，你需要创建一个用于主从复制的用户，并给予该用户复制的权限。假设你想创建的用户名为 <code>repl</code>，密码为 <code>password</code>，可以运行以下<br>SQL 命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> REPLICATION SLAVE <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;repl&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;password&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>最后，你需要获取当前的二进制日志文件名和位置，可以通过运行 <code>SHOW MASTER STATUS;</code> 命令获得。这些信息在接下来设置从库的时候需要用到。</p>
</li>
<li><p>在从库上操作：<br>同样的，你需要在 MySQL 配置文件中添加或修改以下配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id=2 <span class="comment"># 设置 server-id，主库和从库的 server-id 必须不同</span></span><br></pre></td></tr></table></figure>
<p>然后重启 MySQL 服务以应用配置更改。</p>
<p>接着，你需要配置从库连接到主库，并开始复制。这里假设主库的 IP 地址为 <code>192.168.1.100</code><br>，二进制日志文件名为 <code>mysql-bin.000001</code>，位置为 <code>120</code>，可以运行以下 SQL 命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHANGE MASTER <span class="keyword">TO</span></span><br><span class="line">    MASTER_HOST<span class="operator">=</span><span class="string">&#x27;192.168.1.100&#x27;</span>,</span><br><span class="line">    MASTER_USER<span class="operator">=</span><span class="string">&#x27;repl&#x27;</span>,</span><br><span class="line">    MASTER_PASSWORD<span class="operator">=</span><span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">    MASTER_LOG_FILE<span class="operator">=</span><span class="string">&#x27;mysql-bin.000001&#x27;</span>,</span><br><span class="line">    MASTER_LOG_POS<span class="operator">=</span><span class="number">120</span>;</span><br></pre></td></tr></table></figure>

<p>最后，启动复制过程，运行以下 SQL 命令：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> SLAVE;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><ul>
<li>写(增删改)操作在master库中，比如:update xxx set status = xxx</li>
<li>读(查询)操作在slave库中,比如:select * from xxx</li>
</ul>
<h1 id="Sharding-jdbc-增强版JDBC"><a href="#Sharding-jdbc-增强版JDBC" class="headerlink" title="Sharding-jdbc 增强版JDBC"></a>Sharding-jdbc 增强版JDBC</h1><h2 id="配置读写分离规则"><a href="#配置读写分离规则" class="headerlink" title="配置读写分离规则"></a>配置读写分离规则</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  shardingsphere:</span><br><span class="line">    datasource:</span><br><span class="line">      names: ds0, ds1</span><br><span class="line">      ds0:</span><br><span class="line">        <span class="built_in">type</span>: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        jdbc-url: jdbc:mysql://localhost:3306/ds0</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br><span class="line">      ds1:</span><br><span class="line">        <span class="built_in">type</span>: com.zaxxer.hikari.HikariDataSource</span><br><span class="line">        driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">        jdbc-url: jdbc:mysql://localhost:3306/ds1</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br><span class="line">    masterslave:</span><br><span class="line">      <span class="comment"># 负载均衡算法</span></span><br><span class="line">      load-balance-algorithm-type: round_robin <span class="comment"># 轮询</span></span><br><span class="line">      <span class="comment"># 最终数据库名称 这个库的名称主从数据库都要有</span></span><br><span class="line">      name: dataSource</span><br><span class="line">      master-data-source-name: ds0</span><br><span class="line">      slave-data-source-names: ds1</span><br><span class="line">    props:</span><br><span class="line">      sql:</span><br><span class="line">        <span class="comment"># 可以打印执行的sql数据，方便调试</span></span><br><span class="line">        show: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 允许bean覆盖</span></span><br><span class="line">  main:</span><br><span class="line">    allow-bean-definition-overriding: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Nginx是一个开源的、高性能的HTTP服务器和反向代理服务器。Nginx也可以作为一个IMAP/POP3/SMTP代理服务器。由于其稳定性、丰富的模块库、简洁的配置和低资源消耗，Nginx在全球范围内广受欢迎。</p>
<p>以下是Nginx的一些主要特性：</p>
<ol>
<li><p><strong>作为Web服务器</strong>：Nginx可以作为一个静态文件的Web服务器，也可以作为反向代理服务动态HTTP内容。</p>
</li>
<li><p><strong>负载均衡</strong>：Nginx可以作为反向代理实现负载均衡，将接收到的请求分发到后端的多个服务器，从而提高网站的可用性和性能。</p>
</li>
<li><p><strong>HTTP和HTTPS支持</strong>：Nginx支持HTTP和HTTPS，能够实现安全的网络传输。</p>
</li>
<li><p><strong>反向代理和缓存</strong>：Nginx能够作为反向代理，处理来自客户端的请求并将其转发到适当的服务器，并且可以缓存这些服务器的响应以提高性能。</p>
</li>
<li><p><strong>灵活的配置</strong>：Nginx提供了灵活和强大的配置选项，使得开发者可以根据自己的需求定制Nginx服务器。</p>
</li>
<li><p><strong>高并发连接</strong>：Nginx使用事件驱动的架构，能够处理大量并发连接，这使得Nginx在处理高流量的网站时表现出高效性。</p>
</li>
</ol>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>配置虚拟机环境</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><p><code>tree</code>:树形目录</p>
<ul>
<li><code>conf</code> 配置文件<br>-<code> html</code> 静态文件</li>
<li><code>logs</code> 日志文件</li>
<li><code>sbin</code> 脚本文件 用于启动停止nginx服务</li>
</ul>
<h3 id="打开sbin目录"><a href="#打开sbin目录" class="headerlink" title="打开sbin目录"></a>打开sbin目录</h3><ul>
<li><code>./nginx -v</code>: 检查版本号</li>
<li><code>./nginx -t</code>: 测试文件</li>
<li><code>./nginx</code>: 启动Nginx（不要忘记关闭防火墙 <code>systemctl stop firewalld</code>）</li>
<li><code>./nginx -s stop</code>: 关闭Nginx服务</li>
<li><code>./nginx -s reload</code>: 重新加载文件</li>
</ul>
<p>需要在<code>etc/profile</code>中加入nginx的环境变量，就不用像前面那样麻烦配置</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li>全局块<ul>
<li>和nginx有关的全局配置</li>
</ul>
</li>
<li>events块<ul>
<li>和网络连接的有关配置</li>
</ul>
</li>
<li>http块 代理，缓存，日志记录，虚拟主机<ul>
<li>http 全局块</li>
<li>server块<ul>
<li>server全局块</li>
<li>location块</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="部署静态资源"><a href="#部署静态资源" class="headerlink" title="部署静态资源"></a>部署静态资源</h2><p>nginx 相对于tomcat 更加高效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;    <span class="comment"># 识别一个叫做html的目录</span></span><br><span class="line">        index  index.html index.htm; <span class="comment"># 默认打开index.html文件</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><blockquote>
<p>用户不需要知道目标服务器的地址，也无须再客户端做任何设定</p>
</blockquote>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><blockquote>
<p>用户知道目标服务器，通过代理服务器访问目标服务器</p>
</blockquote>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>正向代理（Forward Proxy）和反向代理（Reverse Proxy）是两种常见的代理服务器的使用方式，它们主要的区别在于代理服务器是代理客户端（用户）还是代理服务器（网站或应用）。</p>
<ol>
<li><p><strong>正向代理</strong><br>：正向代理位于客户端和原始服务器（目标服务器）之间，客户端将请求发送到代理服务器，然后代理服务器将请求转发到目标服务器，并将目标服务器的响应返回给客户端。在这种情况下，代理服务器代理的是客户端，这对于访问某些客户端无法直接访问的服务器（例如，由于地理限制或网络封锁）非常有用。正向代理还可以用于缓存，减少带宽使用，或保护客户端的隐私。</p>
</li>
<li><p><strong>反向代理</strong><br>：反向代理位于客户端和一组原始服务器之间，客户端将请求发送到代理服务器，然后代理服务器将请求转发到其中的一个或多个原始服务器，并将这些服务器的响应返回给客户端。在这种情况下，代理服务器代理的是服务器，这通常用于负载均衡，SSL终止，或者提高应用的安全性。</p>
</li>
</ol>
<p>总结一下，正向代理代理的是客户端，用户知道代理的存在，并且主动使用代理访问服务器。反向代理代理的是服务器，客户端通常不知道代理的存在，认为自己是直接与服务器通信的。</p>
<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>需要2台服务器</p>
<p>配置反向代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen 82;</span><br><span class="line">    server_name localhost;</span><br><span class="line">    location/&#123;</span><br><span class="line">        rewrite ^/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>; <span class="comment"># 对请求进行重写，把斜杠后面的内容作为参数传递给后端</span></span><br><span class="line">        proxy_pass http://192.168.138.101:8080; <span class="comment"># 反向代理设置，把请求转发到指定服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>rewrite ^/(.*)$ /$1 break;</code> 重写url，去掉前面的/，否则会报404错误</li>
</ul>
<h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul>
<li>应用集群：把同一个应用部署到多台服务器上面，组成集群，接收负载均衡器分发的请求</li>
<li>负载均衡器：把用户请求根据对应的负载均衡算法分发到应用集群中的一台服务器进行处理</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream backend &#123; <span class="comment"># 定义一组服务器</span></span><br><span class="line">        <span class="comment"># 使用轮询算法：以循环的方式询问下面服务器</span></span><br><span class="line">        <span class="comment"># weight 表示权重</span></span><br><span class="line">        server backend1.example.com weight=10;</span><br><span class="line">        server backend2.example.com weight=5;</span><br><span class="line">    &#125;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location / &#123;</span><br><span class="line">            <span class="comment"># 反向代理</span></span><br><span class="line">            proxy_pass https://backend;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>负载均衡策略是用来决定网络流量如何在多个服务器上分发的规则或算法。下面是一些常见的负载均衡策略：</p>
<ol>
<li><strong>轮询（Round Robin）</strong>：这是最简单的负载均衡策略，每个新的请求都发送到下一个服务器。如果服务器列表是A、B、C，那么第一个请求将发送到A，第二个请求发送到B，第三个请求发送到C，第四个请求发送到A，以此类推。</li>
<li><strong>最少连接（Least Connections）</strong>：在这种策略下，新的请求会发送到当前连接数最少的服务器。如果服务器A有10个活跃连接，服务器B有5个活跃连接，服务器C有7个活跃连接，那么新的请求将会发送到服务器B。</li>
<li><strong>IP Hash</strong>：这种策略使用客户端IP地址的哈希值来决定请求应发送到哪个服务器。这样，来自同一IP地址的所有请求都将发送到同一服务器，除非该服务器不可用。</li>
<li><strong>权重轮询（Weighted Round Robin）</strong>：这是轮询策略的改进版本。每个服务器都被分配了一个权重，权重大的服务器会处理更多的请求。</li>
</ol>
<ul>
<li>例如，如果服务器A的权重是3，B的权重是2，C的权重是1，那么在6个请求中，A会处理3个，B处理2个，C处理1个。</li>
</ul>
<ol start="5">
<li><strong>权重最少连接（Weighted Least Connections）</strong>：这是最少连接策略的改进版本。和权重轮询类似，每个服务器都被分配了一个权重，但新的请求会发送到连接数/权重最小的服务器。</li>
<li><strong>URL Hash</strong>：该策略将根据请求URL的哈希结果将请求分发到不同的服务器，所有请求同一URL的请求都会被路由到同一台服务器。这对于保证某些类型的数据局部性非常有用。<br>这些负载均衡策略都有各自的优点和缺点，选择哪一种策略取决于你的特定需求和应用场景。</li>
</ol>
<h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><ul>
<li>Linux: ./redis-serve</li>
</ul>
<h3 id="Linux的redis如何允许windows连接"><a href="#Linux的redis如何允许windows连接" class="headerlink" title="Linux的redis如何允许windows连接"></a>Linux的redis如何允许windows连接</h3><ul>
<li>找到conf 配置文件</li>
<li>查找bind关键字，选择后面的ip地址，把该行注释掉</li>
<li>注意防火墙问题</li>
</ul>
<hr>
<p>windows:</p>
<ul>
<li>redis-cli -h localhost -p 6379</li>
<li>auth 密码</li>
</ul>
<h2 id="普通命令"><a href="#普通命令" class="headerlink" title="普通命令"></a>普通命令</h2><blockquote>
<p>连接远程redis命令</p>
</blockquote>
<ul>
<li>.\redis-cli.exe -h 虚拟机ip -p 端口 -a redis密码</li>
<li>keys * 检查所有的key</li>
</ul>
<h2 id="数据类型-是指value的数据类型"><a href="#数据类型-是指value的数据类型" class="headerlink" title="数据类型(是指value的数据类型)"></a>数据类型(是指value的数据类型)</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ol>
<li><code>set key value</code>  设置指定key的值</li>
<li><code>get key</code>        获取值</li>
<li><code>setex key seconds value</code>   设置指定key的值，把超时时间设为second秒</li>
<li><code>setnx key value</code>      只有在key不存在时设置key值</li>
</ol>
<h3 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h3><blockquote>
<p>存储对象</p>
</blockquote>
<ul>
<li><code>hset key field value</code>  把hash表中的key字段的field值设为value</li>
<li><code>hget key field</code>         获取指定字段的值</li>
<li><code>hdel key field</code>         删除指定字段</li>
<li><code>hkeys key</code>              获取哈希表中所有字段</li>
<li><code>hvals key</code>              获取哈希表中所有的值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">localhost:6379&gt; hset 001 name xiaoming</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">localhost:6379&gt; hset 001 age 20</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line">localhost:6379&gt; hget 001 name</span><br><span class="line"><span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">localhost:6379&gt; hget 001 age</span><br><span class="line"><span class="string">&quot;20&quot;</span></span><br><span class="line">localhost:6379&gt; hkeys 001</span><br><span class="line">1) <span class="string">&quot;name&quot;</span></span><br><span class="line">2) <span class="string">&quot;age&quot;</span></span><br><span class="line">localhost:6379&gt; hvals 001</span><br><span class="line">1) <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">2) <span class="string">&quot;20&quot;</span></span><br><span class="line">localhost:6379&gt; keys *</span><br><span class="line">1) <span class="string">&quot;h1&quot;</span></span><br><span class="line">2) <span class="string">&quot;h&quot;</span></span><br><span class="line">3) <span class="string">&quot;mykey&quot;</span></span><br><span class="line">4) <span class="string">&quot;001&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><blockquote>
<p>任务队列</p>
</blockquote>
<p>字符串列表，按照插入顺序来排序。</p>
<ol>
<li><input checked="" disabled="" type="checkbox"> <code>lpush key val1 [val2]</code>   插入一个或者多个值到列表头部</li>
<li><input checked="" disabled="" type="checkbox"> <code>lrange key start end</code> 范围查询,end=-1时表示全部查询</li>
<li><input checked="" disabled="" type="checkbox"> <code>rpop key</code> 移除并且获取最后一个元素</li>
<li><input checked="" disabled="" type="checkbox"> <code>llen</code> 获取长度</li>
<li><input checked="" disabled="" type="checkbox"> <code>brpop key1 [key2] timeout</code> 如果列表没有这个元素，会阻塞，会暂停后续命令的执行，直到有元素可用或超时发生。</li>
</ol>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote>
<p>无序，不允许重复元素</p>
</blockquote>
<p>元素是string类型</p>
<ul>
<li><code>sadd myset a b c d</code>    向myset数据库里面插入a,b,c,d</li>
<li><code>smembers myset</code>        输出内容</li>
<li><code>sadd myset a</code>          插入a 不过会报错--不允许重复</li>
<li><code>sadd myset2 ab d a b</code></li>
<li><code>smembers myset2</code></li>
<li><code>sinter myset myset2</code>   交集</li>
<li><code>sunion myset myset2</code>   并集</li>
<li><code>sdiff myset myset2</code>    myset减去myset2 差集</li>
<li><code>srem myset a</code>          删除myset中的a元素</li>
</ul>
<h3 id="Zset-有序集合"><a href="#Zset-有序集合" class="headerlink" title="Zset(有序集合)"></a>Zset(有序集合)</h3><blockquote>
<p>排行榜</p>
</blockquote>
<p>没有重复元素，每个个元素都会关联到一个double类型的分数，从小到大排序</p>
<ol>
<li><code>zadd myzset 7 a 8 j 9 i 2 k</code></li>
<li><code>zrange myzset 0 -1</code>              显示所有元素不显示分数</li>
<li><code>zrange myzset 0 -1 withscores</code>   显示所有元素以及对应的分数</li>
<li><code>zincrby myzset 20 k</code>             对k元素的分数加上20</li>
<li><code>zrem myzset j</code>                   删除j元素</li>
</ol>
<h2 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h2><ul>
<li><code>ctrl + l</code>   清屏</li>
<li><code>keys *</code>     查看所有key</li>
<li><code>exists [n]</code> 检测n是否存在</li>
<li><code>type [n]</code>    检查n是什么类型</li>
<li><code>ttl  [n]</code>    检测存活时间</li>
<li><code>del [n]</code>     删除n</li>
</ul>
<h1 id="在java中操作redis"><a href="#在java中操作redis" class="headerlink" title="在java中操作redis"></a>在java中操作redis</h1><p>数据库总共有16个</p>
<ul>
<li><code>select 1</code>   切换到1号数据库</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><blockquote>
<p>注意：java连接redis时候,用户名那里直接设置为空，正常输入密码就行,这个坑摔死我啦！！！</p>
</blockquote>
<h1 id="其它疑问"><a href="#其它疑问" class="headerlink" title="其它疑问"></a>其它疑问</h1><h2 id="import-导入和-package-有以下区别："><a href="#import-导入和-package-有以下区别：" class="headerlink" title="import 导入和 package 有以下区别："></a><code>import</code> 导入和 <code>package</code> 有以下区别：</h2><ol>
<li><p>功能和作用：</p>
<ul>
<li><code>import</code> 用于引入其他包中的类、接口或静态成员，以便在当前文件中可以直接使用这些引入的项。</li>
<li><code>package</code> 用于声明当前文件所属的包名，将文件组织在不同的包中，以便更好地管理和组织代码。</li>
</ul>
</li>
<li><p>使用范围：</p>
<ul>
<li><code>import</code> 可以在文件中的任何地方使用，以引入需要的类或成员。</li>
<li><code>package</code> 声明只能在文件的顶部使用，并且只能在每个文件中声明一次，指示整个文件属于指定的包。</li>
</ul>
</li>
</ol>
<p>总结起来，<code>import</code> 用于引入其他包中的类和成员，方便在当前文件中直接使用；而 <code>package</code> 声明用于指定当前文件所属的包，有助于代码的组织和管理，避免命名冲突。</p>
<h2 id="redis常见数据结构"><a href="#redis常见数据结构" class="headerlink" title="redis常见数据结构"></a>redis常见数据结构</h2><p>Redis是一种基于内存的键值存储系统，它支持多种常见的数据结构。下面是Redis中常见的数据结构：</p>
<ol>
<li>字符串（String）：字符串是Redis中最基本的数据结构，它可以存储任意类型的文本数据，例如用户信息、计数器等。</li>
<li>哈希表（Hash）：哈希表是一个键值对集合，其中的键和值都是字符串类型。哈希表适用于存储对象的属性和值，例如存储用户信息、配置信息等。</li>
<li>列表（List）：列表是一个有序的字符串集合，可以在列表的两端进行元素的插入和删除操作。列表适用于存储按照顺序排列的数据，例如消息队列、新闻列表等。</li>
<li>集合（Set）：集合是一个无序且唯一的字符串集合，支持添加、删除和检查元素的操作。集合适用于存储不重复的元素，例如标签、关注列表等。</li>
<li>有序集合（Sorted Set）：有序集合是一个有序且唯一的字符串集合，每个元素都关联一个分数用于排序。有序集合适用于存储带有权重或分数的数据，例如排行榜、优先级队列等。</li>
</ol>
<h2 id="mysql的ACID"><a href="#mysql的ACID" class="headerlink" title="mysql的ACID"></a>mysql的ACID</h2><p>MySQL的四种特点是：</p>
<ol>
<li>原子性（Atomicity）：原子性是指数据库事务的操作是不可分割的，要么全部执行成功，要么全部失败回滚。即事务中的操作要么全部提交成功，要么全部回滚，保证数据的一致性。</li>
<li>一致性（Consistency）：一致性是指事务开始前和结束后，数据库的完整性约束没有被破坏。在事务执行过程中，数据库从一个一致状态转换到另一个一致状态，不会因为事务的执行而破坏数据的完整性。</li>
<li>隔离性（Isolation）：隔离性是指并发执行的事务之间是相互隔离的，每个事务在执行过程中不受其他事务的干扰。隔离性保证了事务在执行过程中的数据是独立的，不会相互影响。</li>
<li>持久性（Durability）：持久性是指事务一旦提交成功，其对数据库的修改就是永久性的，即使发生系统崩溃或重启，数据也能够被恢复到事务提交后的状态。持久性保证了数据的持久存储，防止数据的丢失。</li>
</ol>
<p>这四种特点（原子性、一致性、隔离性、持久性）被称为ACID（Atomicity, Consistency, Isolation,<br>Durability）特性，它们是关系型数据库管理系统（RDBMS）中事务处理的核心原则。</p>
<h2 id="MySQL的隔离机制"><a href="#MySQL的隔离机制" class="headerlink" title="MySQL的隔离机制"></a>MySQL的隔离机制</h2><p>MySQL的隔离机制是指数据库管理系统在多个并发事务同时执行时，为了保证数据的一致性、隔离性和并发性，采取的一系列策略和规则。</p>
<p>MySQL提供了四种标准的隔离级别，每个隔离级别提供不同的并发控制机制和事务隔离程度：</p>
<ol>
<li><p>读未提交（Read Uncommitted）：最低的隔离级别，事务可以读取未提交的数据。该级别存在脏读（Dirty Read）的问题，即读取到其他事务尚未提交的数据。</p>
</li>
<li><p>读已提交（Read Committed）：保证一个事务只能读取到已经提交的数据。解决了脏读的问题，但可能出现不可重复读（Non-repeatable<br>Read）的问题，即同一个事务中多次读取同一数据可能得到不同的结果。</p>
</li>
<li><p>可重复读（Repeatable Read）：保证在同一事务中多次读取同一数据时，得到的结果是一致的。解决了不可重复读的问题，但可能出现幻读（Phantom<br>Read）的问题，即同一个事务中多次查询同一范围的数据结果集不一致。</p>
</li>
<li><p>串行化（Serializable）：最高的隔离级别，通过强制事务串行执行来避免并发问题。保证了最高的数据隔离性，但可能导致并发性能下降。</p>
</li>
</ol>
<p>在实际应用中，可以根据具体的业务需求和并发访问情况选择合适的隔离级别。一般来说，可重复读是MySQL的默认隔离级别，可以满足大多数应用的需求。如果对数据的一致性要求更高，可以选择串行化隔离级别，但需要注意性能可能会受到影响。</p>
<h1 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h1><h2 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h2><p>后端部署在Tomcat服务器中<br>前端部署在Nginx服务器中</p>
<h2 id="yapi部署"><a href="#yapi部署" class="headerlink" title="yapi部署"></a>yapi部署</h2><p><span style="color:red">mongod还是没有配置好，所以yapi还是无法使用</span></p>
<h2 id="swagger部署"><a href="#swagger部署" class="headerlink" title="swagger部署"></a>swagger部署</h2><ul>
<li>@Api 注解用于类上，说明该类的作用 使用tags属性说明该类的作用</li>
<li>@ApiOperation 注解用于方法，说明方法的作用</li>
<li>@ApiParam 注解用于参数上，说明参数的作用</li>
<li>@ApiModel 注解用于类上，表示对类进行说明，用于参数用实体类接收</li>
<li>@ApiModelProperty 注解用于方法，字段，表示对model属性的说明或者数据操作更改</li>
<li>@ApiImplicitParam 注解用于方法，表示单独的请求参数 属性有：name(参数名)、value(参数说明)、dataType(数据类型)、paramType(<br>参数类型)、example(举例说明)、required(是否必填)、defaultValue(默认值)</li>
<li>@ApiImplicitParams 注解用于方法，包含多个 @ApiImplicitParam</li>
</ul>
<h1 id="mysql-tomcat-jdk-lrzsz"><a href="#mysql-tomcat-jdk-lrzsz" class="headerlink" title="mysql tomcat jdk lrzsz"></a>mysql tomcat jdk lrzsz</h1><h2 id="什么是jdk"><a href="#什么是jdk" class="headerlink" title="什么是jdk"></a>什么是jdk</h2><p>JDK（Java Development Kit）是Java开发工具包的缩写，它是一组用于开发和编译Java应用程序的软件工具和库的集合。</p>
<p>JDK包括以下主要组件：</p>
<ol>
<li><p>编译器（javac）：JDK提供了Java编译器，用于将Java源代码（以.java文件形式）编译成字节码文件（以.class文件形式）。</p>
</li>
<li><p>Java运行时环境（JRE）：JDK包含JRE，它是Java程序的运行时环境。JRE包括Java虚拟机（JVM）和Java标准类库，用于执行和运行Java应用程序。</p>
</li>
<li><p>开发工具：JDK提供了丰富的开发工具，如调试器（jdb）、应用程序打包工具（jar）、文档生成工具（javadoc）等，用于简化和加速Java应用程序的开发和部署过程。</p>
</li>
<li><p>类库：JDK包含Java标准类库，它是一组提供常用功能和API的Java类和接口的集合。这些类库包括用于字符串处理、输入输出操作、网络通信、图形界面开发、多线程编程、数据库连接等功能。</p>
</li>
</ol>
<p>JDK是Java开发的基础和核心，用于创建、编译和运行Java应用程序。它提供了开发者所需的工具和资源，使开发人员能够在各种平台上构建和部署Java应用程序。</p>
<p>请注意，JDK与JRE是不同的。JRE只包含运行Java应用程序所需的组件，而JDK除了包含JRE之外，还包含用于Java应用程序开发的编译器和开发工具。</p>
<h2 id="什么是tomcat"><a href="#什么是tomcat" class="headerlink" title="什么是tomcat"></a>什么是tomcat</h2><p>查看服务是否启动</p>
<ol>
<li>查看日志 查看 logs 目录下面的 catalina.out 日志</li>
<li>查看进程  <code>ps -ef | grep tomcat</code></li>
</ol>
<h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><blockquote>
<p>对服务启动,暂停<br><code>不要求会背</code></p>
</blockquote>
<ul>
<li>查看防火墙：<code>systemctl status firewalld</code></li>
<li>暂时关闭防火墙：<code>systemctl stop firewalld</code></li>
<li>永久关闭防火墙：<code>systemctl disable firewalld</code></li>
<li>开启防火墙：<code>systemctl start firewalld</code></li>
<li>重新加载防火墙：<code>firewall-cmd --reload</code></li>
<li>开放指定端口：<code>firewall-cmd --zone=public --add-port=8080/tcp --permanent</code></li>
<li>关闭指定端口：<code>firewall-cmd --zone=public --remove-port=8080/tcp --permanent</code></li>
<li>查看开放端口：<code>firewall-cmd --zone=public --list-ports</code></li>
</ul>
<blockquote>
<p>结束进程</p>
</blockquote>
<ul>
<li>kill -9 进程ID</li>
<li>-9 表示强制结束</li>
</ul>
<h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><ul>
<li>删除mariadb：<code>rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64</code></li>
<li>配置外部服务器可以访问：<code>vi /etc/my.cnf</code>，注释掉 <code>bind-address=</code></li>
<li>重启mysql服务：<code>systemctl restart mysqld</code></li>
<li>登录mysql：<code>mysql -uroot -p</code></li>
<li>修改密码：<code>set password for root@localhost = password(&#39;123456&#39;);</code></li>
<li>创建远程登录用户：<code>grant all privileges on *.* to &#39;root&#39;@&#39;%&#39; identified by &#39;123456&#39;;</code></li>
<li>刷新权限：<code>flush privileges;</code></li>
<li>退出mysql：<code>exit;</code></li>
<li>重启mysql服务：<code>systemctl restart mysqld</code></li>
<li>查看mysql状态：<code>systemctl status mysqld</code></li>
<li>查看mysql版本：<code>mysql -V</code></li>
<li>查看mysql进程：<code>ps -ef|grep mysql</code></li>
<li>查看mysql端口：<code>netstat -anp|grep mysql</code></li>
<li>查看mysql日志：<code>vi /var/log/mysqld.log</code></li>
</ul>
<h2 id="lrzsz"><a href="#lrzsz" class="headerlink" title="lrzsz"></a>lrzsz</h2><ul>
<li>yum install lrzsz</li>
<li>rz 上传</li>
<li>sz 下载</li>
</ul>
<h2 id="代码手动打包"><a href="#代码手动打包" class="headerlink" title="代码手动打包"></a>代码手动打包</h2><ul>
<li>IDEA中点击package,就可以把项目打包成jar包了</li>
<li>再使用re命令把jar包上传到服务器上</li>
<li>java -jar xxx.jar 这个命令的作用是：运行jar包</li>
</ul>
<h2 id="代码自动打包"><a href="#代码自动打包" class="headerlink" title="代码自动打包"></a>代码自动打包</h2><ul>
<li>安装maven</li>
<li>配置环境变量</li>
</ul>
<p>变量配置：在根目录：etc/profile</p>
<ul>
<li>JAVA_HOME=/usr/local/jdk1.8.0_171</li>
<li>PATH=$JAVA_HOME/BIN:$PATH</li>
<li>export MAVEN_HOME=/usr/local/apache-maven-3.5.4</li>
<li>export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH</li>
</ul>
<h2 id="对于文件的权限"><a href="#对于文件的权限" class="headerlink" title="对于文件的权限"></a>对于文件的权限</h2><p>执行权限的标识符是：x</p>
<ul>
<li>r (读权限)：数值为 4</li>
<li>w (写权限)：数值为 2</li>
<li>x (执行权限)：数值为 1</li>
</ul>
<ul>
<li>-rw-r--r--. 1 root root 769 4月 4 2022 bootStart.sh</li>
<li>文件所有者 用户组 其他用户</li>
</ul>
<p>使用八进制数进行授权</p>
<blockquote>
<p>chmod 777 xx.sh</p>
</blockquote>
<h1 id="缓存优化"><a href="#缓存优化" class="headerlink" title="缓存优化"></a>缓存优化</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul>
<li>配置yml文件中的redis</li>
<li>maven导入redis</li>
</ul>
<h2 id="缓存菜品数据"><a href="#缓存菜品数据" class="headerlink" title="缓存菜品数据"></a>缓存菜品数据</h2><ul>
<li>先从redis获取数据，如果有直接返回;没有的话从数据库中找，把数据放入到redis中。</li>
<li>更新菜品数据时(或者数据库中的数据变化时)，需要清理缓存数据。</li>
</ul>
<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><ol>
<li><p>在启动类中添加 <code>@EnableCaching</code> 注解，以开启缓存注解功能。这样可以在应用程序中使用缓存相关的注解。</p>
</li>
<li><p><code>@Cacheable</code> 会在方法执行前先检查缓存中是否有数据，如果有，则直接返回缓存中的数据；如果没有，则执行方法，并将方法返回值放入缓存中。</p>
</li>
<li><p><code>@CachePut</code> 可以将方法的返回值放入缓存中。该注解通常用于更新缓存数据的场景。</p>
</li>
<li><p><code>@CacheEvict</code> 可以从缓存中删除一条或多条数据。可以在需要删除缓存数据的方法上添加该注解，并指定要删除的缓存数据的键。</p>
</li>
</ol>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p>在Spring缓存注解中，<code>key</code>是一个SpEL（Spring表达式语言）表达式，你可以使用<code>#root</code>和<code>#result</code>在SpEL表达式中获取上下文数据。</p>
<ul>
<li><code>#root</code>：这是根对象，可以通过它访问到方法的各种元信息，如方法的名称（<code>#root.methodName</code>），方法的参数数组（<code>#root.args</code>）等。</li>
<li><code>#result</code>：这是方法的返回结果，只能在<code>@CachePut</code>和<code>@CacheEvict</code>（当<code>beforeInvocation</code>设为<code>false</code>）注解中使用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Cacheable(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#root.methodName&quot;</span>)</span><br><span class="line">public Book findBookByIsbn(String isbn) &#123;</span><br><span class="line">    <span class="built_in">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，缓存的键将会是<code>findBookByIsbn</code>，也就是方法的名称。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@CachePut(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#isbn&quot;</span>, condition = <span class="string">&quot;#result!=null&quot;</span>)</span><br><span class="line">public Book updateBook(String isbn, Book updatedBook) &#123;</span><br><span class="line">    <span class="built_in">return</span> updatedBook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h3><p><code>@CachePut</code>是Spring框架中的一个注解，它可以用来更新缓存数据。该注解用在方法上，能确保方法被执行后，其结果会被存储在缓存中。<br>如果缓存中已存在相应的数据，那么<code>@CachePut</code>会使用新的结果更新缓存。</p>
<blockquote>
<p>key 代表的是传递进来的对象，返回值作为缓存的value值</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@CachePut(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#book.id&quot;</span>)</span><br><span class="line">public Book updateBook(Book book) &#123;</span><br><span class="line">    <span class="built_in">return</span> updatedBook;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个示例中，<code>@CachePut</code>注解被用在<code>updateBook</code><br>方法上。当这个方法被调用时，它首先会更新数据库中的一本书的信息，然后将更新后的<code>Book</code>对象作为返回值。<br><code>@CachePut</code>注解确保了这个更新后的<code>Book</code>对象会被存储在名为"books"的缓存中。缓存中的键是<code>Book</code>对象的<code>id</code><br>属性,值则是返回值<code>updatedBook</code>。</p>
<p>使用<code>@CachePut</code>可以保证缓存中的数据始终与数据库中的数据保持一致。它在以下情况下非常有用：</p>
<ul>
<li>当你更改了数据库中的一条数据，并且想要立即在缓存中反映这个更改时。</li>
<li>当你想在执行某个方法后，总是将结果存储在缓存中时。</li>
</ul>
<h3 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h3><p><code>@CacheEvict</code> 是 Spring 框架中的一个注解，它的主要作用是在指定的缓存中删除条目，以保证缓存中的数据与数据库中的数据保持一致。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@CacheEvict(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#isbn&quot;</span>)</span><br><span class="line">public void deleteBookByIsbn(String isbn) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>@CacheEvict</code> 注解被用在 <code>deleteBookByIsbn</code><br>方法上。当这个方法被调用的时候，它会删除数据库中的一条记录，同时也会从 "books" 这个缓存中删除相应的缓存项。</p>
<p>有些时候，你可能想要一次性清空整个缓存，这时候你可以使用 <code>@CacheEvict</code> 注解的 <code>allEntries</code> 属性：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@CacheEvict(value = <span class="string">&quot;books&quot;</span>, allEntries = <span class="literal">true</span>)</span><br><span class="line">public void <span class="function"><span class="title">reloadAllBooks</span></span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>reloadAllBooks</code> 方法会清空 "books" 这个缓存中的所有缓存项。<br>需要注意的是，<code>@CacheEvict</code> 只会在方法<code>成功执行后</code>删除缓存。如果方法执行过程中抛出了异常，缓存则不会被清空或删除。</p>
<h3 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h3><p><code>@Cacheable</code> 是 Spring 缓存注解中的一个，它用于表示某个方法的结果是可以缓存的。<br>当一个使用了 <code>@Cacheable</code> 注解的方法被调用时，Spring 会首先检查缓存中是否已经存在该方法的返回结果，如果存在，则直接返回缓存中的结果，否则，执行方法并将结果存入缓存中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Cacheable(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#isbn&quot;</span>)</span><br><span class="line">public Book findBookByIsbn(String isbn) &#123;</span><br><span class="line">    <span class="built_in">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>@Cacheable</code> 的主要属性有：</p>
<ul>
<li><code>value</code>：用于指定缓存的名称。</li>
<li><code>key</code>：用于指定缓存的键,可用于从方法的参数或其他可用数据中生成键。</li>
<li><code>condition</code>：用于指定一个 SpEL 表达式，这个表达式用于决定是否应该缓存方法的结果。只有当表达式的值为 <code>true</code> 时，才会缓存结果。</li>
</ul>
<p>需要注意的是，<code>@Cacheable</code> 只在方法第一次调用时执行实际的方法体，并将结果存入缓存，后续的调用直接从缓存中获取结果，不再执行实际的方法体。<br>如果方法的结果会因为外部因素（如数据库中的数据改变了）而改变，那么，这种改变不会反映到缓存的结果中。</p>
<p>当然，下面是一个使用 <code>@Cacheable</code> 注解的例子，其中包含了 <code>condition</code> 属性。<code>condition</code> 属性允许我们根据特定条件来决定是否缓存方法的结果。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Cacheable(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#isbn&quot;</span>, condition = <span class="string">&quot;#isbn.length() == 13&quot;</span>)</span><br><span class="line">public Book findBookByIsbn(String isbn) &#123;</span><br><span class="line">    <span class="built_in">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@Cacheable(value = <span class="string">&quot;books&quot;</span>, key = <span class="string">&quot;#isbn&quot;</span>, condition = <span class="string">&quot;#result == null&quot;</span>)</span><br><span class="line">public Book findBookByIsbn(String isbn) &#123;</span><br><span class="line">    <span class="built_in">return</span> book;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，<code>unless</code> 和 <code>condition</code> 两个属性有明显的使用场景差异：</p>
<ul>
<li><code>condition</code> 属性的 SpEL 表达式是在方法执行前评估的，适用于基于方法参数决定是否应用缓存的场景。</li>
<li><code>unless</code> 属性的 SpEL 表达式是在方法执行后评估的，适用于基于方法返回结果决定是否应用缓存的场景。</li>
</ul>
]]></content>
      <categories>
        <category>瑞吉外卖</category>
      </categories>
      <tags>
        <tag>瑞吉外卖笔记汇总</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-基础</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="y总的算法基础模板"><a href="#y总的算法基础模板" class="headerlink" title="y总的算法基础模板"></a>y总的算法基础模板</h2><blockquote>
<p>这里是y总的算法基础模板</p>
</blockquote>
<h2 id="快速排序算法模板-——-模板题-AcWing-785-快速排序"><a href="#快速排序算法模板-——-模板题-AcWing-785-快速排序" class="headerlink" title="快速排序算法模板 —— 模板题 AcWing 785. 快速排序"></a>快速排序算法模板 —— 模板题 AcWing 785. 快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序算法模板-——-模板题-AcWing-787-归并排序"><a href="#归并排序算法模板-——-模板题-AcWing-787-归并排序" class="headerlink" title="归并排序算法模板 —— 模板题 AcWing 787. 归并排序"></a>归并排序算法模板 —— 模板题 AcWing 787. 归并排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">    <span class="built_in">merge_sort</span>(q, mid + <span class="number">1</span>, r);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="整数二分算法模板-——-模板题-AcWing-789-数的范围"><a href="#整数二分算法模板-——-模板题-AcWing-789-数的范围" class="headerlink" title="整数二分算法模板 —— 模板题 AcWing 789. 数的范围"></a>整数二分算法模板 —— 模板题 AcWing 789. 数的范围</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">``````</span><br><span class="line"></span><br><span class="line">## 浮点数二分算法模板 —— 模板题 AcWing <span class="number">790.</span> 数的三次方根</span><br><span class="line">```c++</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="type">double</span> l, <span class="type">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">check</span>(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line">``````</span><br><span class="line"></span><br><span class="line">## 高精度加法 —— 模板题 AcWing <span class="number">791.</span> 高精度加法</span><br><span class="line">```c++</span><br><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>()) <span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line">``````</span><br><span class="line"></span><br><span class="line">## 高精度减法 —— 模板题 AcWing <span class="number">792.</span> 高精度减法</span><br><span class="line">```c++</span><br><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高精度乘低精度-——-模板题-AcWing-793-高精度乘法"><a href="#高精度乘低精度-——-模板题-AcWing-793-高精度乘法" class="headerlink" title="高精度乘低精度 —— 模板题 AcWing 793. 高精度乘法"></a>高精度乘低精度 —— 模板题 AcWing 793. 高精度乘法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高精度除以低精度-——-模板题-AcWing-794-高精度除法"><a href="#高精度除以低精度-——-模板题-AcWing-794-高精度除法" class="headerlink" title="高精度除以低精度 —— 模板题 AcWing 794. 高精度除法"></a>高精度除以低精度 —— 模板题 AcWing 794. 高精度除法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="一维前缀和-——-模板题-AcWing-795-前缀和"><a href="#一维前缀和-——-模板题-AcWing-795-前缀和" class="headerlink" title="一维前缀和 —— 模板题 AcWing 795. 前缀和"></a>一维前缀和 —— 模板题 AcWing 795. 前缀和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">S[i] = a[<span class="number">1</span>] + a[<span class="number">2</span>] + ... a[i]</span><br><span class="line">a[l] + ... + a[r] = S[r] - S[l - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h2 id="二维前缀和-——-模板题-AcWing-796-子矩阵的和"><a href="#二维前缀和-——-模板题-AcWing-796-子矩阵的和" class="headerlink" title="二维前缀和 —— 模板题 AcWing 796. 子矩阵的和"></a>二维前缀和 —— 模板题 AcWing 796. 子矩阵的和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">S[i, j] = 第i行j列格子左上部分所有元素的和</span><br><span class="line">以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：</span><br><span class="line">S[x2, y2] - S[x1 - <span class="number">1</span>, y2] - S[x2, y1 - <span class="number">1</span>] + S[x1 - <span class="number">1</span>, y1 - <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h2 id="一维差分-——-模板题-AcWing-797-差分"><a href="#一维差分-——-模板题-AcWing-797-差分" class="headerlink" title="一维差分 —— 模板题 AcWing 797. 差分"></a>一维差分 —— 模板题 AcWing 797. 差分</h2><blockquote>
<p>给区间[l, r]中的每个数加上c：B[l] +&#x3D; c, B[r + 1] -&#x3D; c</p>
</blockquote>
<h2 id="二维差分-——-模板题-AcWing-798-差分矩阵"><a href="#二维差分-——-模板题-AcWing-798-差分矩阵" class="headerlink" title="二维差分 —— 模板题 AcWing 798. 差分矩阵"></a>二维差分 —— 模板题 AcWing 798. 差分矩阵</h2><blockquote>
<p>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] +&#x3D; c, S[x2 + 1, y1] -&#x3D; c, S[x1, y2 + 1] -&#x3D; c, S[x2 + 1, y2 + 1] +&#x3D; c</p>
</blockquote>
<h2 id="位运算-——-模板题-AcWing-801-二进制中1的个数"><a href="#位运算-——-模板题-AcWing-801-二进制中1的个数" class="headerlink" title="位运算 —— 模板题 AcWing 801. 二进制中1的个数"></a>位运算 —— 模板题 AcWing 801. 二进制中1的个数</h2><blockquote>
<p>求n的第k位数字: n &gt;&gt; k &amp; 1<br>返回n的最后一位1：lowbit(n) &#x3D; n &amp; -n</p>
</blockquote>
<h2 id="双指针算法-——-模板题-AcWIng-799-最长连续不重复子序列-AcWing-800-数组元素的目标和"><a href="#双指针算法-——-模板题-AcWIng-799-最长连续不重复子序列-AcWing-800-数组元素的目标和" class="headerlink" title="双指针算法 —— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和"></a>双指针算法 —— 模板题 AcWIng 799. 最长连续不重复子序列, AcWing 800. 数组元素的目标和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &lt; i &amp;&amp; <span class="built_in">check</span>(i, j)) j ++ ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 具体问题的逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常见问题分类：<br>    (1) 对于一个序列，用两个指针维护一段区间<br>    (2) 对于两个序列，维护某种次序，比如归并排序中合并两个有序序列的操作</p>
<h2 id="离散化-——-模板题-AcWing-802-区间和"><a href="#离散化-——-模板题-AcWing-802-区间和" class="headerlink" title="离散化 —— 模板题 AcWing 802. 区间和"></a>离散化 —— 模板题 AcWing 802. 区间和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; alls; <span class="comment">// 存储所有待离散化的值</span></span><br><span class="line"><span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()); <span class="comment">// 将所有值排序</span></span><br><span class="line">alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());   <span class="comment">// 去掉重复元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二分求出x对应的离散化的值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> <span class="comment">// 找到第一个大于等于x的位置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>; <span class="comment">// 映射到1, 2, ...n</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间合并-——-模板题-AcWing-803-区间合并"><a href="#区间合并-——-模板题-AcWing-803-区间合并" class="headerlink" title="区间合并 —— 模板题 AcWing 803. 区间合并"></a>区间合并 —— 模板题 AcWing 803. 区间合并</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将所有存在交集的区间合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> seg : segs)</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="单链表-——-模板题-AcWing-826-单链表"><a href="#单链表-——-模板题-AcWing-826-单链表" class="headerlink" title="单链表 —— 模板题 AcWing 826. 单链表"></a>单链表 —— 模板题 AcWing 826. 单链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在链表头插入一个数a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = a, ne[idx] = head, head = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将头结点删除，需要保证头结点存在</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    head = ne[head];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双链表-——-模板题-AcWing-827-双链表"><a href="#双链表-——-模板题-AcWing-827-双链表" class="headerlink" title="双链表 —— 模板题 AcWing 827. 双链表"></a>双链表 —— 模板题 AcWing 827. 双链表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e[]表示节点的值，l[]表示节点的左指针，r[]表示节点的右指针，idx表示当前用到了哪个节点</span></span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//0是左端点，1是右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在节点a的右边插入一个数x</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = a, r[idx] = r[a];</span><br><span class="line">    l[r[a]] = idx, r[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除节点a</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    l[r[a]] = l[a];</span><br><span class="line">    r[l[a]] = r[a];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="栈-——-模板题-AcWing-828-模拟栈"><a href="#栈-——-模板题-AcWing-828-模拟栈" class="headerlink" title="栈 —— 模板题 AcWing 828. 模拟栈"></a>栈 —— 模板题 AcWing 828. 模拟栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tt表示栈顶</span></span><br><span class="line"><span class="type">int</span> stk[N], tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向栈顶插入一个数</span></span><br><span class="line">stk[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从栈顶弹出一个数</span></span><br><span class="line">tt -- ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈顶的值</span></span><br><span class="line">stk[tt];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="keyword">if</span> (tt &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="队列-——-模板题-AcWing-829-模拟队列"><a href="#队列-——-模板题-AcWing-829-模拟队列" class="headerlink" title="队列 —— 模板题 AcWing 829. 模拟队列"></a>队列 —— 模板题 AcWing 829. 模拟队列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 普通队列：</span><br><span class="line"><span class="comment">// hh 表示队头，tt表示队尾</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[ ++ tt] = x;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh &lt;= tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span> 循环队列</span><br><span class="line"><span class="comment">// hh 表示队头，tt表示队尾的后一个位置</span></span><br><span class="line"><span class="type">int</span> q[N], hh = <span class="number">0</span>, tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向队尾插入一个数</span></span><br><span class="line">q[tt ++ ] = x;</span><br><span class="line"><span class="keyword">if</span> (tt == N) tt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从队头弹出一个数</span></span><br><span class="line">hh ++ ;</span><br><span class="line"><span class="keyword">if</span> (hh == N) hh = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 队头的值</span></span><br><span class="line">q[hh];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断队列是否为空</span></span><br><span class="line"><span class="keyword">if</span> (hh != tt)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调栈-——-模板题-AcWing-830-单调栈"><a href="#单调栈-——-模板题-AcWing-830-单调栈" class="headerlink" title="单调栈 —— 模板题 AcWing 830. 单调栈"></a>单调栈 —— 模板题 AcWing 830. 单调栈</h2><blockquote>
<p>常见模型：找出每个数左边离它最近的比它大&#x2F;小的数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (tt &amp;&amp; <span class="built_in">check</span>(stk[tt], i)) tt -- ;</span><br><span class="line">    stk[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="单调队列-——-模板题-AcWing-154-滑动窗口"><a href="#单调队列-——-模板题-AcWing-154-滑动窗口" class="headerlink" title="单调队列 —— 模板题 AcWing 154. 滑动窗口"></a>单调队列 —— 模板题 AcWing 154. 滑动窗口</h2><blockquote>
<p>常见模型：找出滑动窗口中的最大值&#x2F;最小值</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check_out</span>(q[hh])) hh ++ ;  <span class="comment">// 判断队头是否滑出窗口</span></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; <span class="built_in">check</span>(q[tt], i)) tt -- ;</span><br><span class="line">    q[ ++ tt] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KMP-——-模板题-AcWing-831-KMP字符串"><a href="#KMP-——-模板题-AcWing-831-KMP字符串" class="headerlink" title="KMP —— 模板题 AcWing 831. KMP字符串"></a>KMP —— 模板题 AcWing 831. KMP字符串</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// s[]是长文本，p[]是模式串，n是s的长度，m是p的长度</span></span><br><span class="line">求模式串的Next数组：</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; p[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (p[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    ne[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; s[i] != p[j + <span class="number">1</span>]) j = ne[j];</span><br><span class="line">    <span class="keyword">if</span> (s[i] == p[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    <span class="keyword">if</span> (j == m)</span><br><span class="line">    &#123;</span><br><span class="line">        j = ne[j];</span><br><span class="line">        <span class="comment">// 匹配成功后的逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Trie树-——-模板题-AcWing-835-Trie字符串统计"><a href="#Trie树-——-模板题-AcWing-835-Trie字符串统计" class="headerlink" title="Trie树 —— 模板题 AcWing 835. Trie字符串统计"></a>Trie树 —— 模板题 AcWing 835. Trie字符串统计</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> son[N][<span class="number">26</span>], cnt[N], idx;</span><br><span class="line"><span class="comment">// 0号点既是根节点，又是空节点</span></span><br><span class="line"><span class="comment">// son[][]存储树中每个节点的子节点</span></span><br><span class="line"><span class="comment">// cnt[]存储以每个节点结尾的单词数量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入一个字符串</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) son[p][u] = ++ idx;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    cnt[p] ++ ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询字符串出现的次数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = str[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!son[p][u]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        p = son[p][u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt[p];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="并查集-——-模板题-AcWing-836-合并集合-AcWing-837-连通块中点的数量"><a href="#并查集-——-模板题-AcWing-836-合并集合-AcWing-837-连通块中点的数量" class="headerlink" title="并查集 —— 模板题 AcWing 836. 合并集合, AcWing 837. 连通块中点的数量"></a>并查集 —— 模板题 AcWing 836. 合并集合, AcWing 837. 连通块中点的数量</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>)朴素并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N]; <span class="comment">//存储每个点的祖宗节点</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)维护size的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], size[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        size[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    size[<span class="built_in">find</span>(b)] += size[<span class="built_in">find</span>(a)];</span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>)维护到祖宗节点距离的并查集：</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> p[N], d[N];</span><br><span class="line">    <span class="comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回x的祖宗节点</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p[x] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = <span class="built_in">find</span>(p[x]);</span><br><span class="line">            d[x] += d[p[x]];</span><br><span class="line">            p[x] = u;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p[x];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，假定节点编号是1~n</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        p[i] = i;</span><br><span class="line">        d[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并a和b所在的两个集合：</span></span><br><span class="line">    p[<span class="built_in">find</span>(a)] = <span class="built_in">find</span>(b);</span><br><span class="line">    d[<span class="built_in">find</span>(a)] = distance; <span class="comment">// 根据具体问题，初始化find(a)的偏移量</span></span><br></pre></td></tr></table></figure>




<h2 id="堆-——-模板题-AcWing-838-堆排序-AcWing-839-模拟堆"><a href="#堆-——-模板题-AcWing-838-堆排序-AcWing-839-模拟堆" class="headerlink" title="堆 —— 模板题 AcWing 838. 堆排序, AcWing 839. 模拟堆"></a>堆 —— 模板题 AcWing 838. 堆排序, AcWing 839. 模拟堆</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span></span><br><span class="line"><span class="comment">// ph[k]存储第k个插入的点在堆中的位置</span></span><br><span class="line"><span class="comment">// hp[k]存储堆中下标是k的点是第几个插入的</span></span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个点，及其映射关系</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heap_swap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">swap</span>(ph[hp[a]],ph[hp[b]]);</span><br><span class="line">    <span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">    <span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = u;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t]) t = u * <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= size &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t]) t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (u != t)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, t);</span><br><span class="line">        <span class="built_in">down</span>(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="number">2</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">heap_swap</span>(u, u / <span class="number">2</span>);</span><br><span class="line">        u &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// O(n)建堆</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n / <span class="number">2</span>; i; i -- ) <span class="built_in">down</span>(i);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="一般哈希-——-模板题-AcWing-840-模拟散列表"><a href="#一般哈希-——-模板题-AcWing-840-模拟散列表" class="headerlink" title="一般哈希 —— 模板题 AcWing 840. 模拟散列表"></a>一般哈希 —— 模板题 AcWing 840. 模拟散列表</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) 拉链法</span><br><span class="line">    <span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 向哈希表中插入一个数</span></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        e[idx] = x;</span><br><span class="line">        ne[idx] = h[k];</span><br><span class="line">        h[k] = idx ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在哈希表中查询某个数是否存在</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[k]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">            <span class="keyword">if</span> (e[i] == x)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 开放寻址法</span><br><span class="line">    <span class="type">int</span> h[N];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果x在哈希表中，返回x的下标；如果x不在哈希表中，返回x应该插入的位置</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> t = (x % N + N) % N;</span><br><span class="line">        <span class="keyword">while</span> (h[t] != null &amp;&amp; h[t] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            t ++ ;</span><br><span class="line">            <span class="keyword">if</span> (t == N) t = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h2 id="字符串哈希-——-模板题-AcWing-841-字符串哈希"><a href="#字符串哈希-——-模板题-AcWing-841-字符串哈希" class="headerlink" title="字符串哈希 —— 模板题 AcWing 841. 字符串哈希"></a>字符串哈希 —— 模板题 AcWing 841. 字符串哈希</h2><blockquote>
<p>核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ULL;</span><br><span class="line">ULL h[N], p[N]; <span class="comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    h[i] = h[i - <span class="number">1</span>] * P + str[i];</span><br><span class="line">    p[i] = p[i - <span class="number">1</span>] * P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算子串 str[l ~ r] 的哈希值</span></span><br><span class="line"><span class="function">ULL <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




<h1 id="C-STL简介"><a href="#C-STL简介" class="headerlink" title="C++ STL简介"></a>C++ STL简介</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector, 变长数组，倍增的思想</span><br><span class="line">    <span class="built_in">size</span>()  返回元素个数</span><br><span class="line">    <span class="built_in">empty</span>()  返回是否为空</span><br><span class="line">    <span class="built_in">clear</span>()  清空</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br><span class="line">    支持比较运算，按字典序</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;</span><br><span class="line">    first, 第一个元素</span><br><span class="line">    second, 第二个元素</span><br><span class="line">    支持比较运算，以first为第一关键字，以second为第二关键字（字典序）</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string，字符串</span><br><span class="line">    <span class="built_in">size</span>()/<span class="built_in">length</span>()  返回字符串长度</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">substr</span>(起始下标，(子串长度))  返回子串</span><br><span class="line">    <span class="built_in">c_str</span>()  返回字符串所在字符数组的起始地址</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue, 队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向队尾插入一个元素</span><br><span class="line">    <span class="built_in">front</span>()  返回队头元素</span><br><span class="line">    <span class="built_in">back</span>()  返回队尾元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出队头元素</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">priority_queue, 优先队列，默认是大根堆</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回堆顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出堆顶元素</span><br><span class="line">    定义成小根堆的方式：priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">stack, 栈</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">push</span>()  向栈顶插入一个元素</span><br><span class="line">    <span class="built_in">top</span>()  返回栈顶元素</span><br><span class="line">    <span class="built_in">pop</span>()  弹出栈顶元素</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">deque, 双端队列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">front</span>()/<span class="built_in">back</span>()</span><br><span class="line">    <span class="built_in">push_back</span>()/<span class="built_in">pop_back</span>()</span><br><span class="line">    <span class="built_in">push_front</span>()/<span class="built_in">pop_front</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    []</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set, map, multiset, multimap, 基于平衡二叉树（红黑树），动态维护有序序列</span><br><span class="line">    <span class="built_in">size</span>()</span><br><span class="line">    <span class="built_in">empty</span>()</span><br><span class="line">    <span class="built_in">clear</span>()</span><br><span class="line">    <span class="built_in">begin</span>()/<span class="built_in">end</span>()</span><br><span class="line">    ++, -- 返回前驱和后继，时间复杂度 <span class="built_in">O</span>(logn)</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">set/<span class="function">multiset</span></span><br><span class="line"><span class="function">    <span class="title">insert</span><span class="params">()</span>  插入一个数</span></span><br><span class="line"><span class="function">    <span class="title">find</span><span class="params">()</span>  查找一个数</span></span><br><span class="line"><span class="function">    <span class="title">count</span><span class="params">()</span>  返回某一个数的个数</span></span><br><span class="line"><span class="function">    <span class="title">erase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="params">(<span class="number">1</span>)</span> 输入是一个数x，删除所有x   <span class="title">O</span><span class="params">(k + logn)</span></span></span><br><span class="line"><span class="function">        <span class="params">(<span class="number">2</span>)</span> 输入一个迭代器，删除这个迭代器</span></span><br><span class="line"><span class="function">    <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">lower_bound</span><span class="params">(x)</span>  返回大于等于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">        <span class="title">upper_bound</span><span class="params">(x)</span>  返回大于x的最小的数的迭代器</span></span><br><span class="line"><span class="function">map/multimap</span></span><br><span class="line"><span class="function">    <span class="title">insert</span><span class="params">()</span>  插入的数是一个pair</span></span><br><span class="line"><span class="function">    <span class="title">erase</span><span class="params">()</span>  输入的参数是pair或者迭代器</span></span><br><span class="line"><span class="function">    <span class="title">find</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    []  注意multimap不支持此操作。 时间复杂度是 <span class="title">O</span><span class="params">(logn)</span></span></span><br><span class="line"><span class="function">    <span class="title">lower_bound</span><span class="params">()</span>/<span class="title">upper_bound</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">unordered_set, unordered_map, unordered_multiset, unordered_multimap, 哈希表</span><br><span class="line">    和上面类似，增删改查的时间复杂度是 <span class="built_in">O</span>(<span class="number">1</span>)</span><br><span class="line">    不支持 <span class="built_in">lower_bound</span>()/<span class="built_in">upper_bound</span>()， 迭代器的++，--</span><br></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">bitset, 圧位</span><br><span class="line">    bitset&lt;10000&gt; s;</span><br><span class="line">    ~, &amp;, |, ^</span><br><span class="line">    &gt;&gt;, &lt;&lt;</span><br><span class="line">    ==, !=</span><br><span class="line">    []</span><br><span class="line"></span><br><span class="line">    <span class="built_in">count</span>()  返回有多少个<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">any</span>()  判断是否至少有一个<span class="number">1</span></span><br><span class="line">    <span class="built_in">none</span>()  判断是否全为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>()  把所有位置成<span class="number">1</span></span><br><span class="line">    <span class="built_in">set</span>(k, v)  将第k位变成v</span><br><span class="line">    <span class="built_in">reset</span>()  把所有位变成<span class="number">0</span></span><br><span class="line">    <span class="built_in">flip</span>()  等价于~</span><br><span class="line">    <span class="built_in">flip</span>(k) 把第k位取反</span><br></pre></td></tr></table></figure>

<h1 id="树与图的存储"><a href="#树与图的存储" class="headerlink" title="树与图的存储"></a>树与图的存储</h1><blockquote>
<p>树是一种特殊的图，与图的存储方式相同。<br>对于无向图中的边ab，存储两条有向边a-&gt;b, b-&gt;a。<br>因此我们可以只考虑有向图的存储。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>) 邻接矩阵：g[a][b] 存储边a-&gt;<span class="built_in">b</span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) 邻接表：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于每个点k，开一个单链表，存储k所有可以走到的点。h[k]存储这个单链表的头结点</span></span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一条边a-&gt;b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx ++ ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 初始化</p>
<blockquote>
<p>idx &#x3D; 0;<br>memset(h, -1, sizeof h);</p>
</blockquote>
<h2 id="树与图的遍历"><a href="#树与图的遍历" class="headerlink" title="树与图的遍历"></a>树与图的遍历</h2><p>时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数</p>
<h2 id="1-深度优先遍历-——-模板题-AcWing-846-树的重心"><a href="#1-深度优先遍历-——-模板题-AcWing-846-树的重心" class="headerlink" title="(1) 深度优先遍历 —— 模板题 AcWing 846. 树的重心"></a>(1) 深度优先遍历 —— 模板题 AcWing 846. 树的重心</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[u] = <span class="literal">true</span>; <span class="comment">// st[u] 表示点u已经被遍历过</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j]) <span class="built_in">dfs</span>(j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-宽度优先遍历-——-模板题-AcWing-847-图中点的层次"><a href="#2-宽度优先遍历-——-模板题-AcWing-847-图中点的层次" class="headerlink" title="(2) 宽度优先遍历 —— 模板题 AcWing 847. 图中点的层次"></a>(2) 宽度优先遍历 —— 模板题 AcWing 847. 图中点的层次</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">st[<span class="number">1</span>] = <span class="literal">true</span>; <span class="comment">// 表示1号点已经被遍历过</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">    q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>; <span class="comment">// 表示点j已经被遍历过</span></span><br><span class="line">            q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="拓扑排序-——-模板题-AcWing-848-有向图的拓扑序列"><a href="#拓扑排序-——-模板题-AcWing-848-有向图的拓扑序列" class="headerlink" title="拓扑排序 —— 模板题 AcWing 848. 有向图的拓扑序列"></a>拓扑排序 —— 模板题 AcWing 848. 有向图的拓扑序列</h2><blockquote>
<p>时间复杂度 O(n+m)O(n+m), nn 表示点数，mm 表示边数<br> <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// d[i] 存储点i的入度</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (!d[i])</span><br><span class="line">            q[ ++ tt] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (hh &lt;= tt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = q[hh ++ ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (-- d[j] == <span class="number">0</span>)</span><br><span class="line">                q[ ++ tt] = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果所有点都入队了，说明存在拓扑序列；否则不存在拓扑序列。</span></span><br><span class="line">    <span class="keyword">return</span> tt == n - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="朴素dijkstra算法-——-模板题-AcWing-849-Dijkstra求最短路-I"><a href="#朴素dijkstra算法-——-模板题-AcWing-849-Dijkstra求最短路-I" class="headerlink" title="朴素dijkstra算法 —— 模板题 AcWing 849. Dijkstra求最短路 I"></a>朴素dijkstra算法 —— 模板题 AcWing 849. Dijkstra求最短路 I</h2><blockquote>
<p>时间复杂是 O(n2+m)O(n2+m), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];  <span class="comment">// 存储每条边</span></span><br><span class="line"><span class="type">int</span> dist[N];  <span class="comment">// 存储1号点到每个点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];   <span class="comment">// 存储每个点的最短路是否已经确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路，如果不存在则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;     <span class="comment">// 在还未确定最短路的点中，寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用t更新其他点的距离</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            dist[j] = <span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="堆优化版dijkstra-——-模板题-AcWing-850-Dijkstra求最短路-II"><a href="#堆优化版dijkstra-——-模板题-AcWing-850-Dijkstra求最短路-II" class="headerlink" title="堆优化版dijkstra —— 模板题 AcWing 850. Dijkstra求最短路 II"></a>堆优化版dijkstra —— 模板题 AcWing 850. Dijkstra求最短路 II</h2><blockquote>
<p>时间复杂度 O(mlogn)O(mlogn), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;      <span class="comment">// 点的数量</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储所有点到1号点的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点的最短距离是否已确定</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短距离，如果不存在，则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;</span><br><span class="line">    heap.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);      <span class="comment">// first存储距离，second存储节点编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (heap.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">        heap.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> ver = t.second, distance = t.first;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (st[ver]) <span class="keyword">continue</span>;</span><br><span class="line">        st[ver] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[ver]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; distance + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = distance + w[i];</span><br><span class="line">                heap.<span class="built_in">push</span>(&#123;dist[j], j&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="Bellman-Ford算法-——-模板题-AcWing-853-有边数限制的最短路"><a href="#Bellman-Ford算法-——-模板题-AcWing-853-有边数限制的最短路" class="headerlink" title="Bellman-Ford算法 —— 模板题 AcWing 853. 有边数限制的最短路"></a>Bellman-Ford算法 —— 模板题 AcWing 853. 有边数限制的最短路</h2><blockquote>
<p>时间复杂度 O(nm)O(nm), nn 表示点数，mm 表示边数<br>注意在模板题中需要对下面的模板稍作修改，加上备份数组，详情见模板题。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n表示点数，m表示边数</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// dist[x]存储1到x的最短路距离</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 边，a表示出点，b表示入点，w表示边的权重</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;</span><br><span class="line">            <span class="keyword">if</span> (dist[b] &gt; dist[a] + w)</span><br><span class="line">                dist[b] = dist[a] + w;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] &gt; <span class="number">0x3f3f3f3f</span> / <span class="number">2</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h2 id="spfa-算法（队列优化的Bellman-Ford算法）-——-模板题-AcWing-851-spfa求最短路"><a href="#spfa-算法（队列优化的Bellman-Ford算法）-——-模板题-AcWing-851-spfa求最短路" class="headerlink" title="spfa 算法（队列优化的Bellman-Ford算法） —— 模板题 AcWing 851. spfa求最短路"></a>spfa 算法（队列优化的Bellman-Ford算法） —— 模板题 AcWing 851. spfa求最短路</h2><blockquote>
<p>时间复杂度 平均情况下 O(m)O(m)，最坏情况下 O(nm)O(nm), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储每个点到1号点的最短距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                <span class="keyword">if</span> (!st[j])     <span class="comment">// 如果队列中已存在j，则不需要将j重复插入</span></span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="spfa判断图中是否存在负环-——-模板题-AcWing-852-spfa判断负环"><a href="#spfa判断图中是否存在负环-——-模板题-AcWing-852-spfa判断负环" class="headerlink" title="spfa判断图中是否存在负环 —— 模板题 AcWing 852. spfa判断负环"></a>spfa判断图中是否存在负环 —— 模板题 AcWing 852. spfa判断负环</h2><blockquote>
<p>时间复杂度是 O(nm)O(nm), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// 总点数</span></span><br><span class="line"><span class="type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="comment">// 邻接表存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N], cnt[N];        <span class="comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否在队列中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果存在负环，则返回true，否则返回false。</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 不需要初始化dist数组</span></span><br><span class="line">    <span class="comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span></span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        q.<span class="built_in">push</span>(i);</span><br><span class="line">        st[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.<span class="built_in">size</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        st[t] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dist[j] = dist[t] + w[i];</span><br><span class="line">                cnt[j] = cnt[t] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (cnt[j] &gt;= n) <span class="keyword">return</span> <span class="literal">true</span>;       <span class="comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span></span><br><span class="line">                <span class="keyword">if</span> (!st[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.<span class="built_in">push</span>(j);</span><br><span class="line">                    st[j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="floyd算法-——-模板题-AcWing-854-Floyd求最短路"><a href="#floyd算法-——-模板题-AcWing-854-Floyd求最短路" class="headerlink" title="floyd算法 —— 模板题 AcWing 854. Floyd求最短路"></a>floyd算法 —— 模板题 AcWing 854. Floyd求最短路</h2><blockquote>
<p>时间复杂度是 O(n3)O(n3), nn 表示点数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">初始化：</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (i == j) d[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> d[i][j] = INF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 算法结束后，d[a][b]表示a到b的最短距离</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">                d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="朴素版prim算法-——-模板题-AcWing-858-Prim算法求最小生成树"><a href="#朴素版prim算法-——-模板题-AcWing-858-Prim算法求最小生成树" class="headerlink" title="朴素版prim算法 —— 模板题 AcWing 858. Prim算法求最小生成树"></a>朴素版prim算法 —— 模板题 AcWing 858. Prim算法求最小生成树</h2><blockquote>
<p>时间复杂度是 O(n2+m)O(n2+m), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> g[N][N];        <span class="comment">// 邻接矩阵，存储所有边</span></span><br><span class="line"><span class="type">int</span> dist[N];        <span class="comment">// 存储其他点到当前最小生成树的距离</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个点是否已经在生成树中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果图不连通，则返回INF(值是0x3f3f3f3f), 否则返回最小生成树的树边权重之和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">        <span class="keyword">if</span> (i &amp;&amp; dist[t] == INF) <span class="keyword">return</span> INF;</span><br><span class="line">        <span class="keyword">if</span> (i) res += dist[t];</span><br><span class="line">        st[t] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ ) dist[j] = <span class="built_in">min</span>(dist[j], g[t][j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kruskal算法-——-模板题-AcWing-859-Kruskal算法求最小生成树"><a href="#Kruskal算法-——-模板题-AcWing-859-Kruskal算法求最小生成树" class="headerlink" title="Kruskal算法 —— 模板题 AcWing 859. Kruskal算法求最小生成树"></a>Kruskal算法 —— 模板题 AcWing 859. Kruskal算法求最小生成树</h2><blockquote>
<p>时间复杂度是 O(mlogm)O(mlogm), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;       <span class="comment">// n是点数，m是边数</span></span><br><span class="line"><span class="type">int</span> p[N];       <span class="comment">// 并查集的父节点数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span>     <span class="comment">// 存储边</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, w;</span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;edges[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span>     <span class="comment">// 并查集核心操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (p[x] != x) p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(edges, edges + m);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ ) p[i] = i;    <span class="comment">// 初始化并查集</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line"></span><br><span class="line">        a = <span class="built_in">find</span>(a), b = <span class="built_in">find</span>(b);</span><br><span class="line">        <span class="keyword">if</span> (a != b)     <span class="comment">// 如果两个连通块不连通，则将这两个连通块合并</span></span><br><span class="line">        &#123;</span><br><span class="line">            p[a] = b;</span><br><span class="line">            res += w;</span><br><span class="line">            cnt ++ ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="染色法判别二分图-——-模板题-AcWing-860-染色法判定二分图"><a href="#染色法判别二分图-——-模板题-AcWing-860-染色法判定二分图" class="headerlink" title="染色法判别二分图 —— 模板题 AcWing 860. 染色法判定二分图"></a>染色法判别二分图 —— 模板题 AcWing 860. 染色法判定二分图</h2><blockquote>
<p>时间复杂度是 O(n+m)O(n+m), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n;      <span class="comment">// n表示点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储图</span></span><br><span class="line"><span class="type">int</span> color[N];       <span class="comment">// 表示每个点的颜色，-1表示未染色，0表示白色，1表示黑色</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数：u表示当前节点，c表示当前点的颜色</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (color[j] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, !c)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(color, <span class="number">-1</span>, <span class="keyword">sizeof</span> color);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (color[i] == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">0</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="匈牙利算法-——-模板题-AcWing-861-二分图的最大匹配"><a href="#匈牙利算法-——-模板题-AcWing-861-二分图的最大匹配" class="headerlink" title="匈牙利算法 —— 模板题 AcWing 861. 二分图的最大匹配"></a>匈牙利算法 —— 模板题 AcWing 861. 二分图的最大匹配</h2><blockquote>
<p>时间复杂度是 O(nm)O(nm), nn 表示点数，mm 表示边数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n1, n2;     <span class="comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], ne[M], idx;     <span class="comment">// 邻接表存储所有边，匈牙利算法中只会用到从第一个集合指向第二个集合的边，所以这里只用存一个方向的边</span></span><br><span class="line"><span class="type">int</span> match[N];       <span class="comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 表示第二个集合中的每个点是否已经被遍历过</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[x]; i != <span class="number">-1</span>; i = ne[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!st[j])</span><br><span class="line">        &#123;</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[j] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点"><a href="#求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点" class="headerlink" title="求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点"></a>求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i)) res ++ ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="试除法判定质数-——-模板题-AcWing-866-试除法判定质数"><a href="#试除法判定质数-——-模板题-AcWing-866-试除法判定质数" class="headerlink" title="试除法判定质数 —— 模板题 AcWing 866. 试除法判定质数"></a>试除法判定质数 —— 模板题 AcWing 866. 试除法判定质数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_prime</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="试除法分解质因数-——-模板题-AcWing-867-分解质因数"><a href="#试除法分解质因数-——-模板题-AcWing-867-分解质因数" class="headerlink" title="试除法分解质因数 —— 模板题 AcWing 867. 分解质因数"></a>试除法分解质因数 —— 模板题 AcWing 867. 分解质因数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">divide</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> s = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i, s ++ ;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) cout &lt;&lt; x &lt;&lt; <span class="string">&#x27; &#x27;</span> &lt;&lt; <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="朴素筛法求素数-——-模板题-AcWing-868-筛质数"><a href="#朴素筛法求素数-——-模板题-AcWing-868-筛质数" class="headerlink" title="朴素筛法求素数 —— 模板题 AcWing 868. 筛质数"></a>朴素筛法求素数 —— 模板题 AcWing 868. 筛质数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (st[i]) <span class="keyword">continue</span>;</span><br><span class="line">        primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + i; j &lt;= n; j += i)</span><br><span class="line">            st[j] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线性筛法求素数-——-模板题-AcWing-868-筛质数"><a href="#线性筛法求素数-——-模板题-AcWing-868-筛质数" class="headerlink" title="线性筛法求素数 —— 模板题 AcWing 868. 筛质数"></a>线性筛法求素数 —— 模板题 AcWing 868. 筛质数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="试除法求所有约数-——-模板题-AcWing-869-试除法求约数"><a href="#试除法求所有约数-——-模板题-AcWing-869-试除法求约数" class="headerlink" title="试除法求所有约数 —— 模板题 AcWing 869. 试除法求约数"></a>试除法求所有约数 —— 模板题 AcWing 869. 试除法求约数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">get_divisors</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(i);</span><br><span class="line">            <span class="keyword">if</span> (i != x / i) res.<span class="built_in">push_back</span>(x / i);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">sort</span>(res.<span class="built_in">begin</span>(), res.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="约数个数和约数之和-——-模板题-AcWing-870-约数个数-AcWing-871-约数之和"><a href="#约数个数和约数之和-——-模板题-AcWing-870-约数个数-AcWing-871-约数之和" class="headerlink" title="约数个数和约数之和 —— 模板题 AcWing 870. 约数个数, AcWing 871. 约数之和"></a>约数个数和约数之和 —— 模板题 AcWing 870. 约数个数, AcWing 871. 约数之和</h3><p>如果 N &#x3D; p1^c1 * p2^c2 * … *pk^ck<br>约数个数： (c1 + 1) * (c2 + 1) * … * (ck + 1)<br>约数之和： (p1^0 + p1^1 + … + p1^c1) * … * (pk^0 + pk^1 + … + pk^ck)</p>
<h3 id="欧几里得算法-——-模板题-AcWing-872-最大公约数"><a href="#欧几里得算法-——-模板题-AcWing-872-最大公约数" class="headerlink" title="欧几里得算法 —— 模板题 AcWing 872. 最大公约数"></a>欧几里得算法 —— 模板题 AcWing 872. 最大公约数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="求欧拉函数-——-模板题-AcWing-873-欧拉函数"><a href="#求欧拉函数-——-模板题-AcWing-873-欧拉函数" class="headerlink" title="求欧拉函数 —— 模板题 AcWing 873. 欧拉函数"></a>求欧拉函数 —— 模板题 AcWing 873. 欧拉函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">phi</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i ++ )</span><br><span class="line">        <span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (x % i == <span class="number">0</span>) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="筛法求欧拉函数-——-模板题-AcWing-874-筛法求欧拉函数"><a href="#筛法求欧拉函数-——-模板题-AcWing-874-筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数 —— 模板题 AcWing 874. 筛法求欧拉函数"></a>筛法求欧拉函数 —— 模板题 AcWing 874. 筛法求欧拉函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// primes[]存储所有素数</span></span><br><span class="line"><span class="type">int</span> euler[N];           <span class="comment">// 存储每个数的欧拉函数</span></span><br><span class="line"><span class="type">bool</span> st[N];         <span class="comment">// st[x]存储x是否被筛掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_eulers</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    euler[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i])</span><br><span class="line">        &#123;</span><br><span class="line">            primes[cnt ++ ] = i;</span><br><span class="line">            euler[i] = i - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> t = primes[j] * i;</span><br><span class="line">            st[t] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                euler[t] = euler[i] * primes[j];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            euler[t] = euler[i] * (primes[j] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="快速幂-——-模板题-AcWing-875-快速幂"><a href="#快速幂-——-模板题-AcWing-875-快速幂" class="headerlink" title="快速幂 —— 模板题 AcWing 875. 快速幂"></a>快速幂 —— 模板题 AcWing 875. 快速幂</h3><blockquote>
<p>求 m^k mod p，时间复杂度 O(logk)。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> k, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % p, t = m;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k&amp;<span class="number">1</span>) res = res * t % p;</span><br><span class="line">        t = t * t % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩展欧几里得算法-——-模板题-AcWing-877-扩展欧几里得算法"><a href="#扩展欧几里得算法-——-模板题-AcWing-877-扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法 —— 模板题 AcWing 877. 扩展欧几里得算法"></a>扩展欧几里得算法 —— 模板题 AcWing 877. 扩展欧几里得算法</h3><blockquote>
<p>求x, y，使得ax + by &#x3D; gcd(a, b)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> &amp;x, <span class="type">int</span> &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!b)</span><br><span class="line">    &#123;</span><br><span class="line">        x = <span class="number">1</span>; y = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d = <span class="built_in">exgcd</span>(b, a % b, y, x);</span><br><span class="line">    y -= (a/b) * x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="高斯消元-——-模板题-AcWing-883-高斯消元解线性方程组"><a href="#高斯消元-——-模板题-AcWing-883-高斯消元解线性方程组" class="headerlink" title="高斯消元 —— 模板题 AcWing 883. 高斯消元解线性方程组"></a>高斯消元 —— 模板题 AcWing 883. 高斯消元解线性方程组</h3><blockquote>
<p>a[N][N]是增广矩阵</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gauss</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> c, r;</span><br><span class="line">    <span class="keyword">for</span> (c = <span class="number">0</span>, r = <span class="number">0</span>; c &lt; n; c ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> t = r;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )   <span class="comment">// 找到绝对值最大的行</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; <span class="built_in">fabs</span>(a[t][c]))</span><br><span class="line">                t = i;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[t][c]) &lt; eps) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = c; i &lt;= n; i ++ ) <span class="built_in">swap</span>(a[t][i], a[r][i]);      <span class="comment">// 将绝对值最大的行换到最顶端</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="comment">// 将当前行的首位变成1</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt; n; i ++ )       <span class="comment">// 用当前行将下面所有的列消成0</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][c]) &gt; eps)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> j = n; j &gt;= c; j -- )</span><br><span class="line">                    a[i][j] -= a[r][j] * a[i][c];</span><br><span class="line"></span><br><span class="line">        r ++ ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (r &lt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r; i &lt; n; i ++ )</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">fabs</span>(a[i][n]) &gt; eps)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>; <span class="comment">// 无解</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 有无穷多组解</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; n; j ++ )</span><br><span class="line">            a[i][n] -= a[i][j] * a[j][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 有唯一解</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="递推法求组合数-——-模板题-AcWing-885-求组合数-I"><a href="#递推法求组合数-——-模板题-AcWing-885-求组合数-I" class="headerlink" title="递推法求组合数 —— 模板题 AcWing 885. 求组合数 I"></a>递推法求组合数 —— 模板题 AcWing 885. 求组合数 I</h3><blockquote>
<p>c[a][b] 表示从a个苹果中选b个的方案数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i ++ )</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j ++ )</span><br><span class="line">        <span class="keyword">if</span> (!j) c[i][j] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> c[i][j] = (c[i - <span class="number">1</span>][j] + c[i - <span class="number">1</span>][j - <span class="number">1</span>]) % mod;</span><br></pre></td></tr></table></figure>

<p>通过预处理逆元的方式求组合数 —— 模板题 AcWing 886. 求组合数 II<br>首先预处理出所有阶乘取模的余数fact[N]，以及所有阶乘取模的逆元infact[N]<br>如果取模的数是质数，可以用费马小定理求逆元</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span>    <span class="comment">// 快速幂模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>&#x2F;&#x2F; 预处理阶乘的余数和阶乘逆元的余数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">fact[<span class="number">0</span>] = infact[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    fact[i] = (LL)fact[i - <span class="number">1</span>] * i % mod;</span><br><span class="line">    infact[i] = (LL)infact[i - <span class="number">1</span>] * <span class="built_in">qmi</span>(i, mod - <span class="number">2</span>, mod) % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Lucas定理-——-模板题-AcWing-887-求组合数-III"><a href="#Lucas定理-——-模板题-AcWing-887-求组合数-III" class="headerlink" title="Lucas定理 —— 模板题 AcWing 887. 求组合数 III"></a>Lucas定理 —— 模板题 AcWing 887. 求组合数 III</h3><p>若p是质数，则对于任意整数 1 &lt;&#x3D; m &lt;&#x3D; n，有：</p>
<blockquote>
<p>C(n, m) &#x3D; C(n % p, m % p) * C(n &#x2F; p, m &#x2F; p) (mod p)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmi</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> k, <span class="type">int</span> p)</span>  <span class="comment">// 快速幂模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span> % p;</span><br><span class="line">    <span class="keyword">while</span> (k)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (k &amp; <span class="number">1</span>) res = (LL)res * a % p;</span><br><span class="line">        a = (LL)a * a % p;</span><br><span class="line">        k &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">C</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> p)</span>  <span class="comment">// 通过定理求组合数C(a, b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    LL x = <span class="number">1</span>, y = <span class="number">1</span>;  <span class="comment">// x是分子，y是分母</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a, j = <span class="number">1</span>; j &lt;= b; i --, j ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        x = (LL)x * i % p;</span><br><span class="line">        y = (LL) y * j % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> x * (LL)<span class="built_in">qmi</span>(y, p - <span class="number">2</span>, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lucas</span><span class="params">(LL a, LL b, <span class="type">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="keyword">return</span> <span class="built_in">C</span>(a, b, p);</span><br><span class="line">    <span class="keyword">return</span> (LL)<span class="built_in">C</span>(a % p, b % p, p) * <span class="built_in">lucas</span>(a / p, b / p, p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分解质因数法求组合数-——-模板题-AcWing-888-求组合数-IV"><a href="#分解质因数法求组合数-——-模板题-AcWing-888-求组合数-IV" class="headerlink" title="分解质因数法求组合数 —— 模板题 AcWing 888. 求组合数 IV"></a>分解质因数法求组合数 —— 模板题 AcWing 888. 求组合数 IV</h3><p>当我们需要求出组合数的真实值，而非对某个数的余数时，分解质因数的方式比较好用：<br>    1. 筛法求出范围内的所有质数<br>    2. 通过 C(a, b) &#x3D; a! &#x2F; b! &#x2F; (a - b)! 这个公式求出每个质因子的次数。 n! 中p的次数是 n &#x2F; p + n &#x2F; p^2 + n &#x2F; p^3 + …<br>    3. 用高精度乘法将所有质因子相乘</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> primes[N], cnt;     <span class="comment">// 存储所有质数</span></span><br><span class="line"><span class="type">int</span> sum[N];     <span class="comment">// 存储每个质数的次数</span></span><br><span class="line"><span class="type">bool</span> st[N];     <span class="comment">// 存储每个数是否已被筛掉</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span>      <span class="comment">// 线性筛法求素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!st[i]) primes[cnt ++ ] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            st[primes[j] * i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> p)</span>       <span class="comment">// 求n！中的次数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n)</span><br><span class="line">    &#123;</span><br><span class="line">        res += n / p;</span><br><span class="line">        n /= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; a, <span class="type">int</span> b)</span>       <span class="comment">// 高精度乘低精度模板</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; c;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += a[i] * b;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (t)</span><br><span class="line">    &#123;</span><br><span class="line">        c.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">get_primes</span>(a);  <span class="comment">// 预处理范围内的所有质数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )     <span class="comment">// 求每个质因数的次数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> p = primes[i];</span><br><span class="line">    sum[i] = <span class="built_in">get</span>(a, p) - <span class="built_in">get</span>(b, p) - <span class="built_in">get</span>(a - b, p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; res;</span><br><span class="line">res.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i ++ )     <span class="comment">// 用高精度乘法将所有质因子相乘</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; sum[i]; j ++ )</span><br><span class="line">        res = <span class="built_in">mul</span>(res, primes[i]);</span><br></pre></td></tr></table></figure>



<h3 id="卡特兰数-——-模板题-AcWing-889-满足条件的01序列"><a href="#卡特兰数-——-模板题-AcWing-889-满足条件的01序列" class="headerlink" title="卡特兰数 —— 模板题 AcWing 889. 满足条件的01序列"></a>卡特兰数 —— 模板题 AcWing 889. 满足条件的01序列</h3><p>给定n个0和n个1，它们按照某种顺序排成长度为2n的序列，满足任意前缀中0的个数都不少于1的个数的序列的数量为： Cat(n) &#x3D; C(2n, n) &#x2F; (n + 1)<br>NIM游戏 —— 模板题 AcWing 891. Nim游戏<br>给定N堆物品，第i堆物品有Ai个。两名玩家轮流行动，每次可以任选一堆，取走任意多个物品，可把一堆取光，但不能不取。取走最后一件物品者获胜。两人都采取最优策略，问先手是否必胜。</p>
<p>我们把这种游戏称为NIM博弈。把游戏过程中面临的状态称为局面。整局游戏第一个行动的称为先手，第二个行动的称为后手。若在某一局面下无论采取何种行动，都会输掉游戏，则称该局面必败。<br>所谓采取最优策略是指，若在某一局面下存在某种行动，使得行动后对面面临必败局面，则优先采取该行动。同时，这样的局面被称为必胜。我们讨论的博弈问题一般都只考虑理想情况，即两人均无失误，都采取最优策略行动时游戏的结果。<br>NIM博弈不存在平局，只有先手必胜和先手必败两种情况。</p>
<p>定理： NIM博弈先手必胜，当且仅当 A1 ^ A2 ^ … ^ An !&#x3D; 0</p>
<h3 id="公平组合游戏ICG"><a href="#公平组合游戏ICG" class="headerlink" title="公平组合游戏ICG"></a>公平组合游戏ICG</h3><p>若一个游戏满足：</p>
<p>由两名玩家交替行动；<br>在游戏进程的任意时刻，可以执行的合法行动与轮到哪名玩家无关；<br>不能行动的玩家判负；<br>则称该游戏为一个公平组合游戏。<br>NIM博弈属于公平组合游戏，但城建的棋类游戏，比如围棋，就不是公平组合游戏。因为围棋交战双方分别只能落黑子和白子，胜负判定也比较复杂，不满足条件2和条件3。</p>
<h3 id="有向图游戏"><a href="#有向图游戏" class="headerlink" title="有向图游戏"></a>有向图游戏</h3><p>给定一个有向无环图，图中有一个唯一的起点，在起点上放有一枚棋子。两名玩家交替地把这枚棋子沿有向边进行移动，每次可以移动一步，无法移动者判负。该游戏被称为有向图游戏。<br>任何一个公平组合游戏都可以转化为有向图游戏。具体方法是，把每个局面看成图中的一个节点，并且从每个局面向沿着合法行动能够到达的下一个局面连有向边。</p>
<h3 id="Mex运算"><a href="#Mex运算" class="headerlink" title="Mex运算"></a>Mex运算</h3><p>设S表示一个非负整数集合。定义mex(S)为求出不属于集合S的最小非负整数的运算，即：<br>mex(S) &#x3D; min{x}, x属于自然数，且x不属于S</p>
<h3 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h3><p>在有向图游戏中，对于每个节点x，设从x出发共有k条有向边，分别到达节点y1, y2, …, yk，定义SG(x)为x的后继节点y1, y2, …, yk 的SG函数值构成的集合再执行mex(S)运算的结果，即：<br>SG(x) &#x3D; mex({SG(y1), SG(y2), …, SG(yk)})<br>特别地，整个有向图游戏G的SG函数值被定义为有向图游戏起点s的SG函数值，即SG(G) &#x3D; SG(s)。</p>
<h3 id="有向图游戏的和-——-模板题-AcWing-893-集合-Nim游戏"><a href="#有向图游戏的和-——-模板题-AcWing-893-集合-Nim游戏" class="headerlink" title="有向图游戏的和 —— 模板题 AcWing 893. 集合-Nim游戏"></a>有向图游戏的和 —— 模板题 AcWing 893. 集合-Nim游戏</h3><p>设G1, G2, …, Gm 是m个有向图游戏。定义有向图游戏G，它的行动规则是任选某个有向图游戏Gi，并在Gi上行动一步。G被称为有向图游戏G1, G2, …, Gm的和。<br>有向图游戏的和的SG函数值等于它包含的各个子游戏SG函数值的异或和，即：<br>SG(G) &#x3D; SG(G1) ^ SG(G2) ^ … ^ SG(Gm)</p>
<blockquote>
<p>定理<br>有向图游戏的某个局面必胜，当且仅当该局面对应节点的SG函数值大于0。<br>有向图游戏的某个局面必败，当且仅当该局面对应节点的SG函数值等于0。</p>
</blockquote>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-板子</title>
    <url>/post/%E7%AE%97%E6%B3%95-%E6%9D%BF%E5%AD%90.html</url>
    <content><![CDATA[<h2 id="自己的算法总结"><a href="#自己的算法总结" class="headerlink" title="自己的算法总结"></a>自己的算法总结</h2><blockquote>
<p>这里是自己的算法总结</p>
</blockquote>
<blockquote>
<p>基础知识</p>
</blockquote>
<ul>
<li>typedef 需要定义在using下面</li>
<li>#define 需要定义在头文件哪里</li>
<li>能使用全局变量，就使用全局变量</li>
</ul>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">fastPower</span><span class="params">(<span class="type">long</span> <span class="type">long</span> base, <span class="type">long</span> <span class="type">long</span> power)</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (power &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (power &amp; <span class="number">1</span>) &#123;<span class="comment">//此处等价于if(power%2==1)</span></span><br><span class="line">            result = result * base % <span class="number">1000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        power &gt;&gt;= <span class="number">1</span>;<span class="comment">//此处等价于power=power/2</span></span><br><span class="line">        base = (base * base) % <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="线性筛"><a href="#线性筛" class="headerlink" title="线性筛"></a>线性筛</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//p是bool数组，如果是0表示是质数</span></span><br><span class="line"><span class="comment">//q用来存放质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!p[i]) q[++tot] = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; q[j] &lt;= n / i; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            p[i * q[j]] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (i % q[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="comment">//分解质数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!st[i])primes[cnt++]=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;primes[j]*i&lt;=n;j++)&#123;</span><br><span class="line">            st[primes[j]*i]=<span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%primes[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; i &lt;= m; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (j &amp;&amp; str[i] != str[j + <span class="number">1</span>]) j = nxt[j];</span><br><span class="line">    <span class="keyword">if</span> (str[i] == str[j + <span class="number">1</span>]) j ++ ;</span><br><span class="line">    nxt[i] = j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="safa-算法模板"><a href="#safa-算法模板" class="headerlink" title="safa 算法模板"></a>safa 算法模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2510</span>,M=<span class="number">6200</span>*<span class="number">2</span>+<span class="number">10</span>;<span class="comment">//点数 边数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,S,T;</span><br><span class="line"><span class="comment">//邻接表存储树  存储元素 存储列表的next值 单链表指针</span></span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], dist[N];<span class="comment">//循环队列 距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//判重数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;<span class="comment">//a 指向 b 权重是 c</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//被指的边   权重   多少条出口    边数</span></span><br><span class="line">    <span class="comment">//h[a]=idx++ 代表当前第idx个节点是被a指向的</span></span><br><span class="line">    <span class="comment">//ne[idx]=h[a]  代表 当a指向新节点时，上一个节点是h[a]，然后再更新一下h[a]</span></span><br><span class="line">    e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//初始化正无穷</span></span><br><span class="line">    dist[S]=<span class="number">0</span>;<span class="comment">//起点处长度是0</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">1</span>;<span class="comment">//循环队列下标</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//记录起点   标记</span></span><br><span class="line">    q[<span class="number">0</span>]=S,st[S]=<span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh!=tt)&#123;<span class="comment">//循环队列  头部跟尾部不相等即可</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> t=q[hh++];<span class="comment">//取出来一个</span></span><br><span class="line">        <span class="keyword">if</span>(hh==N)hh=<span class="number">0</span>;<span class="comment">//如果到末尾了 则置为0</span></span><br><span class="line">        </span><br><span class="line">        st[t]=<span class="literal">false</span>;<span class="comment">//取出来了 咱就标记一下</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//~i 的意思是i!=-1 </span></span><br><span class="line">        <span class="comment">//i=t的出口数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[t];~i;i=ne[i])&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> j=e[i];<span class="comment">//得到i指向的边</span></span><br><span class="line">            <span class="keyword">if</span>(dist[j]&gt;dist[t]+w[i])&#123;<span class="comment">//边权判断</span></span><br><span class="line">                dist[j]=dist[t]+w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q[tt++]=j;</span><br><span class="line">                    <span class="keyword">if</span>(tt==N)tt=<span class="number">0</span>;</span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S&gt;&gt;T;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;dist[T]&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="prim算法模板"><a href="#prim算法模板" class="headerlink" title="prim算法模板"></a>prim算法模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="comment">//T. 1140</span></span><br><span class="line"><span class="comment">//连接光纤</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    dist[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )&#123;</span><br><span class="line">        <span class="type">int</span> t=<span class="number">-1</span>;</span><br><span class="line">        <span class="comment">//挨个找最小值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            <span class="keyword">if</span>(!st[j]&amp;&amp;(t==<span class="number">-1</span>||dist[t]&gt;dist[j]))</span><br><span class="line">                t=j;</span><br><span class="line">        </span><br><span class="line">        st[t]=<span class="literal">true</span>;</span><br><span class="line">        res+=dist[t];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把t-&gt;j这条路全部改为最小值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)    dist[j]=<span class="built_in">min</span>(dist[j],w[t][j]);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j ++ )</span><br><span class="line">            cin&gt;&gt;w[i][j];</span><br><span class="line">            </span><br><span class="line">    cout&lt;&lt;<span class="built_in">prim</span>()&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;<span class="comment">//求最低位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第a个数加b</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))tr[i]+=b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0~x区间和</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))res+=tr[i];</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="快速排序算法模板"><a href="#快速排序算法模板" class="headerlink" title="快速排序算法模板"></a>快速排序算法模板</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> - 模板题 AcWing <span class="number">785.</span> 快速排序</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>, x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) <span class="built_in">swap</span>(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quick_sort</span>(q, l, j), <span class="built_in">quick_sort</span>(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="comment">//a 指向b价值是w</span></span><br><span class="line">    w[idx]=c,e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历邻接表</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=h[u];i!=<span class="number">-1</span>;i=ne[i])</span><br></pre></td></tr></table></figure>


<h2 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta"># <span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1000010</span>;</span><br><span class="line"><span class="type">int</span> a[N], q[N], hh, tt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">if</span> (i - k + <span class="number">1</span> &gt; q[hh]) ++ hh;                  <span class="comment">// 若队首出窗口，hh加1</span></span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[i] &lt;= a[q[tt]]) -- tt;    <span class="comment">// 若队尾不单调，tt减1</span></span><br><span class="line">        q[++ tt] = i;                                  <span class="comment">// 下标加到队尾</span></span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);       <span class="comment">// 输出结果</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    hh = <span class="number">0</span>; tt = <span class="number">-1</span>;                                   <span class="comment">// 重置！</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++ i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i - k + <span class="number">1</span> &gt; q[hh]) ++ hh;</span><br><span class="line">        <span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[i] &gt;= a[q[tt]]) -- tt;</span><br><span class="line">        q[++ tt] = i;</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= k) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[q[hh]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n,q,tar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        cin&gt;&gt;a[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;q;i++)&#123;</span><br><span class="line">        cin&gt;&gt;tar;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>,r=n<span class="number">-1</span>,mid=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//左边二分</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            mid=(r+l)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&gt;=tar)r=mid;<span class="comment">//r不动  l往右边来</span></span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[l]!=tar)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1 -1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> c=l;</span><br><span class="line">        r=n<span class="number">-1</span>;</span><br><span class="line">        mid=<span class="number">0</span>;</span><br><span class="line">        <span class="comment">//右边二分</span></span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">            mid=(r+l+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[mid]&lt;=tar)l=mid;<span class="comment">//l不动,r往左边来</span></span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;c&lt;&lt;<span class="string">&#x27; &#x27;</span>&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">LL <span class="title">C</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    LL res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>,i=a;j&lt;=b;i--,j++)&#123;</span><br><span class="line">        res=res*i/j;</span><br><span class="line">        <span class="keyword">if</span>(res&gt;n)<span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">topo_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!in[i]) q.<span class="built_in">push</span>(i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        L.<span class="built_in">push_back</span>(t);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">            <span class="type">int</span> j = e[i];</span><br><span class="line">            <span class="keyword">if</span> (!--in[j]) q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="完全背包问题-每种物品无限使用"><a href="#完全背包问题-每种物品无限使用" class="headerlink" title="完全背包问题  每种物品无限使用"></a>完全背包问题  每种物品无限使用</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e3</span>+<span class="number">10</span>,MOD=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n,V;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;V;     <span class="comment">//背包容量是V</span></span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        <span class="type">int</span> v,w;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="comment">//for(int i=1;i&lt;=n;i*=2)</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=v;j&lt;=V;j++)</span><br><span class="line">                f[j]=<span class="built_in">max</span>(f[j],f[j-v]+w);</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[V]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> f[N];</span><br><span class="line"><span class="type">int</span> n,V;</span><br><span class="line"><span class="type">int</span> v,w;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;V;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;v&gt;&gt;w;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=V;j&gt;=v;j--)&#123;</span><br><span class="line">            f[j]=<span class="built_in">max</span>(f[j],f[j-v]+w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;f[V]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>例题1模板 - while循环下就是对应着它的性质</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">4e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> primes[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		<span class="type">int</span> t = i, j = <span class="number">2</span>;</span><br><span class="line">		<span class="keyword">while</span>(t &gt; <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">if</span>(t % j == <span class="number">0</span>) t /= j, primes[j]++;</span><br><span class="line">			<span class="keyword">else</span> j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1e4</span>; i++)</span><br><span class="line">		<span class="keyword">if</span>(primes[i]) cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; primes[i] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>欧拉线性筛质数</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>, M = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, cnt;</span><br><span class="line"><span class="type">int</span> nums[N], primes[M];</span><br><span class="line"><span class="type">bool</span> st[M*N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) cin &gt;&gt; nums[i];</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= M; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!st[i]) primes[cnt++] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; primes[j] &lt;= M/i; j++)&#123;	<span class="comment">// 从小到大枚举所有质数</span></span><br><span class="line">			st[primes[j] * i] = <span class="literal">true</span>;			<span class="comment">// 只用最小质因子去筛掉合数</span></span><br><span class="line">			<span class="comment">// 说明primes[j]一定是i的最小质因子，则primes[j]页一定是primes[j]*i的最小质因子</span></span><br><span class="line">			<span class="comment">// 如果i%primes[j] != 0 的话，说明primes[j]一定小于i的所有质因子</span></span><br><span class="line">			<span class="keyword">if</span>(i % primes[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">			</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">if</span>(!st[nums[i]] &amp;&amp; nums[i] != <span class="number">1</span>) cout &lt;&lt; nums[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="读取一行"><a href="#读取一行" class="headerlink" title="读取一行"></a>读取一行</h2><blockquote>
<p>getline(cin,s);</p>
</blockquote>
<blockquote>
<p>题目介绍：有个人的家族很大，辈分关系很混乱，请你帮整理一下这种关系。<br>给出每个人的孩子的信息。<br>输出一个序列，使得每个人的孩子都比那个人后列出。</p>
</blockquote>
<h2 id="拓扑排序-1"><a href="#拓扑排序-1" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>,M=N*N/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> in[N];</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;L;</span><br><span class="line"></span><br><span class="line"><span class="comment">//e 表示的是边  ne表示的是下一个指针    idx表示的是边个数</span></span><br><span class="line"><span class="type">int</span> h[N],e[M],ne[M],idx;</span><br><span class="line"><span class="comment">//使用邻接表存储图</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;<span class="comment">//无权图</span></span><br><span class="line">    e[idx]=b,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">top_sort</span><span class="params">()</span></span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;q;<span class="comment">//使用队列</span></span><br><span class="line">    <span class="comment">//先进行一次遍历，把所有父辈塞进队列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )</span><br><span class="line">        <span class="keyword">if</span>(!in[i])</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="comment">//普通的入队出队</span></span><br><span class="line">    <span class="keyword">while</span>(q.<span class="built_in">size</span>())&#123;</span><br><span class="line">        <span class="type">int</span> t=q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        L.<span class="built_in">push_back</span>(t);</span><br><span class="line">        <span class="comment">//访问邻接表即可</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[t];i!=<span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];</span><br><span class="line">            <span class="keyword">if</span>(!--in[j])q.<span class="built_in">push</span>(j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++ )&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">while</span>(cin&gt;&gt;x,x)&#123;</span><br><span class="line">            <span class="built_in">add</span>(i,x);<span class="comment">//i与x之间进行连边</span></span><br><span class="line">            in[x]++;<span class="comment">//使用in数组记录x节点的父亲个数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">top_sort</span>();<span class="comment">//拓扑排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> &amp;i:L)<span class="comment">// L数组用于记录结果</span></span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单源最短路-spfa算法"><a href="#单源最短路-spfa算法" class="headerlink" title="单源最短路  spfa算法"></a>单源最短路  spfa算法</h2><blockquote>
<p>需要注意的：如果起点是任意一个，那么这个点的dist[Start]&#x3D;0;</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2510</span>,M=<span class="number">6200</span>*<span class="number">2</span>+<span class="number">10</span>;<span class="comment">//点数 边数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m,S,T;</span><br><span class="line"><span class="type">int</span> h[N], e[M], w[M], ne[M], idx;</span><br><span class="line"><span class="type">int</span> q[N], dist[N];<span class="comment">//循环队列 距离</span></span><br><span class="line"><span class="type">bool</span> st[N];<span class="comment">//判重数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;<span class="comment">//a 指向 b 权重是 c</span></span><br><span class="line">    <span class="comment">//边      权重       多少条出口    出口+1</span></span><br><span class="line">    e[idx]=b,w[idx]=c,ne[idx]=h[a],h[a]=idx++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spfa</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);<span class="comment">//初始化正无穷</span></span><br><span class="line">    dist[S]=<span class="number">0</span>;<span class="comment">//起点处长度是0</span></span><br><span class="line">    <span class="type">int</span> hh=<span class="number">0</span>,tt=<span class="number">1</span>;<span class="comment">//循环队列下标</span></span><br><span class="line">    <span class="comment">//记录起点   标记</span></span><br><span class="line">    q[<span class="number">0</span>]=S,st[S]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(hh!=tt)&#123;<span class="comment">//循环队列  头部跟尾部不相等即可</span></span><br><span class="line">        <span class="type">int</span> t=q[hh++];<span class="comment">//取出来一个</span></span><br><span class="line">        <span class="keyword">if</span>(hh==N)hh=<span class="number">0</span>;<span class="comment">//如果到末尾了 则置为0</span></span><br><span class="line">        st[t]=<span class="literal">false</span>;<span class="comment">//标记一下</span></span><br><span class="line">        <span class="comment">//~i 的意思是i!=-1 </span></span><br><span class="line">        <span class="comment">//i=t的出口数    </span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=h[t];~i;i=ne[i])&#123;</span><br><span class="line">            <span class="type">int</span> j=e[i];<span class="comment">//得到i指向的边</span></span><br><span class="line">            <span class="keyword">if</span>(dist[j]&gt;dist[t]+w[i])&#123;<span class="comment">//边权判断</span></span><br><span class="line">                dist[j]=dist[t]+w[i];</span><br><span class="line">                <span class="keyword">if</span>(!st[j])&#123;</span><br><span class="line">                    q[tt++]=j;</span><br><span class="line">                    <span class="keyword">if</span>(tt==N)tt=<span class="number">0</span>;</span><br><span class="line">                    st[j]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m&gt;&gt;S&gt;&gt;T;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="type">int</span> a,b,c;</span><br><span class="line">        cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">        <span class="built_in">add</span>(a,b,c);</span><br><span class="line">        <span class="built_in">add</span>(b,a,c);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">spfa</span>();</span><br><span class="line">    </span><br><span class="line">    cout&lt;&lt;dist[T]&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













































]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>认知觉醒-感悟</title>
    <url>/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92-%E6%84%9F%E6%82%9F.html</url>
    <content><![CDATA[<h1 id="写作篇"><a href="#写作篇" class="headerlink" title="写作篇"></a>写作篇</h1><p>坚持输出思想，进行内化，尽量多去比喻。</p>
<p>比如多去记笔记-坚持下来。</p>
<p>永远不要等待，机会是需要我们争取的</p>
<p>没事多看看书</p>
<p>把事情当成兴趣来搞，那就不会那么累了</p>
<p>我们不能改变已经发生的过去，但可以追求未来的可能性。</p>
<p>一定要休息好</p>
<p>破窗效应</p>
<p>描述了一个环境中小问题被忽视和未解决时，可能会导致更严重的问题出现的现象。<br>破窗效应的核心理念是，环境的外观和维护程度会影响人们的行为和态度</p>
<p>痛苦是因为活在了昨天，焦虑是因为活在了未来。<br>你应该活在当下，抛弃执念，学会翻篇，一定会被奖励一个崭新的开始。</p>
<p>野马效应</p>
<ul>
<li>不要过于执着于小事情</li>
</ul>
<p>很多情绪障碍，都是不健康的逃避，或者回避情绪的结果。</p>
<p>如果你想要的东西还不存在，那就亲手把他创造出来。</p>
]]></content>
      <categories>
        <category>感悟</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><h1 id="存储器容量扩展（字扩展、位扩展、字位扩展）-10分"><a href="#存储器容量扩展（字扩展、位扩展、字位扩展）-10分" class="headerlink" title="存储器容量扩展（字扩展、位扩展、字位扩展）(10分)"></a>存储器容量扩展（字扩展、位扩展、字位扩展）(10分)</h1><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-1.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-2.jpg"></p>
<h2 id="位扩展"><a href="#位扩展" class="headerlink" title="位扩展"></a>位扩展</h2><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-3.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-4.jpg"></p>
<h2 id="字扩展"><a href="#字扩展" class="headerlink" title="字扩展"></a>字扩展</h2><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-5.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-6.jpg"></p>
<h2 id="字位扩展"><a href="#字位扩展" class="headerlink" title="字位扩展"></a>字位扩展</h2><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-7.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/1-8.jpg"></p>
<h1 id="汉明码-10分"><a href="#汉明码-10分" class="headerlink" title="汉明码(10分)"></a>汉明码(10分)</h1><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2-1.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/2-2.jpg"></p>
<h1 id="存储器-20分"><a href="#存储器-20分" class="headerlink" title="存储器(20分)"></a>存储器(20分)</h1><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/3-1.jpg"></p>
<blockquote>
<p>原题中给了16根地址线，最大可以表示64K，8根数据线，最大可以表示8位。用户程序区需要2块CPU进行拼接一下。</p>
</blockquote>
<p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/3-2.jpg"></p>
<blockquote>
<p>地址线的前三位作为标识码，比如ROM CPU标识码是000 ,CPU1 标识码是001 ,CPU2 标识码是010, 系统程序工作区是111.<br>ROM 需要接地</p>
</blockquote>
<p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/3-3.jpg"></p>
<blockquote>
<p>G：控制区， Y：输出区</p>
</blockquote>
<h1 id="部分整理的内容-必考题型啥的-贡献人：xyh"><a href="#部分整理的内容-必考题型啥的-贡献人：xyh" class="headerlink" title="部分整理的内容(必考题型啥的) 贡献人：xyh"></a>部分整理的内容(必考题型啥的) 贡献人：xyh</h1><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4-1.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4-2.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4-3.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/4-4.jpg"></p>
<h1 id="贡献人：yfm"><a href="#贡献人：yfm" class="headerlink" title="贡献人：yfm"></a>贡献人：yfm</h1><p><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-1.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-2.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-3.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-4.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-5.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-6.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-7.jpg"><br><img src="/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/5-8.jpg"></p>
]]></content>
      <categories>
        <category>大三上</category>
      </categories>
      <tags>
        <tag>大三上</tag>
      </tags>
  </entry>
  <entry>
    <title>认知觉醒</title>
    <url>/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92.html</url>
    <content><![CDATA[<h1 id="内观自己"><a href="#内观自己" class="headerlink" title="内观自己"></a>内观自己</h1><blockquote>
<p>大多数时候我们以为自己在思考，其实都是在对自身的行为和欲望进行合理化</p>
</blockquote>
<p>习惯之所以难以改变，就是因为它是自我巩固的——越用越强，越强越用。要想从既有的习惯中跳出来，最好的方法不是依靠自制力，而是依靠知识</p>
<p>理智脑不是直接干活的，干活是本能脑和情绪脑的事情，因为它们的“力气”大；上天赋予理智脑智慧，是让它驱动本能和情绪。</p>
<ul>
<li><em>就好比是依靠兴趣去干一件没有利益的事情，这是情绪脑占主导</em></li>
</ul>
<p>无论个体还是群体，人类的安全感都源于自己在某一方面拥有的独特优势：或能力，或财富，或权力，或影响力。</p>
<p>焦虑的原因就两条：想同时做很多事，又想立即看到效果。</p>
<p>社会中的精英通常是那些能更好地克服天性的人，他们的耐心水平更高，延迟满足的能力更强。</p>
<p>要想让自己高效成长，必须让自己始终处于<code>舒适区的边缘</code>，贸然跨到困难区会让自己受挫，而始终停留在舒适区会让自己停滞</p>
<p>即对于学习而言，学习之后的思考、思考之后的行动、行动之后的改变更重要，如果不盯住<code>内层的改变量</code>，那么在表层投入再多的学习量也会事倍功半；因此，<br>从权重上看，改变量&gt;行动量&gt;思考量&gt;学习量。</p>
<p>所谓“熔断不读书法”，意思就是在读书时一旦看到有启发的内容，就触发熔断点，立刻停止读书。停止读书之后做什么呢？围绕这个触发点对自己提问。</p>
<p>用感性能力帮助自己选择，再用理性能力帮助自己思考。</p>
<ul>
<li>你内心想要什么。再用理性能力去做。</li>
</ul>
<p>对此，他解释道：“不管你现在是什么水平，这一招都管用——就是凭感觉！那些一眼就能看出答案的题目，不用理它；一眼看过去就头痛、不知道在说什么的题目，<br>也不用理它；只有那种大致能看出点思路，但又要动点脑筋的题目，一定要多做。这个就是中间地带，是你能够进步最快的地方。”</p>
<p>提升思考能力的方法正是<code>不断明确核心困难和心得感悟</code>，并专注于此。</p>
<p>行动力不足的真正原因是<code>选择模糊</code>。</p>
<p>人类面对不确定性时会不自觉逃避。</p>
<p>当我们没有足够清晰的指令或者目标时，就很容易选择享乐，放弃那些本该坚持但比较烧脑的选项。</p>
<p>而具体事件一旦变模糊，其边界就会无限扩大，原本并不困难的小事，也会在模糊的潜意识里变得难以解决。</p>
<p>要想不受其困扰，唯一的办法就是正视它、看清它、拆解它、化解它，不给它进入潜意识的机会，不给它变模糊的机会；即使已经进入潜意识，也要想办法将它挖出<br>来。所以，当你感到心里有说不清、道不明的难受的感觉时，赶紧坐下来，向自己提问。</p>
<p>恐惧就是一个欺软怕硬的货色，你躲避它，它就张牙舞爪，你正视它，它就原形毕露。</p>
<p>我们要把目标和过程细化、具体化，在诸多可能性中建立一条单行通道，让自己始终处于“没得选”的状态。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/1.jpg"></p>
<p>只取一个全书<code>最触动自己的点</code>，然后尽可能去实践、改变。这样读书不仅收获更大，而且也不会焦虑。</p>
<p>用感知力来代替思考力</p>
<blockquote>
<p>把一件事情确定下来 &gt; do it</p>
</blockquote>
<h1 id="第三节"><a href="#第三节" class="headerlink" title="第三节"></a>第三节</h1><p>当我们读过《刻意练习》后，再面对学习中的困难时就不会逃避和畏惧，而会利用“舒适区边缘”理论让自己积极面对挑战；比如当我们读过《超越感觉》后，面对自己<br>讨厌的人时也不会表现出攻击和不屑，而会尽力从他身上学习真实可用的东西。</p>
<p>我们总是这样，一开始只想找一根绳子，最后却牵出一头大象。</p>
<p>元认知能力就是觉察力和自控力的组合。所以从实用角度讲，元认知能力可以被重新定义为：自我审视、主动控制，防止被潜意识左右的能力。<br><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/2.jpg"></p>
<p>每当遇到需要选择的情况时，我们要是能先停留几秒思考一下，就有可能激活自己的理智脑，启用元认知来审视当前的思维，然后做出不一样的选择。</p>
<p>一定要在选择节点上多花“元时间”。</p>
<p>元时间通常分布在“选择的节点”上，比如一件事情、一个阶段或一天开始或结束时。善用这些时间会极大程度地优化后续时间的质量。</p>
<p>在选择的节点审视自己的第一反应，并产生清晰明确的主张。</p>
<p>元认知能力强的一个突出表现是：对模糊零容忍。</p>
<p>自己行动力弱的时候，脑子里对未来的具体行动肯定是模糊不清的。</p>
<p>元认知能力强的人就是这样：无论是当下的注意力、当天的日程安排，还是长期的人生目标，他们都力求想清楚意义、进行自我审视和主动控制，而不是随波逐流。</p>
<h1 id="专注力——情绪和智慧的交叉地带"><a href="#专注力——情绪和智慧的交叉地带" class="headerlink" title="专注力——情绪和智慧的交叉地带"></a>专注力——情绪和智慧的交叉地带</h1><p>身体感受永远是进入当下状态的最好媒介，而感受事物消失的过程更是一种很好的专注力训练。它提示我们，身心合一的要领不仅是专注于当下，更是享受当下，而<br>这种享受必将使我们更从容，不慌张。</p>
<p><code>让感受回归行动</code></p>
<p>第一，有定义明确的目标。比如你要练琴，那就告诉自己：“连续三次不犯任何错误、以适当的速度弹奏完曲子。”而不是“我要练琴半小时”这样宽泛的目标。目标定<br>义越明确，注意力的感知精度就会越高，精力越集中，技能越精进。如果目标太大，那就将它分解成小目标，这样做也是为了使目标更具体、精细。</p>
<p>第二，练习时极度专注。谁都知道专注的重要性，但沉浸的关键是要做到“极度”专注，也就是说，在短时间内投入100%的精力比长时间投入70%的精力好，因为专注<br>的真正动力并不是毅力和耐心，而是<code>不断发现技巧上的微妙差异和持续存在的关注点</code>,精力越集中则感知越细微。</p>
<p>所以变聪明的秘诀就是：先保持极度专注，想不出答案时再将注意力转换到另一件与此毫不相干的事情上。即事前聚精会神，让意识极度投入；事后完全忘记，让意<br>识彻底撒手。这样，灵感和答案就会大概率地出现。<br><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/3.jpg"></p>
<p>第三，能获得有效的反馈。一般而言，不论做什么事情我们都需要反馈来准确识别自己在哪些方面还存在不足，以及为什么会存在不足。缺少反馈，我们既容易出错<br>，又容易走神，而且很难快速提升个人能力。因此，有教练指导是极好的事，有老师批评也是好的，闭门造车式的练习不仅容易让人分心走神，也会让自己长期在低<br>水平层面徘徊。所以，想方设法得到及时、有效的指导和反馈是不断精进的重要条件。如果条件有限，反馈也可以通过书籍影像、与他人交流或者自我反思来获取。</p>
<p>第四，始终在拉伸区练习。一味重复已经掌握的事情是没有意义的，但挑战太难的任务也会让自己感到挫败，二者都无法使人进入沉浸状态，好的状态应该介于二者<br>之间。</p>
<p>例子：<br>我先听她弹一遍，发现有很多不熟练、易出错的地方，于是我要求她今天只练第一节，后面的先不练（把大目标拆分成小目标），然后只练刚才弹错的地方（在拉伸<br>区练习），只要能连续流畅地弹3遍不出错就算完成（目标具体清晰）。练习过程中，我会及时纠正她的指法和按键错误（及时有效的反馈），这样，她很快进入了<br>专注状态（沉浸其中），不一会儿就把第一节弹得很好了。</p>
<h1 id="学习力——学习不是一味地努力"><a href="#学习力——学习不是一味地努力" class="headerlink" title="学习力——学习不是一味地努力"></a>学习力——学习不是一味地努力</h1><p><code>找一个自己能坚持做下去的方式</code>，比单纯按照标准化的时间和方式做更重要。以前一直以为多花时间才能学好、才能达到效果，其实那是因为自己急于求成，<br>想要快速见效，这样反而不容易坚持。现在降低了难度和标准，自己的行动力反而能持续增强，虽然达到目标所需的时间可能会变长，但是我相信这样的坚持最终可<br>以产生复利效应。</p>
<p>不管做什么，不管当前做得怎么样，只要让自己<code>处在舒适区的边缘</code>持续练习，你的舒适区就会不断扩大，拉伸区也就会不断扩展，原先的困难区也会慢慢<br>变成拉伸区，甚至是舒适区，所以成长是必然的。</p>
<p>速成是不可能的。</p>
<p>拆解目标——<code>把大目标拆分为小目标</code>，任务就会立即从困难区转移到拉伸区，这样你就愿意行动了。不信的话，你可以细心观察一下，几乎所有的行动达人<br>都是拆解任务的高手。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/4.jpg"></p>
<p>阅读<br><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/5.jpg"></p>
<p>可见“缝接”是深度学习的关键，而大多数人只完成了“获取知识”，却忽略了“缝接知识”这一步，因此，他们的学习过程是不完整的。</p>
<p>所以，逼迫自己获取高质量的知识以及深度缝接新知识，再用自己的语言或文字教授他人，是为深度学习之道。</p>
<blockquote>
<p>总结：任务拆解<br>        坚持下去的方式<br>        复利效应<br>        缝接知识<br>        传授他人</p>
</blockquote>
<h2 id="如何深度学习"><a href="#如何深度学习" class="headerlink" title="如何深度学习"></a>如何深度学习</h2><p>一是尽可能获取并亲自钻研一手知识。</p>
<p>二是尽可能用自己的话把所学的知识写出来。</p>
<p>当一个你精心打磨的作品打动了别人，它产生的影响力将远比每天都写但缺乏深度的思考要大得多。</p>
<p>三是反思生活。</p>
<p>专注于深度学习，同时对浅学习保持开放。</p>
<ul>
<li>用自己的语言重述信息，即找到触动自己的信息点；</li>
<li>描述自己的相关经验，即关联生活中的其他知识；</li>
<li>我的应用，即转化为行动，让自己切实改变。</li>
</ul>
<p>鉴于此，我时常也鼓励人们写作。因为单纯阅读时，人容易满足于获取新知识，而一旦开始写作，就必须逼迫自己把所学的知识关联起来，所以写作就是一条深度学<br>习的自然路径。</p>
<p>绝大多数人习惯以孤立的思维看待事物，喜欢花大量时间收集和占有信息；而另一批先行者则更喜欢拨弄信息之间的关联，从而在不知不觉间变得聪明了起来。</p>
<p>想来也是，一本书再好，我们也无法记住全部内容。回头一翻，很多内容就像没看过一样，但那些被自己关联过的观点和知识却很难被忘记，让自己发生改变的观点<br>必定印象更加深刻。这也反过来印证了前文：<code>知识</code>的获取不在于多少，而在于是否与自己有关联，以及这种关联有多充分。对别人有用的东西可能与自己并没有<br>关系，那就果断将其放弃，把握“与自己有关”的筛选原则，会让关联效能大大提升。</p>
<p>你需要明确的目标或强烈的需求。</p>
<p><code>人生没有白走的路，每一步都算数。</code></p>
<h2 id="建立个人认知体系其实很简单"><a href="#建立个人认知体系其实很简单" class="headerlink" title="建立个人认知体系其实很简单"></a>建立个人认知体系其实很简单</h2><p>个人成长的目的已经不是“知道和理解”了，而是“判断与选择”</p>
<p>所以在个人成长领域，没有最优、最确定、最权威的认知体系，只有最适合我们当前状态的认知体系。</p>
<h3 id="只学让自己触动的"><a href="#只学让自己触动的" class="headerlink" title="只学让自己触动的"></a>只学让自己触动的</h3><p>在阅读时，我唯一要做的事情就是：寻找触动点。我会在触动自己的地方做标记，在空白处写下大量能联想到的思考，书读完之后，我会放上几天，然后问自己：“这本书最触动自己的是哪个点？”这个点可以是一个理论、一个案例，甚至是一句话，只要它真正触动我，并能让我发生真实的改变，我就认为这本书超值了，至于其他，忘记就忘记了，我一点也不觉得可惜。</p>
<p>体系的本质就是用独特的视角将一些零散的、独立的知识、概念或观点整合为应对这个世界的方法和技巧。</p>
<p>这就是搭建个人认知体系的真相：打碎各家的认知体系，只取其中最触动自己的点或块，然后将其拼接成自己的认知网络。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/6.jpg"></p>
<p>一件事若迟迟没有完成，心里就总是记挂，期盼着早点结束；此事一旦完成，做这件事的动机就会立即趋向于零。</p>
<p>这就是打卡心态的特性：学不到，假装一下；学到了，立即停止。</p>
<p>集中心力做眼前的事就好</p>
<p>我们在任务设置时要使用新策略：设下限，不设上限。</p>
<p>比如原先打卡每天要背20个单词，这是任务的上限，假设做到这一条并不容易，所以任务一完成你就会松一口气，心想：终于完事了。现在把任务调整为背5个单词<br>——一个很容易完成的下限，这样做的好处是：你完成目标毫无负担，且此时刚好进入学习状态，精力旺盛，就愿意顺着惯性继续学下去，毕竟此后多学一个单词都<br>是额外的收获，心态完全不同，身心容易沉浸，不会顾虑什么时候才能完成任务。</p>
<p>是否有及时、持续的正向反馈，正是产生学习效果差异的关键。</p>
<p>所以科学的学习策略是产出作品、获取反馈，驱动本能脑和情绪脑去“玩玩玩”，而不是一味地努力坚持，让理智脑苦苦地去“学学学”。</p>
<p>·教是最好的学；<br>·用是最好的学；<br>·输出倒逼输入；<br>·请用作品说话</p>
<p>首先，分享不是随意分享半成品，而是尽最大力气将作品打磨成自己当前能力范围内可完成的最好的样子。</p>
<p>真正的学习成长不是“努力，努力再努力”，而是“反馈，反馈再反馈”</p>
<p>定义明确的目标、极度的专注、有效的反馈、在拉伸区练习。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/7.jpg"></p>
<p>反观那些轻松的学霸，他们学习时从不过度消耗自己，只要感到精力不足，就停下来主动休息，这反而使他们精力桶的水位得到快速回升。</p>
<p><code>累了就歇会</code></p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/8.jpg"></p>
<p>更科学的模式应该是：极度专注+主动休息，如此反复。</p>
<p>毕竟克服困难和抵制诱惑都需要消耗意志力。</p>
<p>所以，一个真正的自控高手，不是一个只知道冲刺的人，而是一个善于主动休息、保持平衡的人。</p>
<h1 id="行动力——没有行动世界只是个概念"><a href="#行动力——没有行动世界只是个概念" class="headerlink" title="行动力——没有行动世界只是个概念"></a>行动力——没有行动世界只是个概念</h1><p>在增强回路的起点，做出有利选择所消耗的自制力是最小的，如果等负的增强回路形成，再想改变就难喽！</p>
<p>在初始阶段，强迫自己先做重要的事情，一旦进入正向的增强回路，你便能拥有强大的行动力——这正是增强自制力、提升行动力的秘密</p>
<p>一切都只知道个大概，这对提升行动力来说，是很致命的。</p>
<p>清晰力，也就是把目标细化、具体化的能力——行动力只有在清晰力的支撑下才能得到重构。</p>
<p>你陷入怠惰、懒散、空虚的情绪中动弹不得时，往往是因为你的大脑处于模糊状态。<br>大脑要么不清楚自己想要什么；要么同时想做的事太多，无法确定最想实现的目标是什么；要么知道目标，但没想好具体要在什么时候以什么方式去实现。</p>
<p>想先看到结果再行动的人往往无法看到结果。</p>
<p>思考很重要，但光想不做，贻害无穷。</p>
<p>当自己从来没有主动做成过一件事情的时候，总会以为做成一件事很容易，于是生出很多不切实际的欲望和想法，而欲望越多，就越做不成事</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/9.jpg"></p>
<p>如果是这样，我想你有必要先审视一下自己的行动量，看它是否突破了发生改变的阈值。因为付出的努力必须达到某种程度才能影响一个体系，而努力程度低于这个<br>阈值时，你的行动就会收效甚微。<br><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/10.jpg"></p>
<p>如果你觉得别人讲的道理有理有据，而自己暂时无法反驳，碰巧自己又非常想做这件事，那就相信他们说的是对的，然后笃定地行动。</p>
<p>在实践途中，你自然也要保持思考，用行动反复验证他们的理论，<code>不适则改、适则用</code>，直到自己真正做到为止。</p>
<h2 id="“道理都懂，就是不做”怎么破解"><a href="#“道理都懂，就是不做”怎么破解" class="headerlink" title="“道理都懂，就是不做”怎么破解"></a>“道理都懂，就是不做”怎么破解</h2><p><code>真正的捷径正是那条看起来漫长且低效的行动之路</code>。</p>
<p>在技能学习的路径中，仅仅“知道”是无法形成反馈闭环的，只有经过大量的练习，让大脑相关的神经元形成强关联，反馈闭环才能经由“做到”这个节点得以形成。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/11.jpg"></p>
<p>把认知当成技能，知道或想通一个道理时，不要高兴得太早，想想后面还要做大量的练习，这样就不浮躁了。<br><img src="/post/%E8%AE%A4%E7%9F%A5%E8%A7%89%E9%86%92/12.jpg"></p>
<p>不发生真正改变的学习都是无效的学习</p>
<p>当“改变”成了读书学习的最高标尺后，我们的学习量还有可能下降。</p>
<p>道理都是“空头支票”，改变才是“真金白银”。</p>
<h1 id="情绪力——情绪是多角度看问题的智慧"><a href="#情绪力——情绪是多角度看问题的智慧" class="headerlink" title="情绪力——情绪是多角度看问题的智慧"></a>情绪力——情绪是多角度看问题的智慧</h1><p>只要我们的注意力被某一个巨大的事物吸引，我们就有可能进入稀缺状态，进而降低心智带宽，做出不明智的行为。</p>
<p>当一个人同时面临很多任务的时候，他的心智带宽就会降低，反而没有了行动力和自控力。</p>
<p>现代生活虽然缓解了生存压力，却又带来了自控上的压力。抵制诱惑和欲望无一不消耗我们的心智带宽。</p>
<p>如何保持心智富足？</p>
<ul>
<li>保持环境觉知，理智选择。</li>
<li>保持目标觉知，少即是多。<ul>
<li>脑子里存在大量任务和念头的时候，往往是我们行动力最弱的时候。</li>
<li>真正的行动力高手不是有能耐在同一时间做很多事的人，而是会想办法避免同时做很多事的人。</li>
</ul>
</li>
<li>保持情绪觉知，谨慎决定。</li>
<li>保持闲余觉知，自我设限。</li>
</ul>
<h2 id="你的坏情绪，源于视角单一"><a href="#你的坏情绪，源于视角单一" class="headerlink" title="你的坏情绪，源于视角单一"></a>你的坏情绪，源于视角单一</h2><p>不难推断，像这辆摩托车一样，世界上任何一个人、任何一件物、任何一件事都是多维立体的。</p>
<p>只是有的人面对再好的事情时都盯着一点瑕疵不放，而有的人却能从任何一件糟糕的事情中找到闪光点并放大，忽视其他不足之处。</p>
<p>要想拥有多视角能力，就要进行刻意练习，直到形成新的路径依赖。</p>
<ul>
<li>勤移动</li>
<li>善学习</li>
<li>要开放<ul>
<li>很多人情绪不好，是因为他们把自己做的假设当成了事实，在不确定对方真实想法的情况下，直接把情绪发泄了出来。</li>
</ul>
</li>
<li>寻帮助</li>
<li>多运动</li>
<li>常反思</li>
</ul>
<p>不要让事情本身束缚了你的情绪和注意力。</p>
<h2 id="幸福源自主动掌控"><a href="#幸福源自主动掌控" class="headerlink" title="幸福源自主动掌控"></a>幸福源自主动掌控</h2><p>·有良好的人际关系，得到别人的爱与尊敬；<br>·有独特的本领、技能，为他人带去独特价值；<br>·有自主选择的权力，能做自己想做的事情。</p>
<p>困难和压力总能把人的情绪和注意力抓得死死的，让你很难看到其他角度。</p>
<p>获取掌控权并不难。当你遇到那些“不想做但必须做”的事情时，只要在心里<br>默念一句“咒语”，就可以让自己跳出事情本身。这句“咒语”便是：<code>我并不是在做这件事，我只是在做另外一件事</code>。</p>
<p>事情本身并不重要，我们只是在通过它获取另外一种乐趣，顺便把这件事给做了。</p>
<p>为自己而做和为玩而做。</p>
<p>产生内部动机最好的方式莫过于立足于让自己变好。</p>
<p>为自己而做，通常是为了应对外部的压力和要求，为玩而做，则是为了应对重复、枯燥的事情。</p>
<p>把那些困难的大事情拆解成小块。</p>
<p>怕什么真理无穷,<code>进一寸有进一寸的欢喜</code>。</p>
<p>为自己而做可以解放情绪，为玩而做可以解放注意力。</p>
<h1 id="早冥读写跑，人生五件套——成本最低的成长之道"><a href="#早冥读写跑，人生五件套——成本最低的成长之道" class="headerlink" title="早冥读写跑，人生五件套——成本最低的成长之道"></a>早冥读写跑，人生五件套——成本最低的成长之道</h1><p>一旦认知上想通想透了，行动时就不需要用大把大把的意志力来支撑了。</p>
<ul>
<li>初期会有一个相对痛苦的适应期</li>
<li>循序渐进、难度匹配</li>
<li>按状态起床</li>
<li>中午需要午休一次</li>
<li>不打扰他人</li>
<li>提前准备</li>
<li>明确遇到哪些情况时可以不早起</li>
</ul>
<p>成功人士一旦发现别人的好习惯，就会立刻将这个习惯变成自己的。</p>
<h2 id="冥想"><a href="#冥想" class="headerlink" title="冥想"></a>冥想</h2><p>每天思考自己的呼吸15分钟</p>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>想要快速成为一个行业的高手，最好的方法就是和行业专家交流，直接向他们请教。</p>
<p>读书就是用最低廉的成本获取最高级的成长策略</p>
<p>脚步不能丈量的地方，文字可以；眼睛无法看到的地方，文字可以</p>
<p>所有的书籍都是智者看待事物、做选择、决策的过程。</p>
<ul>
<li>读书要先学会选书</li>
<li>阅读是为了改变。很多人以为一本书只要读完，读书的过程就结束了。事实上，阅读只是整个过程的开始，阅读之后的思考、思考之后的实践比阅读本身更加重要（这里主要指非虚构类书籍）。很多人的阅读仅停留在表面，读的时候觉得这里好有道理、那里好有道理，读完之后就不闻不问了，然后迅速转移到下一本书中，这种满足于录入的阅读造成的一个直接后果便是，一段时间之后再去翻这本书就好像之前没有看过一样，所有的痕迹都烟消云散了。真正读好一本书，往往需要花费数倍于阅读的时间去思考和实践，并输出自己的东西——可能是一篇文章，也可能是养成一个习惯——这个过程比阅读本身要费力得多。</li>
<li>只要紧紧盯住“改变”这个根本目标，很多阅读障碍就会立即消失。</li>
<li>高阶读书法<ul>
<li>注意自己在阅读时产生的关联</li>
<li>读写不分家</li>
</ul>
</li>
</ul>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>无论学习什么东西，都要努力琢磨它们究竟在讲什么，它们的实际意义是什么，然后用自己的话将其重新讲出来。<br>通过自己的语言，用最简单的话把一件事情讲清楚，最好让外行人也能听懂。<br>先用合适的故事引起对方“感性小人”的兴趣和注意，然后把想要表达的道理通过“感性小人”转达给“理性小人”。</p>
<p>木心：开始读书，要浅。浅到刚开始就可以居高临下。</p>
<p>用自己的语言重新表达就是在调动自己的千军万马。</p>
<p>一个人想要真正成长，一定要学会写作，因为“只读不写”的学习是不完整的，是低效的。而写作时如果不学会用自己的语言转述，则是无用的。</p>
<h1 id="运动"><a href="#运动" class="headerlink" title="运动"></a>运动</h1><p>时常运动的人，体内生态系统犹如一汪清泉，而久坐不动的人，体内生态系统则更像是一潭死水</p>
<p>运动能够使大脑长出更多的新的神经元，这意味着运动可以在物理上让人变得更“聪明”</p>
<p>所以运动不是关键，运动之后的活动安排及环境刺激才是关键。</p>
<p>运动之后，脑子需要充分接受考验或挑战，才能让自己不断地变“聪明”。</p>
<p>所以绝大多数运动者的硬伤就在这里：运动之后缺乏主动学习的意识和习惯。</p>
<p>让自己保持做有氧运动时有些气喘的状态。</p>
<p>好的运动方式一定同时包含有氧运动和复杂运动。</p>
<p>灵魂想要走得远，身体必须在路上。</p>
<p>对当天最触动自己的事情或感悟进行复盘。</p>
<h1 id="最终总结"><a href="#最终总结" class="headerlink" title="最终总结"></a>最终总结</h1><p>记录下一天中最令你感触的点。</p>
<ul>
<li>描述经过——以便日后回顾时能想起当时的场景；</li>
<li>分析原因——多问几个为什么，直到有深度的启发；</li>
<li>改进措施——尽可能提炼出一个认知点或行动点。</li>
</ul>
<p>无论何时，都要把对方的情绪和意见分开对待，这样，即使在最糟糕的事情中也能学到有用的东西。<br>有了这些认知晶石打底，我们的生命质量和密度将远远超过那些不反思的人。</p>
<p>“每日反思”至少暗含了三大底层原理。</p>
<ul>
<li>触动学习法</li>
<li>“元认知”。<ul>
<li>元认知的要义在于审视自己的感受和思维，进而发现不足之处并加以改进，以最低的成本纠正自己的认识偏差，</li>
</ul>
</li>
<li>遵循了“刻意练习”的原则<ul>
<li>能带着要领去生活，我们就会成长飞快。</li>
</ul>
</li>
</ul>
<p>反思的好处</p>
<ul>
<li>它可以节省我们的生命。<ul>
<li>因为灵感虽然是一瞬间冒出来的，但其背后却是一段生活经历的积累。</li>
</ul>
</li>
<li>它可以提高我们的感知细节的能力。<ul>
<li>越是好的反思，着眼点往往越细微</li>
</ul>
</li>
<li>它可以让我们正视痛苦</li>
</ul>
<p>痛苦哪里是什么坏事，那简直是上天给我们的成长信号与提示！</p>
<p>只要有困难或不舒服的事情出现，心里就会暗喜，知道自我提升的机会又来了。</p>
<p>踩坑点</p>
<ul>
<li>不要被形式所缚<ul>
<li>每日反思并不是一日不差的反思，只是让你有持续反思的习惯即可</li>
</ul>
</li>
<li>反思的最终目的是改变，而不是形式的完美</li>
<li>尽量提炼认知点或行动点</li>
<li>列行动清单</li>
<li>对自己极度坦诚<ul>
<li>一定要对自己极度坦诚，把心底最真实的想法挖出来，即使内心的想法让自己感到极度难堪、羞耻，但只要它是真实的，就对自己说出来，承认它，并接纳它。对自己坦诚、接纳不完美的自己，才会让自己重生。</li>
</ul>
</li>
<li>多阅读</li>
<li>选择合适的记录载体</li>
</ul>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>认知驱动</title>
    <url>/post/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8.html</url>
    <content><![CDATA[<h1 id="第二章身份–一切从信念开始"><a href="#第二章身份–一切从信念开始" class="headerlink" title="第二章身份–一切从信念开始"></a>第二章身份–一切从信念开始</h1><p><img src="/post/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/1.jpg"></p>
<p>对个体来说，最重要的事情莫过于找到人生目标和意义，想清楚自己应该成为什么样的人。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/2.jpg"></p>
<p>他们会花大量的时间去思考：通过阅读，我要成为什么样的人。或者暗示自己：我本来就是一个以书为伴、追求新知、乐于探索的人。如此一来，阅读就会成为像吃饭<br>、睡觉一样的基本需求，成为自己不做就会难受的事。</p>
<p>把潜意识的心理改造放到桌面上。毕竟在现实生活中，就算你不告诉自己应该成为一个什么样的人，你内心也有一个默认的身份存在。</p>
<p>信念从来都不是空的、假的，它是实实在在的力量，是特别强大的力量。我想只要你知道了这个秘密，就必然会主动改变策略，真正重视信念的力量。</p>
<p>“你的世界是你所关注事物的产物。”<br>“我们的大脑是依据我们关注的事物来构建世界观的。”我们选择去关注哪些事物、忽略哪些事物，会对我们的生活质量起到关键的作用。</p>
<p>人所拥有的任何东西都可以被剥夺，唯独人性最后的自由，也就是在任何境遇中选择一己态度和生活方式的自由不能被剥夺。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/3.jpg"></p>
<p>坚定信念和降低期待并不矛盾，因为坚定信念就是做最好的准备，而降低期待就是做最坏的打算。它们的目的是一致的：促使自己更好地行动，并最终产生好的结果.</p>
<p>成长注定是一个将内在身份不断揉碎并重塑的动态过程。</p>
<p>语言和思维之间其实是双向车道，而非单向车道。如果你知道自己还可以在思维和语言之间“逆向行驶”，你的生活就会多出很多主动的选择。</p>
<p>它只相信自己所见所闻的一切事情，对于已知之外的未知，它会主动怀疑并排斥。</p>
<p>比如在事情开始的阶段，他会让自己睡也想、醒也想，一天24小时不断地思考、透彻地思考，让自己从头顶到脚底，全身充满“非同寻常的、强烈的愿望”。他说：“如<br>果从身上某处切开，流出来的不是血，而是这种‘愿望’。”比如在事情计划的阶段，他又会反复周密地推敲实现愿望的具体方法，将实现愿望的过程在头脑里进行模拟<br>演练，直到像“看见了”它的结果一样才肯罢休。</p>
<p>有时候，我们无法达成目标不是因为我们不够理性，而是因为我们不够感性。</p>
<p>无论什么时候，我们都要告诉自己：这世上没有什么事是不可能的。至少在一开始的时候不要轻易对自己说不可能！</p>
<h1 id="第三章-心理"><a href="#第三章-心理" class="headerlink" title="第三章-心理"></a>第三章-心理</h1><h2 id="清除不开心"><a href="#清除不开心" class="headerlink" title="清除不开心"></a>清除不开心</h2><h2 id="二元对立"><a href="#二元对立" class="headerlink" title="二元对立"></a>二元对立</h2><p>人类的天性也是追求确定的，面对不确定的事物，我们心里总是会感到不安或不适。</p>
<p>在非黑即白的世界里，人们只能容纳自己喜欢的事物，只能接受自己喜欢的秩序。</p>
<p>而复杂，意味着更多的变化和不确定，同时也意味着更多的丰富和精彩。</p>
<p>成熟的人并不急于得到即时结果，不会让当下的不确定束缚自己，而是保持适当的沉默和耐心，继续专注于手头的事情，等待最佳时机的到来。</p>
<p>对于二元对立观点，我们没有必要唾弃它、抛弃它，我们要学会在简单世界和复杂世界中来回穿梭，而不是只取其一，否则就又陷入了二元对立的思维陷阱。二元对<br>立本身没有好坏，关键看我们如何对待和使用。</p>
<p>如果更进一步，你还可以从他们身上发掘值得学习的品质，或从不利的环境中找到对自己有利的因素。这样的反转可以让自己无往不利，但前提是你要走出二元对立<br>，接纳某些自己不喜欢的事情。至于究竟该怎么做，现实会给你答案。无论你选择做自己也好，接纳他人也好，还是二者兼有，最终能让你发自内心地感到愉悦和平<br>静，并让你稳步提升的，就是最好的方式。不用担心失去自我，因为你不必成为一个复杂的人。你只要能够觉知复杂、接受复杂、拥抱复杂，便能享受这个复杂世界中<br>精彩的一面，从而在这个复杂的世界里做一个简单的人。</p>
<p>进入了舒适区，我们可以暂时松一口气，但不能一松到底，因为舒适区的消逝瓦解“不以人的意志为转移”。</p>
<p>当我们长时间觉得生活没有压力和挑战时，危险可能已经潜伏在身边了。</p>
<p>减压秘诀就是尽量不要同时设定很多目标，主动降低期待，不急于看到成果。</p>
<p>“有点压力”还是太笼统，到底什么程度才算处在舒适区的边缘呢？好的状态（熟悉的部分）约占85%，困难的状态（有挑战的部分）约占15%。</p>
<ul>
<li>舒适区边缘：二八法则</li>
</ul>
<h1 id="下篇-做成一件事情的技法"><a href="#下篇-做成一件事情的技法" class="headerlink" title="下篇-做成一件事情的技法"></a>下篇-做成一件事情的技法</h1><h2 id="做一个真正的长期主义者"><a href="#做一个真正的长期主义者" class="headerlink" title="做一个真正的长期主义者"></a>做一个真正的长期主义者</h2><p>真正的目标和动力来自我们对一件事情清晰而长远的认知，而非某个特殊的时间点。</p>
<p>当我们通过原理机制彻底看清做一件事的好处时，便会觉得不做这件事是一种损失。</p>
<p>看不到具体好处和方法的目标非常单薄，它无法支撑你度过一年，甚至三个月。</p>
<p>找到做这件事情的意义，调用-情绪脑。</p>
<p>我们都愿意从事自己认为有价值感和意义的事情，因为动机是学习活动的终极动力，也是掌握任何一项技能的第一步，而获得独特的价值感和意义最好的方法就是<br>主动去描述目标与自己的关联，换句话说就是调整看待事物的角度，看到这件事情的长远意义。</p>
<p>一个人的成就往往在他的眼界之内，一个人在现实世界中能走多远，其实在他心里早就标记好了。</p>
<p>戒烟的核心在于意识到戒烟不是一种牺牲，不是一种权利被剥夺，而是一种收获与解放。</p>
<p>看清机制，防止盲目努力；寻找意义，注入长久动力；感受好处，体验当下愉悦。</p>
<p>运用书写来表达自己情绪的人更加健康。</p>
<p>没有输出能力的人只会在脑中想，但不会说；<br>·输出能力弱的人可能会说，但不一定能说清楚；<br>·输出能力强的人通常都会写，而且还能写清楚。</p>
<p>但困难之时正是进步之机。如果此时有人敢直视模糊、敢于对不确定性做出脑力范围内最大程度的“假设”，那他就能更大概率地突出重围，获取更多人生优势。</p>
<p>·反思的时候想不清问题的原因，那就本着极度坦诚的态度，先假设一个自己认为最可能的原因；<br>·规划日程的时候如果有很多随机干扰，那就以最大可能为标准，先假设一个具体的计划；<br>·找不到人生目标的时候，不妨将所有选项列出来，并将那个目前认为最可能实现的选项假设为目标。</p>
<p>关键不在于对错，而在于你得先有一个“想法”。只要我们能够依据当前所有的知识和可用信息，先做出一个假设，我们就不会卡在原地，就能够继续向前迈进。更多<br>新信息必然会在后续的行动中慢慢浮现，如此，我们就有了快速进步的可能。</p>
<p>如果你觉得别人讲的道理有理有据，而自己暂时无法反驳，碰巧自己又非常想做这件事，那就相信他们说的是对的，然后笃定地行动。在实践途中，你自然也要保持<br>思考，用行动反复验证他们的理论，不适则改，适则用，直到自己真正做到为止。</p>
<p>现实似乎总在提醒我们不要高估自己的能力，告诉我们能学的东西其实很少，能做的事情也很少，当现实一次又一次给我们相同的反馈时，我们就应该静下心来关<br>注这个事实。因为这背后很可能就是我们人类急于求成的天性在作祟，所以一个清醒的人应该对现实结果保持坦诚，接纳每次进步微小的现实，接纳行动初期笨拙的<br>现实。只有开始接纳现实，真正的进步才会到来。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>一是学会将观点与情绪分离。<br>二是明确培养习惯和技能不能马上看到真正的结果。</p>
<p>“敢假设”和“看现实结果”是一对绝佳的组合，它们几乎适用于所有场景。无论是治国、治商，还是治学、治人，都会用到这个底层方法论。所以在你前行的路上，请<br>一定记住这句话：假设是一切进步的开始，现实结果是最好的评判师。</p>
<p>我们长大后的多数烦恼都来自对自己和他人的过高期待。</p>
<p>因为很多任务其实都是我们自己的欲望强加给我们的，就算暂时放弃天也不会塌下来。相反，当我们主动放下那份不切实际的期待后，反而可以安静下来，专注于眼<br>前最重要的事情。</p>
<p>主动削减欲望、降低期待的目的在于让自己丢掉精神包袱、轻装上阵，毕竟焦虑只会让我们停滞不前。</p>
<p>只要我在遇到困难时能主动降低期待，允许自己一次只做好一件事，允许自己在开始的时候进步缓慢，甚至反复失败，允许自己花更长的时间去练习，就一定能做<br>成这件事情。</p>
<p>你要一开始就把自己想成是一个人，没有父母、没有子女、没有配偶、没有朋友、没有任何人的帮助，这样，后面的一切都会让你觉得无限惊喜。</p>
<p>我认为检验一流心理的标准也是如此——看一个人能不能在心中同时容纳两种相反的期待，还能正常行事。</p>
<p>如果犯过的错误下次还犯，做过的题目下次还错，那说明这根本不是学习，或者是效率极低的学习。相反，保证出过错的题不再出错，搞明白之后不会忘记，才是学<br>习的底线。</p>
<p>但张同完的方法是：只看一部剧，但这一部剧要看100遍！他还提供了这一方法的具体步骤。<br>第一步，关掉所有字幕观看第一遍；<br>第二步，打开母语字幕观看第二遍，确认之前没有听懂的部分；<br>第三步，换成英文字幕，把刚才没听懂的片段抄下来；<br>第四步，反复练习听不清楚的片段，听完马上跟读；<br>第五步，关掉所有字幕，观看剩下的97遍。<br>这其中，关键要领是弄清楚每一句台词的意思，听完马上跟读，对不熟练的片段反复练习，使语气、语速、语调尽可能与剧中一样。换句话说，就是将剧中的情景对<br>话强化为“大脑的肌肉记忆”，直到在类似的场景下不用思考就能脱口说出极为准确和地道的外语。</p>
<p>为什么那些学习成绩一般的人会越学越痛苦。因为前面的学习有很多漏洞和盲区，所以后面所有建立在这些基础之上的知识就会摇摇欲坠。之前的漏洞和盲区若是得<br>不到彻底的解决，之后会一直受此影响，那么学习上的新问题和新漏洞就会越来越多。</p>
<p><img src="/post/%E8%AE%A4%E7%9F%A5%E9%A9%B1%E5%8A%A8/4.jpg"></p>
<p>凡是遇到卡壳、学不下去的情况，只有一个原因——你对此前学过的东西不熟练，没有达到掌握的程度。</p>
<p>真正的对手不怕你会一万招，就怕你把一招练一万次。</p>
<p>在不利的环境中，我们还要提升自我觉察能力，让自己尽可能避免细枝末节的琐事，避开可有可无的应酬和闲聊，把省下的时间和精力用于自我提升，积蓄移动的<br>能量。</p>
<p>如果不希望受某些环境的影响，最好的方式就是避免让自己置身其中。</p>
<p>而无法运用的知识，学得再多又有什么意义呢？</p>
<p>知识和智慧不是一回事，智慧是去实践。</p>
<p>学习的秘密之一就在于同时调动多维度感官。</p>
]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>书籍</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-高级篇</title>
    <url>/post/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7.html</url>
    <content><![CDATA[<h2 id="1-ELASTICSEARCH"><a href="#1-ELASTICSEARCH" class="headerlink" title="1. ELASTICSEARCH"></a>1. ELASTICSEARCH</h2><h3 id="1、安装elastic-search"><a href="#1、安装elastic-search" class="headerlink" title="1、安装elastic search"></a>1、安装elastic search</h3><p> dokcer中安装elastic search</p>
<p>（1）下载ealastic search和kibana</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull elasticsearch:7.6.2</span><br><span class="line">docker pull kibana:7.6.2</span><br></pre></td></tr></table></figure>

<p>（2）配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/elasticsearch/config  创建目录</span><br><span class="line">mkdir -p /mydata/elasticsearch/data</span><br><span class="line">echo &quot;http.host: 0.0.0.0&quot; &gt;/mydata/elasticsearch/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">//将mydata/elasticsearch/文件夹中文件都可读可写</span><br><span class="line">chmod -R 777 /mydata/elasticsearch/</span><br></pre></td></tr></table></figure>



<p>（3）启动Elastic search</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name elasticsearch -p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e  &quot;discovery.type=single-node&quot; \</span><br><span class="line">-e ES_JAVA_OPTS=&quot;-Xms64m -Xmx512m&quot; \</span><br><span class="line">-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml \</span><br><span class="line">-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v  /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-d elasticsearch:7.6.2 </span><br></pre></td></tr></table></figure>

<p>设置开机启动elasticsearch</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update elasticsearch --restart=always</span><br></pre></td></tr></table></figure>



<p>（4）启动kibana：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name kibana -e ELASTICSEARCH_HOSTS=http://192.168.6.128:9200 -p 5601:5601 -d kibana:7.6.2</span><br></pre></td></tr></table></figure>

<p>设置开机启动kibana</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker update kibana  --restart=always</span><br></pre></td></tr></table></figure>





<p>（5）测试</p>
<p>查看elasticsearch版本信息： <a href="http://192.168.6.128:9200/">http://192.168.6.128:9200/</a> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0adeb7852e00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elasticsearch&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;9gglpP0HTfyOTRAaSe2rIg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.6.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-03-26T06:34:37.794943Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>显示elasticsearch 节点信息<a href="http://192.168.6.128:9200/_cat/nodes">http://192.168.6.128:9200/_cat/nodes</a> ，</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">76</span> <span class="number">95</span> <span class="number">1</span> <span class="number">0.26</span> <span class="number">1.40</span> <span class="number">1.22</span> dilm * <span class="number">0</span>adeb7852e00</span><br></pre></td></tr></table></figure>



<p>访问Kibana： <a href="http://192.168.6.128:5601/app/kibana">http://192.168.6.128:5601/app/kibana</a> </p>
<p><img src="/post/IDE/image-20200501192629304.png" alt="image-20200501192629304"></p>
<h3 id="2、初步检索"><a href="#2、初步检索" class="headerlink" title="2、初步检索"></a>2、初步检索</h3><h4 id="1）-CAT"><a href="#1）-CAT" class="headerlink" title="1）_CAT"></a>1）_CAT</h4><p>（1）GET&#x2F;<em>cat&#x2F;nodes：查看所有节点</em></p>
<p> 如：<a href="http://192.168.6.128:9200/_cat/nodes">http://192.168.6.128:9200/_cat/nodes</a> :</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 61 91 11 0.08 0.49 0.87 dilm * 0adeb7852e00</span><br></pre></td></tr></table></figure>

<p>注：*表示集群中的主节点</p>
<p>（2）GET&#x2F;<em>cat&#x2F;health：查看es健康状况</em></p>
<p>如：<a href="http://192.168.6.128:9200/_cat/health">http://192.168.6.128:9200/_cat/health</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1588332616 11:30:16 elasticsearch green 1 1 3 3 0 0 0 0 - 100.0%</span><br></pre></td></tr></table></figure>

<p>注：green表示健康值正常</p>
<p>（3）GET&#x2F;_cat&#x2F;master：查看主节点_信息</p>
<p>如： <a href="http://192.168.6.128:9200/_cat/master">http://192.168.6.128:9200/_cat/master</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vfpgxbusTC6-W3C2Np31EQ 127.0.0.1 127.0.0.1 0adeb7852e00</span><br></pre></td></tr></table></figure>

<p>（4）GET&#x2F;_cat&#x2F;indicies：查看所有索引 ，等价于mysql数据库的show databases;</p>
<p>如： <a href="http://192.168.6.128:9200/_cat/indices">http://192.168.6.128:9200/_cat/indices</a> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">green open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">39.8</span>kb <span class="number">39.8</span>kb</span><br><span class="line">green open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>   <span class="number">283</span>b   <span class="number">283</span>b</span><br><span class="line">green open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw <span class="number">1</span> <span class="number">0</span> <span class="number">7</span> <span class="number">0</span> <span class="number">31.2</span>kb <span class="number">31.2</span>kb</span><br></pre></td></tr></table></figure>

<h4 id="2）索引一个文档"><a href="#2）索引一个文档" class="headerlink" title="2）索引一个文档"></a>2）索引一个文档</h4><p>保存一个数据，保存在哪个索引的哪个类型下，指定用那个唯一标识<br>PUT customer&#x2F;external&#x2F;1;在customer索引下的external类型下保存1号数据为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT customer/external/1</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>PUT和POST都可以<br>POST新增。如果不指定id，会自动生成id。指定id就会修改这个数据，并新增版本号；<br>PUT可以新增也可以修改。PUT必须指定id；由于PUT需要指定id，我们一般用来做修改操作，不指定id会报错。</p>
<p>下面是在postman中的测试数据：<br><img src="/post/IDE/image-20200501194449944.png" alt="image-20200501194449944"></p>
<p>创建数据成功后，显示201 created表示插入记录成功。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这些返回的JSON串的含义；这些带有下划线开头的，称为元数据，反映了当前的基本信息。</p>
<p>“_index”: “customer” 表明该数据在哪个数据库下；</p>
<p>“_type”: “external”     表明该数据在哪个类型下；</p>
<p>“_id”: “1”                    表明被保存数据的id；</p>
<p> “_version”: 1,            被保存数据的版本</p>
<p>“result”: “created”      这里是创建了一条数据，如果重新put一条数据，则该状态会变为updated，并且版本号也会发生变化。</p>
<p>下面选用POST方式：</p>
<p>添加数据的时候，不指定ID，会自动的生成id，并且类型是新增：</p>
<img src="/post/IDE/image-20200501195619925.png" alt="image-20200501195619925" style="zoom: 52%;" />

<p>再次使用POST插入数据，仍然是新增的：</p>
<img src="/post/IDE/image-20200501195732492.png" alt="image-20200501195732492" style="zoom: 80%;" />



<p>添加数据的时候，指定ID，会使用该id，并且类型是新增：</p>
<img src="/post/IDE/image-20200501200048361.png" alt="image-20200501200048361" style="zoom: 66%;" />

<p>再次使用POST插入数据，类型为updated</p>
<img src="/post/IDE/image-20200501200132199.png" alt="image-20200501200132199" style="zoom:67%;" />



<h4 id="3）查看文档"><a href="#3）查看文档" class="headerlink" title="3）查看文档"></a>3）查看文档</h4><p>GET &#x2F;customer&#x2F;external&#x2F;1</p>
<p> <a href="http://192.168.6.128:9200/customer/external/1">http://192.168.6.128:9200/customer/external/1</a> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span><span class="comment">//在哪个索引</span></span><br><span class="line">    <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span><span class="comment">//在哪个类型</span></span><br><span class="line">    <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="comment">//记录id</span></span><br><span class="line">    <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span><span class="comment">//版本号</span></span><br><span class="line">    <span class="attr">&quot;_seq_no&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span><span class="comment">//并发控制字段，每次更新都会+1，用来做乐观锁</span></span><br><span class="line">    <span class="attr">&quot;_primary_term&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span><span class="comment">//同上，主分片重新分配，如重启，就会变化</span></span><br><span class="line">    <span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>通过“if_seq_no&#x3D;1&amp;if_primary_term&#x3D;1 ”，当序列号匹配的时候，才进行修改，否则不修改。</p>
<p>实例：将id&#x3D;1的数据更新为name&#x3D;1，然后再次更新为name&#x3D;2，起始_seq_no&#x3D;6，_primary_term&#x3D;1</p>
<p>（1）将name更新为1</p>
<p> <a href="http://192.168.6.128:9200/customer/external/1?if_seq_no=1&if_primary_term=1">http://192.168.6.128:9200/customer/external/1?if_seq_no=1&amp;if_primary_term=1</a> </p>
<img src="/post/IDE/image-20200501212224983.png" alt="image-20200501212224983" style="zoom: 61%;" />

<p> （2）将name更新为2，更新过程中使用seq_no&#x3D;6</p>
<p><a href="http://192.168.6.128:9200/customer/external/1?if_seq_no=6&if_primary_term=1">http://192.168.6.128:9200/customer/external/1?if_seq_no=6&amp;if_primary_term=1</a> </p>
<img src="/post/IDE/image-20200501213047499.png" alt="image-20200501213047499" style="zoom: 60%;" />

<p>出现更新错误。</p>
<p>（3）查询新的数据</p>
<p> <a href="http://192.168.6.128:9200/customer/external/1">http://192.168.6.128:9200/customer/external/1</a> </p>
<p><img src="/post/IDE/image-20200501212924094.png" alt="image-20200501212924094"></p>
<p>能够看到_seq_no变为7。</p>
<p>（4）再次更新，更新成功</p>
<p> <a href="http://192.168.6.128:9200/customer/external/1?if_seq_no=7&if_primary_term=1">http://192.168.6.128:9200/customer/external/1?if_seq_no=7&amp;if_primary_term=1</a> </p>
<img src="/post/IDE/image-20200501213130001.png" alt="image-20200501213130001" style="zoom:75%;" />

<h4 id="4）更新文档"><a href="#4）更新文档" class="headerlink" title="4）更新文档"></a>4）更新文档</h4><p><img src="/post/IDE/image-20200501214522818.png" alt="image-20200501214522818"></p>
<p> <img src="/post/IDE/image-20200501215746139.png" alt="image-20200501215746139"></p>
<p>（1）POST更新文档，带有_update</p>
<p><a href="http://192.168.6.128:9200/customer/external/1/_update">http://192.168.6.128:9200/customer/external/1/_update</a> </p>
<p><img src="/post/IDE/image-20200501214810741.png" alt="image-20200501214810741"></p>
<p>如果再次执行更新，则不执行任何操作，序列号也不发生变化</p>
<p><img src="/post/IDE/image-20200501214912607.png" alt="image-20200501214912607"></p>
<p>POST更新方式，会对比原来的数据，和原来的相同，则不执行任何操作（version和_seq_no）都不变。</p>
<p> （2）POST更新文档，不带_update</p>
<p><img src="/post/IDE/image-20200501215358666.png" alt="image-20200501215358666"></p>
<p>在更新过程中，重复执行更新操作，数据也能够更新成功，不会和原来的数据进行对比。</p>
<h4 id="5）删除文档或索引"><a href="#5）删除文档或索引" class="headerlink" title="5）删除文档或索引"></a>5）删除文档或索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE customer/external/1</span><br><span class="line">DELETE customer</span><br></pre></td></tr></table></figure>

<p>注：elasticsearch并没有提供删除类型的操作，只提供了删除索引和文档的操作。</p>
<p>实例：删除id&#x3D;1的数据，删除后继续查询</p>
<img src="/post/IDE/image-20200501220559094.png" alt="image-20200501220559094" style="zoom:67%;" />

<p>实例：删除整个costomer索引数据</p>
<p>删除前，所有的索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">green  open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kb</span><br><span class="line">green  open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0   283b   283b</span><br><span class="line">green  open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kb</span><br><span class="line">yellow open customer                 nzDYCdnvQjSsapJrAIT8Zw 1 1 4 0  4.4kb  4.4kb</span><br></pre></td></tr></table></figure>

<p>删除“ customer ”索引</p>
<p><img src="/post/IDE/image-20200501221105476.png" alt="image-20200501221105476"></p>
<p>删除后，所有的索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">green  open .kibana_task_manager_1   KWLtjcKRRuaV9so_v15WYg 1 0 2 0 39.8kb 39.8kb</span><br><span class="line">green  open .apm-agent-configuration cuwCpJ5ER0OYsSgAJ7bVYA 1 0 0 0   283b   283b</span><br><span class="line">green  open .kibana_1                PqK_LdUYRpWMy4fK0tMSPw 1 0 7 0 31.2kb 31.2kb</span><br></pre></td></tr></table></figure>



<h4 id="6）eleasticsearch的批量操作——bulk"><a href="#6）eleasticsearch的批量操作——bulk" class="headerlink" title="6）eleasticsearch的批量操作——bulk"></a>6）eleasticsearch的批量操作——bulk</h4><p>语法格式：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>action<span class="punctuation">:</span><span class="punctuation">&#123;</span>metadata<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n   <span class="comment">//例如index保存记录，update更新</span></span><br><span class="line"><span class="punctuation">&#123;</span>request body  <span class="punctuation">&#125;</span>\n</span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span>action<span class="punctuation">:</span><span class="punctuation">&#123;</span>metadata<span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>\n</span><br><span class="line"><span class="punctuation">&#123;</span>request body  <span class="punctuation">&#125;</span>\n</span><br></pre></td></tr></table></figure>

<p>这里的批量操作，当发生某一条执行发生失败时，其他的数据仍然能够接着执行，也就是说彼此之间是独立的。</p>
<p>bulk api以此按顺序执行所有的action（动作）。如果一个单个的动作因任何原因失败，它将继续处理它后面剩余的动作。当bulk api返回时，它将提供每个动作的状态（与发送的顺序相同），所以您可以检查是否一个指定的动作是否失败了。</p>
<p>实例1: 执行多条数据 (postman 报错，在kibana中的Dev_tools中执行)</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /customer/external/_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John Doe&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>执行结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#! Deprecation<span class="punctuation">:</span> <span class="punctuation">[</span>types removal<span class="punctuation">]</span> Specifying types in bulk requests is deprecated.</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">491</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;external&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>实例2：对于整个索引执行批量操作</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;delete&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;website&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;blog&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;create&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;website&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;blog&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;my first blog post&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;website&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;blog&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;my second blog post&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;update&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span><span class="string">&quot;website&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span><span class="string">&quot;blog&quot;</span><span class="punctuation">,</span><span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;my updated blog post&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#! Deprecation<span class="punctuation">:</span> <span class="punctuation">[</span>types removal<span class="punctuation">]</span> Specifying types in bulk requests is deprecated.</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">608</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;errors&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;items&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;delete&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;website&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;not_found&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">404</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;create&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;website&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;website&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;MCOs0HEBHYK_MJXUyYIz&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;created&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">201</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;update&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;website&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;updated&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;status&quot;</span> <span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="7）样本测试数据"><a href="#7）样本测试数据" class="headerlink" title="7）样本测试数据"></a>7）样本测试数据</h4><p>准备了一份顾客银行账户信息的虚构的JSON文档样本。每个文档都有下列的schema（模式）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">39225</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Amber&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Duke&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;880 Holmes Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Pyrami&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;amberduke@pyrami.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Brogan&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> <a href="https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true">https://github.com/elastic/elasticsearch/blob/master/docs/src/test/resources/accounts.json?raw=true</a> ，导入测试数据，</p>
<p>POST bank&#x2F;account&#x2F;_bulk</p>
<h3 id="3、检索"><a href="#3、检索" class="headerlink" title="3、检索"></a>3、检索</h3><h4 id="1）search-Api"><a href="#1）search-Api" class="headerlink" title="1）search Api"></a>1）search Api</h4><p>ES支持两种基本方式检索；</p>
<ul>
<li>通过REST request uri 发送搜索参数 （uri +检索参数）；</li>
<li>通过REST request body 来发送它们（uri+请求体）；</li>
</ul>
<p>信息检索</p>
<p><img src="/post/IDE/image-20200501233938697.png" alt="image-20200501233938697"></p>
<p><img src="/post/IDE/image-20200502000221422.png" alt="image-20200502000221422"></p>
<p><img src="/post/IDE/image-20200502000733594.png" alt="image-20200502000733594"></p>
<p>uri+请求体进行检索</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span><span class="string">&quot;desc&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>HTTP客户端工具（），get请求不能够携带请求体，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET bank/_search?q=*&amp;sort=account_number:asc</span><br><span class="line"><span class="comment">//q=* 查询所有，sort=account_number:asc 按照account_number进行asc升序排列sort</span></span><br></pre></td></tr></table></figure>

<p>返回结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">235</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">16623</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bradshaw&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Mckenzie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;244 Columbus Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Euron&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bradshawmckenzie@euron.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hobucken&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CO&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">0</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">39225</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Amber&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Duke&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;880 Holmes Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pyrami&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;amberduke@pyrami.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Brogan&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">1</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">28838</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Roberta&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bender&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;560 Kingsway Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Chillium&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;robertabender@chillium.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bennett&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;LA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">2</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">44947</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Levine&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Burks&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;328 Wilson Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Amtap&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;levineburks@amtap.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Cochranville&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HI&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">3</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;4&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">27658</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Rodriquez&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Flores&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;986 Wyckoff Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Tourmania&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;rodriquezflores@tourmania.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Eastvale&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HI&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">4</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;5&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">29342</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Leola&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Stewart&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;311 Elm Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Diginetic&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;leolastewart@diginetic.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Fairview&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;NJ&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">5</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">5686</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hattie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bond&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;671 Bristol Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Netagy&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hattiebond@netagy.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Dante&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;TN&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">6</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">39121</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Levy&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Richard&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;820 Logan Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Teraprene&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;levyrichard@teraprene.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Shrewsbury&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;MO&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">7</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">48868</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Jan&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Burns&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;699 Visitation Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Glasstep&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;janburns@glasstep.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wakulla&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AZ&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">8</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;9&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">24776</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Opal&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Meadows&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;963 Neptune Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Cedward&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;opalmeadows@cedward.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Olney&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;OH&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">9</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>（1）只有9条数据，这是因为存在分页查询；</p>
<p>（2）详细的字段信息，参照： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html">https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started-search.html</a> </p>
<blockquote>
<p>The response also provides the following information about the search request:</p>
<ul>
<li><code>took</code> – how long it took Elasticsearch to run the query, in milliseconds</li>
<li><code>timed_out</code> – whether or not the search request timed out</li>
<li><code>_shards</code> – how many shards were searched and a breakdown of how many shards succeeded, failed, or were skipped.</li>
<li><code>max_score</code> – the score of the most relevant document found</li>
<li><code>hits.total.value</code> - how many matching documents were found</li>
<li><code>hits.sort</code> - the document’s sort position (when not sorting by relevance score)</li>
<li><code>hits._score</code> - the document’s relevance score (not applicable when using <code>match_all</code>)</li>
</ul>
</blockquote>
<h4 id="2）Query-DSL"><a href="#2）Query-DSL" class="headerlink" title="2）Query DSL"></a>2）Query DSL</h4><h5 id="（1）基本语法格式"><a href="#（1）基本语法格式" class="headerlink" title="（1）基本语法格式"></a>（1）基本语法格式</h5><p>Elasticsearch提供了一个可以执行查询的Json风格的DSL。这个被称为Query DSL，该查询语言非常全面。</p>
<p>一个查询语句的典型结构</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">QUERY_NAME<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">   ARGUMENT<span class="punctuation">:</span>VALUE<span class="punctuation">,</span></span><br><span class="line">   ARGUMENT<span class="punctuation">:</span>VALUE<span class="punctuation">,</span>...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>如果针对于某个字段，那么它的结构如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  QUERY_NAME<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">     FIELD_NAME<span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">       ARGUMENT<span class="punctuation">:</span>VALUE<span class="punctuation">,</span></span><br><span class="line">       ARGUMENT<span class="punctuation">:</span>VALUE<span class="punctuation">,</span>...</span><br><span class="line">      <span class="punctuation">&#125;</span>   </span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//match_al查询所有，从第0个数据拿5个数据</span></span><br></pre></td></tr></table></figure>



<p>query定义如何查询；</p>
<ul>
<li>match_all查询类型【代表查询所有的所有】，es中可以在query中组合非常多的查询类型完成复杂查询；</li>
<li>除了query参数之外，我们可也传递其他的参数以改变查询结果，如sort，size；</li>
<li>from+size限定，完成分页功能；</li>
<li>sort排序，多字段排序，会在前序字段相等时后续字段内部排序，否则以前序为准；</li>
</ul>
<h5 id="（2）返回部分字段"><a href="#（2）返回部分字段" class="headerlink" title="（2）返回部分字段"></a>（2）返回部分字段</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;balance&quot;</span><span class="punctuation">,</span><span class="string">&quot;firstname&quot;</span><span class="punctuation">]</span></span><br><span class="line">  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;999&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Dorothy&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">6087</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">999</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;998&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Letha&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">16869</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">998</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;997&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Combs&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">25311</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">997</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;996&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Andrews&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">17541</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">996</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;995&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Phelps&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">21153</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="number">995</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（3）match匹配查询"><a href="#（3）match匹配查询" class="headerlink" title="（3）match匹配查询"></a>（3）match匹配查询</h5><ul>
<li>基本类型（非字符串），”account_number”: 20 可加可不加“ ” 不加就是精确匹配</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>match返回account_number&#x3D;20的数据。</p>
<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">16418</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Elinor&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ratliff&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;282 Kings Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Scentric&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elinorratliff@scentric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ribera&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<ul>
<li>字符串，全文检索“ ” 模糊查询</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kings&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>全文检索，最终会按照评分进行排序，会对检索条件进行分词匹配。</p>
<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.990829</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.990829</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">16418</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Elinor&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ratliff&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;282 Kings Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Scentric&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elinorratliff@scentric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ribera&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;722&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.990829</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">722</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">27256</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Roberts&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Beasley&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;305 Kings Hwy&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Quintity&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;robertsbeasley@quintity.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hayden&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;PA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（4）-match-phrase-短句匹配"><a href="#（4）-match-phrase-短句匹配" class="headerlink" title="（4） match_phrase [短句匹配]"></a>（4） match_phrase [短句匹配]</h5><p>将需要匹配的值当成一整个单词（不分词）进行检索</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill road&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>查处address中包含mill_road的所有记录，并给出相关性得分</p>
<p>查看结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">8.926605</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">8.926605</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>match_phrase和match的区别，观察如下实例：</p>
<p>match_phrase是做短语匹配</p>
<p>match是分词匹配，例如990 Mill匹配含有<strong>990或者Mill</strong>的结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_phrase&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">10.806405</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">10.806405</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>使用match的keyword</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查询结果，一条也未匹配到</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>修改匹配条件为“990 Mill Road”</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address.keyword&quot;</span><span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查询出一条数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.5032897</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.5032897</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>文本字段的匹配，使用keyword，匹配的条件就是要显示字段的全部值，要进行精确匹配的。</p>
<p>match_phrase是做短语匹配，只要文本中包含匹配条件既包含这个短语，就能匹配到。</p>
<h5 id="（5）multi-math【多字段匹配】"><a href="#（5）multi-math【多字段匹配】" class="headerlink" title="（5）multi_math【多字段匹配】"></a>（5）multi_math【多字段匹配】</h5><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;state&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;address&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>state或者address中包含mill，并且在查询过程中，会对于查询条件进行分词。</p>
<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;472&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">472</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">25571</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lee&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Long&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;288 Mill Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Comverges&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;leelong@comverges.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Movico&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;MT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（6）bool用来做复合查询"><a href="#（6）bool用来做复合查询" class="headerlink" title="（6）bool用来做复合查询"></a>（6）bool用来做复合查询</h5><p>复合语句可以合并，任何其他查询语句，包括符合语句。这也就意味着，复合语句之间<br>可以互相嵌套，可以表达非常复杂的逻辑。</p>
<p>must：必须达到must所列举的所有条件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">             <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;mill&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span><span class="string">&quot;M&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">             <span class="punctuation">]</span></span><br><span class="line">         <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>must_not，必须不匹配must_not所列举的所有条件。</p>
<p>should，应该满足should所列举的条件。</p>
<p>实例：查询gender&#x3D;m，并且address&#x3D;mill的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>must_not：必须不是指定的情况</strong></p>
<p>实例：查询gender&#x3D;m，并且address&#x3D;mill的数据，但是age不等于38的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;38&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p><strong>should：应该达到should列举的条件，如果到达会增加相关文档的评分，并不会改变查询的结果。如果query中只有should且只有一种匹配规则，那么should的条件就会被作为默认匹配条件二区改变查询结果。</strong></p>
<p>实例：匹配lastName应该等于Wallace的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">12.585751</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">12.585751</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;136&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">136</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">45801</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Winnie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Holland&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;198 Mill Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Neteria&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;winnieholland@neteria.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Urie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;345&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">6.0824604</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">345</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">9812</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Parker&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hines&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;715 Mill Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Baluba&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;parkerhines@baluba.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Blackgum&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>能够看到相关度越高，得分也越高。</p>
<h5 id="（7）Filter【结果过滤】"><a href="#（7）Filter【结果过滤】" class="headerlink" title="（7）Filter【结果过滤】"></a>（7）Filter【结果过滤】</h5><p>并不是所有的查询都需要产生分数，特别是哪些仅用于filtering过滤的文档。为了不计算分数，elasticsearch会自动检查场景并且优化查询的执行。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20000&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里先是查询所有匹配address&#x3D;mill的文档，然后再根据10000&lt;&#x3D;balance&lt;&#x3D;20000进行过滤查询结果</p>
<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;970&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">5.4032025</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">970</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19648</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Forbes&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wallace&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;990 Mill Road&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pheast&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;forbeswallace@pheast.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lopezo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>Each <code>must</code>, <code>should</code>, and <code>must_not</code> element in a Boolean query is referred to as a query clause. How well a document meets the criteria in each <code>must</code> or <code>should</code> clause contributes to the document’s <em>relevance score</em>. The higher the score, the better the document matches your search criteria. By default, Elasticsearch returns documents ranked by these relevance scores.</p>
<p> 在boolean查询中，<code>must</code>, <code>should</code> 和<code>must_not</code> 元素都被称为查询子句 。 文档是否符合每个“must”或“should”子句中的标准，决定了文档的“相关性得分”。  得分越高，文档越符合您的搜索条件。  默认情况下，Elasticsearch返回根据这些相关性得分排序的文档。 </p>
<p>The criteria in a <code>must_not</code> clause is treated as a <em>filter</em>. It affects whether or not the document is included in the results, but does not contribute to how documents are scored. You can also explicitly specify arbitrary filters to include or exclude documents based on structured data.</p>
<p><code>“must_not”子句中的条件被视为“过滤器”。</code> 它影响文档是否包含在结果中，  但<strong>不影响文档的评分方式</strong>。  还可以显式地指定任意过滤器来包含或排除基于结构化数据的文档。 </p>
<p><strong>filter在使用过程中，并不会计算相关性得分_score：</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;mill&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10000&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20000&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//gte:&gt;=  lte:&lt;=</span></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">213</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;20&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">16418</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Elinor&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ratliff&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;282 Kings Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Scentric&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;elinorratliff@scentric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Ribera&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;WA&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;37&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">18612</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Mcgee&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Mooney&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;826 Fillmore Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Reversus&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;mcgeemooney@reversus.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Tooleville&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;51&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">14097</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Burton&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Meyers&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;334 River Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Bezal&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;burtonmeyers@bezal.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Jacksonburg&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;MO&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;56&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">56</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">14992</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Josie&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Nelson&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;857 Tabor Court&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Emtrac&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;josienelson@emtrac.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Sunnyside&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;UT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;121&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">121</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19594</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Acevedo&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Dorsey&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;479 Nova Court&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Netropic&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;acevedodorsey@netropic.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Islandia&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;176&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">176</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">18607</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Kemp&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Walters&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;906 Howard Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Eyewax&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;kempwalters@eyewax.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Why&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;KY&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;183&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">183</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">14223</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Hudson&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;English&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;823 Herkimer Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Xinware&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;hudsonenglish@xinware.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Robbins&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ND&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;222&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">222</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">14764</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Rachelle&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Rice&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;333 Narrows Avenue&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Enaut&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;rachellerice@enaut.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Wright&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;AZ&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;227&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">227</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19780</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Coleman&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Berg&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;776 Little Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Exoteric&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;colemanberg@exoteric.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Eagleville&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;WV&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;272&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">0.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">272</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">19253</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Lilly&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Morgan&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;689 Fleet Street&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Biolive&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;lillymorgan@biolive.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Sunbury&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;OH&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>能看到所有文档的 “_score” : 0.0。</strong></p>
<h5 id="（8）term"><a href="#（8）term" class="headerlink" title="（8）term"></a>（8）term</h5><p>和match一样。匹配某个属性的值。全文检索字段用match，其他<strong>非text字段</strong>匹配用term。</p>
<blockquote>
<p>Avoid using the <code>term</code> query for <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/text.html"><code>text</code></a> fields.</p>
<p>避免对文本字段使用“term”查询</p>
<p>By default, Elasticsearch changes the values of <code>text</code> fields as part of <a href="">analysis</a>. This can make finding exact matches for <code>text</code> field values difficult.</p>
<p>默认情况下，Elasticsearch作为<a href="">analysis</a>的一部分更改’ text ‘字段的值。这使得为“text”字段值寻找精确匹配变得困难。 </p>
<p>To search <code>text</code> field values, use the match.</p>
<p>要搜索“text”字段值，请使用匹配。</p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/query-dsl-term-query.html</a> </p>
</blockquote>
<p>使用term匹配查询</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;28&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果是text则查不到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;term&quot;: &#123;</span><br><span class="line">      &quot;gender&quot; : &quot;F&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一条也没有匹配到</p>
<p>而更换为match匹配时，能够匹配到32个文档</p>
<p><img src="/post/IDE/image-20200502120921830.png" alt="image-20200502120921830"></p>
<p>也就是说，<strong>全文检索字段用match，其他非text字段匹配用term</strong>。</p>
<h5 id="（9）Aggregation（执行聚合）"><a href="#（9）Aggregation（执行聚合）" class="headerlink" title="（9）Aggregation（执行聚合）"></a>（9）Aggregation（执行聚合）</h5><p>聚合提供了从数据中分组和提取数据的能力。最简单的聚合方法大致等于SQL Group by和SQL聚合函数。在elasticsearch中，执行搜索返回this（命中结果），并且同时返回聚合结果，把以响应中的所有hits（命中结果）分隔开的能力。这是非常强大且有效的，你可以执行查询和多个聚合，并且在一次使用中得到各自的（任何一个的）返回结果，使用一次简洁和简化的API啦避免网络往返。</p>
<p>“size”:0</p>
<p>size:0不显示搜索数据<br>aggs：执行聚合。聚合语法如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;aggs_name这次聚合的名字，方便展示在结果集中&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;AGG_TYPE聚合的类型(avg,term,terms)&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">     <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span>，</span><br></pre></td></tr></table></figure>



<p><strong>搜索address中包含mill的所有人的年龄分布以及平均年龄，但不显示这些人的详情</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//ageAgg:聚合名字  terms：聚合类型  &quot;field&quot;: &quot;age&quot;:按照age字段聚合  size:10：取出前十种age</span></span><br><span class="line"><span class="comment">//avg：平均值聚合类型</span></span><br><span class="line"><span class="comment">//不显示这些人的详情，只看聚合结果</span></span><br></pre></td></tr></table></figure>

<p>查询结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">34.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25208.0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>复杂：<br>按照年龄聚合，并且求这些年龄段的这些人的平均薪资</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">49</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">61</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28312.918032786885</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">60</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25269.583333333332</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">59</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">23194.813559322032</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">23951.346153846152</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22136.69230769231</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">52</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22174.71153846154</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">24731.07843137255</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">28</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28273.882352941175</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">33</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">25093.94</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">34</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">49</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26809.95918367347</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">47</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">22841.106382978724</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">21</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">46</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26981.434782608696</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27183.17777777778</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27741.227272727272</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27314.214285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28519.04761904762</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27445.214285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">42</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">27022.261904761905</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">27</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">21471.871794871793</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">38</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26187.17948717949</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">29</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">29483.14285714286</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查出所有年龄分布，并且这些年龄段中M的平均薪资和F的平均薪资以及这个年龄段的总体平均薪资</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">100</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;genderAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gender.keyword&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ageBalanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">//&quot;field&quot;: &quot;gender.keyword&quot; gender是txt没法聚合 必须加.keyword精确替代</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">119</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">61</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;genderAgg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;doc_count_error_upper_bound&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sum_other_doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;buckets&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">29565.628571428573</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;key&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;F&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;doc_count&quot;</span> <span class="punctuation">:</span> <span class="number">26</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;balanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                  <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">26626.576923076922</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">              <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;ageBalanceAvg&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">28312.918032786885</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">        .......<span class="comment">//省略其他</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="3）Mapping"><a href="#3）Mapping" class="headerlink" title="3）Mapping"></a>3）Mapping</h4><h5 id="（1）字段类型"><a href="#（1）字段类型" class="headerlink" title="（1）字段类型"></a>（1）字段类型</h5><p><img src="/post/IDE/image-20200502161339291.png" alt="image-20200502161339291"></p>
<h5 id="（2）映射"><a href="#（2）映射" class="headerlink" title="（2）映射"></a>（2）映射</h5><p>Mapping(映射)<br>Maping是用来定义一个文档（document），以及它所包含的属性（field）是如何存储和索引的。比如：使用maping来定义：</p>
<ul>
<li><p>哪些字符串属性应该被看做全文本属性（full text fields）；</p>
</li>
<li><p>哪些属性包含数字，日期或地理位置；</p>
</li>
<li><p>文档中的所有属性是否都嫩被索引（all 配置）；</p>
</li>
<li><p>日期的格式；</p>
</li>
<li><p>自定义映射规则来执行动态添加属性；</p>
</li>
<li><p>查看mapping信息<br>GET bank&#x2F;_mapping</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bank&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;fields&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;keyword&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;ignore_above&quot;</span> <span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>修改mapping信息</p>
</li>
</ul>
<p><img src="/post/IDE/image-20200502170924399.png" alt="image-20200502170924399"></p>
<h5 id="（3）新版本改变"><a href="#（3）新版本改变" class="headerlink" title="（3）新版本改变"></a>（3）新版本改变</h5><p>ElasticSearch7-去掉type概念</p>
<ol>
<li><p>关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同的filed最终在Lucene中的处理方式是一样的。</p>
<ul>
<li>两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在处理中出现冲突的情况，导致Lucene处理效率下降。</li>
<li>去掉type就是为了提高ES处理数据的效率。</li>
</ul>
</li>
<li><p>Elasticsearch 7.x URL中的type参数为可选。比如，索引一个文档不再要求提供文档类型。</p>
</li>
<li><p>Elasticsearch 8.x 不再支持URL中的type参数。</p>
</li>
<li><p>解决：<br>将索引从多类型迁移到单类型，每种类型文档一个独立索引</p>
<p>将已存在的索引下的类型数据，全部迁移到指定位置即可。详见数据迁移</p>
</li>
</ol>
<blockquote>
<p><strong>Elasticsearch 7.x</strong></p>
<ul>
<li>Specifying types in requests is deprecated. For instance, indexing a document no longer requires a document <code>type</code>. The new index APIs are <code>PUT &#123;index&#125;/_doc/&#123;id&#125;</code> in case of explicit ids and <code>POST &#123;index&#125;/_doc</code> for auto-generated ids. Note that in 7.0, <code>_doc</code> is a permanent part of the path, and represents the endpoint name rather than the document type.</li>
<li>The <code>include_type_name</code> parameter in the index creation, index template, and mapping APIs will default to <code>false</code>. Setting the parameter at all will result in a deprecation warning.</li>
<li>The <code>_default_</code> mapping type is removed.</li>
</ul>
<p><strong>Elasticsearch 8.x</strong></p>
<ul>
<li>Specifying types in requests is no longer supported.</li>
<li>The <code>include_type_name</code> parameter is removed.</li>
</ul>
</blockquote>
<h6 id="创建映射"><a href="#创建映射" class="headerlink" title="创建映射"></a>创建映射</h6><p>创建索引并指定属性的映射规则（<strong>相当于新建表并制定字段和字段类型</strong>）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /my_index</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p> 输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;shards_acknowledged&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="查看映射"><a href="#查看映射" class="headerlink" title="查看映射"></a>查看映射</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET /my_index</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&quot;index&quot; : false 是否被索引即能被检索到，默认是true</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;my_index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;aliases&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;employee-id&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;settings&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;creation_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1588410780774&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number_of_shards&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;number_of_replicas&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;ua0lXhtkQCOmn7Kh3iUu0w&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;created&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7060299&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;provided_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>





<h6 id="添加新的字段映射"><a href="#添加新的字段映射" class="headerlink" title="添加新的字段映射"></a>添加新的字段映射</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /my_index/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;employee-id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这里的 “index”: false，表明新增的字段不能被检索，只是一个冗余字段。</p>
<h6 id="更新映射"><a href="#更新映射" class="headerlink" title="更新映射"></a>更新映射</h6><p>对于已经存在的字段映射，我们不能更新。更新必须创建新的索引，进行数据迁移。</p>
<h6 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h6><p>先创建new_twitter的正确映射。然后使用如下方式进行数据迁移。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST reindex <span class="punctuation">[</span>固定写法<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="string">&quot;twitter&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="string">&quot;new_twitters&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>将旧索引的type下的数据进行迁移</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST reindex <span class="punctuation">[</span>固定写法<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="string">&quot;twitter&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;twitter&quot;</span><span class="punctuation">:</span><span class="string">&quot;twitter&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="string">&quot;new_twitters&quot;</span></span><br><span class="line">   <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>更多详情见： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/docs-reindex.html</a> </p>
<p>GET &#x2F;bank&#x2F;_search</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span><span class="comment">//类型为account</span></span><br><span class="line">        <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;account_number&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;balance&quot;</span> <span class="punctuation">:</span> <span class="number">39225</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Amber&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Duke&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;age&quot;</span> <span class="punctuation">:</span> <span class="number">32</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;gender&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;address&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;880 Holmes Lane&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;employer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pyrami&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;amberduke@pyrami.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;city&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Brogan&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;state&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;IL&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      ...</span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /bank/_search</span><br></pre></td></tr></table></figure>

<p><img src="/post/IDE/image-20200502174825233.png" alt="image-20200502174825233"></p>
<p>想要将年龄修改为integer</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">PUT /newbank</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;long&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;keyword&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignore_above&quot;</span><span class="punctuation">:</span> <span class="number">256</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查看“newbank”的映射：</p>
<p>GET &#x2F;newbank&#x2F;_mapping</p>
<p><img src="/post/IDE/image-20200502175901959.png" alt="image-20200502175901959"></p>
<p>能够看到age的映射类型被修改为了integer.</p>
<p>将bank中的数据迁移到newbank中</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _reindex</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;newbank&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>运行输出：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">#! Deprecation<span class="punctuation">:</span> <span class="punctuation">[</span>types removal<span class="punctuation">]</span> Specifying types in reindex requests is deprecated.</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">768</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;updated&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;created&quot;</span> <span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;deleted&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;batches&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version_conflicts&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;noops&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;retries&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bulk&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;search&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_millis&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;requests_per_second&quot;</span> <span class="punctuation">:</span> <span class="number">-1.0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;throttled_until_millis&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;failures&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>查看newbank中的数据</p>
<p><img src="/post/IDE/image-20200502181432745.png" alt="image-20200502181432745"></p>
<h4 id="4）分词"><a href="#4）分词" class="headerlink" title="4）分词"></a>4）分词</h4><p>一个tokenizer（分词器）接收一个字符流，将之分割为独立的tokens（词元，通常是独立的单词），然后输出tokens流。</p>
<p>例如：whitespace tokenizer遇到空白字符时分割文本。它会将文本“Quick brown fox!”分割为[Quick,brown,fox!]。</p>
<p>该tokenizer（分词器）还负责记录各个terms(词条)的顺序或position位置（用于phrase短语和word proximity词近邻查询），以及term（词条）所代表的原始word（单词）的start（起始）和end（结束）的character offsets（字符串偏移量）（用于高亮显示搜索的内容）。</p>
<p>elasticsearch提供了很多内置的分词器，可以用来构建custom analyzers（自定义分词器）。</p>
<p>关于分词器： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/analysis.html</a> </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The 2 QUICK Brown-Foxes jumped over the lazy dog&#x27;s bone.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;the&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;NUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;quick&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;brown&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">17</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;foxes&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;jumped&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">30</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;over&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">31</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">35</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;the&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">36</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">39</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;lazy&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">40</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">44</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">8</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;dog&#x27;s&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">45</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">50</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">9</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;bone&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">51</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">55</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="（1）安装ik分词器"><a href="#（1）安装ik分词器" class="headerlink" title="（1）安装ik分词器"></a>（1）安装ik分词器</h5><p><img src="/post/IDE/image-20200502182929583.png" alt="image-20200502182929583"></p>
<p>所有的语言分词，默认使用的都是“Standard Analyzer”，但是这些分词器针对于中文的分词，并不友好。为此需要安装中文的分词器。</p>
<p>注意：不能用默认elasticsearch-plugin install xxx.zip 进行自动安装<br><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download">https://github.com/medcl/elasticsearch-analysis-ik/releases/download</a> 对应es版本安装</p>
<p>在前面安装的elasticsearch时，我们已经将elasticsearch容器的“&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins”目录，映射到宿主机的“ &#x2F;mydata&#x2F;elasticsearch&#x2F;plugins”目录下，所以比较方便的做法就是下载“&#x2F;elasticsearch-analysis-ik-7.6.2.zip”文件，然后解压到该文件夹下即可。安装完毕后，需要重启elasticsearch容器。</p>
<p>如果不嫌麻烦，还可以采用如下的方式。</p>
<h6 id="（1）查看elasticsearch版本号："><a href="#（1）查看elasticsearch版本号：" class="headerlink" title="（1）查看elasticsearch版本号："></a>（1）查看elasticsearch版本号：</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# curl http://localhost:9200</span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;0adeb7852e00&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;9gglpP0HTfyOTRAaSe2rIg&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.6.2&quot;,      #版本号为7.6.2</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;ef48eb35cf30adf4db14086e8aabd07ef6fb113f&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2020-03-26T06:34:37.794943Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.4.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line">[root@hadoop-104 ~]# </span><br></pre></td></tr></table></figure>



<h6 id="（2）进入es容器内部plugin目录"><a href="#（2）进入es容器内部plugin目录" class="headerlink" title="（2）进入es容器内部plugin目录"></a>（2）进入es容器内部plugin目录</h6><ul>
<li>docker exec -it 容器id &#x2F;bin&#x2F;bash</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker exec -it elasticsearch /bin/bash</span><br><span class="line">[root@0adeb7852e00 elasticsearch]# </span><br></pre></td></tr></table></figure>

<ul>
<li>wget  <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</a></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@0adeb7852e00 elasticsearch]# pwd</span><br><span class="line">/usr/share/elasticsearch</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载ik7.6.2</span></span><br><span class="line">[root@0adeb7852e00 elasticsearch]# wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</span><br></pre></td></tr></table></figure>

<ul>
<li>unzip 下载的文件</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@0adeb7852e00 elasticsearch]# unzip elasticsearch-analysis-ik-7.6.2.zip -d ink</span><br><span class="line">Archive:  elasticsearch-analysis-ik-7.6.2.zip</span><br><span class="line">   creating: ik/config/</span><br><span class="line">  inflating: ik/config/main.dic      </span><br><span class="line">  inflating: ik/config/quantifier.dic  </span><br><span class="line">  inflating: ik/config/extra_single_word_full.dic  </span><br><span class="line">  inflating: ik/config/IKAnalyzer.cfg.xml  </span><br><span class="line">  inflating: ik/config/surname.dic   </span><br><span class="line">  inflating: ik/config/suffix.dic    </span><br><span class="line">  inflating: ik/config/stopword.dic  </span><br><span class="line">  inflating: ik/config/extra_main.dic  </span><br><span class="line">  inflating: ik/config/extra_stopword.dic  </span><br><span class="line">  inflating: ik/config/preposition.dic  </span><br><span class="line">  inflating: ik/config/extra_single_word_low_freq.dic  </span><br><span class="line">  inflating: ik/config/extra_single_word.dic  </span><br><span class="line">  inflating: ik/elasticsearch-analysis-ik-7.6.2.jar  </span><br><span class="line">  inflating: ik/httpclient-4.5.2.jar  </span><br><span class="line">  inflating: ik/httpcore-4.4.4.jar   </span><br><span class="line">  inflating: ik/commons-logging-1.2.jar  </span><br><span class="line">  inflating: ik/commons-codec-1.9.jar  </span><br><span class="line">  inflating: ik/plugin-descriptor.properties  </span><br><span class="line">  inflating: ik/plugin-security.policy  </span><br><span class="line">[root@0adeb7852e00 elasticsearch]#</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">移动到plugins目录下</span></span><br><span class="line">[root@0adeb7852e00 elasticsearch]# mv ik plugins/</span><br></pre></td></tr></table></figure>

<ul>
<li>rm -rf *.zip</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@0adeb7852e00 elasticsearch]# rm -rf elasticsearch-analysis-ik-7.6.2.zip </span><br></pre></td></tr></table></figure>


<p>确认是否安装好了分词器</p>
<h5 id="（2）测试分词器"><a href="#（2）测试分词器" class="headerlink" title="（2）测试分词器"></a>（2）测试分词器</h5><p>使用默认</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;我是中国人&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>请观察执行结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;中&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;国&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span> </span><br><span class="line">   <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;我是中国人&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;中国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span> </span><br><span class="line">   <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;我是中国人&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;是&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;中国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;中国&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;国人&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="（3）自定义词库"><a href="#（3）自定义词库" class="headerlink" title="（3）自定义词库"></a>（3）自定义词库</h5><ul>
<li>修改&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;ik&#x2F;config中的IKAnalyzer.cfg.xml<br>&#x2F;usr&#x2F;share&#x2F;elasticsearch&#x2F;plugins&#x2F;ik&#x2F;config</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;remote_ext_dict&quot;</span>&gt;</span>http://192.168.6.128/es/fenci.txt<span class="tag">&lt;/<span class="name">entry</span>&gt;</span> </span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>原来的xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>修改完成后，需要重启elasticsearch容器，否则修改不生效。</p>
<p>更新完成后，es只会对于新增的数据用更新分词。历史数据是不会重新分词的。如果想要历史数据重新分词，需要执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST my_index/_update_by_query?conflicts=proceed</span><br></pre></td></tr></table></figure>





<p><a href="http://192.168.6.128/es/fenci.txt%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%98%AFnginx%E4%B8%8A%E8%B5%84%E6%BA%90%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84">http://192.168.6.128/es/fenci.txt，这个是nginx上资源的访问路径</a></p>
<p>在运行下面实例之前，需要安装nginx（安装方法见安装nginx），然后创建“fenci.txt”文件，内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;樱桃萨其马，带你甜蜜入夏&quot; &gt; /mydata/nginx/html/fenci.txt </span><br></pre></td></tr></table></figure>

<p>测试效果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET my_index/_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span> </span><br><span class="line">   <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span><span class="string">&quot;樱桃萨其马，带你甜蜜入夏&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tokens&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;樱桃&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;萨其马&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;带你&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;甜蜜&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;token&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;入夏&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;start_offset&quot;</span> <span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;end_offset&quot;</span> <span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;position&quot;</span> <span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="4、elasticsearch-Rest-Client"><a href="#4、elasticsearch-Rest-Client" class="headerlink" title="4、elasticsearch-Rest-Client"></a>4、elasticsearch-Rest-Client</h3><h4 id="1）9300-TCP"><a href="#1）9300-TCP" class="headerlink" title="1）9300: TCP"></a>1）9300: TCP</h4><ul>
<li>spring-data-elasticsearch:transport-api.jar;<ul>
<li>springboot版本不同，ransport-api.jar不同，不能适配es版本</li>
<li>7.x已经不建议使用，8以后就要废弃</li>
</ul>
</li>
</ul>
<h4 id="2）9200-HTTP"><a href="#2）9200-HTTP" class="headerlink" title="2）9200: HTTP"></a>2）9200: HTTP</h4><ul>
<li><p>jestClient: 非官方，更新慢；</p>
</li>
<li><p>RestTemplate：模拟HTTP请求，ES很多操作需要自己封装，麻烦；</p>
</li>
<li><p>HttpClient：同上；</p>
</li>
<li><p>Elasticsearch-Rest-Client：官方RestClient，封装了ES操作，API层次分明，上手简单；<br>最终选择Elasticsearch-Rest-Client（elasticsearch-rest-high-level-client）；<br> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high.html</a></p>
</li>
</ul>
<h3 id="5、附录：安装Nginx"><a href="#5、附录：安装Nginx" class="headerlink" title="5、附录：安装Nginx"></a>5、附录：安装Nginx</h3><ul>
<li><p>随便启动一个nginx实例，只是为了复制出配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8081:80 --name nginx -d nginx:1.10   </span><br></pre></td></tr></table></figure>
</li>
<li><p>将容器内的配置文件拷贝到&#x2F;mydata&#x2F;nginx&#x2F;conf&#x2F; 下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /mydata/nginx/html</span><br><span class="line">mkdir -p /mydata/nginx/logs</span><br><span class="line">mkdir -p /mydata/nginx/conf</span><br><span class="line">docker container cp nginx:/etc/nginx .  #拷贝到当前文件夹</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">由于拷贝完成后会在config中存在一个nginx文件夹，所以需要将它的内容移动到conf中</span></span><br><span class="line">mv /mydata/nginx/conf/nginx/* /mydata/nginx/conf/</span><br><span class="line">rm -rf /mydata/nginx/conf/nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>终止原容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行命令删除原容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建新的Nginx，执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -p 8081:80 --name nginx \</span><br><span class="line"> -v /mydata/nginx/html:/usr/share/nginx/html \</span><br><span class="line"> -v /mydata/nginx/logs:/var/log/nginx \</span><br><span class="line"> -v /mydata/nginx/conf/:/etc/nginx \</span><br><span class="line"> -d nginx:1.10</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置开机启动nginx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker update nginx --restart=always</span><br></pre></td></tr></table></figure>


</li>
<li><p>创建“&#x2F;mydata&#x2F;nginx&#x2F;html&#x2F;index.html”文件，测试是否能够正常访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;&lt;h2&gt;hello nginx!&lt;/h2&gt;&#x27; &gt;/mydata/nginx/html/index.html</span><br></pre></td></tr></table></figure>

<p>访问：<a href="http://ngix所在主机的ip/index.html">http://ngix所在主机的IP:80/index.html</a></p>
</li>
</ul>
<h2 id="SpringBoot整合ElasticSearch"><a href="#SpringBoot整合ElasticSearch" class="headerlink" title="SpringBoot整合ElasticSearch"></a>SpringBoot整合ElasticSearch</h2><h3 id="1、导入依赖"><a href="#1、导入依赖" class="headerlink" title="1、导入依赖"></a>1、导入依赖</h3><p>这里的版本要和所按照的ELK版本匹配。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>在spring-boot-dependencies中所依赖的ELK版本位6.8.7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;elasticsearch.version&gt;6.8.7&lt;/elasticsearch.version&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/post/IDE/image-20200511074437763.png" alt="image-20200511074437763"></p>
<p>需要在项目中将它改为7.6.2</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">elasticsearch.version</span>&gt;</span>7.6.2<span class="tag">&lt;/<span class="name">elasticsearch.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、编写测试类"><a href="#2、编写测试类" class="headerlink" title="2、编写测试类"></a>2、编写测试类</h3><h4 id="1）测试保存数据"><a href="#1）测试保存数据" class="headerlink" title="1）测试保存数据"></a>1）测试保存数据</h4><p> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-document-index.html</a> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">indexData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">indexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span> (<span class="string">&quot;users&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUserName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    user.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(user);</span><br><span class="line">    <span class="comment">//设置要保存的内容</span></span><br><span class="line">    indexRequest.source(jsonString, XContentType.JSON);</span><br><span class="line">    <span class="comment">//执行创建索引和保存数据</span></span><br><span class="line">    <span class="type">IndexResponse</span> <span class="variable">index</span> <span class="operator">=</span> client.index(indexRequest, GulimallElasticSearchConfig.COMMON_OPTIONS);</span><br><span class="line"></span><br><span class="line">    System.out.println(index);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试前：</p>
<p><img src="/post/IDE/image-20200511111618183.png" alt="image-20200511111618183"></p>
<p>测试后：</p>
<p><img src="/post/IDE/image-20200511112025327.png" alt="image-20200511112025327"></p>
<h4 id="2）测试获取数据"><a href="#2）测试获取数据" class="headerlink" title="2）测试获取数据"></a>2）测试获取数据</h4><p> <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/current/java-rest-high-search.html</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void searchData() throws IOException &#123;</span><br><span class="line">    GetRequest getRequest = new GetRequest(</span><br><span class="line">            &quot;users&quot;,</span><br><span class="line">            &quot;_-2vAHIB0nzmLJLkxKWk&quot;);</span><br><span class="line"></span><br><span class="line">    GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(getResponse);</span><br><span class="line">    String index = getResponse.getIndex();</span><br><span class="line">    System.out.println(index);</span><br><span class="line">    String id = getResponse.getId();</span><br><span class="line">    System.out.println(id);</span><br><span class="line">    if (getResponse.isExists()) &#123;</span><br><span class="line">        long version = getResponse.getVersion();</span><br><span class="line">        System.out.println(version);</span><br><span class="line">        String sourceAsString = getResponse.getSourceAsString();</span><br><span class="line">        System.out.println(sourceAsString);</span><br><span class="line">        Map&lt;String, Object&gt; sourceAsMap = getResponse.getSourceAsMap();</span><br><span class="line">        System.out.println(sourceAsMap);</span><br><span class="line">        byte[] sourceAsBytes = getResponse.getSourceAsBytes();</span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>查询state&#x3D;”AK”的文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>





<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;took&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;timed_out&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;_shards&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;successful&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;skipped&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;failed&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;value&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span>   <span class="comment">//匹配到了22条</span></span><br><span class="line">			<span class="attr">&quot;relation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;max_score&quot;</span><span class="punctuation">:</span> <span class="number">3.7952394</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bank&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;account&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;210&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_score&quot;</span><span class="punctuation">:</span> <span class="number">3.7952394</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">				<span class="attr">&quot;account_number&quot;</span><span class="punctuation">:</span> <span class="number">210</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;balance&quot;</span><span class="punctuation">:</span> <span class="number">33946</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Cherry&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Carey&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;M&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;539 Tiffany Place&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;employer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Martgo&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cherrycarey@martgo.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;city&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fairacres&quot;</span><span class="punctuation">,</span></span><br><span class="line">				<span class="attr">&quot;state&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AK&quot;</span></span><br><span class="line">			<span class="punctuation">&#125;</span></span><br><span class="line">		<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">           ....<span class="comment">//省略其他</span></span><br><span class="line">          <span class="punctuation">]</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p><strong>搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资</strong></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mill&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ageAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;ageAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;age&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;balanceAvg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;balance&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>java实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复杂检索:在bank中搜索address中包含mill的所有人的年龄分布以及平均年龄，平均薪资</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">searchData</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 创建检索请求</span></span><br><span class="line">    <span class="type">SearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.1）指定索引</span></span><br><span class="line">    searchRequest.indices(<span class="string">&quot;bank&quot;</span>);</span><br><span class="line">    <span class="comment">//1.2）构造检索条件</span></span><br><span class="line">    <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>();</span><br><span class="line">    sourceBuilder.query(QueryBuilders.matchQuery(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;Mill&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.2.1)按照年龄分布进行聚合</span></span><br><span class="line">    TermsAggregationBuilder ageAgg=AggregationBuilders.terms(<span class="string">&quot;ageAgg&quot;</span>).field(<span class="string">&quot;age&quot;</span>).size(<span class="number">10</span>);</span><br><span class="line">    sourceBuilder.aggregation(ageAgg);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.2.2)计算平均年龄</span></span><br><span class="line">    <span class="type">AvgAggregationBuilder</span> <span class="variable">ageAvg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;ageAvg&quot;</span>).field(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">    sourceBuilder.aggregation(ageAvg);</span><br><span class="line">    <span class="comment">//1.2.3)计算平均薪资</span></span><br><span class="line">    <span class="type">AvgAggregationBuilder</span> <span class="variable">balanceAvg</span> <span class="operator">=</span> AggregationBuilders.avg(<span class="string">&quot;balanceAvg&quot;</span>).field(<span class="string">&quot;balance&quot;</span>);</span><br><span class="line">    sourceBuilder.aggregation(balanceAvg);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;检索条件：&quot;</span>+sourceBuilder);</span><br><span class="line">    searchRequest.source(sourceBuilder);</span><br><span class="line">    <span class="comment">//2. 执行检索</span></span><br><span class="line">    <span class="type">SearchResponse</span> <span class="variable">searchResponse</span> <span class="operator">=</span> client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    System.out.println(<span class="string">&quot;检索结果：&quot;</span>+searchResponse);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 将检索结果封装为Bean</span></span><br><span class="line">    <span class="type">SearchHits</span> <span class="variable">hits</span> <span class="operator">=</span> searchResponse.getHits();</span><br><span class="line">    SearchHit[] searchHits = hits.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sourceAsString</span> <span class="operator">=</span> searchHit.getSourceAsString();</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> JSON.parseObject(sourceAsString, Account.class);</span><br><span class="line">        System.out.println(account);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 获取聚合信息</span></span><br><span class="line">    <span class="type">Aggregations</span> <span class="variable">aggregations</span> <span class="operator">=</span> searchResponse.getAggregations();</span><br><span class="line"></span><br><span class="line">    <span class="type">Terms</span> <span class="variable">ageAgg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAgg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : ageAgg1.getBuckets()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">keyAsString</span> <span class="operator">=</span> bucket.getKeyAsString();</span><br><span class="line">        System.out.println(<span class="string">&quot;年龄：&quot;</span>+keyAsString+<span class="string">&quot; ==&gt; &quot;</span>+bucket.getDocCount());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Avg</span> <span class="variable">ageAvg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;ageAvg&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;平均年龄：&quot;</span>+ageAvg1.getValue());</span><br><span class="line"></span><br><span class="line">    <span class="type">Avg</span> <span class="variable">balanceAvg1</span> <span class="operator">=</span> aggregations.get(<span class="string">&quot;balanceAvg&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;平均薪资：&quot;</span>+balanceAvg1.getValue());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>可以尝试对比打印的条件和执行结果，和前面的ElasticSearch的检索语句和检索结果进行比较；</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-kibana控制台命令"><a href="#1-kibana控制台命令" class="headerlink" title="1. kibana控制台命令"></a>1. kibana控制台命令</h3><p>ctrl+home：回到文档首部；</p>
<p>ctril+end：回到文档尾部。</p>
]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>谷粒商城-高级篇</tag>
      </tags>
  </entry>
  <entry>
    <title>那个上北大的女孩疯了</title>
    <url>/post/%E9%82%A3%E4%B8%AA%E4%B8%8A%E5%8C%97%E5%A4%A7%E7%9A%84%E5%A5%B3%E5%AD%A9%E7%96%AF%E4%BA%86.html</url>
    <content><![CDATA[<h1 id="上"><a href="#上" class="headerlink" title="上"></a>上</h1><p>高中时代，我一直是班上的优等生，老师和父母认定我会考上北大。这种念头充斥了我的生活。</p>
<p>我的弱项是英语听力。那时候听力还放磁带，一面40分钟。高二暑假，为了弥补短板，我专门买了录音机，白天外放，晚上睡觉前戴耳机听。录音机是自动播放的，不按停，就会反反复复播一整晚。</p>
<p>一天早上，我起床听见耳朵里的杂音，蝉鸣一般，一浪一浪。我赶紧让妈妈带我去医院，医生告诫我不许再用耳机。我点头答应，心里想的却是：“还有一年就高考了，不用耳机怎么行？”</p>
<p>高三上学期第一次月考结束，我得了重感冒，耳朵里像插了一刀，满世界都是“吱”的声音。再次就医，还是原来的医生，他拿着诊断结果，把我骂了一顿。可是我连他的骂声都听不清楚。</p>
<p>我捏着诊断报告：鼓膜塌陷，神经性耳聋，左耳65分贝，右耳75分贝。医生写了几个字：“先把其他的事放下，治病要紧。”</p>
<p>感冒痊愈后，耳朵不疼了，耳鸣却无法治愈。我请了一个月长假在家养病，每天坐卧不宁。耳朵稍微好了一些，我就迫切想回学校。</p>
<p>回去之后，连续三次模拟月考，我都考了班里的后十名。我盯着试卷上触目惊心的分数，直到同桌拿手在我眼前晃了晃：“怎么了？你保持这个姿势快半个小时了。”</p>
<p>我说：“你看看，我想不太明白错在哪里。”</p>
<p>同桌把试卷拿过去，惊叫起来：“你怎么回事？6加5等于1。”然后他笑：“你看看你，前面那么难的步骤都对了，最后一步算错了。”可是我根本不知道我为什么会写1。</p>
<p>我发现很多平时能轻松应付的题，突然就不会做了。</p>
<p>第三次月考结束后，班主任把我叫到了办公室：“你怎么回事，你还想不想上大学？你知道你拉了班级平均分多少分吗？我还要不要升学率了？”我不吭声，他又接着说：“你回家休息吧，治好病再回来。给你保留学籍，明年再来考试。”</p>
<p>我小声哀求班主任，想留下来。当我还是优等生的时候，我偶尔在课堂上吃早饭，他从来当没看见。我不信他会这么狠心。</p>
<p>老师没有回答，叹气说：“这是教导主任的意思，学校怕出事。”前两年，学校里出了个高考状元，之后有个女孩从教师办公楼上跳了下来。她平时比状元学习成绩好得多，但高考落榜了。</p>
<p>我没有同意老师让我回家的决定，硬扛着，没告诉父母。接下来的一次考试，我考了班级倒数第一。同学们窃窃私语地讨论我，我耳朵听不清楚，但“精神病”这个名词不断地出现。</p>
<p>耳朵痛得不得了，我去办公室请假，离开的时候，听到老师们在讨论：“从年级前五掉到倒数第一，这孩子算是废了。心理太脆弱，长大也不会有出息。”“一定要把她弄回家，在学校跳楼怎么办？”</p>
<p>回到家后，我对父母说：“我不想上学了。”爸爸随手抄起一根棍子在我身上抽了几下：“要你这个废物有什么用！”他还要打，妈妈哭着拦住他，对我喊：“快向爸爸认错，说你要上学！”</p>
<p>我真恨自己的耳朵，还能听到这些话。</p>
<p>父母仍然带我去看那个耳科医生，他仔细询问了我的病情，说我很可能是抑郁症。</p>
<p>父亲在医院里大吵大闹，说我就是没事找事，天天不缺吃不缺穿，却给养废了，上辈子造了什么孽有这么个孩子。他走了，只留下妈妈带我去看心理咨询科，医生草草问了两句，给我开了舒必利。我一看说明书，是治疗精神分裂症的。</p>
<p>我试图向医生说明我不是幻听，是耳朵出了毛病。这位年轻的医生不屑地说：“是你知道还是我知道？你马上就要精神分裂了，先把药吃上！”</p>
<p>我没有吃他开的药。那时候互联网刚刚兴起，家里没有电脑，我偷偷去了网吧，查找跟自己的症状对应的病症，了解了很多关于抑郁症的知识。从网吧出来，我直奔药店，买了治疗抑郁症的第一瓶药：多塞平。8块5毛钱。</p>
<p>吃完药，我每天连走路时都在发抖，心脏也不舒服，一直喘不上气。但直到现在，我还清楚地记得瓶身上那个小小的福字商标，我觉得它会带给我好运。</p>
<p>半个月后，我的头脑开始清醒，睡眠好多了，耳朵的疼痛缓解，耳鸣的症状也减轻了，也能听清楚别人说话。妈妈给我买了很多安神补脑液，她坚信只要睡好了，什么问题都能解决。</p>
<p>第一个回到我脑子里的想法，还是想考北大，所以从过年后开始，我就一直在家里复习，解题速度比从前还快。高考结束后，我估了600多分，在志愿上填报了北大。我觉得世界又美好了起来，每天出去和朋友玩，玩得昏天黑地。</p>
<p>放榜后，我考了632分，超出录取线三十多分，一家人都沉浸在喜悦中。但我一直没有等到录取通知书，有些比我分数低的同学，都拿到了通知书。</p>
<p>我每天去学校里问老师，终于有一天，教务主任告诉我，班主任私自改了我的志愿。他认为我当时的状态肯定考不上，就改了一所他觉得我考得上的学校，但他忘记改电子档案了。于是，两所学校都把我的档案退回了。</p>
<p>教务主任试图安抚我的情绪，不断地向我解释老师是为我好，还承诺我在本校复读不收学费。</p>
<p><a href="https://www.ximalaya.com/sound/393194673">音频链接</a></p>
<h1 id="中"><a href="#中" class="headerlink" title="中"></a>中</h1><p>我在炎炎烈日下走出学校，看到学校光荣榜上，考上北大的有12个，里面包括比我分数低的同学。</p>
<p>我再也不想见到班主任，想到另一所学校报名复读。填写高考成绩的时候，我看到招生老师吃惊的眼神，我对他笑了笑。</p>
<p>开学一个月，原先的班主任出现在教室里，旁边是几位教育局的领导，他拿着花名册，挨个“指认”他的学生：“这个是我的学生，这个也是我的。当我不知道呢，我们学校辛辛苦苦培养的学生，被他们给截和了！”</p>
<p>当天上午，我接到了教育局的通知，让我回原学校就读，过期本地区所有学校将不再接收。</p>
<p>我收拾了所有行李，整装回家。</p>
<p>回家的那天夜里，我惊恐发作（亦称急性焦虑发作，发作时患者有濒死感），仿佛有人卡着我的脖子，快要断气了。我在床上来回翻滚，呕吐，翻白眼，大喊大叫：“快来救我！”</p>
<p>迷糊中有人抓着我的手，似乎是妈妈，旁边爸爸的声音说：“花了那么多钱，怎么还是这样？不就是回原学校吗？在哪里上学不都一样？”</p>
<p>几分钟后，症状消失。家里静悄悄的，像是什么都没有发生过。后半夜，又开始了，整个楼都听见了我的呼救声，依稀听见爸爸说：“还要折腾多久？”</p>
<p>我决定不折腾了。在大家都睡着以后，我找了一条领带去了断自己，缺氧的我大小便失禁，双手双脚打摆子。后来我被救了回来，那成了我一生中最羞耻的一夜。</p>
<p>刚从病床上醒来，爸爸抡了我一巴掌。妈妈爆发了：“你是不是要把女儿逼死才甘心！”医生把爸爸请了出去，是妈妈感觉我的房间动静不对，才及时救了我。</p>
<p>事实上，在我感觉自己失禁时，我就后悔了，可我发不出声音来，死亡的恐惧铺天盖地，我觉得我完了。当我发现我好好地在医院里时，我松了一口气。</p>
<p>医生给我检查了一下，建议我看心理咨询科，我想到了当初把我诊断为精神分裂的医生，心下抗拒。急诊科的大夫说：“你去找心理咨询科的王主任，他明天上班。”</p>
<p>第二天，我在妈妈的陪同下，再次来到医院。这是我人生的转折点，在罹患抑郁症一年后，我正式开始了系统的、正规的治疗。</p>
<p>心理科主任姓王，四十多岁，说话声音很温和，表情很专注，看不到一丝一毫的不耐烦和嫌弃。我不自觉地心情放松，把这一年来的经历娓娓道来。医生说：“你要是早点来的话，就不用吃这么多苦了。”</p>
<p>他认为我在吃苦，而不是像其他人一样，认为我是矫情。在那个年代，人们对抑郁症的想法就是这个人无病呻吟，没事找事，身在福中不知福。那一天，当我听到王医生这么说的时候，竟然控制不住地落泪了。</p>
<p>我犹豫半晌，把我第一次看病的情景告诉了王医生。他说：“你说的大夫我知道，很多病人投诉过他，他的学历很高，却没有心理医生最基本的素质——共情，他不喜欢这份工作，已经离开医院了。”</p>
<p>“请问大夫，共情是什么？”</p>
<p>医生沉默了一会儿，对我说：“是慈悲。”</p>
<p>我放弃了学业，在家里专心治病。医生给我开了一些药物。他说我擅自吃药伤害了心脏，吃这个是保护心脏的；失眠严重时吃那个，不失眠就不用吃。后来，医生根据我的情况不断调整剂量，一个月后，我的用药稳定在一天两片。</p>
<p>我按照医嘱吃药，果然没有心脏方面的副作用，其他的锥体外系反应也在控制范围内。治疗期间仍然有控制不住的悲伤情绪，我牢记王医生的嘱咐：随它去吧，不用混乱的大脑思考任何问题。</p>
<p>耳鸣、头痛、失眠、悲伤、害怕，随它去吧。我治病就好，把每个今天过好就好。后来医生告诉我，这是森田疗法，我执行得很好。我信心大增。</p>
<p>用药半年后，我觉得自己痊愈了，很高兴地去找王医生复诊。王医生冷静地对我说：“一般来说，抑郁症复发的可能性比较大。”</p>
<p>“你刚开始的症状很严重，复发过很多次，所以，抑郁症很可能会伴你一生。”</p>
<p><a href="https://www.ximalaya.com/sound/394383916">音频链接</a></p>
<h1 id="下"><a href="#下" class="headerlink" title="下"></a>下</h1><p>这对我来说是当头一棒。我很惶恐，难以想象，当我老了，我还要和这个心魔纠缠。</p>
<p>“但是，面对问题才能解决问题。我告诉你这些，是怕你将来复发的时候不能接受，悲观失望。如果复发了，那就复发吧，治病就好了。你就把它当成一个感冒，病了，咱就治。顺其自然，不和它较劲，你越较劲，它越纠缠你。你这次做得很好，下一次，你也能做好。”</p>
<p>“好，谢谢医生。”</p>
<p>王医生建议我再吃半年的药，让大脑充分休息。我一直严格执行。我找了个超市的工作，每天身体很累，心理却很轻松。我以前的同学来看我，他们都是大学生，当他们惊讶我这个以前的优等生要去超市搬货时，我没有心理失衡。每个人都有自己的路要走，能健康地活着，我已经很感恩。</p>
<p>我甚至已经不再怨恨自己的班主任了，医生对我说：“柔软的舌头也是杀人的刀，你不能再让这把刀伤害你，你无法改变别人，只有改变自己。”我改变自己了，选择原谅这些人。什么是原谅呢？原谅就是，被人践踏的花发出的香气。</p>
<p>爸爸说话还是一如既往地刻薄，我笑笑，就不去想这件事了。人生那么短，我得多想想开心的事。这个月多发了一百块工资，不如给妈妈买条围巾？</p>
<p>就这样，时间悄悄地过了两年，我尝试拿起以前的课本自学，欣喜地发现自己没有头疼，只是在累的时候会稍稍耳鸣，及时休息的话，耳鸣就会缓解。我在家里复习了一年，以社会人员的名义参加了当年的高考。</p>
<p>高考体检是在本地的防疫站，我又一次见到了以前的班主任。他领着新一届的学生来体检，长长的学生队伍，他来回奔忙。我和班主任在走廊擦肩而过，他对我点点头，我对他笑了笑，随后他说：“这次考试圆锥曲线很可能出大题，你好好复习一下这部分。”</p>
<p>“嗯，谢谢老师。”</p>
<p>“不用谢，我也希望……唉，不说了，希望你能考上吧。”</p>
<p>“谢谢老师。”</p>
<p>我们道别，各自走开。明明心里惊涛骇浪，脸上却云淡风轻。明明想一直笑，却在转身时泪流满面。</p>
<p>两年的空白期给我的影响很大，多亏我扎实的基础，我顺利考上大学。虽然和我当年的梦想相去甚远，仅仅是个普通的一本，但比起两年前的情形简直就是天堂。</p>
<p>大学四年，我有过一次不明原因的小发作，便给王大夫打电话。他给我开了另一剂药，持续吃药一个月后，我情绪改善，半年后，恢复正常。</p>
<p>王医生夸我是个好病人，有强烈的自救欲望和随遇而安的性格。他说：“恭喜你，你的感冒又好了。”</p>
<p>我说：“王叔叔，谢谢您的慈悲。”</p>
<p>我决定牢记他的慈悲，用慈悲心去温柔地对待其他人。我不会去讽刺不幸的人，活在世上已经是艰难，为什么还要相互伤害？</p>
<p>时光匆匆流逝，转眼就过了十多年。这十多年里，我数次复发，我没有自己擅自吃药，而是看完医生后，按照医嘱治疗服药，每次都平安恢复，一般症状持续不到两个月，并且时间越来越短。</p>
<p>现在，抑郁症像一个不时拜访的老友，当我情绪不振时，我能感受到它逼近的气息，我甚至可以对它说：“嗨！你来了，坐？”当我从沉重的焦虑不安中缓过来，我知道它又走了，我可以平静地和它挥手说再见。</p>
<p>但我知道，来或不来，它一直在那里。我已经接受了抑郁症这个心魔和我如影随形，我结了婚，生了小孩，我甚至没有得产后抑郁，因为我一点都不担心，得就得吧，治就行了。果然，产后抑郁没有来敲门。</p>
<p>我的听力也稍稍恢复了些。以前，耳科医生给我开过滴鼻净，这件事给了我一个启发，只要疼的时候，或是听不清楚的时候，吃感冒药睡一觉，就能缓解症状。这个发现让我很开心。</p>
<p>我是个平凡的人，年少时的梦想已经离我很远，如果没有抑郁症，也许我会过另一种人生，可是人生没有如果。现在，我工作普通，收入一般，可以说是一个庸庸碌碌的人。<br>那又怎样呢？我是一个拼尽全力活着的平凡人，我觉得自己很了不起。</p>
<p><a href="https://www.ximalaya.com/sound/394777839">音频链接</a></p>
]]></content>
      <categories>
        <category>致郁系列</category>
      </categories>
      <tags>
        <tag>致郁系列</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-高可用篇</title>
    <url>/post/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E2%80%94%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4.html</url>
    <content><![CDATA[<h2 id="1、K8s快速入门"><a href="#1、K8s快速入门" class="headerlink" title="1、K8s快速入门"></a>1、K8s快速入门</h2><h3 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h3><p>kubernetes简称k8s。是用于自动部署，扩展和管理容器化应用程序的开源系统。<br>中文官网：<a href="https://kubernetes.io/Zh/">https://kubernetes.io/Zh/</a><br>中文社区：<a href="https://www.kubernetes.org.cn/">https://www.kubernetes.org.cn/</a><br>官方文档：<a href="https://kubernetes.io/zh/docs/home/">https://kubernetes.io/zh/docs/home/</a><br>社区文档：<a href="https://docs.kubernetes.org.cn/">https://docs.kubernetes.org.cn/</a></p>
<p>部署方式的进化：</p>
<p> <img src="https://d33wubrfki0l68.cloudfront.net/26a177ede4d7b032362289c6fccd448fc4a91174/eb693/images/docs/container_evolution.svg" alt="部署演进"> </p>
<p><img src="/post/IDE/image-20200503105948619.png" alt="image-20200503105948619"></p>
<p><img src="/post/IDE/image-20200503110101659.png" alt="image-20200503110101659"></p>
<h3 id="2）架构"><a href="#2）架构" class="headerlink" title="2）架构"></a>2）架构</h3><h4 id="（1）整体主从方式"><a href="#（1）整体主从方式" class="headerlink" title="（1）整体主从方式"></a>（1）整体主从方式</h4><p><img src="/post/IDE/image-20200503110244940.png" alt="image-20200503110244940"></p>
<p><img src="/post/IDE/image-20200503110350256.png" alt="image-20200503110350256"></p>
<h4 id="（2）master节点架构"><a href="#（2）master节点架构" class="headerlink" title="（2）master节点架构"></a>（2）master节点架构</h4><p><img src="/post/IDE/image-20200503110458806.png" alt="image-20200503110458806"></p>
<p><img src="/post/IDE/image-20200503110631219.png" alt="image-20200503110631219"></p>
<p><img src="/post/IDE/image-20200503110732773.png" alt="image-20200503110732773"></p>
<h4 id="（3）Node节点架构"><a href="#（3）Node节点架构" class="headerlink" title="（3）Node节点架构"></a>（3）Node节点架构</h4><p><img src="/post/IDE/image-20200503110804361.png" alt="image-20200503110804361"></p>
<p><img src="/post/IDE/image-20200503111032457.png" alt="image-20200503111032457"></p>
<h3 id="3）概念"><a href="#3）概念" class="headerlink" title="3）概念"></a>3）概念</h3><p><img src="/post/IDE/image-20200503112551188.png" alt="image-20200503112551188"></p>
<p><img src="/post/IDE/image-20200503112627449.png" alt="image-20200503112627449"></p>
<p><img src="/post/IDE/image-20200503112723747.png" alt="image-20200503112723747"></p>
<p><img src="/post/IDE/image-20200503112810938.png" alt="image-20200503112810938"></p>
<p><img src="/post/IDE/image-20200503113055314.png" alt="image-20200503113055314"></p>
<p><img src="/post/IDE/image-20200503113619233.png" alt="image-20200503113619233"></p>
<p><img src="/post/IDE/image-20200503113701902.png" alt="image-20200503113701902"></p>
<h3 id="4）快速体验"><a href="#4）快速体验" class="headerlink" title="4）快速体验"></a>4）快速体验</h3><h4 id="（1）安装minikube"><a href="#（1）安装minikube" class="headerlink" title="（1）安装minikube"></a>（1）安装minikube</h4><p><a href="https://github.com/kubernetes/minikube/releases">https://github.com/kubernetes/minikube/releases</a><br>下载minikuber-windows-amd64.exe 改名为minikube.exe<br>打开virtualBox，打开cmd<br>运行<br>minikube start –vm-driver&#x3D;virtualbox –registry-mirror&#x3D;<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a><br>等待20分钟即可。</p>
<h4 id="（2）体验nginx部署升级"><a href="#（2）体验nginx部署升级" class="headerlink" title="（2）体验nginx部署升级"></a>（2）体验nginx部署升级</h4><ol>
<li><p>提交一个nginx deployment<br>kubectl apply -f <a href="https://k8s.io/examples/application/deployment.yaml">https://k8s.io/examples/application/deployment.yaml</a></p>
</li>
<li><p>升级 nginx deployment<br>kubectl apply -f <a href="https://k8s.io/examples/application/deployment-update.yaml">https://k8s.io/examples/application/deployment-update.yaml</a></p>
</li>
<li><p>扩容 nginx deployment</p>
</li>
</ol>
<h2 id="2、K8s集群安装"><a href="#2、K8s集群安装" class="headerlink" title="2、K8s集群安装"></a>2、K8s集群安装</h2><h3 id="1）kubeadm"><a href="#1）kubeadm" class="headerlink" title="1）kubeadm"></a>1）kubeadm</h3><p>kubeadm是官方社区推出的一个用于快速部署kuberneters集群的工具。<br>这个工具能通过两条指令完成一个kuberneters集群的部署</p>
<p>创建一个master节点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kuberneters init</span><br></pre></td></tr></table></figure>

<p>将一个node节点加入到当前集群中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubeadm join &lt;Master节点的IP和端口&gt;</span><br></pre></td></tr></table></figure>



<h3 id="2）前置要求"><a href="#2）前置要求" class="headerlink" title="2）前置要求"></a>2）前置要求</h3><p>一台或多台机器，操作系统Centos7.x-86_x64<br>硬件配置：2GB或更多RAM，2个CPU或更多CPU，硬盘30GB或更多<br>集群中所有的机器之间网络互通<br>可以访问外网，需要拉取镜像<br>禁止Swap分区</p>
<h3 id="3）部署步骤"><a href="#3）部署步骤" class="headerlink" title="3）部署步骤"></a>3）部署步骤</h3><ol>
<li>在所有的节点上安装Docker和kubeadm</li>
<li>不是Kubernetes Master</li>
<li>部署容器网络插件</li>
<li>部署Kubernetes Node，将节点加入Kubernetes集群中</li>
<li>部署DashBoard web页面，可视化查看Kubernetes资源</li>
</ol>
<p><img src="/post/IDE/image-20200503144120720.png" alt="image-20200503144120720"></p>
<h3 id="4）环境准备"><a href="#4）环境准备" class="headerlink" title="4）环境准备"></a>4）环境准备</h3><h4 id="（1）准备工作"><a href="#（1）准备工作" class="headerlink" title="（1）准备工作"></a>（1）准备工作</h4><ul>
<li>我们可以使用vagrant快速创建三个虚拟机。虚拟机启动前先设置virtualbox的主机网络。现在全部统一为192.168.56.1，以后所有虚拟机都是56.x的ip地址。</li>
</ul>
<p><img src="/post/IDE/image-20200503175351320.png" alt="image-20200503175351320"></p>
<ul>
<li>在全局设定中，找到一个空间比较大的磁盘用用来存放镜像。</li>
</ul>
<p><img src="/post/IDE/image-20200503180202640.png" alt="image-20200503180202640"></p>
<h4 id="（2）启动三个虚拟机"><a href="#（2）启动三个虚拟机" class="headerlink" title="（2）启动三个虚拟机"></a>（2）启动三个虚拟机</h4><ul>
<li>使用我们提供的vagrant文件，复制到非中文无空格目录下，运行vagrant up启动三个虚拟机。其实vagrant完全可以一键部署全部K8s集群<br><a href="https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster">https://github.com/rootsongjc/kubernetes-vagrant-centos-cluster</a><br><a href="http://github.com/davidkbainbridge/k8s-playground">http://github.com/davidkbainbridge/k8s-playground</a></li>
</ul>
<p>下面是vagrantfile，使用它来创建三个虚拟机，分别为k8s-node1，k8s-node2和k8s-node3.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">Vagrant.configure(&quot;2&quot;)</span> <span class="string">do</span> <span class="string">|config|</span></span><br><span class="line">   <span class="string">(1..3).each</span> <span class="string">do</span> <span class="string">|i|</span></span><br><span class="line">        <span class="string">config.vm.define</span> <span class="string">&quot;k8s-node#&#123;i&#125;&quot;</span> <span class="string">do</span> <span class="string">|node|</span></span><br><span class="line">            <span class="comment"># 设置虚拟机的Box</span></span><br><span class="line">            <span class="string">node.vm.box</span> <span class="string">=</span> <span class="string">&quot;centos/7&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置虚拟机的主机名</span></span><br><span class="line">            <span class="string">node.vm.hostname=&quot;k8s-node#&#123;i&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置虚拟机的IP</span></span><br><span class="line">            <span class="string">node.vm.network</span> <span class="string">&quot;private_network&quot;</span><span class="string">,</span> <span class="attr">ip:</span> <span class="string">&quot;192.168.56.#&#123;99+i&#125;&quot;</span><span class="string">,</span> <span class="attr">netmask:</span> <span class="string">&quot;255.255.255.0&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 设置主机与虚拟机的共享目录</span></span><br><span class="line">            <span class="comment"># node.vm.synced_folder &quot;~/Documents/vagrant/share&quot;, &quot;/home/vagrant/share&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># VirtaulBox相关配置</span></span><br><span class="line">            <span class="string">node.vm.provider</span> <span class="string">&quot;virtualbox&quot;</span> <span class="string">do</span> <span class="string">|v|</span></span><br><span class="line">                <span class="comment"># 设置虚拟机的名称</span></span><br><span class="line">                <span class="string">v.name</span> <span class="string">=</span> <span class="string">&quot;k8s-node#&#123;i&#125;&quot;</span></span><br><span class="line">                <span class="comment"># 设置虚拟机的内存大小</span></span><br><span class="line">                <span class="string">v.memory</span> <span class="string">=</span> <span class="number">4096</span></span><br><span class="line">                <span class="comment"># 设置虚拟机的CPU个数</span></span><br><span class="line">                <span class="string">v.cpus</span> <span class="string">=</span> <span class="number">4</span></span><br><span class="line">            <span class="string">end</span></span><br><span class="line">        <span class="string">end</span></span><br><span class="line">   <span class="string">end</span></span><br><span class="line"><span class="string">end</span></span><br></pre></td></tr></table></figure>



<ul>
<li>进入到三个虚拟机，开启root的密码访问权限</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Vagrant ssh xxx进入到系统后</span><br><span class="line"></span><br><span class="line">su root 密码为vagrant</span><br><span class="line"></span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">PermitRootLogin yes </span><br><span class="line">PasswordAuthentication yes</span><br><span class="line"></span><br><span class="line">所有的虚拟机设为4核4G</span><br></pre></td></tr></table></figure>





<p>关于在”网络地址转换”的连接方式下，三个节点的eth0，IP地址相同的问题。</p>
<p><strong>问题描述：</strong>查看k8s-node1的路由表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# ip route show</span><br><span class="line">default via 10.0.2.2 dev eth0 proto dhcp metric 100 </span><br><span class="line">10.0.2.0/24 dev eth0 proto kernel scope link src 10.0.2.15 metric 100 </span><br><span class="line">192.168.56.0/24 dev eth1 proto kernel scope link src 192.168.56.100 metric 101 </span><br><span class="line">[root@k8s-node1 ~</span><br></pre></td></tr></table></figure>

<p>能够看到路由表中记录的是，通过端口eth0进行数据包的收发。</p>
<p>分别查看k8s-node1，k8s-node2和k8s-node3的eth0所绑定的IP地址，发现它们都是相同的，全都是10.0.2.15，这些地址是供kubernetes集群通信用的，区别于eth1上的IP地址，是通远程管理使用的。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# ip addr</span><br><span class="line">...</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8a:fe:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 84418sec preferred_lft 84418sec</span><br><span class="line">    inet6 fe80::5054:ff:fe8a:fee6/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:a3:ca:c0 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.100/24 brd 192.168.56.255 scope global noprefixroute eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::a00:27ff:fea3:cac0/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>

<p><strong>原因分析：</strong>这是因为它们使用是端口转发规则，使用同一个地址，通过不同的端口来区分。但是这种端口转发规则在以后的使用中会产生很多不必要的问题，所以需要修改为NAT网络类型。</p>
<p><img src="/post/IDE/image-20200503184536343.png" alt="image-20200503184536343"></p>
<p><strong>解决方法：</strong></p>
<ul>
<li>选择三个节点，然后执行“管理”-&gt;”全局设定”-&gt;“网络”，添加一个NAT网络。</li>
</ul>
<img src="/post/IDE/image-20200503184919936.png" alt="image-20200503184919936" style="zoom:67%;" />

<ul>
<li>分别修改每台设备的网络类型，并刷新重新生成MAC地址。</li>
</ul>
<img src="/post/IDE/image-20200503185344246.png" alt="image-20200503185344246" style="zoom: 50%;" />



<ul>
<li>再次查看三个节点的IP</li>
</ul>
<img src="/post/IDE/image-20200503190101156.png" alt="image-20200503190101156" style="zoom:50%;" />





<h4 id="（3）设置Linux环境（三个节点都执行）"><a href="#（3）设置Linux环境（三个节点都执行）" class="headerlink" title="（3）设置Linux环境（三个节点都执行）"></a>（3）设置Linux环境（三个节点都执行）</h4><ul>
<li>关闭防火墙</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭Linux</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<ul>
<li>关闭swap</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">swapoff -a #临时关闭</span><br><span class="line">sed -ri &#x27;s/.*swap.*/#&amp;/&#x27; /etc/fstab #永久关闭</span><br><span class="line">free -g #验证，swap必须为0</span><br></pre></td></tr></table></figure>

<ul>
<li>添加主机名与IP对应关系：</li>
</ul>
<p>查看主机名：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure>

<p>如果主机名不正确，可以通过“hostnamectl set-hostname &lt;newhostname&gt; :指定新的hostname”命令来进行修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/hosts</span><br><span class="line">10.0.2.15 k8s-node1</span><br><span class="line">10.0.2.4 k8s-node2</span><br><span class="line">10.0.2.5 k8s-node3</span><br></pre></td></tr></table></figure>



<p>将桥接的IPV4流量传递到iptables的链：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line"></span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>应用规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sysctl --system</span><br></pre></td></tr></table></figure>





<p>疑难问题：遇见提示是只读的文件系统，运行如下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -o remount rw /</span><br></pre></td></tr></table></figure>

<ul>
<li>date 查看时间（可选）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install ntpupdate</span><br><span class="line"></span><br><span class="line">ntpupdate time.window.com #同步最新时间</span><br></pre></td></tr></table></figure>



<h3 id="5）所有节点安装docker、kubeadm、kubelet、kubectl"><a href="#5）所有节点安装docker、kubeadm、kubelet、kubectl" class="headerlink" title="5）所有节点安装docker、kubeadm、kubelet、kubectl"></a>5）所有节点安装docker、kubeadm、kubelet、kubectl</h3><p>Kubenetes默认CRI（容器运行时）为Docker，因此先安装Docker。</p>
<h4 id="（1）安装Docker"><a href="#（1）安装Docker" class="headerlink" title="（1）安装Docker"></a>（1）安装Docker</h4><p>1、卸载之前的docker</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<p>2、安装Docker  -CE</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum-config-manager \</span></span><br><span class="line"><span class="language-bash">    --add-repo \</span></span><br><span class="line"><span class="language-bash">    https://download.docker.com/linux/centos/docker-ce.repo</span></span><br><span class="line">    </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install docker-ce docker-ce-cli containerd.io</span>   </span><br></pre></td></tr></table></figure>

<p>3、配置镜像加速</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://ke9h1pt4.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<p>4、启动Docker &amp;&amp; 设置docker开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>



<p>基础环境准备好，可以给三个虚拟机备份一下；</p>
<p><img src="/post/IDE/image-20200503192940651.png" alt="image-20200503192940651"></p>
<h4 id="（2）添加阿里与Yum源"><a href="#（2）添加阿里与Yum源" class="headerlink" title="（2）添加阿里与Yum源"></a>（2）添加阿里与Yum源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>更多详情见： <a href="https://developer.aliyun.com/mirror/kubernetes">https://developer.aliyun.com/mirror/kubernetes</a> </p>
<h4 id="（3）安装kubeadm，kubelet和kubectl"><a href="#（3）安装kubeadm，kubelet和kubectl" class="headerlink" title="（3）安装kubeadm，kubelet和kubectl"></a>（3）安装kubeadm，kubelet和kubectl</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum list|grep kube</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y kubelet-1.17.3 kubeadm-1.17.3 kubectl-1.17.3</span><br></pre></td></tr></table></figure>

<p>开机启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable kubelet &amp;&amp; systemctl start kubelet</span><br></pre></td></tr></table></figure>



<p>查看kubelet的状态：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status kubelet</span><br></pre></td></tr></table></figure>

<p>查看kubelet版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 ~]# kubelet --version</span><br><span class="line">Kubernetes v1.17.3</span><br></pre></td></tr></table></figure>



<h3 id="6）部署k8s-master"><a href="#6）部署k8s-master" class="headerlink" title="6）部署k8s-master"></a>6）部署k8s-master</h3><h4 id="（1）master节点初始化"><a href="#（1）master节点初始化" class="headerlink" title="（1）master节点初始化"></a>（1）master节点初始化</h4><p>在Master节点上，创建并执行master_images.sh</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">images=(</span><br><span class="line">	kube-apiserver:v1.17.3</span><br><span class="line">    kube-proxy:v1.17.3</span><br><span class="line">	kube-controller-manager:v1.17.3</span><br><span class="line">	kube-scheduler:v1.17.3</span><br><span class="line">	coredns:1.6.5</span><br><span class="line">	etcd:3.4.3-0</span><br><span class="line">    pause:3.1</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> imageName <span class="keyword">in</span> <span class="variable">$&#123;images[@]&#125;</span> ; <span class="keyword">do</span></span><br><span class="line">    docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/<span class="variable">$imageName</span></span><br><span class="line"><span class="comment">#   docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName  k8s.gcr.io/$imageName</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>




<p>初始化kubeadm</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubeadm init \</span></span><br><span class="line"><span class="language-bash">--apiserver-advertise-address=10.0.2.15 \</span></span><br><span class="line"><span class="language-bash">--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \</span></span><br><span class="line"><span class="language-bash">--kubernetes-version   v1.17.3 \</span></span><br><span class="line"><span class="language-bash">--service-cidr=10.96.0.0/16  \</span></span><br><span class="line"><span class="language-bash">--pod-network-cidr=10.244.0.0/16</span></span><br></pre></td></tr></table></figure>

<p>注：</p>
<ul>
<li>–apiserver-advertise-address&#x3D;10.0.2.21 ：这里的IP地址是master主机的地址，为上面的eth0网卡的地址；</li>
<li></li>
</ul>
<p>执行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 opt]# kubeadm init \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">--apiserver-advertise-address=10.0.2.15 \</span></span><br><span class="line"><span class="language-bash">&gt; --image-repository registry.cn-hangzhou.aliyuncs.com/google_containers \</span></span><br><span class="line"><span class="language-bash">&gt; --kubernetes-version   v1.17.3 \</span></span><br><span class="line"><span class="language-bash">&gt; --service-cidr=10.96.0.0/16  \</span></span><br><span class="line"><span class="language-bash">&gt; --pod-network-cidr=10.244.0.0/16</span></span><br><span class="line">W0503 14:07:12.594252   10124 configset.go:202] WARNING: kubeadm cannot validate component configs for API groups [kubelet.config.k8s.io kubeproxy.config.k8s.io]</span><br><span class="line">[init] Using Kubernetes version: v1.17.3</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING IsDockerSystemdCheck]: detected &quot;cgroupfs&quot; as the Docker cgroup driver. The recommended driver is &quot;systemd&quot;. Please follow the guide at https://kubernetes.io/docs/setup/cri/</span><br><span class="line">[preflight] Pulling images required for setting up a Kubernetes cluster</span><br><span class="line">[preflight] This might take a minute or two, depending on the speed of your internet connection</span><br><span class="line">[preflight] You can also perform this action in beforehand using &#x27;kubeadm config images pull&#x27;</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file &quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file &quot;/var/lib/kubelet/config.yaml&quot;</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[certs] Using certificateDir folder &quot;/etc/kubernetes/pki&quot;</span><br><span class="line">[certs] Generating &quot;ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver&quot; certificate and key</span><br><span class="line">[certs] apiserver serving cert is signed for DNS names [k8s-node1 kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 10.0.2.15]</span><br><span class="line">[certs] Generating &quot;apiserver-kubelet-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;front-proxy-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/ca&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;etcd/server&quot; certificate and key</span><br><span class="line">[certs] etcd/server serving cert is signed for DNS names [k8s-node1 localhost] and IPs [10.0.2.15 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/peer&quot; certificate and key</span><br><span class="line">[certs] etcd/peer serving cert is signed for DNS names [k8s-node1 localhost] and IPs [10.0.2.15 127.0.0.1 ::1]</span><br><span class="line">[certs] Generating &quot;etcd/healthcheck-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;apiserver-etcd-client&quot; certificate and key</span><br><span class="line">[certs] Generating &quot;sa&quot; key and public key</span><br><span class="line">[kubeconfig] Using kubeconfig folder &quot;/etc/kubernetes&quot;</span><br><span class="line">[kubeconfig] Writing &quot;admin.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;kubelet.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;controller-manager.conf&quot; kubeconfig file</span><br><span class="line">[kubeconfig] Writing &quot;scheduler.conf&quot; kubeconfig file</span><br><span class="line">[control-plane] Using manifest folder &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-apiserver&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-controller-manager&quot;</span><br><span class="line">W0503 14:07:30.908642   10124 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[control-plane] Creating static Pod manifest for &quot;kube-scheduler&quot;</span><br><span class="line">W0503 14:07:30.911330   10124 manifests.go:225] the default kube-apiserver authorization-mode is &quot;Node,RBAC&quot;; using &quot;Node,RBAC&quot;</span><br><span class="line">[etcd] Creating static Pod manifest for local etcd in &quot;/etc/kubernetes/manifests&quot;</span><br><span class="line">[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory &quot;/etc/kubernetes/manifests&quot;. This can take up to 4m0s</span><br><span class="line">[apiclient] All control plane components are healthy after 22.506521 seconds</span><br><span class="line">[upload-config] Storing the configuration used in ConfigMap &quot;kubeadm-config&quot; in the &quot;kube-system&quot; Namespace</span><br><span class="line">[kubelet] Creating a ConfigMap &quot;kubelet-config-1.18&quot; in namespace kube-system with the configuration for the kubelets in the cluster</span><br><span class="line">[upload-certs] Skipping phase. Please see --upload-certs</span><br><span class="line">[mark-control-plane] Marking the node k8s-node1 as control-plane by adding the label &quot;node-role.kubernetes.io/master=&#x27;&#x27;&quot;</span><br><span class="line">[mark-control-plane] Marking the node k8s-node1 as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]</span><br><span class="line">[bootstrap-token] Using token: sg47f3.4asffoi6ijb8ljhq</span><br><span class="line">[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token</span><br><span class="line">[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster</span><br><span class="line">[bootstrap-token] Creating the &quot;cluster-info&quot; ConfigMap in the &quot;kube-public&quot; namespace</span><br><span class="line">[kubelet-finalize] Updating &quot;/etc/kubernetes/kubelet.conf&quot; to point to a rotatable kubelet client certificate and key</span><br><span class="line">[addons] Applied essential addon: CoreDNS</span><br><span class="line">[addons] Applied essential addon: kube-proxy</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">表示kubernetes已经初始化成功了</span></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.0.2.15:6443 --token sg47f3.4asffoi6ijb8ljhq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:81fccdd29970cbc1b7dc7f171ac0234d53825bdf9b05428fc9e6767436991bfb </span><br><span class="line">[root@k8s-node1 opt]# </span><br></pre></td></tr></table></figure>





<p>由于默认拉取镜像地址k8s.cr.io国内无法访问，这里指定阿里云仓库地址。可以手动按照我们的images.sh先拉取镜像。</p>
<p>地址变为：registry.aliyuncs.com&#x2F;googole_containers也可以。<br>科普：无类别域间路由（Classless Inter-Domain Routing 、CIDR）是一个用于给用户分配IP地址以及在互联网上有效第路由IP数据包的对IP地址进行归类的方法。<br>拉取可能失败，需要下载镜像。</p>
<p>运行完成提前复制：加入集群的令牌。</p>
<h4 id="（2）测试Kubectl（主节点执行）"><a href="#（2）测试Kubectl（主节点执行）" class="headerlink" title="（2）测试Kubectl（主节点执行）"></a>（2）测试Kubectl（主节点执行）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>

<p>详细部署文档：<a href="https://kubernetes.io/docs/concepts/cluster-administration/addons/">https://kubernetes.io/docs/concepts/cluster-administration/addons/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl get nodes <span class="comment">#获取所有节点</span></span></span><br></pre></td></tr></table></figure>

<p>目前Master状态为notready。等待网络加入完成即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">journalctl -u kubelet <span class="comment">#查看kubelet日志</span></span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.0.2.15:6443 --token sg47f3.4asffoi6ijb8ljhq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:81fccdd29970cbc1b7dc7f171ac0234d53825bdf9b05428fc9e6767436991bfb </span><br></pre></td></tr></table></figure>

<h3 id="7）安装POD网络插件（CNI）"><a href="#7）安装POD网络插件（CNI）" class="headerlink" title="7）安装POD网络插件（CNI）"></a>7）安装POD网络插件（CNI）</h3><p>在master节点上执行按照POD网络插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl apply -f \</span><br><span class="line">https://raw.githubusercontent.com/coreos/flanne/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>

<p>以上地址可能被墙，可以直接获取本地已经下载的flannel.yml运行即可，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl apply -f  kube-flannel.yml    </span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm created</span><br><span class="line">daemonset.apps/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.apps/kube-flannel-ds-s390x created</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>

<p>同时flannel.yml中指定的images访问不到可以去docker hub找一个wget yml地址<br>vi 修改yml 所有amd64的地址修改了即可<br>等待大约3分钟<br>kubectl get pods -n kube-system 查看指定名称空间的pods<br>kubectl get pods -all-namespace 查看所有名称空间的pods</p>
<p>$ ip link set cni0 down 如果网络出现问题，关闭cni0，重启虚拟机继续测试<br>执行watch kubectl get pod -n kube-system -o wide 监控pod进度<br>等待3-10分钟，完全都是running以后继续</p>
<p>查看命名空间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get ns</span><br><span class="line">NAME              STATUS   AGE</span><br><span class="line">default           Active   30m</span><br><span class="line">kube-node-lease   Active   30m</span><br><span class="line">kube-public       Active   30m</span><br><span class="line">kube-system       Active   30m</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get pods --all-namespaces       </span><br><span class="line">NAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-546565776c-9sbmk            0/1     Pending   0          31m</span><br><span class="line">kube-system   coredns-546565776c-t68mr            0/1     Pending   0          31m</span><br><span class="line">kube-system   etcd-k8s-node1                      1/1     Running   0          31m</span><br><span class="line">kube-system   kube-apiserver-k8s-node1            1/1     Running   0          31m</span><br><span class="line">kube-system   kube-controller-manager-k8s-node1   1/1     Running   0          31m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-6xwth         1/1     Running   0          2m50s</span><br><span class="line">kube-system   kube-proxy-sz2vz                    1/1     Running   0          31m</span><br><span class="line">kube-system   kube-scheduler-k8s-node1            1/1     Running   0          31m</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>

<p> 查看master上的节点信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get nodes</span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-node1   Ready    master   34m   v1.17.3   #status为ready才能够执行下面的命令</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>

<p>最后再次执行，并且分别在“k8s-node2”和“k8s-node3”上也执行这里命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join 10.0.2.15:6443 --token sg47f3.4asffoi6ijb8ljhq \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:81fccdd29970cbc1b7dc7f171ac0234d53825bdf9b05428fc9e6767436991bfb </span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 opt]# kubectl get nodes;</span><br><span class="line">NAME        STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-node1   Ready      master   47m   v1.17.3</span><br><span class="line">k8s-node2   NotReady   &lt;none&gt;   75s   v1.17.3</span><br><span class="line">k8s-node3   NotReady   &lt;none&gt;   76s   v1.17.3</span><br><span class="line">[root@k8s-node1 opt]# </span><br></pre></td></tr></table></figure>



<p>监控pod进度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">watch kubectl get pod -n kube-system -o wide</span><br></pre></td></tr></table></figure>

<p>等到所有的status都变为running状态后，再次查看节点信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]#  kubectl get nodes;                         </span><br><span class="line">NAME        STATUS   ROLES    AGE     VERSION</span><br><span class="line">k8s-node1   Ready    master   3h50m   v1.17.3</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;   3h3m    v1.17.3</span><br><span class="line">k8s-node3   Ready    &lt;none&gt;   3h3m    v1.17.3</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>





<h3 id="8）加入kubenetes的Node节点"><a href="#8）加入kubenetes的Node节点" class="headerlink" title="8）加入kubenetes的Node节点"></a>8）加入kubenetes的Node节点</h3><p>在node节点中执行，向集群中添加新的节点，执行在kubeadm init 输出的kubeadm join命令；<br>确保node节点成功：<br>token过期怎么办<br>kubeadm token create –print-join-command</p>
<h3 id="9）入门操作kubernetes集群"><a href="#9）入门操作kubernetes集群" class="headerlink" title="9）入门操作kubernetes集群"></a>9）入门操作kubernetes集群</h3><p>1、在主节点上部署一个tomcat</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8</span><br></pre></td></tr></table></figure>



<p>获取所有的资源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get all</span><br><span class="line">NAME                           READY   STATUS              RESTARTS   AGE</span><br><span class="line">pod/tomcat6-7b84fb5fdc-cfd8g   0/1     ContainerCreating   0          41s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   70m</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   0/1     1            0           41s</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   1         1         0       41s</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>



<p>kubectl get pods -o wide 可以获取到tomcat部署信息，能够看到它被部署到了k8s-node2上了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get all -o wide</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE    IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/tomcat6-7b84fb5fdc-cfd8g   1/1     Running   0          114s   10.244.2.2   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE   SELECTOR</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   71m   &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE    CONTAINERS   IMAGES               SELECTOR</span><br><span class="line">deployment.apps/tomcat6   1/1     1            1           114s   tomcat       tomcat:6.0.53-jre8   app=tomcat6</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE    CONTAINERS   IMAGES               SELECTOR</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   1         1         1       114s   tomcat       tomcat:6.0.53-jre8   app=tomcat6,pod-template-hash=7b84fb5fdc</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>



<p>查看node2节点上，下载了哪些镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 opt]# docker images</span><br><span class="line">REPOSITORY                                                       TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy   v1.17.3             0d40868643c6        2 weeks ago         117MB</span><br><span class="line">registry.cn-hangzhou.aliyuncs.com/google_containers/pause        3.2                 80d28bedfe5d        2 months ago        683kB</span><br><span class="line">quay.io/coreos/flannel                                           v0.11.0-amd64       ff281650a721        15 months ago       52.6MB</span><br><span class="line">tomcat                                                           6.0.53-jre8         49ab0583115a        2 years ago         290MB</span><br><span class="line">[root@k8s-node2 opt]# </span><br></pre></td></tr></table></figure>



<p>查看Node2节点上，正在运行的容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node2 opt]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE                                                            COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">9194cc4f0b7a        tomcat                                                           &quot;catalina.sh run&quot;        2 minutes ago       Up 2 minutes                            k8s_tomcat_tomcat6-7b84fb5fdc-cfd8g_default_0c9ebba2-992d-4c0e-99ef-3c4c3294bc59_0</span><br><span class="line">f44af0c7c345        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2    &quot;/pause&quot;                 3 minutes ago       Up 3 minutes                            k8s_POD_tomcat6-7b84fb5fdc-cfd8g_default_0c9ebba2-992d-4c0e-99ef-3c4c3294bc59_0</span><br><span class="line">ef74c90491e4        ff281650a721                                                     &quot;/opt/bin/flanneld -…&quot;   20 minutes ago      Up 20 minutes                           k8s_kube-flannel_kube-flannel-ds-amd64-5xs5j_kube-system_11a94346-316d-470b-9668-c15ce183abec_0</span><br><span class="line">c8a524e5a193        registry.cn-hangzhou.aliyuncs.com/google_containers/kube-proxy   &quot;/usr/local/bin/kube…&quot;   25 minutes ago      Up 25 minutes                           k8s_kube-proxy_kube-proxy-mvlnk_kube-system_519de79a-e8d8-4b1c-a74e-94634cebabce_0</span><br><span class="line">4590685c519a        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2    &quot;/pause&quot;                 26 minutes ago      Up 26 minutes                           k8s_POD_kube-flannel-ds-amd64-5xs5j_kube-system_11a94346-316d-470b-9668-c15ce183abec_0</span><br><span class="line">54e00af5cde4        registry.cn-hangzhou.aliyuncs.com/google_containers/pause:3.2    &quot;/pause&quot;                 26 minutes ago      Up 26 minutes                           k8s_POD_kube-proxy-mvlnk_kube-system_519de79a-e8d8-4b1c-a74e-94634cebabce_0</span><br><span class="line">[root@k8s-node2 opt]# </span><br></pre></td></tr></table></figure>



<p>在node1上执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get pods</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">tomcat6-7b84fb5fdc-cfd8g   1/1     Running   0          5m35s</span><br><span class="line"></span><br><span class="line">[root@k8s-node1 k8s]# kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                READY   STATUS    RESTARTS   AGE</span><br><span class="line">default       tomcat6-7b84fb5fdc-cfd8g            1/1     Running   0          163m</span><br><span class="line">kube-system   coredns-546565776c-9sbmk            1/1     Running   0          3h52m</span><br><span class="line">kube-system   coredns-546565776c-t68mr            1/1     Running   0          3h52m</span><br><span class="line">kube-system   etcd-k8s-node1                      1/1     Running   0          3h52m</span><br><span class="line">kube-system   kube-apiserver-k8s-node1            1/1     Running   0          3h52m</span><br><span class="line">kube-system   kube-controller-manager-k8s-node1   1/1     Running   0          3h52m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-5xs5j         1/1     Running   0          3h6m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-6xwth         1/1     Running   0          3h24m</span><br><span class="line">kube-system   kube-flannel-ds-amd64-fvnvx         1/1     Running   0          3h6m</span><br><span class="line">kube-system   kube-proxy-7tkvl                    1/1     Running   0          3h6m</span><br><span class="line">kube-system   kube-proxy-mvlnk                    1/1     Running   0          3h6m</span><br><span class="line">kube-system   kube-proxy-sz2vz                    1/1     Running   0          3h52m</span><br><span class="line">kube-system   kube-scheduler-k8s-node1            1/1     Running   0          3h52m</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>



<p>从前面看到tomcat部署在Node2上，现在模拟因为各种原因宕机的情况，将node2关闭电源，观察情况。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get nodes</span><br><span class="line">NAME        STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8s-node1   Ready      master   4h4m    v1.17.3</span><br><span class="line">k8s-node2   NotReady   &lt;none&gt;   3h18m   v1.17.3</span><br><span class="line">k8s-node3   Ready      &lt;none&gt;   3h18m   v1.17.3</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get pods -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE    IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">tomcat6-7b84fb5fdc-cfd8g   1/1     Running   0          177m   10.244.2.2   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>



<p><img src="/post/IDE/image-20200504104925236.png" alt="image-20200504104925236"></p>
<p>2、暴露nginx访问</p>
<p>在master上执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment tomcat6 --port=80 --target-port=8080 --type=NodePort </span><br></pre></td></tr></table></figure>

<p>pod的80映射容器的8080；server会带来pod的80</p>
<p>查看服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get svc</span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        12h</span><br><span class="line">tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   49s</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get svc -o wide</span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE     SELECTOR</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        12h     &lt;none&gt;</span><br><span class="line">tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   3m30s   app=tomcat6</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>

<p> <a href="http://192.168.56.100:30526/">http://192.168.56.100:30526/</a> </p>
<p><img src="/post/IDE/image-20200504105723874.png" alt="image-20200504105723874"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get all</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/tomcat6-7b84fb5fdc-qt5jm   1/1     Running   0          13m</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        12h</span><br><span class="line">service/tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   9m50s</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   1/1     1            1           11h</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   1         1         1       11h</span><br><span class="line">[root@k8s-node1 ~]#</span><br></pre></td></tr></table></figure>



<p>3、动态扩容测试</p>
<p>kubectl get deployment</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get deployment</span><br><span class="line">NAME      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">tomcat6   2/2     2            2           11h</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>


<p>应用升级： kubectl set image (–help查看帮助)<br>扩容：kubectl scale –replicas&#x3D;3 deployment tomcat6</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl scale --replicas=3 deployment tomcat6</span><br><span class="line">deployment.apps/tomcat6 scaled</span><br><span class="line">[root@k8s-node1 ~]# </span><br><span class="line"></span><br><span class="line">[root@k8s-node1 ~]# kubectl get pods -o wide</span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE   IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">tomcat6-7b84fb5fdc-hdgmc   1/1     Running   0          61s   10.244.2.5   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat6-7b84fb5fdc-qt5jm   1/1     Running   0          19m   10.244.1.2   k8s-node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat6-7b84fb5fdc-vlrh6   1/1     Running   0          61s   10.244.2.4   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8s-node1 ~]# kubectl get svc -o wide    </span><br><span class="line">NAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE   SELECTOR</span><br><span class="line">kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        13h   &lt;none&gt;</span><br><span class="line">tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   16m   app=tomcat6</span><br><span class="line">[root@k8s-node1 ~]#</span><br></pre></td></tr></table></figure>





<p>扩容了多份，所有无论访问哪个node的指定端口，都可以访问到tomcat6</p>
<p> <a href="http://192.168.56.101:30526/">http://192.168.56.101:30526/</a> </p>
<p><img src="/post/IDE/image-20200504111008668.png" alt="image-20200504111008668"></p>
<p> <a href="http://192.168.56.102:30526/">http://192.168.56.102:30526/</a> </p>
<p><img src="/post/IDE/image-20200504111028496.png" alt="image-20200504111028496"></p>
<p>缩容：kubectl scale –replicas&#x3D;2 deployment tomcat6</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]#  kubectl scale --replicas=2 deployment tomcat6</span><br><span class="line">deployment.apps/tomcat6 scaled</span><br><span class="line">[root@k8s-node1 ~]# kubectl get pods -o wide                       </span><br><span class="line">NAME                       READY   STATUS        RESTARTS   AGE     IP           NODE        NOMINATED NODE   READINESS GATES</span><br><span class="line">tomcat6-7b84fb5fdc-hdgmc   0/1     Terminating   0          4m47s   &lt;none&gt;       k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat6-7b84fb5fdc-qt5jm   1/1     Running       0          22m     10.244.1.2   k8s-node3   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">tomcat6-7b84fb5fdc-vlrh6   1/1     Running       0          4m47s   10.244.2.4   k8s-node2   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>





<p>4、以上操作的yaml获取<br>参照k8s细节</p>
<p>5、删除<br>kubectl get all</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看所有资源</span></span><br><span class="line">[root@k8s-node1 ~]# kubectl get all</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/tomcat6-7b84fb5fdc-qt5jm   1/1     Running   0          26m</span><br><span class="line">pod/tomcat6-7b84fb5fdc-vlrh6   1/1     Running   0          8m16s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        13h</span><br><span class="line">service/tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   22m</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   2/2     2            2           11h</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   2         2         2       11h</span><br><span class="line">[root@k8s-node1 ~]#</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除deployment.apps/tomcat6</span> </span><br><span class="line">[root@k8s-node1 ~]# kubectl delete  deployment.apps/tomcat6 </span><br><span class="line">deployment.apps &quot;tomcat6&quot; deleted</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看剩余的资源</span></span><br><span class="line">[root@k8s-node1 ~]# kubectl get all   </span><br><span class="line">NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1      &lt;none&gt;        443/TCP        13h</span><br><span class="line">service/tomcat6      NodePort    10.96.24.191   &lt;none&gt;        80:30526/TCP   30m</span><br><span class="line">[root@k8s-node1 ~]# </span><br><span class="line">[root@k8s-node1 ~]#</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除service/tomcat6</span> </span><br><span class="line">[root@k8s-node1 ~]# kubectl delete service/tomcat6  </span><br><span class="line">service &quot;tomcat6&quot; deleted</span><br><span class="line">[root@k8s-node1 ~]# kubectl get all</span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   13h</span><br><span class="line">[root@k8s-node1 ~]#</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>kubectl delete deploye&#x2F;nginx<br>kubectl delete service&#x2F;nginx-service</p>
<h2 id="3、K8s细节"><a href="#3、K8s细节" class="headerlink" title="3、K8s细节"></a>3、K8s细节</h2><h3 id="1、kubectl文档"><a href="#1、kubectl文档" class="headerlink" title="1、kubectl文档"></a>1、kubectl文档</h3><p>​    <a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/">https://kubernetes.io/zh/docs/reference/kubectl/overview/</a></p>
<h3 id="2、资源类型"><a href="#2、资源类型" class="headerlink" title="2、资源类型"></a>2、资源类型</h3><p>   <a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/#%e8%b5%84%e6%ba%90%e7%b1%bb%e5%9e%8b">https://kubernetes.io/zh/docs/reference/kubectl/overview/#%e8%b5%84%e6%ba%90%e7%b1%bb%e5%9e%8b</a></p>
<h3 id="3、格式化输出"><a href="#3、格式化输出" class="headerlink" title="3、格式化输出"></a>3、格式化输出</h3><p> <a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/">https://kubernetes.io/zh/docs/reference/kubectl/overview/</a> </p>
<blockquote>
<p>所有 <code>kubectl</code> 命令的默认输出格式都是人类可读的纯文本格式。要以特定格式向终端窗口输出详细信息，可以将 <code>-o</code> 或 <code>--output</code> 参数添加到受支持的 <code>kubectl</code> 命令中。</p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">kubectl [<span class="built_in">command</span>] [TYPE] [NAME] -o=&lt;output_format&gt;</span></span><br></pre></td></tr></table></figure>

<p>根据 <code>kubectl</code> 操作，支持以下输出格式：</p>
<table>
<thead>
<tr>
<th align="left">Output format</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><code>-o custom-columns=</code></td>
<td align="left">使用逗号分隔的<a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/#custom-columns">自定义列</a>列表打印表。</td>
</tr>
<tr>
<td align="left"><code>-o custom-columns-file=</code></td>
<td align="left">使用 &#96;&#96; 文件中的<a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/#custom-columns">自定义列</a>模板打印表。</td>
</tr>
<tr>
<td align="left"><code>-o json</code></td>
<td align="left">输出 JSON 格式的 API 对象</td>
</tr>
<tr>
<td align="left">&#96;-o jsonpath&#x3D;</td>
<td align="left">打印 <a href="https://kubernetes.io/docs/reference/kubectl/jsonpath/">jsonpath</a> 表达式定义的字段</td>
</tr>
<tr>
<td align="left"><code>-o jsonpath-file=</code></td>
<td align="left">打印 &#96;&#96; 文件中 <a href="https://kubernetes.io/docs/reference/kubectl/jsonpath/">jsonpath</a> 表达式定义的字段。</td>
</tr>
<tr>
<td align="left"><code>-o name</code></td>
<td align="left">仅打印资源名称而不打印任何其他内容。</td>
</tr>
<tr>
<td align="left"><code>-o wide</code></td>
<td align="left">以纯文本格式输出，包含任何附加信息。对于 pod 包含节点名。</td>
</tr>
<tr>
<td align="left"><code>-o yaml</code></td>
<td align="left">输出 YAML 格式的 API 对象。</td>
</tr>
</tbody></table>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>在此示例中，以下命令将单个 pod 的详细信息输出为 YAML 格式的对象：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">kubectl get pod web-pod-13je7 -o yaml</span></span><br></pre></td></tr></table></figure>

<p>请记住：有关每个命令支持哪种输出格式的详细信息，请参阅 <a href="https://kubernetes.io/docs/user-guide/kubectl/">kubectl</a> 参考文档。</p>
</blockquote>
<p>–dry-run：</p>
<blockquote>
<p>–dry-run&#x3D;’none’: Must be “none”, “server”, or “client”. If client strategy, only print the object that would be</p>
<p>sent, without sending it. If server strategy, submit server-side request without persisting the resource.</p>
<p>值必须为none，server或client。如果是客户端策略，则只打印该发送对象，但不发送它。如果服务器策略，提交服务器端请求而不持久化资源。</p>
<p>也就是说，通过–dry-run选项，并不会真正的执行这条命令。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@k8s-node1</span> <span class="string">~</span>]<span class="comment"># kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8 --dry-run -o yaml</span></span><br><span class="line"><span class="string">W0504</span> <span class="number">03</span><span class="string">:39:08.389369</span>    <span class="number">8107 </span><span class="string">helpers.go:535]</span> <span class="string">--dry-run</span> <span class="string">is</span> <span class="string">deprecated</span> <span class="string">and</span> <span class="string">can</span> <span class="string">be</span> <span class="string">replaced</span> <span class="string">with</span> <span class="string">--dry-run=client.</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">strategy:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:6.0.53-jre8</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">        <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line"><span class="attr">status:</span> &#123;&#125;</span><br><span class="line">[<span class="string">root@k8s-node1</span> <span class="string">~</span>]<span class="comment"># </span></span><br></pre></td></tr></table></figure>

<p>实际上我们也可以将这个yaml输出到文件，然后使用kubectl apply -f来应用它</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出到tomcat6.yaml</span> </span><br><span class="line">[root@k8s-node1 ~]# kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8 --dry-run -o yaml &gt;tomcat6.yaml</span><br><span class="line">W0504 03:46:18.180366   11151 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改副本数为3</span></span><br><span class="line">[root@k8s-node1 ~]# cat tomcat6.yaml </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  creationTimestamp: null</span><br><span class="line">  labels:</span><br><span class="line">    app: tomcat6</span><br><span class="line">  name: tomcat6</span><br><span class="line">spec:</span><br><span class="line">  replicas: 3     #修改副本数为3</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: tomcat6</span><br><span class="line">  strategy: &#123;&#125;</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      creationTimestamp: null</span><br><span class="line">      labels:</span><br><span class="line">        app: tomcat6</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: tomcat:6.0.53-jre8</span><br><span class="line">        name: tomcat</span><br><span class="line">        resources: &#123;&#125;</span><br><span class="line">status: &#123;&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">应用tomcat6.yaml</span> </span><br><span class="line">[root@k8s-node1 ~]# kubectl apply -f tomcat6.yaml </span><br><span class="line">deployment.apps/tomcat6 created</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>

<p>查看pods：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get pods  </span><br><span class="line">NAME                       READY   STATUS    RESTARTS   AGE</span><br><span class="line">tomcat6-7b84fb5fdc-5jh6t   1/1     Running   0          8s</span><br><span class="line">tomcat6-7b84fb5fdc-8lhwv   1/1     Running   0          8s</span><br><span class="line">tomcat6-7b84fb5fdc-j4qmh   1/1     Running   0          8s</span><br><span class="line">[root@k8s-node1 ~]#</span><br></pre></td></tr></table></figure>



<p>查看某个pod的具体信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get pods tomcat6-7b84fb5fdc-5jh6t  -o yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">&quot;2020-05-04T03:50:47Z&quot;</span></span><br><span class="line">  <span class="attr">generateName:</span> <span class="string">tomcat6-7b84fb5fdc-</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">    <span class="attr">pod-template-hash:</span> <span class="string">7b84fb5fdc</span></span><br><span class="line">  <span class="attr">managedFields:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">fieldsType:</span> <span class="string">FieldsV1</span></span><br><span class="line">    <span class="attr">fieldsV1:</span></span><br><span class="line">      <span class="attr">f:metadata:</span></span><br><span class="line">        <span class="attr">f:generateName:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:labels:</span></span><br><span class="line">          <span class="string">.:</span> &#123;&#125;</span><br><span class="line">          <span class="attr">f:app:</span> &#123;&#125;</span><br><span class="line">          <span class="attr">f:pod-template-hash:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:ownerReferences:</span></span><br><span class="line">          <span class="string">.:</span> &#123;&#125;</span><br><span class="line">          <span class="string">k:&#123;&quot;uid&quot;:&quot;292bfe3b-dd63-442e-95ce-c796ab5bdcc1&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:apiVersion:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:blockOwnerDeletion:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:controller:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:kind:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:name:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:uid:</span> &#123;&#125;</span><br><span class="line">      <span class="attr">f:spec:</span></span><br><span class="line">        <span class="attr">f:containers:</span></span><br><span class="line">          <span class="string">k:&#123;&quot;name&quot;:&quot;tomcat&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:image:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:imagePullPolicy:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:name:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:resources:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:terminationMessagePath:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:terminationMessagePolicy:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:dnsPolicy:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:enableServiceLinks:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:restartPolicy:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:schedulerName:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:securityContext:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:terminationGracePeriodSeconds:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">manager:</span> <span class="string">kube-controller-manager</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">Update</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">&quot;2020-05-04T03:50:47Z&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">    <span class="attr">fieldsType:</span> <span class="string">FieldsV1</span></span><br><span class="line">    <span class="attr">fieldsV1:</span></span><br><span class="line">      <span class="attr">f:status:</span></span><br><span class="line">        <span class="attr">f:conditions:</span></span><br><span class="line">          <span class="string">k:&#123;&quot;type&quot;:&quot;ContainersReady&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastProbeTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastTransitionTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:status:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:type:</span> &#123;&#125;</span><br><span class="line">          <span class="string">k:&#123;&quot;type&quot;:&quot;Initialized&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastProbeTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastTransitionTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:status:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:type:</span> &#123;&#125;</span><br><span class="line">          <span class="string">k:&#123;&quot;type&quot;:&quot;Ready&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastProbeTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:lastTransitionTime:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:status:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:type:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:containerStatuses:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:hostIP:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:phase:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:podIP:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:podIPs:</span></span><br><span class="line">          <span class="string">.:</span> &#123;&#125;</span><br><span class="line">          <span class="string">k:&#123;&quot;ip&quot;:&quot;10.244.2.7&quot;&#125;:</span></span><br><span class="line">            <span class="string">.:</span> &#123;&#125;</span><br><span class="line">            <span class="attr">f:ip:</span> &#123;&#125;</span><br><span class="line">        <span class="attr">f:startTime:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">manager:</span> <span class="string">kubelet</span></span><br><span class="line">    <span class="attr">operation:</span> <span class="string">Update</span></span><br><span class="line">    <span class="attr">time:</span> <span class="string">&quot;2020-05-04T03:50:49Z&quot;</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6-7b84fb5fdc-5jh6t</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">ownerReferences:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line">    <span class="attr">blockOwnerDeletion:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">controller:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">kind:</span> <span class="string">ReplicaSet</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat6-7b84fb5fdc</span></span><br><span class="line">    <span class="attr">uid:</span> <span class="string">292bfe3b-dd63-442e-95ce-c796ab5bdcc1</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;46229&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/pods/tomcat6-7b84fb5fdc-5jh6t</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">2f661212-3b03-47e4-bcb8-79782d5c7578</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:6.0.53-jre8</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">resources:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">    <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/run/secrets/kubernetes.io/serviceaccount</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">default-token-bxqtw</span></span><br><span class="line">      <span class="attr">readOnly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">  <span class="attr">enableServiceLinks:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">nodeName:</span> <span class="string">k8s-node2</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">  <span class="attr">securityContext:</span> &#123;&#125;</span><br><span class="line">  <span class="attr">serviceAccount:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">serviceAccountName:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">tolerations:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoExecute</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node.kubernetes.io/not-ready</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">    <span class="attr">tolerationSeconds:</span> <span class="number">300</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoExecute</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node.kubernetes.io/unreachable</span></span><br><span class="line">    <span class="attr">operator:</span> <span class="string">Exists</span></span><br><span class="line">    <span class="attr">tolerationSeconds:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">default-token-bxqtw</span></span><br><span class="line">    <span class="attr">secret:</span></span><br><span class="line">      <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">default-token-bxqtw</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">conditions:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2020-05-04T03:50:47Z&quot;</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Initialized</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2020-05-04T03:50:49Z&quot;</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Ready</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2020-05-04T03:50:49Z&quot;</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ContainersReady</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">lastProbeTime:</span> <span class="literal">null</span></span><br><span class="line">    <span class="attr">lastTransitionTime:</span> <span class="string">&quot;2020-05-04T03:50:47Z&quot;</span></span><br><span class="line">    <span class="attr">status:</span> <span class="string">&quot;True&quot;</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">PodScheduled</span></span><br><span class="line">  <span class="attr">containerStatuses:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">containerID:</span> <span class="string">docker://18eb0798384ea44ff68712cda9be94b6fb96265206c554a15cee28c288879304</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tomcat:6.0.53-jre8</span></span><br><span class="line">    <span class="attr">imageID:</span> <span class="string">docker-pullable://tomcat@sha256:8c643303012290f89c6f6852fa133b7c36ea6fbb8eb8b8c9588a432beb24dc5d</span></span><br><span class="line">    <span class="attr">lastState:</span> &#123;&#125;</span><br><span class="line">    <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">    <span class="attr">ready:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">restartCount:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">started:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">state:</span></span><br><span class="line">      <span class="attr">running:</span></span><br><span class="line">        <span class="attr">startedAt:</span> <span class="string">&quot;2020-05-04T03:50:49Z&quot;</span></span><br><span class="line">  <span class="attr">hostIP:</span> <span class="number">10.0</span><span class="number">.2</span><span class="number">.4</span></span><br><span class="line">  <span class="attr">phase:</span> <span class="string">Running</span></span><br><span class="line">  <span class="attr">podIP:</span> <span class="number">10.244</span><span class="number">.2</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">podIPs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">ip:</span> <span class="number">10.244</span><span class="number">.2</span><span class="number">.7</span></span><br><span class="line">  <span class="attr">qosClass:</span> <span class="string">BestEffort</span></span><br><span class="line">  <span class="attr">startTime:</span> <span class="string">&quot;2020-05-04T03:50:47Z&quot;</span></span><br></pre></td></tr></table></figure>







<h3 id="命令参考"><a href="#命令参考" class="headerlink" title="命令参考"></a>命令参考</h3><p><img src="/post/IDE/image-20200504115823058.png" alt="image-20200504115823058"></p>
<h3 id="service的意义"><a href="#service的意义" class="headerlink" title="service的意义"></a>service的意义</h3><p><img src="/post/IDE/image-20200504120856830.png" alt="image-20200504120856830"></p>
<p>前面我们通过命令行的方式，部署和暴露了tomcat，实际上也可以通过yaml的方式来完成这些操作。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这些操作实际上是为了获取Deployment的yaml模板</span></span><br><span class="line">[root@k8s-node1 ~]#  kubectl create deployment tomcat6 --image=tomcat:6.0.53-jre8 --dry-run -o yaml &gt;tomcat6-deployment.yaml</span><br><span class="line">W0504 04:13:28.265432   24263 helpers.go:535] --dry-run is deprecated and can be replaced with --dry-run=client.</span><br><span class="line">[root@k8s-node1 ~]# ls tomcat6-deployment.yaml</span><br><span class="line">tomcat6-deployment.yaml</span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>

<p>修改“tomcat6-deployment.yaml”内容如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span> </span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:6.0.53-jre8</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">部署</span></span><br><span class="line">[root@k8s-node1 ~]# kubectl apply -f tomcat6-deployment.yaml</span><br><span class="line">deployment.apps/tomcat6 configured</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看资源</span></span><br><span class="line">[root@k8s-node1 ~]# kubectl get all</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/tomcat6-7b84fb5fdc-5jh6t   1/1     Running   0          27m</span><br><span class="line">pod/tomcat6-7b84fb5fdc-8lhwv   1/1     Running   0          27m</span><br><span class="line">pod/tomcat6-7b84fb5fdc-j4qmh   1/1     Running   0          27m</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1    &lt;none&gt;        443/TCP   14h</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   3/3     3            3           27m</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   3         3         3       27m</span><br><span class="line">[root@k8s-node1 ~]#</span><br></pre></td></tr></table></figure>





<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl expose deployment tomcat6 --port=80 --target-port=8080 --type=NodePort  --dry-run -o yaml</span><br></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> &#123;&#125;</span><br></pre></td></tr></table></figure>



<p>将这段输出和“tomcat6-deployment.yaml”进行拼接，表示部署完毕并进行暴露服务：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span> </span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:6.0.53-jre8</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat6</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">    <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">tomcat6</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br></pre></td></tr></table></figure>



<p>部署并暴露服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl apply -f tomcat6-deployment.yaml</span><br><span class="line">deployment.apps/tomcat6 created</span><br><span class="line">service/tomcat6 created</span><br></pre></td></tr></table></figure>

<p>查看服务和部署信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# kubectl get all</span><br><span class="line">NAME                           READY   STATUS    RESTARTS   AGE</span><br><span class="line">pod/tomcat6-7b84fb5fdc-dsqmb   1/1     Running   0          4s</span><br><span class="line">pod/tomcat6-7b84fb5fdc-gbmxc   1/1     Running   0          5s</span><br><span class="line">pod/tomcat6-7b84fb5fdc-kjlc6   1/1     Running   0          4s</span><br><span class="line"></span><br><span class="line">NAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE</span><br><span class="line">service/kubernetes   ClusterIP   10.96.0.1       &lt;none&gt;        443/TCP        14h</span><br><span class="line">service/tomcat6      NodePort    10.96.147.210   &lt;none&gt;        80:30172/TCP   4s</span><br><span class="line"></span><br><span class="line">NAME                      READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">deployment.apps/tomcat6   3/3     3            3           5s</span><br><span class="line"></span><br><span class="line">NAME                                 DESIRED   CURRENT   READY   AGE</span><br><span class="line">replicaset.apps/tomcat6-7b84fb5fdc   3         3         3       5s</span><br><span class="line">[root@k8s-node1 ~]#</span><br></pre></td></tr></table></figure>

<p>访问node1，node1和node3的30172端口：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 ~]# curl -I http://192.168.56.&#123;100,101,102&#125;:30172/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">ETag: W/&quot;7454-1491118183000&quot;</span><br><span class="line">Last-Modified: Sun, 02 Apr 2017 07:29:43 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 7454</span><br><span class="line">Date: Mon, 04 May 2020 04:35:35 GMT</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">ETag: W/&quot;7454-1491118183000&quot;</span><br><span class="line">Last-Modified: Sun, 02 Apr 2017 07:29:43 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 7454</span><br><span class="line">Date: Mon, 04 May 2020 04:35:35 GMT</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Apache-Coyote/1.1</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">ETag: W/&quot;7454-1491118183000&quot;</span><br><span class="line">Last-Modified: Sun, 02 Apr 2017 07:29:43 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 7454</span><br><span class="line">Date: Mon, 04 May 2020 04:35:35 GMT</span><br><span class="line"></span><br><span class="line">[root@k8s-node1 ~]# </span><br></pre></td></tr></table></figure>



<h3 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h3><p>通过Ingress发现pod进行关联。基于域名访问<br>通过Ingress controller实现POD负载均衡<br>支持TCP&#x2F;UDP 4层负载均衡和HTTP 7层负载均衡</p>
<p><img src="/post/IDE/image-20200504123948771.png" alt="image-20200504123948771"></p>
<p>步骤：<br>（1）部署Ingress controller</p>
<p>执行“k8s&#x2F;ingress-controller.yaml”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl apply -f ingress-controller.yaml </span><br><span class="line">namespace/ingress-nginx created</span><br><span class="line">configmap/nginx-configuration created</span><br><span class="line">configmap/tcp-services created</span><br><span class="line">configmap/udp-services created</span><br><span class="line">serviceaccount/nginx-ingress-serviceaccount created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/nginx-ingress-clusterrole created</span><br><span class="line">role.rbac.authorization.k8s.io/nginx-ingress-role created</span><br><span class="line">rolebinding.rbac.authorization.k8s.io/nginx-ingress-role-nisa-binding created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/nginx-ingress-clusterrole-nisa-binding created</span><br><span class="line">daemonset.apps/nginx-ingress-controller created</span><br><span class="line">service/ingress-nginx created</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>



<p>查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# kubectl get pods --all-namespaces</span><br><span class="line">NAMESPACE       NAME                                READY   STATUS              RESTARTS   AGE</span><br><span class="line">default         tomcat6-7b84fb5fdc-dsqmb            1/1     Running             0          16m</span><br><span class="line">default         tomcat6-7b84fb5fdc-gbmxc            1/1     Running             0          16m</span><br><span class="line">default         tomcat6-7b84fb5fdc-kjlc6            1/1     Running             0          16m</span><br><span class="line">ingress-nginx   nginx-ingress-controller-9q6cs      0/1     ContainerCreating   0          40s</span><br><span class="line">ingress-nginx   nginx-ingress-controller-qx572      0/1     ContainerCreating   0          40s</span><br><span class="line">kube-system     coredns-546565776c-9sbmk            1/1     Running             1          14h</span><br><span class="line">kube-system     coredns-546565776c-t68mr            1/1     Running             1          14h</span><br><span class="line">kube-system     etcd-k8s-node1                      1/1     Running             1          14h</span><br><span class="line">kube-system     kube-apiserver-k8s-node1            1/1     Running             1          14h</span><br><span class="line">kube-system     kube-controller-manager-k8s-node1   1/1     Running             1          14h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-5xs5j         1/1     Running             2          13h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-6xwth         1/1     Running             2          14h</span><br><span class="line">kube-system     kube-flannel-ds-amd64-fvnvx         1/1     Running             1          13h</span><br><span class="line">kube-system     kube-proxy-7tkvl                    1/1     Running             1          13h</span><br><span class="line">kube-system     kube-proxy-mvlnk                    1/1     Running             2          13h</span><br><span class="line">kube-system     kube-proxy-sz2vz                    1/1     Running             1          14h</span><br><span class="line">kube-system     kube-scheduler-k8s-node1            1/1     Running             1          14h</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>

<p>这里master节点负责调度，具体执行交给node2和node3来完成，能够看到它们正在下载镜像</p>
<p><img src="/post/IDE/image-20200504124608258.png" alt="image-20200504124608258"></p>
<p>（2）创建Ingress规则</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tomcat6.kubenetes.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">       <span class="attr">paths:</span> </span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span> </span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">tomcat6</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">80</span></span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# touch ingress-tomcat6.yaml</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将上面的规则，添加到ingress-tomcat6.yaml文件中</span></span><br><span class="line">[root@k8s-node1 k8s]# vi  ingress-tomcat6.yaml  </span><br><span class="line"> </span><br><span class="line">[root@k8s-node1 k8s]# kubectl apply -f ingress-tomcat6.yaml </span><br><span class="line">ingress.extensions/web created</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>

<p>修改本机的hosts文件，添加如下的域名转换规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.56.102 tomcat6.kubenetes.com</span><br></pre></td></tr></table></figure>



<p>测试: <a href="http://tomcat6.kubenetes.com/">http://tomcat6.kubenetes.com/</a> </p>
<p><img src="/post/IDE/image-20200504131325267.png" alt="image-20200504131325267"></p>
<p>并且集群中即便有一个节点不可用，也不影响整体的运行。</p>
<h2 id="安装kubernetes可视化界面——DashBoard"><a href="#安装kubernetes可视化界面——DashBoard" class="headerlink" title="安装kubernetes可视化界面——DashBoard"></a>安装kubernetes可视化界面——DashBoard</h2><p>1、部署DashBoard</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">kubectl appy -f  kubernetes-dashboard.yaml</span></span><br></pre></td></tr></table></figure>

<p> 文件在“k8s”源码目录提供</p>
<p>2、暴露DashBoard为公共访问</p>
<p>默认DashBoard只能集群内部访问，修改Service为NodePort类型，暴露到外部</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">443</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8443</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">3001</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">kubernetes-dashboard</span></span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://nodeip:30001/">http://NodeIP:30001</a></p>
<p>3、创建授权账号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create serviceaccount dashboar-admin -n kube-sysem</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl create clusterrolebinding dashboar-admin --clusterrole=cluter-admin --serviceaccount=kube-system:dashboard-admin</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl describe secrets -n kube-system $( kubectl -n kube-system get secret |awk &#x27;/dashboard-admin/&#123;print $1&#125;&#x27; )</span><br></pre></td></tr></table></figure>

<p>使用输出的token登录dashboard</p>
<p><img src="/post/IDE/image-20200504153630775.png" alt="image-20200504153630775"></p>
<h2 id="kubesphere"><a href="#kubesphere" class="headerlink" title="kubesphere"></a>kubesphere</h2><p>默认的dashboard没啥用，我们用kubesphere可以打通全部的devops链路，kubesphere集成了很多套件，集群要求比较高<br><a href="https://kubesphere.io/">https://kubesphere.io</a></p>
<p>kuboard也很不错，集群要求不高<br><a href="https://kuboard.cn/support/">https://kuboard.cn/support/</a></p>
<h3 id="1、简洁"><a href="#1、简洁" class="headerlink" title="1、简洁"></a>1、简洁</h3><p>kubesphere是一款面向云原声设计的开源项目，在目前主流容器调度平台kubernets智商构建的分布式多用户容器管理平台，提供简单易用的操作界面以及向导式操作方式，在降低用户使用容器调度平台学习成本的同时，极大降低开发、测试、运维的日常工作的复杂度。</p>
<h3 id="2、安装前提提交"><a href="#2、安装前提提交" class="headerlink" title="2、安装前提提交"></a>2、安装前提提交</h3><h4 id="1、安装helm（master节点执行）"><a href="#1、安装helm（master节点执行）" class="headerlink" title="1、安装helm（master节点执行）"></a>1、安装helm（master节点执行）</h4><p>helm是kubernetes的包管理器。包管理器类似于在Ubuntu中使用的apt，centos中的yum或者python中的pip一样，能够快速查找，下载和安装软件包。Helm有客户端组件helm和服务端组件Tiller组成，能够将一组K8S资源打包统一管理，是查找、共享和使用为Kubernetes构建的软件的最佳方式。</p>
<p>1）安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -L https://git.io/get_helm.sh|bash</span><br></pre></td></tr></table></figure>

<p>由于被墙的原因，使用我们给定的get_helm.sh。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# ll</span><br><span class="line">total 68</span><br><span class="line">-rw-r--r-- 1 root root  7149 Feb 27 01:58 get_helm.sh</span><br><span class="line">-rw-r--r-- 1 root root  6310 Feb 28 05:16 ingress-controller.yaml</span><br><span class="line">-rw-r--r-- 1 root root   209 Feb 28 13:18 ingress-demo.yml</span><br><span class="line">-rw-r--r-- 1 root root   236 May  4 05:09 ingress-tomcat6.yaml</span><br><span class="line">-rwxr--r-- 1 root root 15016 Feb 26 15:05 kube-flannel.yml</span><br><span class="line">-rw-r--r-- 1 root root  4737 Feb 26 15:38 kubernetes-dashboard.yaml</span><br><span class="line">-rw-r--r-- 1 root root  3841 Feb 27 01:09 kubesphere-complete-setup.yaml</span><br><span class="line">-rw-r--r-- 1 root root   392 Feb 28 11:33 master_images.sh</span><br><span class="line">-rw-r--r-- 1 root root   283 Feb 28 11:34 node_images.sh</span><br><span class="line">-rw-r--r-- 1 root root  1053 Feb 28 03:53 product.yaml</span><br><span class="line">-rw-r--r-- 1 root root   931 May  3 10:08 Vagrantfile</span><br><span class="line">[root@k8s-node1 k8s]# sh get_helm.sh </span><br><span class="line">Downloading https://get.helm.sh/helm-v2.16.6-linux-amd64.tar.gz</span><br><span class="line">Preparing to install helm and tiller into /usr/local/bin</span><br><span class="line">helm installed into /usr/local/bin/helm</span><br><span class="line">tiller installed into /usr/local/bin/tiller</span><br><span class="line">Run &#x27;helm init&#x27; to configure helm.</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>

<p>2）验证版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm version</span><br></pre></td></tr></table></figure>

<p>3）创建权限（master执行）</p>
<p>创建helm-rbac.yaml，写入如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tiller</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">kubernetes-dashboard</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">kube-system</span></span><br></pre></td></tr></table></figure>

<p>应用配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]#  kubectl apply -f helm-rbac.yaml</span><br><span class="line">serviceaccount/tiller created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/tiller created</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>



<h4 id="2、安装Tilller（Master执行）"><a href="#2、安装Tilller（Master执行）" class="headerlink" title="2、安装Tilller（Master执行）"></a>2、安装Tilller（Master执行）</h4><p>1、初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]# helm init --service-account=tiller --tiller-image=sapcc/tiller:v2.16.3 --history-max 300 </span><br><span class="line">Creating /root/.helm </span><br><span class="line">Creating /root/.helm/repository </span><br><span class="line">Creating /root/.helm/repository/cache </span><br><span class="line">Creating /root/.helm/repository/local </span><br><span class="line">Creating /root/.helm/plugins </span><br><span class="line">Creating /root/.helm/starters </span><br><span class="line">Creating /root/.helm/cache/archive </span><br><span class="line">Creating /root/.helm/repository/repositories.yaml </span><br><span class="line">Adding stable repo with URL: https://kubernetes-charts.storage.googleapis.com </span><br><span class="line">Adding local repo with URL: http://127.0.0.1:8879/charts </span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">HELM_HOME has been configured at /root/.helm.</span></span><br><span class="line"></span><br><span class="line">Tiller (the Helm server-side component) has been installed into your Kubernetes Cluster.</span><br><span class="line"></span><br><span class="line">Please note: by default, Tiller is deployed with an insecure &#x27;allow unauthenticated users&#x27; policy.</span><br><span class="line">To prevent this, run `helm init` with the --tiller-tls-verify flag.</span><br><span class="line">For more information on securing your installation see: https://v2.helm.sh/docs/securing_installation/</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>

<p>–tiller-image 指定镜像，否则会被墙，等待节点上部署的tiller完成即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@k8s-node1 k8s]#  kubectl get pods -n kube-system</span><br><span class="line">NAME                                   READY   STATUS             RESTARTS   AGE</span><br><span class="line">coredns-546565776c-9sbmk               1/1     Running            3          23h</span><br><span class="line">coredns-546565776c-t68mr               1/1     Running            3          23h</span><br><span class="line">etcd-k8s-node1                         1/1     Running            3          23h</span><br><span class="line">kube-apiserver-k8s-node1               1/1     Running            3          23h</span><br><span class="line">kube-controller-manager-k8s-node1      1/1     Running            3          23h</span><br><span class="line">kube-flannel-ds-amd64-5xs5j            1/1     Running            4          22h</span><br><span class="line">kube-flannel-ds-amd64-6xwth            1/1     Running            5          23h</span><br><span class="line">kube-flannel-ds-amd64-fvnvx            1/1     Running            4          22h</span><br><span class="line">kube-proxy-7tkvl                       1/1     Running            3          22h</span><br><span class="line">kube-proxy-mvlnk                       1/1     Running            4          22h</span><br><span class="line">kube-proxy-sz2vz                       1/1     Running            3          23h</span><br><span class="line">kube-scheduler-k8s-node1               1/1     Running            3          23h</span><br><span class="line">kubernetes-dashboard-975499656-jxczv   0/1     ImagePullBackOff   0          7h45m</span><br><span class="line">tiller-deploy-8cc566858-67bxb          1/1     Running            0          31s</span><br><span class="line">[root@k8s-node1 k8s]#</span><br></pre></td></tr></table></figure>



<p>查看集群的所有节点信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kubectl get node -o wide</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[root@k8s-node1 k8s]#  kubectl get node -o wide</span><br><span class="line">NAME        STATUS   ROLES    AGE   VERSION   INTERNAL-IP   EXTERNAL-IP   OS-IMAGE                KERNEL-VERSION               CONTAINER-RUNTIME</span><br><span class="line">k8s-node1   Ready    master   23h   v1.17.3   10.0.2.15     &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.12.2.el7.x86_64   docker://19.3.8</span><br><span class="line">k8s-node2   Ready    &lt;none&gt;   22h   v1.17.3   10.0.2.4      &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.12.2.el7.x86_64   docker://19.3.8</span><br><span class="line">k8s-node3   Ready    &lt;none&gt;   22h   v1.17.3   10.0.2.5      &lt;none&gt;        CentOS Linux 7 (Core)   3.10.0-957.12.2.el7.x86_64   docker://19.3.8</span><br><span class="line">[root@k8s-node1 k8s]# </span><br></pre></td></tr></table></figure>





<p>2、测试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">helm install stable/nginx-ingress --name nginx-ingress</span><br></pre></td></tr></table></figure>





<p>最小化安装 KubeSphere</p>
<p>若集群可用 CPU &gt; 1 Core 且可用内存 &gt; 2 G，可以使用以下命令最小化安装 KubeSphere：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">kubectl</span> <span class="string">apply</span> <span class="string">-f</span> <span class="string">https://raw.githubusercontent.com/kubesphere/ks-installer/master/kubesphere-minimal.yaml</span></span><br></pre></td></tr></table></figure>

<p> <strong>提示：若您的服务器提示无法访问 GitHub，可将</strong> <a href="https://github.com/kubesphere/ks-installer/blob/master/kubesphere-minimal.yaml">kubesphere-minimal.yaml</a> <strong>或</strong> <a href="https://github.com/kubesphere/ks-installer/blob/master/kubesphere-complete-setup.yaml">kubesphere-complete-setup.yaml</a> <strong>文件保存到本地作为本地的静态文件，再参考上述命令进行安装。</strong> </p>
<ol>
<li>查看滚动刷新的安装日志，请耐心等待安装成功。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l app=ks-install -o jsonpath=<span class="string">&#x27;&#123;.items[0].metadata.name&#125;&#x27;</span>) -f</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：安装过程中若遇到问题，也可以通过以上日志命令来排查问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>谷粒商城-高可用篇</tag>
      </tags>
  </entry>
  <entry>
    <title>面经</title>
    <url>/post/%E9%9D%A2%E7%BB%8F.html</url>
    <content><![CDATA[<h1 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h1><h2 id="请求一个网页链接的过程，要求越详细越好。"><a href="#请求一个网页链接的过程，要求越详细越好。" class="headerlink" title="请求一个网页链接的过程，要求越详细越好。"></a>请求一个网页链接的过程，要求越详细越好。</h2><p>以下是请求一个网页链接的详细过程：</p>
<ol>
<li><p>DNS解析：</p>
<ul>
<li>客户端（通常是Web浏览器）获取目标网页的URL（统一资源定位符）。</li>
<li>客户端提取URL中的域名部分，例如<a href="http://www.example.com./">www.example.com。</a></li>
<li>客户端向本地DNS服务器发起域名解析请求，询问目标网页的IP地址。</li>
</ul>
</li>
<li><p>TCP连接建立：</p>
<ul>
<li>客户端通过本地DNS服务器获取目标网页的IP地址。</li>
<li>客户端使用目标网页的IP地址与服务器建立TCP连接。</li>
<li>客户端向服务器发送一个TCP连接请求（称为三次握手），建立可靠的通信连接。</li>
</ul>
</li>
<li><p>发送HTTP请求：</p>
<ul>
<li>客户端向服务器发送一个HTTP请求报文，包括以下内容：<ul>
<li>请求行：包含请求方法（GET、POST等）和请求的资源路径。</li>
<li>请求头：包含附加的请求信息，如浏览器类型、语言偏好等。</li>
<li>请求体（对于POST请求）：包含提交的数据。</li>
</ul>
</li>
<li>客户端将HTTP请求报文发送到服务器端。</li>
</ul>
</li>
<li><p>服务器处理请求：</p>
<ul>
<li>服务器接收到客户端发送的HTTP请求。</li>
<li>服务器解析请求报文，获取请求的资源路径和其他相关信息。</li>
<li>服务器根据请求的资源路径和服务器配置，处理请求并生成相应的响应。</li>
</ul>
</li>
<li><p>服务器发送HTTP响应：</p>
<ul>
<li>服务器生成一个HTTP响应报文，包括以下内容：<ul>
<li>状态行：指示响应状态码（如200表示成功）和响应的文本描述。</li>
<li>响应头：包含附加的响应信息，如内容类型、日期等。</li>
<li>响应体：包含请求的资源或响应的数据。</li>
</ul>
</li>
<li>服务器将HTTP响应报文发送回客户端。</li>
</ul>
</li>
<li><p>客户端接收HTTP响应：</p>
<ul>
<li>客户端接收到服务器发送的HTTP响应。</li>
<li>客户端解析响应报文，提取响应状态码、响应头和响应体等信息。</li>
</ul>
</li>
<li><p>渲染和显示网页：</p>
<ul>
<li>如果响应状态码为200（成功），客户端将根据响应的内容类型（如HTML、CSS、JavaScript等）对响应体进行解析。</li>
<li>客户端渲染并显示网页内容，将HTML解析为可视化的网页，执行JavaScript代码，加载和显示网页中的资源（如图像、样式表等）。</li>
</ul>
</li>
<li><p>关闭TCP连接：</p>
<ul>
<li>客户端和服务器之间的数据传输完成后，客户端和服务器通过TCP连接进行握手，关闭连接。</li>
</ul>
</li>
</ol>
<p>以上是一个典型的网页链接请求的详细过程。每个步骤都是为了确保客户端能够与服务器建立可靠的通信连接，并成功请求和接收网页内容。</p>
<h2 id="Redis-将数据存储在内存中，mysql把数据存在哪里？"><a href="#Redis-将数据存储在内存中，mysql把数据存在哪里？" class="headerlink" title="Redis 将数据存储在内存中，mysql把数据存在哪里？"></a>Redis 将数据存储在内存中，mysql把数据存在哪里？</h2><p>MySQL将数据存储在磁盘上。它使用文件系统来管理数据文件，将数据持久地存储在硬盘上的文件中。MySQL的数据文件通常被称为表空间（tablespace），包括系统表空间和用户表空间。</p>
<p>系统表空间包含了MySQL的系统表和共享表数据。这些表存储了关于数据库和表结构的元数据信息。</p>
<p>用户表空间用于存储用户创建的表和数据。每个数据库都有一个对应的用户表空间，其中包含该数据库中所有表的数据。</p>
<p>在用户表空间中，每个表都有对应的表文件，用于存储表的数据和索引。这些表文件通常以<code>.frm</code>扩展名的文件存储表的定义，以及<code>.ibd</code>扩展名的文件存储表的数据和索引。</p>
<p>MySQL还使用日志文件来记录数据库的修改操作，包括事务日志和重做日志。这些日志文件位于磁盘上，用于保证数据的一致性和持久性。</p>
<p>需要注意的是，MySQL也可以配置为使用内存表（Memory Table），这种表将数据存储在内存中，但是它们的数据不是持久的，会在MySQL重启或关闭时丢失。而Redis则是一种基于内存的键值存储系统，它将数据完全存储在内存中，并通过持久化机制将数据定期写入磁盘以保证数据的持久性。</p>
<h2 id="内存与磁盘的区别"><a href="#内存与磁盘的区别" class="headerlink" title="内存与磁盘的区别"></a>内存与磁盘的区别</h2><p>内存（RAM）和磁盘（硬盘或固态硬盘）是计算机中用于存储数据的两个主要组件，它们在以下几个方面有着明显的区别：</p>
<ol>
<li><p>工作原理：内存是计算机中的临时存储介质，用于存储正在运行的程序和数据。它通过电子电荷在集成电路中的状态变化来存储和访问数据，数据在断电后会被清空。磁盘是永久存储介质，用于长期存储数据。它利用磁性材料上的磁场来存储和读取数据，数据在断电后仍然保留。</p>
</li>
<li><p>速度：内存的读写速度非常快，可以以纳秒级别的速度访问数据。这使得内存非常适合于需要快速访问的数据和程序。磁盘的读写速度相对较慢，以毫秒级别甚至更长的时间访问数据。</p>
</li>
<li><p>容量：内存的容量通常比较有限，以几千兆字节（GB）为单位。磁盘的容量相对较大，可以达到几十到几千或更多的千兆字节（TB）。</p>
</li>
<li><p>成本：内存的成本相对较高，以每千兆字节（GB）为单位计算。磁盘的成本相对较低，以每千兆字节（GB）或每千兆位（GB）为单位计算。</p>
</li>
<li><p>数据持久性：内存是易失性存储，断电后数据会丢失。磁盘是非易失性存储，断电后数据仍然保留。</p>
</li>
</ol>
<p>基于这些区别，内存通常用于临时存储正在运行的程序和数据，以提供快速访问速度。磁盘用于长期存储大量数据和文件，但相对访问速度较慢。计算机系统通常会使用内存作为缓存，将经常访问的数据存储在内存中，以提高整体性能。</p>
<h2 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h2><p>B树（B-tree）是一种自平衡的搜索树数据结构，广泛应用于文件系统、数据库和文件索引等领域。它具有高效的插入、删除和查找操作，同时适应大规模数据集的存储和访问。</p>
<p>B树的特点包括：</p>
<ol>
<li><p>多路搜索树：B树是一种多路搜索树，每个节点可以存储多个键值对。相比于二叉搜索树，B树的节点可以拥有更多的子节点，从而减少树的高度，提高搜索效率。</p>
</li>
<li><p>自平衡：B树通过保持树的平衡性来保证高效的操作。在插入和删除操作后，B树会进行自动的平衡调整，确保树的高度在可接受的范围内，避免数据倾斜和性能下降。</p>
</li>
<li><p>有序存储：B树的节点中的键值对按照特定的顺序进行存储。这使得B树在范围查询和顺序遍历方面表现出良好的性能。</p>
</li>
<li><p>多级索引：B树支持多级索引结构，通过根节点、内部节点和叶节点的层次结构，可以快速定位和访问存储在树中的数据。</p>
</li>
<li><p>磁盘友好：B树的节点大小通常与磁盘页的大小相匹配。这意味着在磁盘上读取或写入一个节点时，可以一次性处理更多的键值对，减少磁盘I&#x2F;O操作次数，提高性能。</p>
</li>
</ol>
<p>总体而言，B树通过自平衡和多路搜索的特性，在处理大规模数据和频繁的插入、删除、查找操作时表现出较好的性能。它是许多常见数据存储系统的核心组件之一，用于高效地管理和访问数据。</p>
<h2 id="http和https区别"><a href="#http和https区别" class="headerlink" title="http和https区别"></a>http和https区别</h2><p>HTTP（Hypertext Transfer Protocol）和HTTPS（Hypertext Transfer Protocol Secure）是用于在网络上传输数据的两种协议。它们之间的主要区别在于安全性和数据传输方式：</p>
<ol>
<li><p>安全性：HTTP是明文传输协议，数据在传输过程中不经过加密处理，容易被恶意攻击者截获和窃听。HTTPS使用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议对通信进行加密，确保数据在传输过程中的机密性和完整性，使得数据更加安全。</p>
</li>
<li><p>加密方式：HTTP不使用加密，数据以纯文本形式传输。HTTPS使用SSL或TLS协议对数据进行加密，使数据在传输过程中变得不可读。</p>
</li>
<li><p>端口号：HTTP默认使用80端口进行通信，而HTTPS默认使用443端口。这样使得网络服务器能够根据端口号来区分处理HTTP请求和HTTPS请求。</p>
</li>
<li><p>证书要求：HTTPS需要通过数字证书来验证服务器的身份。数字证书由可信任的第三方机构（如CA机构）签发，用于证明服务器的身份和确保通信的安全性。而HTTP不需要证书验证。</p>
</li>
<li><p>性能：HTTPS的加密和解密过程需要消耗更多的计算资源，因此比起HTTP会稍微慢一些。然而，随着计算机处理能力的提升，HTTPS的性能差距逐渐缩小。</p>
</li>
</ol>
<p>综上所述，HTTPS相较于HTTP在数据传输过程中提供了更高的安全性和保护用户隐私的能力。因此，对于处理敏感信息和需要保密性的场景，使用HTTPS是更为推荐的选择。</p>
<h2 id="Socket是什么"><a href="#Socket是什么" class="headerlink" title="Socket是什么"></a>Socket是什么</h2><p>Socket（套接字）是计算机网络中用于实现网络通信的编程接口或抽象层。它允许应用程序通过网络发送和接收数据，实现不同设备之间的通信。</p>
<p>Socket提供了一种标准化的方式，使得应用程序能够通过网络进行数据传输。它基于网络协议栈（例如TCP&#x2F;IP协议栈）来实现数据的分割、传输和重组。</p>
<p>通过使用Socket，应用程序可以创建一个网络套接字（socket），并通过该套接字与其他设备建立连接、发送和接收数据。套接字可以在不同设备之间的不同计算机上进行通信，允许客户端和服务器之间的双向数据传输。</p>
<p>在网络编程中，Socket通常使用一组API函数来进行操作，这些函数包括创建套接字、绑定套接字到特定的IP地址和端口、监听连接请求、接受连接、发送和接收数据等。</p>
<p>不同类型的套接字可以支持不同的网络协议和通信模式，例如TCP套接字用于可靠的面向连接的通信，UDP套接字用于无连接的不可靠通信。</p>
<p>总结来说，Socket是一种网络编程接口，允许应用程序通过网络进行数据传输和通信。它提供了一种标准化的方式来实现网络通信，使得应用程序能够在不同设备之间进行数据交换。</p>
<hr>
<ol>
<li>GET和POST区别：</li>
</ol>
<ul>
<li>GET用于获取资源，POST用于提交资源。</li>
<li>GET请求的参数会附加在URL的后面，以查询字符串的形式传递，而POST请求的参数在请求体中传递，不会在URL中显示。</li>
<li>GET请求对数据长度有限制，一般在URL长度上限范围内，而POST请求对数据长度没有限制。</li>
<li>GET请求的数据会被保存在浏览器的历史记录中，而POST请求的数据不会保存。</li>
<li>GET请求会被浏览器主动缓存，POST请求不会被缓存，需要再次确认是否提交。</li>
</ul>
<ol start="2">
<li>HTTP和HTTPS区别：</li>
</ol>
<ul>
<li>HTTP是明文传输协议，数据在传输过程中不经过加密处理，容易被截获和窃听。HTTPS使用SSL&#x2F;TLS协议对通信进行加密，保证数据的机密性和完整性。</li>
<li>HTTP默认使用80端口进行通信，而HTTPS默认使用443端口。</li>
<li>HTTP不需要证书验证，而HTTPS需要通过数字证书验证服务器的身份。</li>
<li>HTTPS的安全性更高，但相对而言会消耗更多的计算资源，性能稍低于HTTP。</li>
</ul>
<ol start="3">
<li>十进制和二进制的转换：</li>
</ol>
<ul>
<li>十进制转二进制：将十进制数不断除以2，直到商为0，然后将每次的余数从下往上依次排列，即为二进制表示。</li>
<li>二进制转十进制：将二进制数从右往左依次乘以2的幂，对应位置上为1的位对应的幂相加，得到的和即为十进制表示。</li>
</ul>
<ol start="4">
<li><p>数字反转：将给定的数从个位开始逐位取出，然后按相反的顺序组合起来。</p>
</li>
<li><p>判断一个数是否为2的幂：一个数如果是2的幂，则其二进制表示中只有一个1，其他位都是0。可以使用位运算进行判断，如果数n满足 n &amp; (n-1) &#x3D;&#x3D;<br>0，则它是2的幂。</p>
</li>
<li><p>MySQL调优：</p>
</li>
</ol>
<ul>
<li>使用索引来加速查询。</li>
<li>优化SQL语句，避免全表扫描和不必要的连接。</li>
<li>适当调整数据库的参数设置，如缓冲区大小、连接数等。</li>
<li>避免使用过多的触发器和存储过程，以减少数据库的负载。</li>
<li>合理设计数据库表结构，避免冗余和重复数据。</li>
<li>定期进行数据库备份和优化，清理无用数据和日志。</li>
</ul>
<ol start="7">
<li><p>IO多路复用：<br>IO多路复用是一种通过单个线程来监听多个IO事件的机制，它可以同时监视多个文件描述符的可读、可写等事件状态。常见的IO多路复用模型包括select、poll和epoll。它可以提高程序的并发性能，避免使用多线程或多进程处理大量的并发连接。</p>
</li>
<li><p>HAVING和WHERE区别：</p>
</li>
</ol>
<ul>
<li>WHERE用于在查询中指定条件筛选行，它在对表进行分组之前过滤数据。</li>
<li>HAVING用于在查询的结果集上指定条件，它在对分组后的结果进行过滤。</li>
</ul>
<ol start="9">
<li>Redis数据类型和数据结构：<br>Redis支持多种数据类型，包括字符串（String）、哈希（Hash）、列表（List）、集合（Set）、有序集合（Sorted Set）和位图（Bitmap）等。</li>
</ol>
<ul>
<li>有序集合（Sorted Set）使用跳表（Skip List）和字典（Hash Table）两种数据结构，跳表用于提供有序性，字典用于提供快速的成员查找和删除操作。</li>
<li>跳表是一种特殊的链表结构，通过在每个节点上增加多个指针来实现快速的查找和插入操作。</li>
</ul>
<ol start="10">
<li>第K大算法：<br>可以使用快速选择（QuickSelect）算法来找到数组中第K大的元素，其基本思想是选取一个基准元素，将数组划分为两部分，使得左边的元素都大于基准元素，右边的元素都小于基准元素。如果基准元素的位置等于K，则找到了第K大的元素；如果基准元素的位置大于K，则在左边继续查找；如果基准元素的位置小于K，则在右边继续查找。通过递归地进行划分和查找，最终可以找到第K大的元素。</li>
</ol>
<hr>
<ol start="5">
<li>MySQL索引情景题轰炸：</li>
</ol>
<ul>
<li>什么是索引？</li>
<li>索引的作用是什么？</li>
<li>什么情况下应该创建索引？</li>
<li>索引对查询和插入操作的影响是什么？</li>
<li>联合索引和单列索引有何区别？</li>
<li>索引对于排序和分组操作的影响是什么？</li>
</ul>
<ol start="6">
<li>MySQL默认引擎，解决了什么问题：</li>
</ol>
<ul>
<li>MySQL的默认存储引擎是InnoDB。</li>
<li>InnoDB引擎解决了多版本并发控制（MVCC）的问题，实现了更好的并发性能。</li>
<li>它支持事务处理和ACID属性（原子性、一致性、隔离性和持久性），提供了更高的数据完整性和可靠性。</li>
<li>InnoDB还提供了行级锁定和外键约束等功能。</li>
</ul>
<ol start="7">
<li>MySQL表的大小该多大合适，为什么：</li>
</ol>
<ul>
<li>表的大小适合应根据具体业务需求和数据库服务器的资源来确定。</li>
<li>表的大小过小可能会导致性能损失，因为查询的数据量较小，无法充分利用数据库服务器的资源。</li>
<li>表的大小过大可能会导致性能下降，因为需要更多的时间来扫描和处理大量的数据。</li>
<li>应根据数据库服务器的硬件配置、性能需求和数据增长率等因素来评估表的大小。</li>
</ul>
<ol start="8">
<li><p>MySQL写一个死锁场景：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 会话1</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话2</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table1 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 会话1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> table2 <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>
<p>上述场景中，会话1获取了table1的行锁并等待table2的行锁，同时会话2获取了table2的行锁并等待table1的行锁，从而造成死锁。</p>
</li>
<li><p>一组有序可重复数组找到某个最后出现的数的索引（二分）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">find_last_index</span>(<span class="params">arr, target</span>):</span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = <span class="built_in">len</span>(arr) - <span class="number">1</span></span><br><span class="line">    index = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] == target:</span><br><span class="line">            index = mid</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure>
<p>上述代码使用二分查找算法，在有序可重复数组中找到某个最后出现的数的索引。如果找到目标数，则更新索引并继续在右侧查找；如果目标数较大，则在右侧继续查找；如果目标数较小，则在左侧继续查找。最终返回最后出现的数的索引。</p>
</li>
<li><p>有1、3、9、27克的砝码各一个，能称出多重的物品，后追问如果添加81克、273克等（3的幂）各一个，能称出500克：<br>可以使用贪心算法解决该问题。首先，将重量为1的砝码放在一边，然后将剩下的砝码按从小到大的顺序放在另一边，将需要称重的物品放在一边，并根据需要逐步使用较大的砝码进行称重。如果添加了81克、273克等砝码，仍然可以按照相同的方法进行称重，因为这些额外的砝码是3的幂，可以覆盖到其他重量范围。这样，可以称出500克的物品。</p>
</li>
</ol>
<hr>
<ol start="3">
<li>HTTPS（CA机构）：<br>HTTPS（HyperText Transfer Protocol Secure）是基于HTTP协议的加密通信协议。它使用SSL（Secure Sockets Layer）或TLS（Transport Layer Security）协议来对通信进行加密和身份验证，确保数据的机密性和完整性。</li>
</ol>
<p>CA（Certificate Authority）机构是负责颁发和管理数字证书的机构。在HTTPS通信中，服务器需要使用数字证书来证明自己的身份，并对通信进行加密。CA机<br>构是可信任的第三方机构，负责验证服务器的身份，并签发数字证书。客户端在与服务器建立连接时，会验证服务器的数字证书的合法性和有效性，确保通信的安<br>全性。</p>
<ol start="4">
<li>线程安全机制：<br>线程安全是指在多线程环境下，多个线程同时访问共享资源时，保证对共享资源的操作能够正确执行而不会出现数据不一致或不确定的结果。</li>
</ol>
<p>常见的线程安全机制包括：</p>
<ul>
<li>互斥锁（Mutex）：通过锁机制保证在同一时刻只有一个线程可以访问共享资源。</li>
<li>信号量（Semaphore）：用于控制同时访问共享资源的线程数量。</li>
<li>条件变量（Condition Variable）：用于线程之间的通信和同步，允许线程等待某个条件的发生。</li>
<li>原子操作（Atomic Operation）：保证特定操作在执行过程中不会被中断，确保数据的原子性。</li>
</ul>
<ol start="5">
<li>JVM类加载：<br>JVM（Java Virtual Machine）类加载是指将Java字节码文件加载到内存中，并解析成可执行的Java类的过程。<br>JVM采用了三级类加载器体系：启动类加载器（Bootstrap Class<br>Loader）、扩展类加载器（Extension Class Loader）和应用程序类加载器（Application Class Loader）。</li>
</ol>
<p>类加载的过程包括：</p>
<ul>
<li>加载（Loading）：将字节码文件加载到内存中，通常从磁盘或网络中获取字节码文件。</li>
<li>验证（Verification）：验证字节码文件的格式、结构和语义的正确性。</li>
<li>准备（Preparation）：为类的静态变量分配内存空间，并设置默认初始值。</li>
<li>解析（Resolution）：将符号引用替换为直接引用，解析类之间的关系。</li>
<li>初始化（Initialization）：执行类的初始化代码，包括静态变量的赋值和静态块的执行。</li>
</ul>
<ol start="6">
<li>TCP&#x2F;IP如何实现可靠的数据传输：<br>TCP&#x2F;IP协议通过以下方式实现可靠的数据传输：</li>
</ol>
<ul>
<li>应用数据被分割成小的数据块（Segment），每个数据块都有序号。</li>
<li>TCP使用滑动窗口机制来管理发送和接收数据的缓冲区大小。</li>
<li>接收方会对收到的数据进行确认，并发送确认消息给发送方，以确认数据的接收。</li>
<li>发送方在一定时间内未收到确认消息，则认为数据丢失，并重新发送未收到确认的数据。</li>
<li>TCP使用序号和确认号来保证数据的有序性和完整性。</li>
<li>TCP使用流量控制和拥塞控制机制来控制数据的发送速率，避免网络拥塞和数据丢失。</li>
</ul>
<ol start="7">
<li>CAS（Compare and Swap）：<br>CAS是一种并发编程中的原子操作，用于实现无锁并发算法。它通过比较内存中的值与预期值是否相等，如果相等则将新值写入内存，否则不进行任何操作。</li>
</ol>
<p>CAS操作包括三个参数：内存地址（或称为变量的引用）、预期值和新值。它的执行过程如下：</p>
<ul>
<li>读取内存地址中的值，与预期值进行比较。</li>
<li>如果相等，则将新值写入内存地址，操作成功。</li>
<li>如果不相等，则表示其他线程已经修改了内存中的值，CAS操作失败。</li>
</ul>
<p>CAS操作在并发环境下可以保证数据的一致性和线程安全性，避免了锁的使用，减少了线程切换和调度的开销。然而，CAS操作也存在ABA问题，即在操作过程中可能发生其他线程修改了值并恢复成原来的值，导致CAS操作无法感知这种变化。为了解决ABA问题，通常会使用版本号或标记来增加额外的判断。</p>
<hr>
<ol start="2">
<li>static关键字：</li>
</ol>
<ul>
<li>static关键字可以用于修饰类的成员（属性和方法），也可以用于修饰局部变量。</li>
<li>当static关键字用于类的成员时，表示该成员属于类级别，而不是实例级别。类的所有实例共享同一个static成员。</li>
<li>静态成员可以通过类名直接访问，不需要创建类的实例。</li>
<li>静态属性在内存中只有一份拷贝，对于所有的实例都是共享的。</li>
<li>静态方法不能访问非静态成员，只能访问静态成员。</li>
</ul>
<ol start="3">
<li>垃圾回收算法和常用的垃圾回收器：</li>
</ol>
<ul>
<li>垃圾回收算法是指用于自动回收不再使用的内存资源的算法。</li>
<li>常见的垃圾回收算法包括引用计数、标记-清除、复制、标记-整理等。</li>
<li>垃圾回收器是实现垃圾回收算法的具体实现，常见的垃圾回收器有串行垃圾回收器、并行垃圾回收器、并发垃圾回收器和分代垃圾回收器等。</li>
<li>Java中常用的垃圾回收器包括Serial GC、Parallel GC、CMS GC、G1 GC等。</li>
</ul>
<ol start="4">
<li>类加载机制：</li>
</ol>
<ul>
<li>类加载是指将类的字节码文件加载到内存中，并在JVM中生成对应的Class对象的过程。</li>
<li>类加载机制分为加载、验证、准备、解析和初始化五个阶段。</li>
<li>加载阶段：通过类加载器将字节码文件加载到内存中。</li>
<li>验证阶段：验证字节码文件的正确性和安全性。</li>
<li>准备阶段：为类的静态变量分配内存空间，并设置默认初始值。</li>
<li>解析阶段：将符号引用替换为直接引用，建立类之间的关系。</li>
<li>初始化阶段：执行类的初始化代码，包括静态变量的赋值和静态块的执行。</li>
</ul>
<ol start="5">
<li>反射：</li>
</ol>
<ul>
<li>反射是指在运行时动态地获取类的信息，并能够操作类或对象的属性、方法和构造函数。</li>
<li>通过反射，可以在运行时创建对象、调用方法、获取和设置属性等，即使在编译时无法确定具体的类。</li>
<li>反射提供了灵活性和扩展性，但由于涉及到动态解析和调用，性能上相对较低。</li>
</ul>
<ol start="6">
<li>HashMap：</li>
</ol>
<ul>
<li>HashMap是Java中的一种数据结构，用于存储键值对。</li>
<li>它基于哈希表实现，可以快速地进行插入、删除和查找操作。</li>
<li>HashMap允许null键和null值，</li>
</ul>
<p>但键不能重复（相同的键只能存在一个）。</p>
<ul>
<li>HashMap的底层数据结构是数组和链表（或红黑树），通过哈希算法将键映射到数组的索引位置，解决哈希冲突的键值对通过链表（或红黑树）形成一个链表（或红黑树）节点。</li>
<li>HashMap的查找和插入操作的平均时间复杂度是O(1)，但在最坏情况下可能会达到O(n)。</li>
</ul>
<ol start="8">
<li>TCP和UDP的区别及介绍：</li>
</ol>
<ul>
<li>TCP（Transmission Control Protocol）和UDP（User Datagram Protocol）是网络通信中常用的两种传输协议。</li>
<li>TCP是面向连接的协议，提供可靠的数据传输，保证数据的有序性和完整性，但传输效率相对较低。</li>
<li>UDP是无连接的协议，不提供可靠性保证，传输速度较快，但对数据的有序性和完整性没有保证。</li>
<li>TCP使用三次握手和四次挥手来建立和关闭连接，保证数据的可靠传输。</li>
<li>UDP适用于实时性要求高、数据量较小、丢失一些数据不影响的场景，例如音视频传输、实时游戏等。</li>
</ul>
<ol start="9">
<li>TCP如何保证可靠的数据传输：</li>
</ol>
<ul>
<li>TCP使用以下机制保证数据的可靠传输：<ul>
<li>序号和确认号：TCP使用序号对数据进行编号，接收方通过确认号告知发送方已接收到的数据，确保数据的有序性和完整性。</li>
<li>窗口机制：TCP使用滑动窗口机制控制发送和接收数据的窗口大小，根据网络的拥塞情况动态调整数据传输速率。</li>
<li>确认机制：接收方在接收到数据后发送确认消息给发送方，以确认数据的接收。如果发送方在一定时间内未收到确认消息，则认为数据丢失，重新发送未收到<br>确认的数据。</li>
<li>超时重传：如果发送方在一定时间内未收到确认消息，则认为数据丢失，会重新发送未收到确认的数据，确保数据的可靠传输。</li>
<li>拥塞控制：TCP使用拥塞控制机制来避免网络拥塞，通过动态调整窗口大小和发送速率来控制数据的传输。</li>
</ul>
</li>
</ul>
<ol start="11">
<li><p>项目相关（难点）：<br>这个问题需要根据实际项目经验来回答，因不了解您的具体项目，无法给出详细的回答。</p>
</li>
<li><p>给定一个数组，然后一个正数k，判断数组中是否存在子数组，使得子数组之和可以被正数K整除。<br>思路：使用前缀和的思想，使用一个Set容器存储前缀和与k的余数，当计算完每个位置的前缀和并取余后，<br>如果发现Set中存在该余数，则证明一定存在一个子数组之和可以被k整除。这是因为如果两个位置的前缀和的余数相同，<br>那么这两个位置之间的子数组之和必然是k的倍数。</p>
</li>
<li><p>说一下数组和列表是什么，以及区别？</p>
</li>
</ol>
<p>数组和列表都是数据结构用于存储和组织一组数据的容器，但它们在实现方式和特性上有一些区别。</p>
<p>数组（Array）：</p>
<ul>
<li>数组是一种固定大小的数据结构，它由相同类型的元素组成，这些元素在内存中是连续存储的。</li>
<li>数组的访问是通过索引来实现的，可以通过索引快速访问和修改数组中的元素。</li>
<li>数组的大小在创建时确定，并且通常不可更改。如果需要调整大小，需要创建一个新的数组，并将原数组的元素复制到新数组中。</li>
<li>数组适合用于对元素的随机访问和修改，但在插入和删除元素时效率较低。</li>
</ul>
<p>列表（List）：</p>
<ul>
<li>列表是一种动态大小的数据结构，它可以容纳不同类型的元素，并且元素在内存中不一定是连续存储的。</li>
<li>列表的访问可以通过索引或迭代器来实现，可以按需访问和修改列表中的元素。</li>
<li>列表的大小可以根据需要动态调整，可以方便地插入和删除元素。</li>
<li>列表适合用于需要频繁插入和删除元素的场景，但在随机访问元素时效率较低。</li>
</ul>
<p>区别：</p>
<ol>
<li>存储方式：数组中的元素在内存中是连续存储的，而列表中的元素在内存中不一定是连续存储的。</li>
<li>大小调整：数组的大小在创建时确定，并且通常不可更改，而列表的大小可以根据需要动态调整。</li>
<li>元素类型：数组要求存储的元素类型必须相同，而列表可以容纳不同类型的元素。</li>
<li>插入和删除操作：数组在插入和删除元素时效率较低，需要移动其他元素，而列表在插入和删除元素时效率较高，不需要移动其他元素。</li>
<li>随机访问效率：数组可以通过索引进行快速随机访问，而列表在随机访问元素时效率较低。</li>
</ol>
<p>根据具体的使用场景和需求，选择适合的数据结构可以提高程序的效率和性能。</p>
<ol>
<li><p>spring bean生命周期</p>
</li>
<li><p>springboot starter .factorys文件</p>
</li>
<li><p>mysql三个范式 举了个场景题 怎么建索引 怎么查询</p>
</li>
<li><p>mysql 事物四大特性 具体如何实现</p>
</li>
<li><p>redis缓存穿透 缓存击穿 缓存雪崩怎么解决?</p>
</li>
<li><p>redis怎么实现分布式锁 set nx命令有什么问题 如何解决？</p>
</li>
<li><p>讲一讲cms</p>
</li>
<li><p>什么时候会发生full gc</p>
</li>
<li><p>可以在代码中捕获oom异常吗</p>
</li>
<li><p>算法：二维数组 逐行自增 快速查找target</p>
</li>
<li><p>Spring Bean 生命周期：</p>
</li>
</ol>
<ul>
<li>实例化：当容器加载Bean定义时，会实例化Bean对象。</li>
<li>属性赋值：容器将属性值和对其他Bean的引用注入到Bean实例中。</li>
<li>初始化：在Bean实例化和属性赋值完成后，可以执行自定义的初始化逻辑，例如调用自定义的初始化方法或实现InitializingBean接口。</li>
<li>使用：Bean可以被容器或其他Bean使用。</li>
<li>销毁：当容器关闭时，会销毁Bean对象，可以执行自定义的销毁逻辑，例如调用自定义的销毁方法或实现DisposableBean接口。</li>
</ul>
<ol start="2">
<li>Spring Boot Starter .factorys文件：</li>
</ol>
<ul>
<li>在Spring Boot中，自动配置的实现是通过Spring Boot Starter模块来实现的。</li>
<li>在Starter模块的META-INF目录下，有一个名为spring.factories的文件，其中列出了自动配置类的全限定名。</li>
<li>Spring Boot在启动时，会根据spring.factories文件加载配置的自动配置类，并将其纳入到应用上下文中。</li>
</ul>
<ol start="3">
<li>MySQL三个范式和索引建立与查询：</li>
</ol>
<ul>
<li>第一范式（1NF）要求数据表中的每一列都是不可分割的最小数据单位，确保每个数据都是原子性的。</li>
<li>第二范式（2NF）要求数据表中的非主键列完全依赖于主键，即每个非主键列都必须完全依赖于主键而不是部分依赖。</li>
<li>第三范式（3NF）要求数据表中的非主键列之间没有传递依赖关系，即非主键列不依赖于其他非主键列。</li>
</ul>
<p>在建立索引时，可以根据查询的需求和表的特点进行如下考虑：</p>
<ul>
<li>选择适当的列作为索引列，通常是那些经常用于查询的列。</li>
<li>考虑使用组合索引来覆盖多个查询条件。</li>
<li>避免对频繁进行更新的列创建索引，以减少索引维护的开销。</li>
<li>注意索引的选择性，选择性越高，索引效果越好。</li>
</ul>
<ol start="4">
<li>MySQL事务的四大特性：ACID</li>
</ol>
<ul>
<li>原子性（Atomicity）：事务是一个原子操作，要么全部执行成功，要么全部回滚到事务开始前的状态。</li>
<li>一致性（Consistency）：事务在执行前后，数据的完整性必须保持一致，即满足预定义的规则和约束。</li>
<li>隔离性（Isolation）：多个并发事务之间应该相互隔离，每个事务都应该感觉不到其他事务的存在。</li>
<li>持久性（Durability）：一旦事务提交，对数据库的修改应该永久保存，即使系统故障也不应该丢失提交的事务。</li>
</ul>
<p>具体实现事务的方式包括使用事务管理器、在代码中使用@Transactional注解等。</p>
<ol start="5">
<li>Redis缓存穿透、缓存击穿和缓存雪崩的解决方法：</li>
</ol>
<ul>
<li>缓存穿透：指查询一个不存在于缓存和数据库中的数据，导致每次查询都穿透到数据库。解决方法包括在查询时进行空值缓存、布隆过滤器等。</li>
<li>缓存击穿：指一个热点数据失效或被删除，导致大量请求直接打到数据库上。解决方法包括设置热点数据永不过期、互斥锁等。</li>
<li>缓存雪崩：指缓存中的大量数据在同一时间失效，导致大量请求直接打到数据库上。解决方法包括设置缓存数据的随机过期时间、使用分布式缓存等。</li>
</ul>
<ol start="6">
<li>Redis实现分布式锁和解决set nx命令的问题：</li>
</ol>
<ul>
<li>使用Redis实现分布式锁可以利用Redis的原子性操作，通过设置一个特定的键来实现锁的获取和释放。</li>
<li>在使用<code>SET</code>命令设置分布式锁时，可以设置<code>NX</code>（只在键不存在时才设置）和<code>EX</code>（设置键的过期时间）选项。</li>
<li>问题：在分布式环境下，如果获取锁和设置过期时间两个操作不是原子性的，可能导致锁无法正常释放。</li>
<li>解决方法：可以使用<code>SET</code>命令的<code>NX</code>、<code>EX</code>和<code>PX</code>选项组合，或者使用Redis的Lua脚本来保证获取锁和设置过期时间的原子性。</li>
</ul>
<ol start="7">
<li>CMS（Concurrent Mark Sweep）：</li>
</ol>
<ul>
<li>CMS是一种基于标记-清除算法的垃圾回收器，用于减少垃圾回收的停顿时间。</li>
<li>CMS采用并发标记和并发清除的方式进行垃圾回收，允许垃圾回收与应用程序并发执行，以减少停顿时间。</li>
<li>CMS的主要目标是减少垃圾回收的停顿时间，但可能会牺牲一些吞吐量。</li>
<li>CMS在进行垃圾回收时，会产生一些碎片，可能会导致内存空间的浪费。</li>
</ul>
<ol start="8">
<li>Full GC的发生时机：</li>
</ol>
<ul>
<li>Full GC（Full Garbage Collection）指的是对整个堆内存进行垃圾回收的过程。</li>
<li>Full GC的发生时机包括：<ul>
<li>当老年代空间不足以容纳新生成的对象时，会触发Full GC。</li>
<li>当调用<code>System.gc()</code>或<code>Runtime.getRuntime().gc()</code>显式触发垃圾回收时，可能会触发Full GC。</li>
<li>当永久代或元空间（在不同的Java版本中）空间不足时，会触发Full GC。</li>
</ul>
</li>
</ul>
<ol start="9">
<li>在代码中捕获OOM异常：</li>
</ol>
<ul>
<li>OOM（OutOfMemoryError）是Java中的错误（Error），而不是异常（Exception），表示内存溢出错误。</li>
<li>OOM通常发生在JVM无法分配足够的内存给对象使用时。</li>
<li>由于OOM是错误而不是异常，它表示JVM处于不可恢复的状态，无法被捕获和处理。</li>
</ul>
<ol start="10">
<li>算法题：二维数组逐行自增快速查找target：</li>
</ol>
<ul>
<li>可以使用二分查找的思想进行解答。</li>
<li>对于逐行自增的二维数组，可以将其看作是一个按顺序排列的一维数组。</li>
<li>首先确定目标值在哪一行，然后在该行进行二分查找。</li>
<li>如果找到目标值，返回true；否则，返回false。</li>
</ul>
<p>以上是对您提出的问题的简要回答，可能还有更详细和全面的答案。</p>
<ol>
<li><p>ArrayList的并发修改异常了解吗？单线程情况下会发生吗？</p>
</li>
<li><p>介绍下Java的happens before？为什么要有happens before？</p>
</li>
<li><p>Redis：持久化机制。AOF和RDB分别说下。</p>
</li>
<li><p>redis集群方案了解吗 -</p>
</li>
<li><p>Spring是IOC容器，这个IOC容器的作用是什么？</p>
</li>
<li><p>看简历里说对spring有自己的理解，可以说说有哪些理解。</p>
</li>
<li><p>适配器、装饰器、代理模式有什么区别</p>
</li>
<li><p>TCP&#x2F;IP四层模型</p>
</li>
<li><p>三次握手，四次挥手机制</p>
</li>
<li><p>Http的请求由哪几部分构成。http2了解吗？</p>
</li>
<li><p>看到你提到了RabbitMQ，能说说消息队列的作用吗？有了解RabbitMQ的设计吗，比如交换机、路由键。</p>
</li>
<li><p>做题 最长无重复子串</p>
</li>
<li><p>ArrayList的并发修改异常（ConcurrentModificationException）：</p>
</li>
</ol>
<ul>
<li>当使用迭代器遍历ArrayList时，如果在遍历过程中通过集合的add、remove等方法修改了集合的结构（增加或删除元素），就会抛出ConcurrentModificationException异常。</li>
<li>单线程情况下不会发生并发修改异常，因为在单线程环境下，遍历和修改操作是串行执行的。</li>
</ul>
<ol start="2">
<li>Java的happens-before：</li>
</ol>
<ul>
<li>Happens-before是Java内存模型中的概念，用于定义操作之间的可见性和顺序关系。</li>
<li>Happens-before规则规定了在多线程环境下，对共享变量的写操作对于后续的读操作是可见的。</li>
<li>Happens-before关系保证了程序的顺序性和一致性，避免了由于指令重排等因素导致的数据不一致问题。</li>
</ul>
<ol start="3">
<li>Redis的持久化机制：</li>
</ol>
<ul>
<li>AOF（Append-Only<br>File）持久化：将每个写操作追加到AOF文件中，恢复时重新执行AOF文件中的命令。AOF持久化可以通过配置进行自动化的定期写入或者根据数据变化的时候执行。</li>
<li>RDB（Redis<br>Database）持久化：将当前时刻的内存数据快照保存到磁盘上的二进制文件。RDB持久化可以通过手动执行SAVE或者BGSAVE命令，或者根据配置定期自动执行。</li>
</ul>
<ol start="4">
<li>Redis集群方案：</li>
</ol>
<ul>
<li>Redis集群通过数据分片和复制来提供高可用性和可扩展性。</li>
<li>Redis Cluster使用分片来水平拆分数据到多个节点，每个节点负责管理其中的一部分数据。</li>
<li>Redis Cluster使用Gossip协议来进行节点之间的通信和信息交换，实现节点的自动发现和故障转移。</li>
<li>集群模式下，Redis客户端会根据哈希算法将数据分散存储到不同的节点上，从而实现负载均衡和数据的高可用性。</li>
</ul>
<ol start="5">
<li>Spring的IOC容器的作用：</li>
</ol>
<ul>
<li>IOC（Inversion of Control）是一种设计模式，它将对象的创建和依赖关系的管理交给容器来处理。</li>
<li>Spring的IOC容器负责创建、装配和管理应用程序中的对象（Bean），通过配置文件或注解的方式来描述对象之间的依赖关系。</li>
<li>IOC容器的作用是实现对象之间的解耦，使得应用程序的组件更加灵活、可维护和可测试。</li>
</ul>
<ol start="6">
<li>对Spring的理解：</li>
</ol>
<ul>
<li>Spring是一个开源的、轻量级的企业级应用开发框架。</li>
<li>Spring提供了一个IOC容器和AOP等核心特性，以简化Java开发过程。</li>
<li>Spring可以用于构建各种类型的应</li>
</ul>
<p>用程序，包括Web应用、RESTful服务、批处理应用等。</p>
<ul>
<li>Spring提供了丰富的功能和扩展，如事务管理、安全性、缓存、消息传递等。</li>
</ul>
<ol start="7">
<li>适配器、装饰器和代理模式的区别：</li>
</ol>
<ul>
<li>适配器模式：用于将一个类的接口转换成另一个客户端所期望的接口，使得原本不兼容的类能够协同工作。</li>
<li>装饰器模式：动态地给对象添加额外的功能，通过包装（装饰）原始对象，而不是通过继承来扩展功能。</li>
<li>代理模式：为其他对象提供一种代理以控制对这个对象的访问。代理类和被代理类实现相同的接口，通过代理类来控制和管理被代理类的访问。</li>
</ul>
<ol start="8">
<li>TCP&#x2F;IP四层模型：</li>
</ol>
<ul>
<li>应用层：提供应用程序之间的通信和数据交换，包括HTTP、FTP、SMTP等协议。</li>
<li>传输层：负责端到端的数据传输，包括TCP和UDP协议。</li>
<li>网络层：处理网络中的数据包路由和转发，包括IP协议。</li>
<li>数据链路层：负责物理链路的传输，包括以太网、WiFi等。</li>
</ul>
<ol start="9">
<li>三次握手和四次挥手：</li>
</ol>
<ul>
<li>三次握手是建立TCP连接的过程，用于确认双方的通信能力和同步连接序列号。</li>
<li>四次挥手是关闭TCP连接的过程，用于双方协商断开连接并确认最后的数据传输。</li>
</ul>
<ol start="10">
<li>HTTP请求的构成：</li>
</ol>
<ul>
<li>HTTP请求由请求行、请求头和请求体组成。请求行包括请求方法、URL和协议版本。</li>
<li>请求头包括一些附加的信息，如请求头字段和值，用于传递请求的相关信息。</li>
<li>请求体（可选）包含要发送给服务器的数据，例如表单数据或请求体内容。</li>
</ul>
<ol start="11">
<li>消息队列的作用和RabbitMQ的设计：</li>
</ol>
<ul>
<li>消息队列用于解耦和异步处理系统中的组件，提供了可靠的消息传递机制。</li>
<li>RabbitMQ是一种开源的消息队列系统，它实现了AMQP（高级消息队列协议），提供了可靠的消息传递、消息路由和消息排队等功能。</li>
<li>RabbitMQ的设计包括交换机（Exchange）、队列（Queue）和绑定（Binding），通过交换机和绑定规则将消息发送到特定的队列中。</li>
</ul>
<ol start="12">
<li>最长无重复子串算法：</li>
</ol>
<ul>
<li>最长无重复子串算法可以通过滑动窗口的方式来实现。</li>
<li>使用两个指针表示滑动窗口的左右边界，遍历整</li>
</ul>
<p>个字符串。</p>
<ul>
<li>当右指针遇到重复字符时，移动左指针到重复字符的下一个位置，更新窗口的大小。</li>
<li>在遍历过程中记录最大的窗口大小，即为最长无重复子串的长度。</li>
</ul>
<p>什么是遍历和修改操作是串行执行</p>
<p>当说到遍历和修改操作是串行执行时，意味着在单线程环境中，这两个操作是按顺序依次执行的，不会发生并发或并行的情况。</p>
<p>具体来说，在单线程中执行遍历操作时，会按照集合的顺序依次访问每个元素，直到遍历完所有元素或满足某个条件。期间不会有其他线程干扰或修改集合的结构。</p>
<p>同样，在单线程中执行修改操作时，会依次对集合的元素进行修改，例如添加、删除或更新元素。在修改操作执行期间，也不会有其他线程同时对集合进行修改。</p>
<p>因此，在单线程环境下，遍历和修改操作是串行执行的，保证了操作的顺序性和一致性。但是需要注意的是，在多线程环境下，遍历和修改操作可能会引发并发修改异常（ConcurrentModificationException），需要使用相应的并发控制手段来保证线程安全性。</p>
<p>什么是快照</p>
<p>在计算机科学和数据库领域，快照（Snapshot）是指某一时刻系统或数据的静态副本或状态的表示。</p>
<p>在操作系统中，快照可以是对文件系统或虚拟机的状态的拍摄，记录了某一时刻文件系统或虚拟机中所有文件、目录和内存的状态。这样的快照可以用于备份和还原，以及系统恢复和故障排除。</p>
<p>在数据库中，快照是数据库在某一时刻的一致性视图。它是数据库在特定时间点的数据副本，反映了数据库中所有表、记录和索引的状态。数据库快照可以用于数据恢复、数据分析和并发控制。</p>
<p>快照的关键特点是它是在某个确定的时间点捕获的，因此它反映了该时间点系统或数据的准确状态。快照可以被用于恢复系统到该时间点的状态，或者作为参考点进行数据分析和比较。</p>
<p>需要注意的是，快照通常是只读的，即不能对快照进行修改。任何对原始系统或数据的修改都不会影响已经捕获的快照。因此，快照常常用于数据保护和故障恢复的目的。</p>
<p>IOC</p>
<p>IOC（Inversion of Control）是一种软件设计原则，也是Spring框架的核心概念之一。它实现了控制反转，即将对象的创建、依赖关系的管理和对象的生命周期的控制权从应用程序代码中转移到了容器（框架）中。</p>
<p>在传统的编程模型中，应用程序代码通常负责创建对象、解决对象之间的依赖关系以及管理对象的生命周期。这导致了代码的紧耦合和复杂性，使得代码难以维护、测试和扩展。</p>
<p>而IOC容器则通过将对象的创建和依赖关系的管理委托给容器来解决这些问题。应用程序只需要描述对象之间的依赖关系，而不需要直接处理对象的创建和管理。容器根据配置文件或注解来实现对象的创建、依赖注入和生命周期管理，从而实现了对象之间的解耦和灵活性。</p>
<p>IOC容器的工作原理是通过反射、配置文件或注解来实现对象的实例化和依赖注入。它可以根据配置文件或注解中的信息，自动创建对象，并将依赖的对象注入到目标对象中。这样，对象之间的依赖关系由容器来管理，应用程序代码只需要使用这些对象即可。</p>
<p>通过使用IOC容器，我们可以实现以下优势：</p>
<ul>
<li>松耦合：对象之间的依赖关系由容器来管理，减少了对象之间的直接耦合，提高了代码的可维护性和可测试性。</li>
<li>可扩展性：通过配置文件或注解，可以很容易地添加、修改或替换对象的实现，而不需要修改应用程序的代码。</li>
<li>简化开发：IOC容器自动处理对象的创建和依赖注入，减少了开发人员的工作量，提高了开发效率。</li>
</ul>
<p>Spring框架是一个基于IOC容器的应用框架，它提供了强大的IOC功能以及其他丰富的特性，如AOP（面向切面编程）、事务管理、安全性等，使得开发者可以更轻松地开发复杂的企业应用。</p>
<p>为什么要有异步这个东西，解决了什么问题，举个代码例子</p>
<p>异步编程是一种编程范式，用于解决在某些情况下同步执行会导致性能问题或阻塞的情况。它可以提高系统的响应性能、资源利用率和并发处理能力。</p>
<p>异步编程的主要目的是通过将耗时的操作（如网络请求、文件读写、数据库查询等）放在后台进行，不阻塞主线程或其他任务的执行。这样可以使程序在等待这些操作完成的同时继续执行其他任务，提高了程序的吞吐量和响应速度。</p>
<p>异步编程可以解决以下问题：</p>
<ol>
<li>阻塞问题：当程序需要等待耗时操作完成时，同步执行会导致阻塞，影响程序的执行效率和响应性能。异步编程通过非阻塞的方式处理耗时操作，允许程序继续执行其他任务，提高了程序的并发处理能力。</li>
<li>响应性能问题：在需要响应用户请求的应用中，同步执行可能导致用户长时间等待，给用户带来不良的体验。异步编程可以在后台处理耗时操作，使得系统能够更快地响应用户请求。</li>
<li>资源利用率问题：同步执行时，如果一个线程在等待耗时操作完成期间空闲，资源得不到充分利用。异步编程可以在等待时释放线程，使其能够执行其他任务，提高了资源的利用率。</li>
</ol>
<p>以下是一个简单的Java代码例子，展示了如何使用异步编程（基于Java 8 CompletableFuture）进行网络请求的并发处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AsyncExample</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行第一个网络请求</span></span><br><span class="line">            <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Result from Request 1&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;String&gt; future2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 执行第二个网络请求</span></span><br><span class="line">            <span class="comment">// 模拟耗时操作</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Result from Request 2&quot;</span>;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 异步等待两个请求都完成</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; combinedFuture = CompletableFuture.allOf(future1, future2);</span><br><span class="line"></span><br><span class="line">        combinedFuture.thenRun(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 当两个请求都完成时执行的操作</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Both requests completed.&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Result 1: &quot;</span> + future1.join());</span><br><span class="line">            System.out.println(<span class="string">&quot;Result 2: &quot;</span> + future2.join());</span><br><span class="line">            <span class="comment">// 可以继续执行其他任务</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>在上述代码中，我们使用<code>CompletableFuture</code>创建两个异步任务，分别模拟两个网络请求的耗时操作。然后，使用<code>CompletableFuture.allOf</code>等待两个任务都完成，然后执行后续操作。这样可以并发地处理多个网络请求，提高了程序的并发性能。</p>
<p>什么是编程范式</p>
<p>编程范式是一种编程的方法论或编程的风格，它规定了程序员在解决问题时应遵循的原则和思维方式。不同的编程范式强调不同的概念、原则和思想，以实现特定的目标和效果。</p>
<p>常见的编程范式包括：</p>
<ol>
<li>命令式编程范式：以算法为中心，通过编写一系列的命令来指导计算机执行任务。常见的命令式编程语言有C、Java等。</li>
<li>声明式编程范式：以描述问题的逻辑为中心，通过声明式语句来描述问题的解决方式，而不是直接指定计算机的执行步骤。常见的声明式编程范式包括函数式编程和逻辑编程。</li>
<li>函数式编程范式：将计算视为数学函数的求值过程，强调函数的纯粹性和不可变性。函数式编程语言如Haskell、Scala和Lisp属于这种范式。</li>
<li>面向对象编程范式：以对象为中心，将数据和操作封装在对象中，并通过对象之间的交互来解决问题。面向对象编程语言如Java、C++和Python属于这种范式。</li>
<li>面向过程编程范式：将程序看作是一系列的过程或函数，通过顺序执行这些过程来实现任务。C语言常用这种范式。</li>
<li>并发编程范式：用于处理并发和多线程编程的范式，例如使用锁、线程、消息传递等机制来实现并发任务。并发编程语言和框架如Java的并发包、Go和Erlang等属于这种范式。</li>
<li>泛型编程范式：通过参数化类型和抽象数据类型的概念，实现可重用和通用的代码。C++的模板和Java的泛型就是泛型编程的范式。</li>
</ol>
<p>不同的编程范式适用于不同的问题领域和需求，程序员可以根据具体情况选择合适的编程范式来解决问题。有时候，也可以结合多种编程范式来编写代码，以充分利用各种范式的优点。</p>
<p>Spring Bean 是什么</p>
<p>在Spring框架中，Bean是一个由Spring容器管理的对象。Bean代表了应用程序中的一个组件，它可以是一个实例化的类对象、一个配置的数据源、一个服务等。</p>
<p>Spring Bean的特点和作用包括：</p>
<ol>
<li>实例化和管理：Spring容器负责创建和管理Bean的生命周期，包括实例化、依赖注入、初始化、销毁等过程。</li>
<li>依赖注入：Spring容器通过依赖注入将Bean所需的依赖关系自动注入到Bean中，实现了松耦合和可测试性。</li>
<li>配置灵活性：Spring Bean的配置信息可以通过XML配置文件、注解或Java代码等方式进行定义和修改，提供了灵活的配置选项。</li>
<li>AOP支持：Spring框架提供了面向切面编程（AOP）的支持，可以在Bean中定义切面和通知，实现横切关注点的解耦和复用。</li>
<li>事务管理：Spring框架提供了事务管理的功能，可以通过配置将事务应用到Bean的方法中，实现数据的一致性和事务的管理。</li>
<li>生命周期管理：Spring容器管理Bean的生命周期，包括初始化方法和销毁方法的回调，可以通过配置自定义Bean的初始化和销毁逻辑。</li>
</ol>
<p>通过Spring Bean的管理和依赖注入，开发人员可以更加专注于业务逻辑的实现，而无需关注对象的创建和管理细节。同时，Spring Bean的配置灵活性也使得应用程序的组件可以方便地进行扩展和修改，提供了更好的可维护性和可测试性。</p>
<p>RESTful</p>
<p>RESTful是一种设计风格或架构风格，用于构建网络应用程序，特别是基于HTTP协议的Web服务。REST是Representational State Transfer的缩写，它强调将应用程序的功能以资源的形式进行建模，通过HTTP协议中的各种方法对资源进行操作和交互。</p>
<p>以下是RESTful的一些关键概念和原则：</p>
<ol>
<li>资源（Resource）：在RESTful架构中，所有的功能被视为资源，每个资源都可以通过一个唯一的URI进行标识，例如&#x2F;users、&#x2F;products等。</li>
<li>表述（Representation）：资源的表述是指资源的具体数据表示形式，可以是JSON、XML、HTML等。客户端可以通过HTTP方法（GET、POST、PUT、DELETE等）对资源的表述进行操作。</li>
<li>统一接口（Uniform Interface）：RESTful架构通过使用统一的接口规范，包括使用HTTP方法进行资源操作（GET、POST、PUT、DELETE）以及对资源的URI进行标识和访问。</li>
<li>状态无关（Stateless）：RESTful架构是无状态的，每个请求都包含了足够的信息，服务器不需要存储客户端的状态信息。</li>
<li>超媒体驱动（HATEOAS）：通过在响应中提供资源间的链接，客户端可以动态地发现和操作可用的资源，实现应用程序的自描述性和可扩展性。</li>
</ol>
<p>使用RESTful架构设计的Web服务具有良好的可扩展性、可维护性和松耦合性。它能够提供清晰的接口设计、灵活的资源交互方式和统一的状态管理，使得不同系统之间的通信更加简洁和高效。同时，RESTful架构也符合Web标准，能够充分利用HTTP协议的各种功能和特性。</p>
<p>GET、POST、PUT、DELETE</p>
<p>GET、POST、PUT和DELETE是HTTP协议中定义的常用请求方法，用于对服务器资源进行不同类型的操作。</p>
<ol>
<li><p>GET：用于从服务器获取资源，常用于获取数据。GET请求是幂等的，即多次执行相同的GET请求应该返回相同的结果，不应该对服务器产生副作用。GET请求的参数可以通过URL的查询字符串传递，也可以通过请求体传递（例如在RESTful API中使用JSON格式的请求体）。</p>
</li>
<li><p>POST：用于向服务器提交数据，常用于创建新的资源。POST请求不是幂等的，即多次执行相同的POST请求可能会创建多个资源。POST请求的参数通常包含在请求体中，用于传递需要提交的数据。</p>
</li>
<li><p>PUT：用于更新服务器上的资源，常用于更新已存在的资源。PUT请求是幂等的，即多次执行相同的PUT请求应该产生相同的结果。PUT请求通常需要提供完整的资源表示，即需要将所有的属性值都传递给服务器。</p>
</li>
<li><p>DELETE：用于删除服务器上的资源，常用于删除不再需要的资源。DELETE请求是幂等的，即多次执行相同的DELETE请求应该产生相同的结果。DELETE请求的URI通常包含要删除的资源的唯一标识，例如”&#x2F;users&#x2F;1”表示删除ID为1的用户。</p>
</li>
</ol>
<p>这些请求方法在RESTful API设计中起着重要的作用，它们定义了对资源的不同操作类型，使得客户端能够以统一和标准的方式与服务器进行交互。根据具体的应用场景和需求，选择合适的请求方法来进行资源操作。</p>
<p>什么是BEAN</p>
<p>在计算机编程领域，”Bean”一词通常用于表示可重用的软件组件，特别是在Java编程语言中。在Java中，Bean是指符合一定规范的Java对象，它具有以下特征：</p>
<ol>
<li>具有私有的成员变量（属性）：Bean通常定义了一组私有的成员变量，用于存储对象的状态。</li>
<li>提供公共的访问方法：Bean通过公共的getter和setter方法，提供对成员变量的访问和修改。</li>
<li>符合JavaBean规范：JavaBean是一种特殊类型的Bean，它需要满足一些规范，如具有无参构造函数、实现可序列化接口等。</li>
</ol>
<p>Bean的概念旨在提供一种可重用和可组合的编程模型，通过封装对象的状态和行为，使得开发人员能够更加方便地进行代码复用和模块化开发。在Java中，Bean通常用于描述业务逻辑、数据模型、服务组件等，它们可以被其他代码引用和调用。</p>
<p>在Java的开发框架中，比如Spring框架，Bean是指由Spring容器管理的对象，它们通过配置文件或注解的方式进行声明和创建。Spring Bean具有生命周期管理、依赖注入等特性，可以被动态地创建、初始化、销毁，并通过容器进行管理和协调。Spring框架通过Bean的管理和依赖注入，实现了松耦合、可测试性和可扩展性，提供了强大的面向对象编程支持。</p>
<p>什么是松耦合</p>
<p>松耦合（Loose coupling）是软件设计中的一个原则，用于描述模块或组件之间的关系。它指的是模块或组件之间的依赖关系应该尽量减少或降低，使得它们能够独立地进行修改、扩展和测试，而不会对其他模块或组件造成过大的影响。</p>
<p>松耦合的设计具有以下特点：</p>
<ol>
<li><p>低依赖性：模块之间的依赖应该尽量减少，避免直接依赖于具体的实现细节。模块之间的通信应该基于抽象接口或协议，而不是依赖具体的类或对象。</p>
</li>
<li><p>接口隔离：模块之间的接口应该是精简的，只包含必要的方法和属性，避免暴露不必要的细节。每个模块都应该有清晰的职责和接口定义，避免对其他模块的实现细节产生依赖。</p>
</li>
<li><p>解耦合：模块之间应该尽量解耦，即减少相互之间的直接关联性。通过中间层、消息传递、事件驱动等方式，实现模块之间的解耦，使得模块能够独立地进行修改和演化。</p>
</li>
<li><p>可扩展性：松耦合的设计能够更好地支持系统的扩展和修改。当需要添加新的功能或模块时，可以通过新增模块、替换组件等方式进行扩展，而不会对其他模块产生较大的影响。</p>
</li>
</ol>
<p>通过实现松耦合的设计，可以提高系统的可维护性、可测试性和可扩展性。松耦合的模块更易于理解、修改和重用，同时也降低了代码之间的耦合度，使得系统更加灵活和可靠。</p>
<p>举个例子</p>
<p>假设我们有一个简单的订单管理系统，包含订单模块和库存模块。下面是一个例子来说明松耦合的概念：</p>
<p>在紧耦合的设计中，订单模块和库存模块可能直接依赖于彼此的实现细节，相互之间存在强耦合关系。例如，订单模块可能直接调用库存模块的方法来查询库存情况，并根据库存数量进行一些处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderModule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InventoryModule inventory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderModule</span><span class="params">()</span> &#123;</span><br><span class="line">        inventory = <span class="keyword">new</span> <span class="title class_">InventoryModule</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取库存数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> inventory.getQuantity(order.getProduct());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据库存情况进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (quantity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 下单逻辑...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 库存不足逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，订单模块直接依赖于库存模块的实现，并且直接调用了库存模块的方法。这种紧耦合的设计存在以下问题：</p>
<ul>
<li>当库存模块的实现发生变化时，订单模块也需要相应地进行修改。</li>
<li>难以对订单模块和库存模块进行单独的测试，因为它们之间的关联性很高。</li>
</ul>
<p>相反，在松耦合的设计中，订单模块和库存模块之间通过接口进行通信，彼此之间不存在直接的依赖关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InventoryService</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getQuantity</span><span class="params">(String product)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderModule</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> InventoryService inventory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderModule</span><span class="params">(InventoryService inventory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.inventory = inventory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取库存数量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">quantity</span> <span class="operator">=</span> inventory.getQuantity(order.getProduct());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据库存情况进行处理</span></span><br><span class="line">        <span class="keyword">if</span> (quantity &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 下单逻辑...</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 库存不足逻辑...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，订单模块通过依赖注入的方式获取库存模块的实现，而不是直接实例化库存模块。这种松耦合的设计带来了以下好处：</p>
<ul>
<li>订单模块和库存模块之间解耦，它们可以独立地进行修改和扩展。</li>
<li>可以通过实现不同的<code>InventoryService</code>接口来切换不同的库存服务，而不会对订单模块的实现造成影响。</li>
<li>可以更方便地对订单模块和库存模块进行单独的测试，因为它们之间的关联性降低。</li>
</ul>
<p>这个例子展示了松耦合设计的思想，通过接口抽象和依赖注入等方式，实现了模块之间的解耦，提高</p>
<p>了系统的可维护性和扩展性。</p>
<p>什么是事务</p>
<p>事务（Transaction）是指一组数据库操作组成的逻辑单位，它要么全部执行成功，要么全部失败回滚。事务具有以下特性，通常被称为 ACID 特性：</p>
<ol>
<li><p>原子性（Atomicity）：事务中的操作要么全部执行成功，要么全部失败回滚，不存在部分执行的情况。如果事务中的任意操作失败，系统将撤销已经执行的操作，回滚到事务开始前的状态。</p>
</li>
<li><p>一致性（Consistency）：事务执行前和执行后，数据库的完整性约束没有被破坏。即使事务中的操作可能改变数据库中的数据状态，但是这些变化必须满足预定义的规则，确保数据库的一致性。</p>
</li>
<li><p>隔离性（Isolation）：并发执行的事务之间相互隔离，一个事务的执行不应该影响其他事务的结果。每个事务都应该感觉到自己是在独占地使用数据库，不会被其他事务干扰。</p>
</li>
<li><p>持久性（Durability）：一旦事务提交成功，其结果应该持久保存在数据库中，并且对于系统故障或崩溃的情况下也能够恢复。持久性保证了事务的结果不会因为系统故障而丢失。</p>
</li>
</ol>
<p>事务通常通过以下四个关键操作来管理：</p>
<ol>
<li><p>开始事务（BEGIN）：标记事务的开始，事务中的操作将被记录并可以进行回滚。</p>
</li>
<li><p>提交事务（COMMIT）：将事务中的操作应用到数据库，并使其成为永久性的更改。</p>
</li>
<li><p>回滚事务（ROLLBACK）：撤销事务中的操作，将数据库恢复到事务开始前的状态。</p>
</li>
<li><p>设置保存点（SAVEPOINT）：在事务中设置一个保存点，可以在回滚时将事务回滚到该保存点之前的状态。</p>
</li>
</ol>
<p>事务的使用可以确保数据库操作的一致性和完整性，特别是在并发环境下，可以避免数据的混乱和冲突。常见的数据库管理系统如 MySQL、Oracle、PostgreSQL 等都支持事务的概念和相关操作。在应用开发中，事务的正确使用可以保证数据的可靠性和一致性。</p>
<p>什么是分布式</p>
<p>分布式（Distributed）是指在多台计算机或多个节点上协同工作的系统或应用程序。在分布式系统中，多个计算节点通过网络相互连接，共同完成任务或提供服务，形成一个整体。</p>
<p>分布式系统的设计目标通常包括以下几个方面：</p>
<ol>
<li><p>可扩展性：能够方便地增加或减少计算节点，以应对负载的变化，实现水平扩展。</p>
</li>
<li><p>高可用性：通过冗余和故障转移机制，保证系统在部分节点或组件故障的情况下仍然可用。</p>
</li>
<li><p>容错性：分布式系统能够容忍节点或组件的故障，并且能够自动进行故障恢复。</p>
</li>
<li><p>性能：利用分布式计算资源，提高系统的计算、存储和网络性能。</p>
</li>
<li><p>数据一致性：在分布式环境下，保证数据在不同节点之间的一致性，避免数据的冲突和不一致。</p>
</li>
</ol>
<p>分布式系统面临的挑战和问题包括：</p>
<ol>
<li><p>通信和网络延迟：分布式系统依赖于网络进行节点之间的通信，网络延迟和不可靠性可能会影响系统的性能和可靠性。</p>
</li>
<li><p>数据一致性：在分布式环境下，多个节点可能并发地读写数据，需要采取合适的机制来保证数据的一致性。</p>
</li>
<li><p>并发控制：多个节点并发地进行计算和操作，需要解决并发访问共享资源的冲突问题。</p>
</li>
<li><p>故障处理：分布式系统中的节点可能会发生故障，需要采取故障检测和故障转移机制来保证系统的可用性。</p>
</li>
</ol>
<p>常见的分布式系统包括分布式数据库系统、分布式文件系统、分布式缓存系统等。分布式系统的设计和实现涉及到分布式算法、一致性协议、负载均衡、故障恢复等技术。分布式系统的优势在于提供高性能、可伸缩性和可靠性，但也增加了系统设计和管理的复杂性。</p>
<p>分布式数据库系统、分布式文件系统、分布式缓存系</p>
<p>分布式数据库系统（Distributed Database System）是一种将数据存储和处理分布在多个计算节点上的数据库系统。它允许数据在多个节点之间进行分片存储，并提供分布式查询和事务处理能力。</p>
<p>分布式数据库系统的设计目标是提高数据的可扩展性、可用性和性能。它通常具有以下特点：</p>
<ol>
<li><p>数据分片：将数据划分为多个分片，每个分片存储在不同的节点上，实现数据的分布存储。分片可以按照不同的策略进行，如范围分片、哈希分片等。</p>
</li>
<li><p>数据复制：为了提高数据的可用性和容错性，分布式数据库系统通常会对数据进行复制，并将副本存储在多个节点上。数据的复制可以采用同步复制或异步复制的方式。</p>
</li>
<li><p>数据一致性：在分布式环境下，确保数据的一致性是一个重要的挑战。分布式数据库系统通常使用一致性协议和机制来解决数据一致性的问题，如基于副本的一致性协议、分布式事务协议等。</p>
</li>
<li><p>查询优化和路由：分布式数据库系统需要考虑将查询请求路由到合适的节点上进行处理，并进行查询优化，以提高查询性能。</p>
</li>
</ol>
<p>分布式文件系统（Distributed File System）是一种将文件数据存储在多个计算节点上的文件系统。它将文件划分为多个块（Block），并将块分布存储在不同的节点上，实现文件的分布式存储和访问。</p>
<p>分布式文件系统的设计目标是提供高可用性、可扩展性和容错性。它通常具有以下特点：</p>
<ol>
<li><p>数据分布和复制：文件数据被划分为多个块，并将块分布存储在多个节点上。为了提高可用性和容错性，文件块通常会进行多次复制，并存储在不同的节点上。</p>
</li>
<li><p>文件访问和路由：分布式文件系统提供文件访问接口，可以通过文件名或文件路径进行文件的读取和写入操作。文件系统需要考虑将文件访问请求路由到存储了相应块的节点上。</p>
</li>
<li><p>一致性和一致性协议：分布式文件系统需要考虑多个节点之间的数据一致性问题。通常使用一致性协议和副本管理策略来保证数据的一致性。</p>
</li>
</ol>
<p>分布式缓存系统（Distributed Cache System）是一种将数据缓存分布在多个计算节点上的缓存系统。它通过在节点上存储一部分热点数据，以提高数据访问的性能和响应速度。</p>
<p>分布式缓存系统的设计目标是提供高速的数据访问和低延迟。它通常具有以下特点：</p>
<ol>
<li><p>数据分片和路由：缓存数据被分片存储在多个节点上，根据数据的键（Key）进行路由和访问。这样可以将缓存数据均匀分布在多个节点上，避免单个节点的负载过高。</p>
</li>
<li><p>缓存更新和失效：分布式缓存系统需要考虑缓存数据的更新和失效问题。当数据发生变化时，需要及时更新缓存数据；当数据过期或失效时，需要从后端数据源重新加载数据。</p>
</li>
<li><p>缓存一致性：在分布式缓存系统中，多个节点上的缓存数据需要保持一致。通常使用缓存一致性协议和缓存失效策略来解决数据一致性的问题。</p>
</li>
</ol>
<p>这些分布式系统在大规模、高并发的应用场景中发挥着重要作用，提供了可扩展性、高可用性和性能等方面的优势。它们的设计和实现涉及到分布式算法、一致性协议、数据分片和复制、负载均衡等技术。</p>
<p>希尔排序，c++</p>
<p>下面是一个使用C++实现的希尔排序算法示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义步长序列</span></span><br><span class="line">    <span class="type">int</span> gap = n / <span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 对每个步长进行插入排序</span></span><br><span class="line">    <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = gap; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> temp = arr[i];</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 在当前步长下进行插入排序</span></span><br><span class="line">            <span class="keyword">while</span> (j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp) &#123;</span><br><span class="line">                arr[j] = arr[j - gap];</span><br><span class="line">                j -= gap;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            arr[j] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 更新步长</span></span><br><span class="line">        gap /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试示例</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> arr[] = &#123;<span class="number">64</span>, <span class="number">34</span>, <span class="number">25</span>, <span class="number">12</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">90</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">sizeof</span>(arr) / <span class="built_in">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序前的数组: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">shellSort</span>(arr, n);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;排序后的数组: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码演示了如何使用C++实现希尔排序算法。在希尔排序中，通过不断缩小步长并对子序列进行插入排序，最终实现对整个序列的排序。该算法具有较高的效率和较好的平均时间复杂度。</p>
<p>1、cpu三级缓存，每层干什么<br>2、进程线程区别，进程通信方式<br>3、http长连接如何实现<br>4、get post区别，get请求参数过长如何解决<br>5、用户态，内核态区别，java线程属于哪一个状态原因，如何实现读写并发，读写内存<br>6、java常见集合类，线程安全的map<br>7、锁的实现方式，公平非公平锁优缺点<br>8、CAS，优缺点，缺点的解决<br>9、线程池核心参数<br>10、jvm类加载过程<br>11、聚簇索引，非聚簇索引，如何避免回表查找<br>12、最左匹配，行锁<br>13、常见事务隔离级别，生产环境使用哪个，隔离级别的影响<br>14、redis常用数据结构，排行榜使用什么<br>15、缓存穿透，雪崩，如何解决<br>16、你做项目最有收获的地方？<br>17、订单多次创建，幂等性问题</p>
<ol>
<li><p>CPU三级缓存的作用如下：</p>
<ul>
<li>第一级缓存（L1 Cache）：位于CPU内部，与CPU核心紧密相连，速度最快。用于存储最常用的数据和指令。</li>
<li>第二级缓存（L2 Cache）：位于CPU内部，较大容量，速度较快。用于存储CPU频繁访问但不在L1 Cache中的数据和指令。</li>
<li>第三级缓存（L3 Cache）：位于CPU外部，容量更大，速度较慢。用于存储CPU访问次数较少但仍然需要快速访问的数据和指令。</li>
</ul>
<p>CPU缓存的目的是提高CPU的数据访问速度，通过将常用的数据和指令存储在高速缓存中，减少了对主内存的访问次数，从而加快程序的执行速度。</p>
</li>
<li><p>进程和线程的区别：</p>
<ul>
<li>进程是程序的执行实例，是操作系统进行资源分配和调度的基本单位。每个进程都拥有独立的内存空间，包括代码、数据和堆栈等。</li>
<li>线程是进程的执行单元，一个进程可以包含多个线程。线程共享进程的内存空间，包括代码、数据和堆栈等，因此线程之间的数据共享较为方便。</li>
</ul>
<p>进程间通信的方式包括管道、信号量、共享内存、消息队列等。</p>
</li>
<li><p>HTTP长连接的实现是通过在一个TCP连接上进行多次HTTP请求和响应，而不是每次请求都建立和关闭一次TCP连接。在HTTP请求头中使用<code>Connection: keep-alive</code>来表示使用长连接。</p>
</li>
<li><p>GET和POST是HTTP协议中的两种常见请求方法：</p>
<ul>
<li>GET请求用于获取资源，参数通过URL的查询字符串传递，有长度限制，一般用于查询数据。</li>
<li>POST请求用于提交数据，参数通过请求体传递，没有长度限制，一般用于提交表单数据或上传文件。</li>
</ul>
<p>如果GET请求的参数过长，可以将参数放在请求体中进行POST请求，或者使用分段请求等方式将参数拆分为多个请求。</p>
</li>
<li><p>用户态和内核态是CPU执行指令时的两种工作模式：</p>
<ul>
<li>用户态：程序运行在用户空间，只能访问受限资源，无法直接访问硬件和操作系统内核。</li>
<li>内核态：操作系统运行在内核空间，可以访问系统的所有资源和硬件。</li>
</ul>
<p>Java线程属于用户态，因为Java虚拟机（JVM）是运行在用户空间的，Java线程的调度和管理是由JVM负责的。</p>
<p>读写并发可以通过使用锁机制（如读写锁</p>
</li>
</ol>
<p>）或使用线程安全的数据结构来实现。读操作可以并发执行，写操作需要互斥进行。</p>
<ol start="6">
<li><p>Java常见的集合类包括ArrayList、LinkedList、HashMap、HashSet等。线程安全的Map有ConcurrentHashMap。</p>
</li>
<li><p>锁的实现方式包括悲观锁和乐观锁。公平锁和非公平锁是悲观锁的两种实现方式：</p>
<ul>
<li>公平锁：按照申请锁的顺序来获取锁，遵循先来先得的原则。</li>
<li>非公平锁：不保证按照申请锁的顺序来获取锁，允许插队。</li>
</ul>
<p>公平锁的优点是保证了资源的公平性，缺点是可能导致线程频繁切换。非公平锁的优点是效率较高，缺点是可能会导致某些线程长时间无法获取锁。</p>
</li>
<li><p>CAS（Compare and Swap）是一种无锁算法，用于实现多线程环境下的原子操作。CAS操作包括读取一个内存位置的值、比较该值与预期值、根据比较结果来更新内存位置的值。</p>
<p>CAS的优点是无锁、高效，可以避免线程的切换和阻塞等开销。缺点是当多个线程同时执行CAS操作时，只有一个线程能成功，其他线程需要重新尝试，可能导致性能下降。</p>
<p>CAS的缺点可以通过使用自旋锁或者将CAS操作转化为有锁的操作来解决。</p>
</li>
<li><p>线程池的核心参数包括线程池大小、核心线程数、最大线程数、线程空闲时间等。线程池的大小决定了可以同时执行的任务数量，核心线程数是线程池中保持活动状态的线程数，最大线程数是线程池中允许存在的最大线程数，线程空闲时间是线程在无任务可执行时保持活动状态的时间。</p>
</li>
<li><p>JVM的类加载过程包括加载、验证、准备、解析和初始化五个阶段。加载阶段将类的字节码加载到内存中，验证阶段验证字节码的正确性，准备阶段为类的静态变量分配内存并初始化默认值，解析阶段将符号引用转换为直接引用，初始化阶段执行类的初始化代码，包括静态变量的赋值和静态代码块的执行。</p>
</li>
<li><p>聚簇索引是将数据行存储在磁盘上物理上相邻的位置，非聚簇索引是将索引项存储在磁盘上物理上相邻的位置。为了避免</p>
</li>
</ol>
<p>回表查找，可以将需要的列都包含在索引中，这样就可以通过索引直接获取所需数据，而不需要再次访问表。</p>
<ol start="12">
<li><p>最左匹配指的是在查询条件中使用多列索引时，索引列的顺序对查询的效率有影响，查询条件中使用的索引列的顺序要与索引定义的列的顺序一致，才能发挥最佳的索引效果。行锁是数据库中的锁机制，用于保证并发操作的一致性和数据的完整性。</p>
</li>
<li><p>常见的事务隔离级别有读未提交、读已提交、可重复读和串行化。在生产环境中一般使用读已提交（Read Committed）隔离级别。事务隔离级别的选择会影响并发性能和数据的一致性。</p>
</li>
<li><p>Redis常用的数据结构有字符串（String）、哈希表（Hash）、列表（List）、集合（Set）和有序集合（Sorted Set）。排行榜可以使用有序集合来实现，将每个成员作为排名对象，分数作为排名标准。</p>
</li>
<li><p>缓存穿透是指缓存和数据库中都没有需要的数据，导致每次请求都穿透缓存访问数据库，解决方式可以使用布隆过滤器过滤不存在的数据。缓存击穿是指某个热点数据失效，导致大量请求同时访问数据库，解决方式可以使用互斥锁或者设置短暂的缓存过期时间。缓存雪崩是指大量缓存同时失效，导致所有请求都直接访问数据库，解决方式可以设置随机的缓存过期时间或使用分布式缓存方案。</p>
</li>
<li><p>在项目中最有收获的地方可以是技术的成长、解决复杂问题的经验、与团队合作的能力提升等。</p>
</li>
<li><p>订单多次创建可能导致幂等性问题，即多次创建的结果不一致。可以通过在创建订单时使用唯一标识符（如订单号）来确保幂等性，当重复创建时，检查该标识符是否已存在，如果已存在则不执行重复创建操作。</p>
</li>
</ol>
<p>学校的主要课程（说了一堆，他问我有没有学过数据结构，我说有）<br>归并排序的原理？<br>快排的原理？<br>你刚刚说到快排取中间值，怎么取的？<br>为什么快排要取随机值？<br>快排在最坏的情况下和冒泡比谁快，为什么？<br>时间复杂度是怎么算的？（不会）<br>数据库了解多少（说了mysql、redis、mongoDB、elasticsearch，说对mysql和redis比较熟悉）<br>mysql有多少种索引（他说我在背书）<br>你平时是怎么用索引的<br>存储过程和函数知道吗，分别是什么<br>redis的特性<br>redis集群有搭建过吗（我说没有搭建过，他直接不问了，这个背了的，下次直接说搭建过）<br>DDD是什么，全称是什么，怎么理解DDD？<br>有没有不是学习的项目（没懂什么意思问了下，我说青训营项目和学校比赛的，他说这只能算学习项目。然后说了下在公司做的项目，介绍了下公司的项目的背景和做的事情）<br>前端了解多少，vue能用到什么水平，jQuery会用吗？<br>我们有两个base上海和广东，你更倾向哪个？（广东）<br>你对自己怎么定义，期望薪资多少（定义：只想干后端，纯后端）</p>
<p>学校的主要课程可以包括数据结构、算法设计与分析、操作系统、数据库系统、计算机网络、软件工程等。</p>
<p>归并排序的原理是将待排序的序列不断分割成较小的子序列，然后将这些子序列进行合并，合并过程中按照顺序将元素进行比较和排序，最终得到一个有序的序列。</p>
<p>快速排序的原理是选择一个基准元素，通过将待排序序列分割成左右两个子序列，使得左边的序列元素都小于等于基准元素，右边的序列元素都大于等于基准元素。然后对左右子序列递归地进行快速排序，最终得到一个有序的序列。</p>
<p>快排取中间值是指在选择基准元素时，取待排序序列的中间位置的元素作为基准元素。</p>
<p>快排要取随机值是为了避免最坏情况的发生，即待排序序列已经是有序的或者近乎有序的情况下，如果每次选择的基准元素都是最大或最小值，快排的效率会降低。通过随机选择基准元素，可以增加快排的平均性能。</p>
<p>快排在最坏的情况下比冒泡排序更快，因为快排采用分治的思想，将序列分割成较小的子序列进行排序，可以减少比较和交换的次数，而冒泡排序是通过相邻元素的比较和交换进行排序，所以在最坏情况下，快排的时间复杂度要低于冒泡排序。</p>
<p>时间复杂度是一种衡量算法运行时间与输入规模的关系的度量方式。通常使用大O表示法来表示时间复杂度，例如O(n)、O(n^2)等。时间复杂度可以通过分析算法的执行次数或基本操作的执行次数来推导得出。</p>
<p>数据库方面，我对MySQL和Redis比较熟悉。MySQL是一种关系型数据库，常用于存储结构化数据，具有良好的事务支持和丰富的查询功能。Redis是一种基于内存的键值存储系统，常用于缓存和高速读写场景。</p>
<p>MySQL有多种索引，包括主键索引、唯一索引、普通索引、全文索引等。索引的作用是提高数据的查询效率，通过创建索引可以快速定位到符合条件的数据行。</p>
<p>我在使用索引时，会根据查询的条件和字段的选择性来决定是否创建索引。对于经常被查询的字段或常用作查询条件的字段，可以</p>
<p>考虑创建索引以提高查询性能。但同时也需要注意索引的维护成本和对更新操作的影响。</p>
<p>存储过程和函数是数据库中的两种可执行的程序单元。存储过程是一组预编译的SQL语句集合，可接受参数和返回结果。函数是一个具有输入参数和返回值的可执行程序单元。它们都可以封装一些复杂的业务逻辑，在数据库端执行，减少网络开销和提高执行效率。</p>
<p>Redis具有高性能、高并发、持久化、发布订阅、主从复制、集群等特性。它是一种基于键值对的内存数据库，常用于缓存、队列、计数器等场景。</p>
<p>关于Redis集群，我虽然没有具体搭建过，但我对Redis集群的原理和搭建方式有一定的了解。Redis集群采用分布式的方式存储数据，通过数据分片和节点间的数据复制来实现数据的高可用性和扩展性。可以通过在多个Redis节点之间进行数据的分布和复制来实现数据的负载均衡和容错性。</p>
<p>什么是mysql的索引</p>
<p>MySQL的索引是一种数据结构，用于提高数据库查询操作的效率。索引是在表中某一列或多列上创建的，它们包含了对数据行的引用，以便可以快速定位到满足特定条件的数据行。</p>
<p>MySQL的索引可以分为以下几种类型：</p>
<ol>
<li><p>主键索引（Primary Key Index）：用于唯一标识表中的每一行数据。主键索引在创建表时可以指定，如果没有显式指定，则会自动创建一个隐藏的主键索引。</p>
</li>
<li><p>唯一索引（Unique Index）：用于保证索引列的值在表中是唯一的。唯一索引可以包含空值，但每个非空值只能出现一次。</p>
</li>
<li><p>普通索引（Normal Index）：也称为非唯一索引，用于加快查询速度。多个行可以具有相同的索引值。</p>
</li>
<li><p>全文索引（Full-text Index）：用于在文本数据上执行全文搜索。全文索引适用于大量文本内容的查询，支持关键词搜索和自然语言搜索。</p>
</li>
<li><p>组合索引（Composite Index）：由多个列组合而成的索引，用于加快多列条件查询的速度。组合索引的顺序很重要，根据查询的列顺序来决定是否能够有效使用索引。</p>
</li>
</ol>
<p>索引可以提高查询的速度，因为它们可以减少需要扫描的数据量。然而，索引也会增加数据插入、更新和删除的成本，因为每次修改数据时都需要更新索引。因此，在设计数据库时，需要根据查询的频率和更新的频率来合理地选择索引，以平衡查询性能和数据维护的开销。</p>
<p>有序集合（Sorted Set）</p>
<p>有序集合（Sorted Set）是Redis中的一种数据结构，它类似于集合（Set），但每个元素都关联着一个”分数”（score），通过分数的排序可以将元素按照一定顺序进行存储和访问。</p>
<p>有序集合的特点包括：</p>
<ol>
<li><p>元素的唯一性：每个元素在有序集合中是唯一的，不会存在重复元素。</p>
</li>
<li><p>元素的排序：每个元素都有一个关联的分数，通过分数进行排序。分数可以是浮点数或整数，根据分数的值来决定元素的顺序。</p>
</li>
<li><p>快速的插入、删除和查找：有序集合使用了内部的数据结构（跳表和哈希表）来实现高效的插入、删除和查找操作。</p>
</li>
</ol>
<p>有序集合在实际应用中有广泛的用途，例如：</p>
<ul>
<li><p>排行榜：可以使用有序集合来存储用户的得分，并根据得分进行排名和排序。</p>
</li>
<li><p>计数器：可以使用有序集合来存储计数器的值，每次增减操作都可以更新对应元素的分数。</p>
</li>
<li><p>范围查找：可以根据分数的范围进行查找操作，快速找到满足条件的元素。</p>
</li>
<li><p>任务调度：可以使用有序集合来存储任务的执行时间，按照时间顺序获取需要执行的任务。</p>
</li>
</ul>
<p>有序集合提供了一种灵活且高效的数据结构，能够满足多种场景下的排序和查找需求。在Redis中，可以使用一系列的命令对有序集合进行操作，如添加元素、删除元素、按照分数范围查找等。</p>
<p>底层是什么</p>
<p>在Redis中，有序集合（Sorted Set）的底层数据结构是一个叫做”跳跃表”（Skip List）的数据结构。跳跃表是一种有序的数据结构，通过在普通链表的基础上添加多级索引，提供了快速的查找和插入操作。</p>
<p>跳跃表的特点包括：</p>
<ol>
<li><p>有序性：跳跃表中的元素按照一定的顺序进行排列，可以根据元素的分数进行快速的有序查找。</p>
</li>
<li><p>多级索引：跳跃表通过添加多级索引来加速查找操作，索引层数越高，查找速度越快。每一层索引都是一个有序链表，其中每个节点保存了下一层索引的指针。</p>
</li>
<li><p>空间效率：跳跃表在维持有序性的同时，也要尽量减少额外的空间消耗。相比于平衡树等其他数据结构，跳跃表具有较好的空间效率。</p>
</li>
</ol>
<p>跳跃表是一种高效的数据结构，适用于需要有序性和快速查找的场景。在Redis中，有序集合使用跳跃表作为底层数据结构，使得有序集合具备了快速插入、删除和按分数范围查找的能力。</p>
<p>怎么解决死锁</p>
<p>死锁是多线程或多进程程序中常见的一个问题，它发生在两个或多个线程或进程相互等待对方释放资源的情况下，导致程序无法继续执行。解决死锁问题需要采取一些策略和技术，以下是一些常见的方法：</p>
<ol>
<li><p><strong>避免死锁</strong>：通过合理地设计系统和资源分配策略，避免进程或线程陷入死锁的状态。这可以通过合理的资源分配顺序、资源申请的限制和超时机制等来实现。</p>
</li>
<li><p><strong>使用资源分配图</strong>：通过绘制资源分配图，可以分析出哪些资源被哪些进程或线程占用，从而更好地了解可能导致死锁的情况。根据图中的信息，可以调整资源分配策略以避免死锁。</p>
</li>
<li><p><strong>引入超时机制</strong>：在等待资源时，引入超时机制，如果等待时间过长，可以放弃当前请求，释放已占用的资源，避免进程或线程一直等待而导致死锁。</p>
</li>
<li><p><strong>按序申请资源</strong>：确保进程或线程按照特定的顺序申请资源，避免出现循环等待的情况。</p>
</li>
<li><p><strong>使用资源分级</strong>：将资源划分为不同的等级，确保进程或线程只能按照一定顺序申请资源，避免相互等待。</p>
</li>
<li><p><strong>采用死锁检测和恢复机制</strong>：实现死锁检测算法，及时检测出死锁的发生，然后采取恢复措施，比如回退资源分配、终止部分进程等。</p>
</li>
<li><p><strong>精心规划资源释放策略</strong>：在申请资源后，规划好资源的释放策略，避免长时间持有资源而阻塞其他进程。</p>
</li>
<li><p><strong>使用同步原语</strong>：合理使用锁、信号量等同步原语，确保资源的访问是有序的，从而避免死锁。</p>
</li>
<li><p><strong>引入资源预约</strong>：资源预约机制可以使进程在申请资源之前提前预约所需资源，从而降低死锁的可能性。</p>
</li>
<li><p><strong>监控和报警系统</strong>：实现监控系统，及时发现死锁问题并触发警报，便于及时处理。</p>
</li>
</ol>
<p>解决死锁是一个复杂的问题，需要根据具体情况采取不同的策略和方法。在编写多线程或多进程程序时，需要充分考虑资源分配和释放的顺序，以及合理地设计同步机制，从而避免死锁问题的发生。</p>
<p>你提出了许多问题，我会逐一回答：</p>
<ol>
<li><p><strong>MySQL的binlog和redolog如何保证一致性？</strong></p>
<ul>
<li>MySQL的binlog和redolog都是用于事务的持久化和恢复，但它们服务于不同的目的。Redo log是在事务提交前记录，以保证事务的持久性。Binlog记录的是逻辑日志，可以用于复制和恢复。</li>
<li>一致性是通过在事务提交前将操作记录到redo log，并在事务提交后再记录到binlog，来保证的。如果在提交前出现问题，MySQL可以通过redo log进行恢复。如果在提交后出现问题，binlog可以用于恢复。</li>
</ul>
</li>
<li><p><strong>类加载时class文件加载到JVM的什么区域？</strong></p>
<ul>
<li>类加载时的class文件会加载到JVM的方法区（Metaspace）中。方法区存储类的结构信息、静态变量、常量池等。</li>
</ul>
</li>
<li><p><strong>父类加载器能访问子类加载器吗？反过来呢？</strong></p>
<ul>
<li>父类加载器可以访问子类加载器加载的类，但反过来是不行的。这是由类加载器的双亲委派模型所决定的。</li>
</ul>
</li>
<li><p><strong>父类怎么访问子类？</strong></p>
<ul>
<li>父类无法直接访问子类，因为子类可能在不同的类加载器命名空间中。如果需要进行类的转型操作，应该在具体使用的位置进行。</li>
</ul>
</li>
<li><p><strong>OOM实际解决过吗？看过MySQL和Redis源码吗？</strong></p>
<ul>
<li>这是多个问题，是的，我可以帮助解决OOM问题。我也熟悉MySQL和Redis的基本工作原理，但可能并不深入。</li>
</ul>
</li>
<li><p><strong>喜欢研究算法还是工程？</strong></p>
<ul>
<li>我是一个AI模型，没有情感，但我能够处理算法和工程问题。</li>
</ul>
</li>
<li><p><strong>抽奖系统设计题：怎么保证中奖者一定能收到奖品？考虑发奖失败的情况？高概率的热门奖品怎么处理？库存hotkey遇到超高并发怎么办？</strong></p>
<ul>
<li>这是一个比较复杂的设计问题，需要考虑分布式事务、消息队列等方案，以确保中奖者能够收到奖品，同时保证系统的可用性和一致性。</li>
</ul>
</li>
<li><p><strong>synchronized实现底层？</strong></p>
<ul>
<li><code>synchronized</code> 的实现底层是通过对象头中的标志位来实现的，当线程进入同步块时会尝试获取锁，如果锁已被其他线程占用，线程会被阻塞，直到锁被释放。</li>
</ul>
</li>
<li><p><strong>什么叫死锁？写出SQL模拟一个死锁。</strong></p>
<ul>
<li>死锁是指两个或多个进程（线程）在互相等待对方持有的资源，从而造成的一种僵局。例如：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Session 1</span></span><br><span class="line"><span class="keyword">UPDATE</span> table1 <span class="keyword">SET</span> column1 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Session 2</span></span><br><span class="line"><span class="keyword">UPDATE</span> table2 <span class="keyword">SET</span> column2 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Session 1</span></span><br><span class="line"><span class="keyword">UPDATE</span> table2 <span class="keyword">SET</span> column2 <span class="operator">=</span> <span class="number">2</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">2</span>; <span class="comment">-- 等待 table2 的锁</span></span><br><span class="line"><span class="comment">-- Session 2</span></span><br><span class="line"><span class="keyword">UPDATE</span> table1 <span class="keyword">SET</span> column1 <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>; <span class="comment">-- 等待 table1 的锁</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>保证分布式一致性的所有方法？</strong></p>
<ul>
<li>一致性算法如 Paxos、Raft，分布式锁，分布式事务，消息队列，分布式数据存储等。</li>
</ul>
</li>
<li><p><strong>一条Java代码执行会发生什么，说得越底层越好。</strong></p>
<ul>
<li>一条Java代码的执行包括：编译为字节码、类加载、字节码解释、即时编译（JIT）等阶段。字节码解释和JIT编译会生成本地机器码，进而被CPU执行。</li>
</ul>
</li>
<li><p><strong>实习过程中干什么最有成就感？</strong></p>
<ul>
<li>我没有情感，但通常实习过程中完成一个复杂的任务、解决一个难题或者看到自己的工作产生实际影响会带来成就感。</li>
</ul>
</li>
<li><p><strong>觉得设计模式的意义是什么，真的必要吗？</strong></p>
<ul>
<li>设计模式是为了解决软件设计中的常见问题而提出的一些通用解决方案。在合适的情况下，设计模式可以使代码更具可读性、可维护性和扩展性，但并不是所有情况都需要使用设计模式。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>面经</category>
      </categories>
      <tags>
        <tag>面经</tag>
      </tags>
  </entry>
  <entry>
    <title>面试经验</title>
    <url>/post/%E9%9D%A2%E8%AF%95.html</url>
    <content><![CDATA[<p>大佬的进大厂经验：<code>https://ltyzzzxxx.github.io/2023/06/06/%E9%9D%A2%E8%AF%95%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</code></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试经验</tag>
      </tags>
  </entry>
  <entry>
    <title>面试杂项</title>
    <url>/post/%E9%9D%A2%E8%AF%95-%E6%9D%82%E9%A1%B9.html</url>
    <content><![CDATA[<h1 id="Java后端——瑞吉外卖项目提问及回答"><a href="#Java后端——瑞吉外卖项目提问及回答" class="headerlink" title="Java后端——瑞吉外卖项目提问及回答"></a>Java后端——瑞吉外卖项目提问及回答</h1><p>1、在瑞吉外卖项目中，后端API设计和开发需要考虑哪些问题？</p>
<p>在瑞吉外卖项目中，后端API的设计和开发需要考虑以下几个问题：</p>
<ol>
<li><p>功能需求：首先需要明确外卖项目的功能需求，包括用户注册、登录、浏览菜单、下单、支付、订单管理等功能。这些需求将指导后端API的设计和实现。</p>
</li>
<li><p>数据模型设计：根据功能需求，设计合适的数据模型来存储用户信息、菜单信息、订单信息等数据。考虑到外卖项目通常需要处理大量订单，对数据模型的设计要充分考虑性能和扩展性。</p>
</li>
<li><p>API设计：确定API的端点（endpoints）和操作（operations）。每个端点对应一个特定的功能，例如获取菜单信息、创建订单等。定义清晰的API接口，并采用一致的命名和参数约定，以便于前端开发人员的使用和理解。</p>
</li>
<li><p>认证和授权：外卖项目通常需要身份认证和授权机制，以确保只有经过验证的用户可以访问敏感数据和执行特定操作。设计适当的认证和授权机制，例如使用JSON Web Token（JWT）进行用户认证，并为不同的用户角色分配不同的权限。</p>
</li>
<li><p>安全性考虑：在API设计和开发中，要考虑数据的安全性。使用加密协议（例如HTTPS）传输敏感数据，防止信息泄露。对用户输入进行有效的验证和过滤，以防止常见的安全漏洞，如SQL注入和跨站脚本攻击（XSS）。</p>
</li>
<li><p>性能和可扩展性：外卖项目可能会面临大量的并发请求，因此后端API需要具备高性能和可扩展性。优化数据库查询、使用缓存技术、进行水平扩展等方法可以提高API的性能和可伸缩性。</p>
</li>
<li><p>错误处理和日志记录：良好的错误处理和日志记录是后端API设计的重要组成部分。定义清晰的错误码和错误信息，并提供有意义的错误响应，方便前端开发人员进行故障排除和错误处理。同时，记录关键操作和异常情况的日志，有助于监控和故障排查。</p>
</li>
<li><p>文档和测试：编写详细的API文档，描述每个端点的使用方法、参数和返回结果等信息。同时，进行充分的单元测试和集成测试，确保API的功能和性能符合预期，并及早发现和修复潜在的问题。</p>
</li>
</ol>
<p>综上所述，后端API设计和开发需要考虑功能需求、数据模型设计、API设计、认证和授权、安全性、性能和可扩展性、错误处理和日志记录，以及文档和测试等方面。此外，还有一些其他值得考虑的问题：</p>
<ol start="9">
<li><p>输入验证和数据处理：在处理用户输入时，进行有效的验证和数据处理是至关重要的。确保输入的数据符合预期的格式和范围，以防止潜在的错误和安全漏洞。处理异常情况和边界条件，并提供适当的错误消息或反馈，使系统更加健壮和用户友好。</p>
</li>
<li><p>性能优化：针对常见的性能瓶颈进行优化是后端API设计的重要任务。可以通过合理的数据库索引设计、查询优化、缓存策略、异步任务处理等方式来提高系统的响应速度和吞吐量。</p>
</li>
<li><p>扩展性和可维护性：考虑项目的未来发展和需求变化，设计具有良好扩展性和可维护性的后端API架构。使用模块化和分层设计原则，将功能模块解耦，使得项目可以更容易地添加新功能或进行修改和维护。</p>
</li>
<li><p>监控和日志：建立适当的监控系统，用于实时监测API的性能指标、错误率和异常情况。记录和分析日志信息，包括请求日志、错误日志和系统事件日志，以便及时发现和解决潜在的问题，并进行系统性能分析和故障排查。</p>
</li>
<li><p>API版本控制：当外卖项目不断迭代和更新时，可能会引入对API接口的更改。为了保持与旧版本的兼容性，并确保客户端的平稳过渡，考虑采用API版本控制机制，例如在URL中包含版本号或使用HTTP请求头中的版本信息。</p>
</li>
<li><p>第三方集成：外卖项目可能需要与其他系统或服务进行集成，例如支付网关、短信通知服务、地图服务等。在后端API设计中，要考虑如何与这些第三方服务进行交互和集成，确保数据的安全性和一致性。</p>
</li>
<li><p>扩展API文档：除了基本的API文档外，考虑为开发人员提供更丰富的文档和资源，包括示例代码、SDK（软件开发工具包）、API授权机制等，以便于他们更轻松地使用和集成后端API。</p>
</li>
</ol>
<p>总体而言，后端API设计和开发需要综合考虑功能需求、数据模型设计、API设计、安全性、性能优化、错误处理、文档和测试等方面，以构建高效、安全、可扩展和易于维护的外卖项目后端系统。</p>
<p>2、对于瑞吉外卖项目的数据模型设计，可以考虑以下几个核心实体和它们之间的关系：</p>
<ol>
<li><p>用户(User)：表示注册和使用外卖服务的用户信息。用户实体可以包含属性如用户ID、用户名、密码（哈希加密后存储）、电子邮件、电话号码等。此外，还可以考虑用户地址(Address)作为用户的关联实体，包含属性如街道、城市、州&#x2F;省份、邮政编码等。</p>
</li>
<li><p>菜品(Item)：表示瑞吉外卖提供的菜品信息。菜品实体可以包含属性如菜品ID、名称、描述、价格、图片URL等。</p>
</li>
<li><p>菜单(Menu)：表示瑞吉外卖的菜单，包含不同种类的菜品。菜单实体可以包含属性如菜单ID、名称、描述等。菜单与菜品之间可以建立关联关系，以表示一个菜单包含多个菜品。</p>
</li>
<li><p>订单(Order)：表示用户下的订单信息。订单实体可以包含属性如订单ID、用户ID、下单时间、总价、状态等。订单与菜品之间是多对多的关系，一个订单可以包含多个菜品，而一个菜品也可以出现在多个订单中。因此，需要引入一个关联表（OrderItem）来存储订单与菜品之间的关系。</p>
</li>
<li><p>支付(Payment)：表示用户的支付信息。支付实体可以包含属性如支付ID、订单ID、支付时间、支付方式、支付金额等。支付与订单之间是一对一的关系，每个订单只对应一个支付信息。</p>
</li>
</ol>
<p>通过以上的数据模型设计，可以实现用户的注册和登录功能，浏览菜单和下单功能，以及订单管理和支付功能。在实际的开发过程中，可以根据具体需求和业务场景进行进一步的调整和扩展。此外，还可以考虑添加其他实体和关系，如配送员(Delivery Person)、评论(Review)等，以满足更多的业务需求。</p>
<p>3在瑞吉外卖开发过程中遇到的最大挑战是什么以及如何解决的，以下回答作为参考：</p>
<p>在瑞吉外卖的开发过程中，遇到的最大挑战是处理高并发请求和保证系统的性能和可扩展性。当用户量增加并且同时有多个用户在下单和浏览菜单时，后端系统需要能够快速响应并处理大量的请求，同时保持良好的用户体验。</p>
<p>为了解决这个挑战，我们采取了以下几个措施：</p>
<ol>
<li><p>基础架构优化：对系统的基础架构进行优化，包括选择高性能的服务器和数据库，合理分配和配置服务器资源，以提高系统的整体性能。</p>
</li>
<li><p>缓存机制：引入缓存机制来减轻数据库的负载。对于频繁读取的数据，例如菜单信息，可以将其缓存在内存中，减少对数据库的查询次数，提高响应速度。</p>
</li>
<li><p>异步任务处理：使用异步任务队列，将一些耗时的操作，如订单的支付和配送任务，放入任务队列中进行处理，以避免阻塞主线程并提高并发处理能力。</p>
</li>
<li><p>水平扩展：根据实际需求，采用水平扩展的方式增加服务器数量，通过负载均衡来分担请求的压力。这可以通过使用容器化技术和自动化部署工具来实现，以快速扩展和管理系统的实例。</p>
</li>
<li><p>性能测试和优化：进行系统的性能测试，识别瓶颈和性能瓶颈，并进行相应的优化。可以使用压力测试工具模拟大量并发请求，并监控系统的响应时间、资源利用率和吞吐量，以发现并解决性能瓶颈问题。</p>
</li>
<li><p>监控和日志：建立监控系统来实时监测系统的性能指标、错误率和异常情况。通过日志记录关键操作和异常情况，可以及时发现问题并进行故障排查。</p>
</li>
</ol>
<p>通过采取以上措施，我们能够成功地应对高并发请求的挑战，并保证瑞吉外卖系统的性能和可扩展性。当然，解决这个挑战也需要团队的合作和不断的迭代优化，以适应不断增长的用户需求和业务发展。</p>
<p>4、在瑞吉外卖项目中进行性能测试和优化，可以按照以下步骤进行：</p>
<ol>
<li><p>设定性能测试目标：明确性能测试的目标，例如确定系统需要支持的并发用户数、响应时间的要求等。这些目标将作为评估系统性能的标准。</p>
</li>
<li><p>创建测试场景：根据实际使用情况和预期的负载模式，创建符合实际场景的性能测试场景。考虑用户的行为、请求类型、并发用户数等因素，并设计相应的测试用例。</p>
</li>
<li><p>选择性能测试工具：选择适合的性能测试工具，常见的工具包括Apache JMeter、LoadRunner、Gatling等。根据项目需求和团队的熟悉程度选择合适的工具。</p>
</li>
<li><p>配置测试环境：建立一个与生产环境相似的测试环境，包括服务器、网络设置和数据库等。确保测试环境与实际生产环境尽可能一致，以获得准确的性能测试结果。</p>
</li>
<li><p>执行性能测试：使用选定的性能测试工具配置和运行性能测试。模拟实际负载情况，逐步增加并发用户数和请求量，记录系统的响应时间、吞吐量和错误率等指标。</p>
</li>
<li><p>分析性能测试结果：对性能测试结果进行详细分析，识别潜在的性能瓶颈和问题。关注响应时间较长的接口、高负载下的系统资源使用情况、数据库查询性能等方面。</p>
</li>
<li><p>优化性能瓶颈：根据性能测试结果，采取相应的优化措施来解决性能瓶颈。可能的优化策略包括数据库查询优化、缓存的使用、代码逻辑优化、并发处理的优化等。</p>
</li>
<li><p>重复测试和迭代优化：对优化后的系统进行再次性能测试，验证优化效果，并持续监测和调整系统的性能。进行迭代优化，根据需求和实际情况进行改进和调整。</p>
</li>
<li><p>监控和日志记录：建立监控系统，实时监测系统的性能指标、错误率和异常情况。记录关键操作和异常情况的日志，以便及时发现问题并进行故障排查。</p>
</li>
</ol>
<p>通过以上步骤，可以评估系统的性能，发现和解决潜在的性能瓶颈，并持续优化瑞吉外卖项目的性能。重要的是持续关注系统性能，以满足用户需求并提供良好的用户体验。</p>
<p>5、要实现前后端分离，在瑞吉外卖项目中，可以采用以下步骤：</p>
<ol>
<li><p>定义前后端职责：明确前端和后端各自的职责和任务。前端负责用户界面设计和交互逻辑，后端负责处理业务逻辑、数据存储和与前端的数据交互。</p>
</li>
<li><p>设计API接口：定义前后端之间的API接口，规定数据的格式、请求方法和参数等。可以使用RESTful API设计原则，使前后端之间的通信更加规范和易于理解。</p>
</li>
<li><p>前端开发：前端开发团队根据API接口的定义，使用适当的前端框架（如React、Angular、Vue.js等）进行界面设计和开发。前端团队与后端团队密切合作，确保前端界面能够正确地与后端API进行交互。</p>
</li>
<li><p>后端开发：后端开发团队根据前端的需求和API接口的定义，负责业务逻辑的实现和数据存储。后端开发团队可以选择合适的后端技术框架（如Django、Spring Boot、Express.js等），实现API接口的具体逻辑。</p>
</li>
<li><p>接口对接和调试：前后端开发完成后，进行接口对接和调试。前端开发团队使用模拟数据或者假数据来模拟后端的响应，确保前后端的接口能够正确地进行数据交换和通信。</p>
</li>
<li><p>独立部署：前后端开发完成后，可以将前端代码和后端代码分别部署到不同的服务器或者服务端。前端代码可以部署到Web服务器或者CDN上，后端代码可以部署到应用服务器或者云平台上。</p>
</li>
<li><p>跨域处理：由于前后端分离时前端和后端运行在不同的域上，可能会涉及跨域请求的问题。需要在后端进行跨域处理，允许前端的跨域请求。</p>
</li>
<li><p>安全性考虑：在前后端分离的架构中，需要特别注意数据的安全性。采取适当的安全措施，如使用HTTPS协议进行数据传输、使用身份验证和授权机制保护API接口等，以确保系统的安全性。</p>
</li>
</ol>
<p>通过以上步骤，瑞吉外卖项目可以成功实现前后端分离，提高开发效率和系统的可扩展性。前后端团队可以并行开发，各自专注于自己的领域，提供更好的用户体验和灵活的系统架构。</p>
<p>6、如果数据库每天的数据增量为5万条，需要使用三年，以下是一些实施方案来确保数据库的正常运行：</p>
<ol>
<li><p>容量规划：评估数据库的容量需求，并确保数据库服务器的存储空间能够满足未来三年的数据增长。根据数据增长速度和存储需求，考虑增加硬盘容量或扩展存储解决方案。</p>
</li>
<li><p>数据库分区：根据数据增长的趋势和查询模式，考虑将数据库进行分区。可以按照时间范围、地理位置或其他逻辑规则划分数据，以提高查询性能和管理效率。分区可以基于数据库本身的分区功能或应用层逻辑实现。</p>
</li>
<li><p>索引优化：设计和优化数据库的索引以支持快速查询和数据检索。评估查询模式和频率，并相应地创建索引以提高查询性能。定期审查和优化索引，确保索引的有效性和适应性。</p>
</li>
<li><p>查询性能调优：监控数据库查询的性能，并进行必要的调优。分析慢查询，识别瓶颈，优化查询语句和查询计划，以提高查询效率和响应时间。</p>
</li>
<li><p>定期维护和优化：执行定期维护任务，例如数据库备份、日志清理和数据库统计信息更新。这样可以确保数据库的稳定性和性能，并减少潜在问题的风险。</p>
</li>
<li><p>负载均衡和集群部署：考虑在需要时引入数据库负载均衡和集群部署。通过将负载分布到多个数据库节点上，可以提高系统的可扩展性和容错性。</p>
</li>
<li><p>监控和警报：建立数据库性能监控系统，实时监测关键指标如存储空间利用率、CPU 和内存使用率、查询响应时间等。设置合适的阈值并配置警报，以及时发现潜在的问题并进行调整。</p>
</li>
<li><p>定期评估和规划：定期评估数据库的性能和容量需求，并进行规划。根据业务增长和数据趋势，进行必要的扩展和升级，以满足未来三年的需求。</p>
</li>
</ol>
<p>这些实施方案将有助于确保数据库的正常运行，并满足长期数据增长的需求。重要的是持续监控和优化数据库，并根据实际情况进行调整和改进。</p>
<p>7、在Java项目开发过程中，以下情况可能导致OOM（内存溢出）错误：                                                                </p>
<ol>
<li><p>内存泄漏：当对象不再使用时，没有及时释放对应的内存资源，导致内存不断积累，最终耗尽可用内存空间。</p>
</li>
<li><p>频繁创建大量对象：如果应用程序频繁创建大量的对象，而没有及时释放这些对象，会导致内存使用量不断增加，最终导致内存溢出。</p>
</li>
<li><p>静态集合类引起的内存泄漏：如果使用静态集合类（如静态List、Map等）来保存大量对象，并且没有适时地清理或移除这些对象，会导致内存泄漏。</p>
</li>
<li><p>递归调用导致的栈溢出：当递归调用的深度过大时，会导致栈空间耗尽，进而导致栈溢出错误。</p>
</li>
</ol>
<p>解决OOM错误的方法如下：</p>
<ol>
<li><p>内存泄漏排查：使用内存分析工具（如VisualVM、Eclipse Memory Analyzer等）来检测和分析内存泄漏问题。通过查看对象的引用链和内存占用情况，找出引起内存泄漏的根本原因，并进行相应的修复。</p>
</li>
<li><p>优化对象的创建和销毁：减少不必要的对象创建和使用，及时释放不再使用的对象。使用对象池或缓存来管理对象的创建和重用，减少对象频繁创建和销毁带来的内存开销。</p>
</li>
<li><p>增加堆内存：通过增加JVM的堆内存限制，提高可用内存空间。可以通过调整JVM的启动参数中的-Xms（初始堆大小）和-Xmx（最大堆大小）来设置堆内存大小。</p>
</li>
<li><p>使用合适的集合和数据结构：根据实际需求选择合适的集合和数据结构，避免使用静态集合类保存大量对象。及时清理和移除不再需要的对象，防止内存泄漏。</p>
</li>
<li><p>优化递归算法：检查和优化递归算法，确保递归调用的深度合理且不会导致栈溢出。可以考虑使用迭代或尾递归等替代递归的方式来避免栈溢出问题。</p>
</li>
<li><p>监控和调优：使用性能监控工具对应用程序进行实时监控，查看内存使用情况和垃圾回收行为。根据监控结果进行相应的优化和调整，如调整垃圾回收器参数、调整内存分配策略等。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>谷粒商城-基础篇</title>
    <url>/post/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E2%80%94%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="1-整体介绍"><a href="#1-整体介绍" class="headerlink" title="1. 整体介绍"></a>1. 整体介绍</h2><p><img src="/post/IDE/image-20200422211607028.png"></p>
<h3 id="1）安装vagrant"><a href="#1）安装vagrant" class="headerlink" title="1）安装vagrant"></a>1）安装vagrant</h3><h3 id="2）安装Centos7"><a href="#2）安装Centos7" class="headerlink" title="2）安装Centos7"></a>2）安装Centos7</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant init centos/7</span></span><br><span class="line">A `Vagrantfile` has been placed in this directory. You are now</span><br><span class="line">ready to `vagrant up` your first virtual environment! Please read</span><br><span class="line">the comments in the Vagrantfile as well as documentation on</span><br><span class="line">`vagrantup.com` for more information on using Vagrant.</span><br></pre></td></tr></table></figure>

<p>执行完上面的命令后，会在用户的家目录下生成Vagrantfile文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant up</span></span><br><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Box &#x27;centos/7&#x27; could not be found. Attempting to find and install...</span><br><span class="line">    default: Box Provider: virtualbox</span><br><span class="line">    default: Box Version: &gt;= 0</span><br><span class="line">==&gt; default: Loading metadata for box &#x27;centos/7&#x27;</span><br><span class="line">    default: URL: https://vagrantcloud.com/centos/7</span><br><span class="line">==&gt; default: Adding box &#x27;centos/7&#x27; (v1905.1) for provider: virtualbox</span><br><span class="line">    default: Downloading: https://vagrantcloud.com/centos/boxes/7/versions/1905.1/providers/virtualbox.box</span><br><span class="line">    default: Download redirected to host: cloud.centos.org</span><br><span class="line">    default: Progress: 0% (Rate: 6717/s, Estimated time remaining: 7:33:42)</span><br></pre></td></tr></table></figure>

<p>下载镜像过程比较漫长，也可以采用先用下载工具下载到本地后，然后使用“ vagrant box add ”添加，再“vagrant up”即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">将下载的镜像添加到virtualBox中</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant box add centos/7 E:\迅雷下载\CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span></span><br><span class="line">==&gt; box: Box file was not detected as metadata. Adding it directly...</span><br><span class="line">==&gt; box: Adding box &#x27;centos/7&#x27; (v0) for provider:</span><br><span class="line">    box: Unpacking necessary files from: file:///E:/%D1%B8%C0%D7%CF%C2%D4%D8/CentOS-7-x86_64-Vagrant-1905_01.VirtualBox.box</span><br><span class="line">    box:</span><br><span class="line">==&gt; box: Successfully added box &#x27;centos/7&#x27; (v0) for &#x27;virtualbox&#x27;!</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant up</span></span><br><span class="line">Bringing machine &#x27;default&#x27; up with &#x27;virtualbox&#x27; provider...</span><br><span class="line">==&gt; default: Importing base box &#x27;centos/7&#x27;...</span><br><span class="line">==&gt; default: Matching MAC address for NAT networking...</span><br><span class="line">==&gt; default: Setting the name of the VM: Administrator_default_1588497928070_24634</span><br><span class="line">==&gt; default: Clearing any previously set network interfaces...</span><br><span class="line">==&gt; default: Preparing network interfaces based on configuration...</span><br><span class="line">    default: Adapter 1: nat</span><br><span class="line">    default: Adapter 2: hostonly</span><br><span class="line">==&gt; default: Forwarding ports...</span><br><span class="line">    default: 22 (guest) =&gt; 2222 (host) (adapter 1)</span><br><span class="line">==&gt; default: Booting VM...</span><br><span class="line">==&gt; default: Waiting for machine to boot. This may take a few minutes...</span><br><span class="line">    default: SSH address: 127.0.0.1:2222</span><br><span class="line">    default: SSH username: vagrant</span><br><span class="line">    default: SSH auth method: private key</span><br><span class="line">    default:</span><br><span class="line">    default: Vagrant insecure key detected. Vagrant will automatically replace</span><br><span class="line">    default: this with a newly generated keypair for better security.</span><br><span class="line">    default:</span><br><span class="line">    default: Inserting generated public key within guest...</span><br><span class="line">    default: Removing insecure key from the guest if it&#x27;s present...</span><br><span class="line">    default: Key inserted! Disconnecting and reconnecting using new SSH key...</span><br><span class="line">==&gt; default: Machine booted and ready!</span><br><span class="line">==&gt; default: Checking for guest additions in VM...</span><br><span class="line">    default: No guest additions were detected on the base box for this VM! Guest</span><br><span class="line">    default: additions are required for forwarded ports, shared folders, host only</span><br><span class="line">    default: networking, and more. If SSH fails on this machine, please install</span><br><span class="line">    default: the guest additions and repackage the box to continue.</span><br><span class="line">    default:</span><br><span class="line">    default: This is not an error message; everything may continue to work properly,</span><br><span class="line">    default: in which case you may ignore this message.</span><br><span class="line">==&gt; default: Configuring and enabling network interfaces...</span><br><span class="line">==&gt; default: Rsyncing folder: /cygdrive/c/Users/Administrator/ =&gt; /vagrant</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>vagrant ssh 开启SSH，并登陆到centos7</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vagrant ssh</span></span><br><span class="line">[vagrant@localhost ~]$ ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 52:54:00:8a:fe:e6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.2.15/24 brd 10.0.2.255 scope global noprefixroute dynamic eth0</span><br><span class="line">       valid_lft 86091sec preferred_lft 86091sec</span><br><span class="line">    inet6 fe80::5054:ff:fe8a:fee6/64 scope link</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 08:00:27:d1:76:f6 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.102/24 brd 192.168.56.255 scope global noprefixroute dynamic eth1</span><br><span class="line">       valid_lft 892sec preferred_lft 892sec</span><br><span class="line">    inet6 fe80::8c94:1942:ba09:2458/64 scope link noprefixroute</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[vagrant@localhost ~]$</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">C:\Users\Administrator&gt;ipconfig</span><br><span class="line"></span><br><span class="line">Windows IP 配置</span><br><span class="line"></span><br><span class="line">以太网适配器 VirtualBox Host-Only Network:</span><br><span class="line"></span><br><span class="line">   连接特定的 DNS 后缀 . . . . . . . :</span><br><span class="line">   本地链接 IPv6 地址. . . . . . . . : fe80::a00c:1ffa:a39a:c8c2%16</span><br><span class="line">   IPv4 地址 . . . . . . . . . . . . : 192.168.56.1</span><br><span class="line">   子网掩码  . . . . . . . . . . . . : 255.255.255.0</span><br><span class="line">   默认网关. . . . . . . . . . . . . :</span><br></pre></td></tr></table></figure>


<p>配置网络信息，打开”Vagrantfile”文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">config.vm.network &quot;private_network&quot;, ip: &quot;192.168.56.10&quot;</span><br></pre></td></tr></table></figure>



<p>修改完成后，重启启动vagrant</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vagrant reload</span><br></pre></td></tr></table></figure>

<p>检查宿主机和virtualBox之间的通信是否正常</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[vagrant@localhost ~]$ ping 192.168.43.43                                                                                                         PING 192.168.43.43 (192.168.43.43) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.43.43: icmp_seq=1 ttl=127 time=0.533 ms</span><br><span class="line">64 bytes from 192.168.43.43: icmp_seq=2 ttl=127 time=0.659 ms</span><br><span class="line"></span><br><span class="line">--- 192.168.43.43 ping statistics ---</span><br><span class="line">2 packets transmitted, 2 received, 0% packet loss, time 999ms</span><br><span class="line">rtt min/avg/max/mdev = 0.533/0.596/0.659/0.063 ms</span><br><span class="line">[vagrant@localhost ~]$</span><br><span class="line">[vagrant@localhost ~]$</span><br><span class="line">[vagrant@localhost ~]$ ping www.baidu.com</span><br><span class="line">PING www.a.shifen.com (112.80.248.76) 56(84) bytes of data.</span><br><span class="line">64 bytes from 112.80.248.76 (112.80.248.76): icmp_seq=1 ttl=53 time=56.1 ms</span><br><span class="line">64 bytes from 112.80.248.76 (112.80.248.76): icmp_seq=2 ttl=53 time=58.5 ms</span><br><span class="line">64 bytes from 112.80.248.76 (112.80.248.76): icmp_seq=3 ttl=53 time=53.4 ms</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开启远程登陆，修改“&#x2F;etc&#x2F;ssh&#x2F;sshd_config”</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PermitRootLogin yes </span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure>

<p>然后重启SSHD</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>

<p>使用Xshell或SecureCRT进行远程连接。</p>
<p><img src="/post/IDE/image-20200503174735162.png" alt="image-20200503174735162"></p>
<h2 id="2-docker中安装mysql"><a href="#2-docker中安装mysql" class="headerlink" title="2. docker中安装mysql"></a>2. docker中安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 module]# docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">123275d6e508: Already exists </span><br><span class="line">27cddf5c7140: Pull complete </span><br><span class="line">c17d442e14c9: Pull complete </span><br><span class="line">2eb72ffed068: Pull complete </span><br><span class="line">d4aa125eb616: Pull complete </span><br><span class="line">52560afb169c: Pull complete </span><br><span class="line">68190f37a1d2: Pull complete </span><br><span class="line">3fd1dc6e2990: Pull complete </span><br><span class="line">85a79b83df29: Pull complete </span><br><span class="line">35e0b437fe88: Pull complete </span><br><span class="line">992f6a10268c: Pull complete </span><br><span class="line">Digest: sha256:82b72085b2fcff073a6616b84c7c3bcbb36e2d13af838cec11a9ed1d0b183f5e</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br></pre></td></tr></table></figure>

<p>查看镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 module]# docker images</span><br><span class="line">REPOSITORY  TAG    IMAGE ID     CREATED       SIZE</span><br><span class="line">mysql       5.7    f5829c0eee9e 2 hours ago   455MB</span><br><span class="line">[root@hadoop-104 module]# </span><br></pre></td></tr></table></figure>

<p>启动mysql</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<p>修改配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# pwd</span></span><br><span class="line"><span class="attr">/mydata/mysql/conf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# cat my.cnf</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="attr">default-character-set</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span></span><br><span class="line"><span class="attr">init_connect</span>=<span class="string">&#x27;SET NAMES utf8&#x27;</span></span><br><span class="line"><span class="attr">character-set-server</span>=<span class="string">utf8</span></span><br><span class="line"><span class="attr">collation-server</span>=<span class="string">utf8_unicode_ci</span></span><br><span class="line"><span class="attr">skip-character-set-client-handshake</span></span><br><span class="line"><span class="attr">skip-name-resolve</span></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# </span></span><br><span class="line"></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# docker restart mysql</span></span><br><span class="line"><span class="attr">mysql</span></span><br><span class="line"><span class="attr">[root@hadoop-104</span> <span class="string">conf]# </span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>进入容器查看配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 conf]# docker exec -it mysql /bin/bash</span><br><span class="line">root@b3a74e031bd7:/# whereis mysql</span><br><span class="line">mysql: /usr/bin/mysql /usr/lib/mysql /etc/mysql /usr/share/mysql</span><br><span class="line"></span><br><span class="line">root@b3a74e031bd7:/# ls /etc/mysql </span><br><span class="line">my.cnf</span><br><span class="line">root@b3a74e031bd7:/# cat /etc/mysql/my.cnf </span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_unicode_ci</span><br><span class="line">skip-character-set-client-handshake</span><br><span class="line">skip-name-resolve</span><br><span class="line">root@b3a74e031bd7:/# </span><br></pre></td></tr></table></figure>



<p>设置启动docker时，即运行mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker update mysql --restart=always</span><br><span class="line">mysql</span><br><span class="line">[root@hadoop-104 ~]# </span><br></pre></td></tr></table></figure>


<h2 id="3-docker中安装redis"><a href="#3-docker中安装redis" class="headerlink" title="3. docker中安装redis"></a>3. docker中安装redis</h2><p>下载docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker pull redis</span><br><span class="line">Using default tag: latest</span><br><span class="line">latest: Pulling from library/redis</span><br><span class="line">123275d6e508: Already exists </span><br><span class="line">f2edbd6a658e: Pull complete </span><br><span class="line">66960bede47c: Pull complete </span><br><span class="line">79dc0b596c90: Pull complete </span><br><span class="line">de36df38e0b6: Pull complete </span><br><span class="line">602cd484ff92: Pull complete </span><br><span class="line">Digest: sha256:1d0b903e3770c2c3c79961b73a53e963f4fd4b2674c2c4911472e8a054cb5728</span><br><span class="line">Status: Downloaded newer image for redis:latest</span><br><span class="line">docker.io/library/redis:latest</span><br></pre></td></tr></table></figure>



<p>启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# mkdir -p /mydata/redis/conf</span><br><span class="line">[root@hadoop-104 ~]# touch /mydata/redis/conf/redis.conf</span><br><span class="line">[root@hadoop-104 ~]# echo &quot;appendonly yes&quot;  &gt;&gt; /mydata/redis/conf/redis.conf</span><br><span class="line">[root@hadoop-104 ~]# docker run -p 6379:6379 --name redis -v /mydata/redis/data:/data \</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \</span></span><br><span class="line"><span class="language-bash">&gt; -d redis redis-server /etc/redis/redis.conf</span></span><br><span class="line">ce7ae709711986e3f90c9278b284fe6f51f1c1102ba05f3692f0e934ceca1565</span><br><span class="line">[root@hadoop-104 ~]# </span><br></pre></td></tr></table></figure>

<p> 连接到docker的redis</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker exec -it redis redis-cli</span><br><span class="line">127.0.0.1:6379&gt; set key1 v1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get key1</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure>

<p>设置redis容器在docker启动的时候启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@hadoop-104 ~]# docker update redis --restart=always</span><br><span class="line">redis</span><br><span class="line">[root@hadoop-104 ~]# </span><br></pre></td></tr></table></figure>



<h2 id="4-创建maven工程"><a href="#4-创建maven工程" class="headerlink" title="4. 创建maven工程"></a>4. 创建maven工程</h2><h2 id="5-执行sql脚本"><a href="#5-执行sql脚本" class="headerlink" title="5. 执行sql脚本"></a>5. 执行sql脚本</h2><p>gulimall_oms.sql<br>gulimall_pms.sql<br>gulimall_sms.sql<br>gulimall_ums.sql<br>gulimall_wms.sql<br>pms_catelog.sql<br>sys_menus.sql</p>
<h2 id="6-clone-人人开源"><a href="#6-clone-人人开源" class="headerlink" title="6. clone 人人开源"></a>6. clone 人人开源</h2><p><a href="https://gitee.com/renrenio">https://gitee.com/renrenio</a></p>
<p><img src="/post/IDE/1587609877028.png" alt="1587609877028"></p>
<p>克隆到本地：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/renrenio/renren-fast-vue.git</span><br><span class="line"></span><br><span class="line">git clone https://gitee.com/renrenio/renren-fast.git</span><br></pre></td></tr></table></figure>



<p>将拷贝下来的“renren-fast”删除“.git”后，拷贝到“gulimall”工程根目录下，然后将它作为gulimall的一个module</p>
<p>创建“gulimall_admin”的数据库，然后执行“renren-fast&#x2F;db&#x2F;mysql.sql”中的SQl脚本</p>
<p>修改“application-dev.yml”文件，默认为dev环境，修改连接mysql的url和用户名密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">        <span class="built_in">type</span>: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">        druid:</span><br><span class="line">            driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">            url: jdbc:mysql://192.168.137.14:3306/gulimall_admin?useUnicode=<span class="literal">true</span>&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai</span><br><span class="line">            username: root</span><br><span class="line">            password: root</span><br></pre></td></tr></table></figure>





<p>启动“gulimall_admin”，然后访问“<a href="http://localhost:8080/renren-fast/">http://localhost:8080/renren-fast/</a>”</p>
<p><img src="/post/IDE/1587616296253.png" alt="1587616296253"></p>
<p>安装node.js，并且安装仓库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\tmp\renren-fast-vue&gt; npm config set registry http://registry.npm.taobao.org/</span><br><span class="line">PS D:\tmp\renren-fast-vue&gt; npm install</span><br><span class="line">npm WARN ajv-keywords@1.5.1 requires a peer of ajv@&gt;=4.10.0 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN sass-loader@6.0.6 requires a peer of node-sass@^4.0.0 but none is installed. You must install peer dependencies yourself.</span><br><span class="line">npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.9 (node_modules\fsevents):</span><br><span class="line">npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.9: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;win32&quot;,&quot;arch&quot;:&quot;x64&quot;&#125;)</span><br><span class="line"></span><br><span class="line">up to date in 17.227s</span><br><span class="line">PS D:\tmp\renren-fast-vue&gt; </span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\tmp\renren-fast-vue&gt; npm run dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">renren-fast-vue@1.2.2 dev D:\tmp\renren-fast-vue</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack-dev-server --inline --progress --config build/webpack.dev.conf.js</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"> 10% </span><span class="language-bash">building modules 5/10 modules 5 active ...-0!D:\tmp\renren-fast-vue\src\main.js(node:19864) Warning: Accessing non-existent property <span class="string">&#x27;cat&#x27;</span> of module exports inside circular dependency</span></span><br><span class="line">(Use `node --trace-warnings ...` to show where the warning was created)</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;cd&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;chmod&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;cp&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;dirs&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;pushd&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;popd&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;echo&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;tempdir&#x27; of module exports inside circular dependency</span><br><span class="line">(node:19864) Warning: Accessing non-existent property &#x27;pwd&#x27; of module exports inside circular dependency</span><br></pre></td></tr></table></figure>



<p>常见问题1：“Module build failed: Error: Cannot find module ‘node-sass”</p>
<p>运行过程中，出现“Module build failed: Error: Cannot find module ‘node-sass’报错问题”，解决方法</p>
<blockquote>
<p>用npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> ，从淘宝镜像那下载，然后cnpm下载成功。</p>
<p>最后输入cnpm install node-sass –save。npm run dev终于能跑起来了！！！<br>————————————————<br>版权声明：本文为CSDN博主「夕阳下美了剪影」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_38401285/article/details/86483278">https://blog.csdn.net/qq_38401285/article/details/86483278</a></p>
</blockquote>
<p>常见问题2：cnpm - 解决 “ cnpm : 无法加载文件 C:\Users\93457\AppData\Roaming\npm\cnpm.ps1，因为在此系统上禁止运行脚本。有关详细信息 。。。 “</p>
<p><a href="https://www.cnblogs.com/500m/p/11634969.html">https://www.cnblogs.com/500m/p/11634969.html</a></p>
<p>所有问题的根源都在“node_modules”，npm install之前，应该将这个文件夹删除，然后再进行安装和运行。</p>
<p>再次运行npm run dev恢复正常：</p>
<p><img src="/post/IDE/1587637858665.png" alt="1587637858665"></p>
<h2 id="7-clone-renren-generator"><a href="#7-clone-renren-generator" class="headerlink" title="7. clone renren-generator"></a>7. clone renren-generator</h2><h3 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h3><p><a href="https://gitee.com/renrenio/renren-generator.git">https://gitee.com/renrenio/renren-generator.git</a></p>
<p>然后将该项目放置到“gulimall”的跟路径下，然后添加该Module，并且提交到github上</p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>renren-generator&#x2F;src&#x2F;main&#x2F;resources&#x2F;generator.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#代码生成器，配置信息</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mainPath</span>=<span class="string">com.bigdata</span></span><br><span class="line"><span class="comment">#包名</span></span><br><span class="line"><span class="attr">package</span>=<span class="string">com.bigdata.gulimall</span></span><br><span class="line"><span class="attr">moduleName</span>=<span class="string">product</span></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="attr">author</span>=<span class="string">cosmoswong</span></span><br><span class="line"><span class="comment">#Email</span></span><br><span class="line"><span class="attr">email</span>=<span class="string">cosmoswong@sina.com</span></span><br><span class="line"><span class="comment">#表前缀(类名不会包含表前缀)</span></span><br><span class="line"><span class="attr">tablePrefix</span>=<span class="string">pms_</span></span><br></pre></td></tr></table></figure>

<h3 id="运行“renren-generator”"><a href="#运行“renren-generator”" class="headerlink" title="运行“renren-generator”"></a>运行“renren-generator”</h3><p>访问：&lt;<a href="http://localhost/">http://localhost:80/</a></p>
<p><img src="/post/IDE/1587638853416.png" alt="1587638853416"></p>
<p>点击“renren-fast”，能够看到它将“renren-fast”的所有表都列举了出来：</p>
<p><img src="/post/IDE/1587638968519.png" alt="1587638968519"></p>
<p>选择所有的表，然后点击“生成代码”，将下载的“renren.zip”，解压后取出main文件夹，放置到“gulimall-product”项目的main目录中。</p>
<p>下面的几个module，也采用同样的方式来操作。</p>
<p>但是针对于“undo_log”，存在一个问题</p>
<p><img src="/post/IDE/1587657745923.png" alt="1587657745923"></p>
<p>它的数据类型是“longblob”类型，逆向工程后，对应的数据类型未知：</p>
<p><img src="/post/IDE/1587657812283.png" alt="1587657812283"></p>
<p>这个问题该要怎么解决？</p>
<h2 id="8-微服务注册中心"><a href="#8-微服务注册中心" class="headerlink" title="8. 微服务注册中心"></a>8. 微服务注册中心</h2><p>要注意nacos集群所在的server，一定要关闭防火墙，否则容易出现各种问题。</p>
<p>搭建nacos集群，然后分别启动各个微服务，将它们注册到Nacos中。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">discovery:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span></span><br></pre></td></tr></table></figure>



<p>查看注册情况：</p>
<p><a href="http://192.168.137.14:8848/nacos/#/serviceManagement?dataId=&amp;group=&amp;appName=&amp;namespace=">http://192.168.137.14:8848/nacos/#/serviceManagement?dataId=&amp;group=&amp;appName=&amp;namespace=</a></p>
<p><img src="/post/IDE/1587694451601.png" alt="1587694451601"></p>
<h2 id="9-使用openfen"><a href="#9-使用openfen" class="headerlink" title="9. 使用openfen"></a>9. 使用openfen</h2><p>1)、引入open-feign</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>2)、编写一个接口，告诉SpringCLoud这个接口需要调用远程服务</p>
<p>修改“com.bigdata.gulimall.coupon.controller.CouponController”，添加以下controller方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/member/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">memberCoupons</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CouponEntity</span> <span class="variable">couponEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CouponEntity</span>();</span><br><span class="line">    couponEntity.setCouponName(<span class="string">&quot;discount 20%&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.ok().put(<span class="string">&quot;coupons&quot;</span>,Arrays.asList(couponEntity));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>新建“com.bigdata.gulimall.member.feign.CouponFeignService”接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall_coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFeignService</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/coupon/coupon/member/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">memberCoupons</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>修改“com.bigdata.gulimall.member.GulimallMemberApplication”类，添加上”@EnableFeignClients”：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients(basePackages = &quot;com.bigdata.gulimall.member.feign&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallMemberApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GulimallMemberApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​	声明接口的每一个方法都是调用哪个远程服务的那个请求</p>
<p>3)、开启远程调用功能</p>
<p>com.bigdata.gulimall.member.controller.MemberController</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/coupons&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    MemberEntity memberEntity=<span class="keyword">new</span> <span class="title class_">MemberEntity</span>();</span><br><span class="line">    memberEntity.setNickname(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    <span class="type">R</span> <span class="variable">memberCoupons</span> <span class="operator">=</span> couponFeignService.memberCoupons();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memberCoupons.put(<span class="string">&quot;member&quot;</span>,memberEntity).put(<span class="string">&quot;coupons&quot;</span>,memberCoupons.get(<span class="string">&quot;coupons&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p>(4)、访问<a href="http://localhost:8000/member/member/coupons">http://localhost:8000/member/member/coupons</a></p>
<p><img src="/post/IDE/1587701348764.png" alt="1587701348764"></p>
<p>停止“gulimall-coupon”服务，能够看到注册中心显示该服务的健康值为0：</p>
<p><img src="/post/IDE/1587701521184.png" alt="1587701521184"></p>
<p>再次访问：<a href="http://localhost:8000/member/member/coupons">http://localhost:8000/member/member/coupons</a></p>
<p><img src="/post/IDE/1587701587456.png" alt="1587701587456"></p>
<p>启动“gulimall-coupon”服务，再次访问，又恢复了正常。</p>
<h2 id="10-配置中心"><a href="#10-配置中心" class="headerlink" title="10. 配置中心"></a>10. 配置中心</h2><h3 id="1）修改“gulimall-coupon”模块"><a href="#1）修改“gulimall-coupon”模块" class="headerlink" title="1）修改“gulimall-coupon”模块"></a>1）修改“gulimall-coupon”模块</h3><p>添加pom依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>创建bootstrap.properties文件，该配置文件会优先于“application.yml”加载。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.137.14:8848</span></span><br></pre></td></tr></table></figure>



<h3 id="2）传统方式"><a href="#2）传统方式" class="headerlink" title="2）传统方式"></a>2）传统方式</h3><p>为了详细说明config的使用方法，先来看原始的方式</p>
<p>创建“application.properties”配置文件，添加如下配置内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">coupon.user.name</span>=<span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"><span class="attr">coupon.user.age</span>=<span class="string">30</span></span><br></pre></td></tr></table></figure>

<p>修改“com.bigdata.gulimall.coupon.controller.CouponController”文件，添加如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;coupon.user.name&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="meta">@Value(&quot;$&#123;coupon.user.age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">getConfigInfo</span><span class="params">()</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> R.ok().put(<span class="string">&quot;name&quot;</span>,name).put(<span class="string">&quot;age&quot;</span>,age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>启动“gulimall-coupon”服务：</p>
<p>访问：<a href="http://localhost:7000/coupon/coupon/test%3E">http://localhost:7000/coupon/coupon/test&gt;</a></p>
<p><img src="/post/IDE/1587716583668.png" alt="1587716583668"></p>
<p>这样做存在的一个问题，如果频繁的修改application.properties，在需要频繁重新打包部署。下面我们将采用Nacos的配置中心来解决这个问题。</p>
<h3 id="3）nacos-config"><a href="#3）nacos-config" class="headerlink" title="3）nacos config"></a>3）nacos config</h3><p>1、在Nacos注册中心中，点击“配置列表”，添加配置规则：</p>
<p><img src="/post/IDE/1587716911435.png" alt="1587716911435"></p>
<p>DataID：gulimall-coupon</p>
<p>配置格式：properties</p>
<p>文件的命名规则为：${spring.application.name}-${spring.profiles.active}.${spring.cloud.nacos.config.file-extension}</p>
<p>${spring.application.name}：为微服务名</p>
<p>${spring.profiles.active}：指明是哪种环境下的配置，如dev、test或info</p>
<p>${spring.cloud.nacos.config.file-extension}：配置文件的扩展名，可以为properties、yml等</p>
<p>2、查看配置：</p>
<p><img src="/post/IDE/1587717125580.png" alt="1587717125580"></p>
<p>3、修改“com.bigdata.gulimall.coupon.controller.CouponController”类，添加“@RefreshScope”注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;coupon/coupon&quot;)</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CouponController</span> &#123;</span><br></pre></td></tr></table></figure>

<p>这样都会动态的从配置中心读取配置.</p>
<p>4、访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p><img src="/post/IDE/1587717485283.png" alt="1587717485283"></p>
<p>能够看到读取到了nacos 中的最新的配置信息，并且在指明了相同的配置信息时，配置中心中设置的值优先于本地配置。</p>
<h3 id="4）Nacos支持三种配置加载方方案"><a href="#4）Nacos支持三种配置加载方方案" class="headerlink" title="4）Nacos支持三种配置加载方方案"></a>4）Nacos支持三种配置加载方方案</h3><p>Nacos支持“Namespace+group+data ID”的配置解决方案。</p>
<p>详情见：<a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-docs/src/main/asciidoc-zh/nacos-config.adoc</a></p>
<h5 id="Namespace方案"><a href="#Namespace方案" class="headerlink" title="Namespace方案"></a>Namespace方案</h5><p>通过命名空间实现环境区分</p>
<p>下面是配置实例：</p>
<p>1、创建命名空间：</p>
<p>“命名空间”—&gt;“创建命名空间”：</p>
<p><img src="/post/IDE/1587718802109.png" alt="1587718802109"></p>
<p> 创建三个命名空间，分别为dev，test和prop</p>
<p>2、回到配置列表中，能够看到所创建的三个命名空间</p>
<p><img src="/post/IDE/1587718889316.png" alt="1587718889316"></p>
<p>下面我们需要在dev命名空间下，创建“gulimall-coupon.properties”配置规则：</p>
<p><img src="/post/IDE/1587719108947.png" alt="1587719108947"></p>
<p>3、访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p><img src="/post/IDE/1587721184218.png" alt="1587721184218"></p>
<p>并没有使用我们在dev命名空间下所配置的规则，而是使用的是public命名空间下所配置的规则，这是怎么回事呢？</p>
<p>查看“gulimall-coupon”服务的启动日志：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">37</span>:<span class="number">24</span><span class="variable">.158</span>  WARN <span class="number">32792</span> --- [           main] c<span class="variable">.a</span><span class="variable">.c</span><span class="variable">.n</span><span class="variable">.c</span><span class="variable">.NacosPropertySourceBuilder</span>     : Ignore the empty nacos configuration <span class="keyword">and</span> get it based on dataId[gulimall-coupon] &amp; group[DEFAULT_GROUP]</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">37</span>:<span class="number">24</span><span class="variable">.163</span>  INFO <span class="number">32792</span> --- [           main] c<span class="variable">.a</span><span class="variable">.nacos</span><span class="variable">.client</span><span class="variable">.config</span><span class="variable">.utils</span><span class="variable">.JVMUtil</span>    : isMultiInstance:false</span><br><span class="line"><span class="number">2020</span>-<span class="number">04</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">37</span>:<span class="number">24</span><span class="variable">.169</span>  INFO <span class="number">32792</span> --- [           main] b<span class="variable">.c</span><span class="variable">.PropertySourceBootstrapConfiguration</span> : Located <span class="keyword">property</span> source: [BootstrapPropertySource &#123;name=&#x27;bootstrapProperties-gulimall-coupon<span class="variable">.properties</span>,DEFAULT_GROUP&#x27;&#125;, BootstrapPropertySource &#123;name=&#x27;bootstrapProperties-gulimall-coupon,DEFAULT_GROUP&#x27;&#125;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>**”gulimall-coupon.properties”**，默认就是public命名空间中的内容中所配置的规则。</p>
<p>4、指定命名空间</p>
<p>如果想要使得我们自定义的命名空间生效，需要在“bootstrap.properties”文件中，指定使用哪个命名空间：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">a2c83f0b-e0a8-40fb-9b26-1e9d61be7d6d</span></span><br></pre></td></tr></table></figure>

<p>这个命名空间ID来源于我们在第一步所创建的命名空间</p>
<p><img src="/post/IDE/1587718802109.png" alt="1587718802109"></p>
<p>5、重启“gulimall-coupon”，再次访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p><img src="/post/IDE/1587720311349.png" alt="1587720311349"></p>
<p>但是这种命名空间的粒度还是不够细化，对此我们可以为项目的每个微服务module创建一个命名空间。</p>
<p>6、为所有微服务创建命名空间</p>
<p><img src="/post/IDE/1587720714101.png" alt="1587720714101"></p>
<p>7、回到配置列表选项卡，克隆pulic的配置规则到coupon命名空间下</p>
<p><img src="/post/IDE/1587720883244.png" alt="1587720883244"></p>
<p>切换到coupon命名空间下，查看所克隆的规则：</p>
<p><img src="/post/IDE/1587720963699.png" alt="1587720963699"></p>
<p>8、修改“gulimall-coupon”下的bootstrap.properties文件，添加如下配置信息</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">7905c915-64ad-4066-8ea9-ef63918e5f79</span></span><br></pre></td></tr></table></figure>

<p>这里指明的是，读取时使用coupon命名空间下的配置。</p>
<p>9、重启“gulimall-coupon”，访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p><img src="/post/IDE/1587721184218.png" alt="1587721184218"></p>
<h5 id="DataID方案"><a href="#DataID方案" class="headerlink" title="DataID方案"></a>DataID方案</h5><p>通过指定spring.profile.active和配置文件的DataID，来使不同环境下读取不同的配置，读取配置时，使用的是默认命名空间public，默认分组（default_group）下的DataID。</p>
<p>默认情况，Namespace&#x3D;public，Group&#x3D;DEFAULT GROUP，默认Cluster是DEFAULT</p>
<h5 id="Group方案"><a href="#Group方案" class="headerlink" title="Group方案"></a>Group方案</h5><p>通过Group实现环境区分</p>
<p>实例：通过使用不同的组，来读取不同的配置，还是以上面的gulimall-coupon微服务为例</p>
<p>1、新建“gulimall-coupon.properties”，将它置于“tmp”组下</p>
<p><img src="/post/IDE/1587721616021.png" alt="1587721616021"></p>
<p>2、修改“bootstrap.properties”配置，添加如下的配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.group</span>=<span class="string">tmp</span></span><br></pre></td></tr></table></figure>

<p>3、重启“gulimall-coupon”，访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p><img src="/post/IDE/1587721844449.png" alt="1587721844449"></p>
<h3 id="5）同时加载多个配置集"><a href="#5）同时加载多个配置集" class="headerlink" title="5）同时加载多个配置集"></a>5）同时加载多个配置集</h3><p>当微服务数量很庞大时，将所有配置都书写到一个配置文件中，显然不是太合适。对此我们可以将配置按照功能的不同，拆分为不同的配置文件。</p>
<p>如下面的配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#MySQL配置</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.137.14:3306/gulimall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>我们可以将，</p>
<p>数据源有关的配置写到一个配置文件中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#MySQL配置</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.137.14:3306/gulimall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>和框架有关的写到另外一个配置文件中：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>



<p>也可以将上面的这些配置交给nacos来进行管理。</p>
<p>实例：将“gulimall-coupon”的“application.yml”文件拆分为多个配置，并放置到nacos配置中心</p>
<p>1、创建“datasource.yml”，用于存储和数据源有关的配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#MySQL配置</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.137.14:3306/gulimall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>

<p>在coupon命名空间中，创建“datasource.yml”配置</p>
<p><img src="/post/IDE/1587722798375.png" alt="1587722798375"></p>
<p>2、将和mybatis相关的配置，放置到“mybatis.yml”中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br></pre></td></tr></table></figure>



<p><img src="/post/IDE/1587722710432.png" alt="1587722710432"></p>
<p>3、创建“other.yml”配置，保存其他的配置信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-coupon</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure>



<p><img src="/post/IDE/1587722998265.png" alt="1587722998265"></p>
<p>现在“mybatis.yml”、“datasource.yml”和“other.yml”共同构成了微服务的配置。</p>
<p>4、修改“gulimall-coupon”的“bootstrap.properties”文件，加载“mybatis.yml”、“datasource.yml”和“other.yml”配置</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>“spring.cloud.nacos.config.ext-config”已经被废弃，建议使用“spring.cloud.nacos.config.extension-configs”</p>
<p>5、注释“application.yml”文件中的所有配置</p>
<p>6、重启“gulimall-coupon”服务，然后访问：<a href="http://localhost:7000/coupon/coupon/test">http://localhost:7000/coupon/coupon/test</a></p>
<p> <img src="/post/IDE/1587724212905.png" alt="1587724212905"></p>
<p>7、访问：<a href="http://localhost:7000/coupon/coupon/list">http://localhost:7000/coupon/coupon/list</a>，查看是否能够正常的访问数据库</p>
<p><img src="/post/IDE/1587724350548.png" alt="1587724350548"></p>
<p>小结：</p>
<p>1)、微服务任何配置信息，任何配置文件都可以放在配置中心；</p>
<p>2)、只需要在bootstrap.properties中，说明加载配置中心的哪些配置文件即可；</p>
<p>3)、@Value, @ConfigurationProperties。都可以用来获取配置中心中所配置的信息；</p>
<p>4)、配置中心有的优先使用配置中心中的，没有则使用本地的配置。</p>
<h2 id="11-网关"><a href="#11-网关" class="headerlink" title="11. 网关"></a>11. 网关</h2><h3 id="1、注册“gulimall-gateway”到Nacos"><a href="#1、注册“gulimall-gateway”到Nacos" class="headerlink" title="1、注册“gulimall-gateway”到Nacos"></a>1、注册“gulimall-gateway”到Nacos</h3><h4 id="1）创建“gulimall-gateway”"><a href="#1）创建“gulimall-gateway”" class="headerlink" title="1）创建“gulimall-gateway”"></a>1）创建“gulimall-gateway”</h4><p>SpringCloud gateway</p>
<h4 id="2）添加“gulimall-common”依赖和“spring-cloud-starter-gateway”依赖"><a href="#2）添加“gulimall-common”依赖和“spring-cloud-starter-gateway”依赖" class="headerlink" title="2）添加“gulimall-common”依赖和“spring-cloud-starter-gateway”依赖"></a>2）添加“gulimall-common”依赖和“spring-cloud-starter-gateway”依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bigdata.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3）“com-bigdata-gulimall-gulimallgateway-GulimallGatewayApplication”类上加上“-EnableDiscoveryClient”注解"><a href="#3）“com-bigdata-gulimall-gulimallgateway-GulimallGatewayApplication”类上加上“-EnableDiscoveryClient”注解" class="headerlink" title="3）“com.bigdata.gulimall.gulimallgateway.GulimallGatewayApplication”类上加上“@EnableDiscoveryClient”注解"></a>3）“com.bigdata.gulimall.gulimallgateway.GulimallGatewayApplication”类上加上“@EnableDiscoveryClient”注解</h4><h4 id="4）在Nacos中创建“gateway”命名空间，同时在该命名空间中创建“gulimall-gateway-yml”"><a href="#4）在Nacos中创建“gateway”命名空间，同时在该命名空间中创建“gulimall-gateway-yml”" class="headerlink" title="4）在Nacos中创建“gateway”命名空间，同时在该命名空间中创建“gulimall-gateway.yml”"></a>4）在Nacos中创建“gateway”命名空间，同时在该命名空间中创建“gulimall-gateway.yml”</h4><p><img src="/post/IDE/1587729576178.png" alt="1587729576178"></p>
<h4 id="5）创建“bootstrap-properties”文件，添加如下配置，指明配置中心地址和所属命名空间"><a href="#5）创建“bootstrap-properties”文件，添加如下配置，指明配置中心地址和所属命名空间" class="headerlink" title="5）创建“bootstrap.properties”文件，添加如下配置，指明配置中心地址和所属命名空间"></a>5）创建“bootstrap.properties”文件，添加如下配置，指明配置中心地址和所属命名空间</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.137.14:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">1c82552e-1af0-4ced-9a48-26f19c2d315f</span></span><br></pre></td></tr></table></figure>



<h4 id="6）创建“application-properties”文件，指定服务名和注册中心地址"><a href="#6）创建“application-properties”文件，指定服务名和注册中心地址" class="headerlink" title="6）创建“application.properties”文件，指定服务名和注册中心地址"></a>6）创建“application.properties”文件，指定服务名和注册中心地址</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.application.name</span>=<span class="string">gulimall-gateway</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">192.168.137.14:8848</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">88</span></span><br></pre></td></tr></table></figure>

<h4 id="7）启动“gulimall-gateway”"><a href="#7）启动“gulimall-gateway”" class="headerlink" title="7）启动“gulimall-gateway”"></a>7）启动“gulimall-gateway”</h4><p>启动报错：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">Description:</span><br><span class="line"></span><br><span class="line">Failed to configure a DataSource: &#x27;url&#x27; attribute is <span class="keyword">not</span> specified <span class="keyword">and</span> no embedded datasource could be configured.</span><br><span class="line"></span><br><span class="line">Reason: Failed to determine a suitable driver <span class="keyword">class</span></span><br></pre></td></tr></table></figure>

<p>解决方法：在“com.bigdata.gulimall.gulimallgateway.GulimallGatewayApplication”中排除和数据源相关的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(exclude = &#123;DataSourceAutoConfiguration.class&#125;)</span></span><br></pre></td></tr></table></figure>

<p>重新启动</p>
<p>访问：<a href="http://192.168.137.14:8848/nacos/#">http://192.168.137.14:8848/nacos/#</a>，查看到该服务已经注册到了Nacos中</p>
<p><img src="/post/IDE/1587730035866.png" alt="1587730035866"></p>
<h3 id="2、案例"><a href="#2、案例" class="headerlink" title="2、案例"></a>2、案例</h3><p>现在想要实现针对于“<a href="http://localhost:88/hello?url=baidu%E2%80%9D%EF%BC%8C%E8%BD%AC%E5%8F%91%E5%88%B0%E2%80%9Chttps://www.baidu.com%E2%80%9D%EF%BC%8C%E9%92%88%E5%AF%B9%E4%BA%8E%E2%80%9Chttp://localhost:88/hello?url=qq%E2%80%9D%E7%9A%84%E8%AF%B7%E6%B1%82%EF%BC%8C%E8%BD%AC%E5%8F%91%E5%88%B0%E2%80%9Chttps://www.qq.com/%E2%80%9D">http://localhost:88/hello?url=baidu”，转发到“https://www.baidu.com”，针对于“http://localhost:88/hello?url=qq”的请求，转发到“https://www.qq.com/”</a></p>
<h4 id="1）创建“application-yml”"><a href="#1）创建“application-yml”" class="headerlink" title="1）创建“application.yml”"></a>1）创建“application.yml”</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">baidu_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.baidu.com</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">baidu</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">qq_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://www.qq.com/</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Query=url,</span> <span class="string">qq</span></span><br></pre></td></tr></table></figure>

<h4 id="2）启动“gulimall-gateway”"><a href="#2）启动“gulimall-gateway”" class="headerlink" title="2）启动“gulimall-gateway”"></a>2）启动“gulimall-gateway”</h4><h4 id="3）测试"><a href="#3）测试" class="headerlink" title="3）测试"></a>3）测试</h4><p>访问：<a href="http://localhost:88/hello?url=baidu">http://localhost:88/hello?url=baidu</a></p>
<p>访问：<a href="http://localhost:88/hello?url=qq">http://localhost:88/hello?url=qq</a></p>
<h2 id="12-Vue"><a href="#12-Vue" class="headerlink" title="12. Vue"></a>12. Vue</h2><p>安装vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure>

<h3 id="1、vue声明式渲染"><a href="#1、vue声明式渲染" class="headerlink" title="1、vue声明式渲染"></a>1、vue声明式渲染</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,<span class="comment">//绑定元素</span></span><br><span class="line">    <span class="attr">data</span>: &#123;  <span class="comment">//封装数据</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        <span class="attr">num</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;  <span class="comment">//封装方法</span></span><br><span class="line">        <span class="title function_">cancle</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">num</span> -- ;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="2、双向绑定-模型变化，视图变化。反之亦然"><a href="#2、双向绑定-模型变化，视图变化。反之亦然" class="headerlink" title="2、双向绑定,模型变化，视图变化。反之亦然"></a>2、双向绑定,模型变化，视图变化。反之亦然</h3><p>双向绑定使用v-model</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;num&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt; &#123;&#123;name&#125;&#125; ,非常帅，有&#123;&#123;num&#125;&#125;个人为他点赞&#123;&#123;<span class="title function_">hello</span>()&#125;&#125;&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<img src="/post/IDE/1587746815353.png" alt="1587746815353" style="zoom: 67%;" />

<h3 id="3、事件处理"><a href="#3、事件处理" class="headerlink" title="3、事件处理"></a>3、事件处理</h3><p>v-xx：指令<br>1、创建vue实例，关联页面的模板，将自己的数据（data）渲染到关联的模板，响应式的<br>2、指令来简化对dom的一些操作。<br>3、声明方法来做更复杂的操作。methods里面可以封装方法。</p>
<p>v-on是按钮的单击事件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;button v-on:click=&quot;num++&quot;&gt;点赞&lt;/button&gt;</span><br></pre></td></tr></table></figure>





<p>在VUE中el,data和vue的作用:</p>
<ul>
<li>el：用来绑定数据；</li>
<li>data:用来封装数据；</li>
<li>methods：用来封装方法，并且能够封装多个方法，如何上面封装了cancell和hello方法。</li>
</ul>
<p>安装“Vue 2 Snippets”，用来做代码提示</p>
<p><img src="/post/IDE/1587747283279.png" alt="1587747283279"></p>
<p>为了方便的在浏览器上调试VUE程序，需要安装“<a href="https://github.com/vuejs/vue-devtools">vue-devtools</a>”，编译后安装到chrome中即可。</p>
<p>详细的使用方法见：<a href="https://www.jianshu.com/p/63f09651724c">Vue调试神器vue-devtools安装</a></p>
<p>“v-html”不会对于HTML标签进行转义，而是直接在浏览器上显示data所设置的内容;而“ v-text”会对html标签进行转义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;  &#123;&#123;<span class="number">1</span>+<span class="number">1</span>&#125;&#125;  &#123;&#123;<span class="title function_">hello</span>()&#125;&#125;&lt;br/&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">   </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">msg</span>:<span class="string">&quot;&lt;h1&gt;Hello&lt;/h1&gt;&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">link</span>:<span class="string">&quot;http://www.baidu.com&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="string">&quot;World&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="/post/IDE/1587748494597.png" alt="1587748494597"></p>
    :称为差值表达式，它必须要写在Html表达式，可以完成数学运算和方法调用



<h3 id="4、v-bind-单向绑定"><a href="#4、v-bind-单向绑定" class="headerlink" title="4、v-bind :单向绑定"></a>4、v-bind :单向绑定</h3><p>给html标签的属性绑定</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 给html标签的属性绑定 --&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>gogogo<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">       <span class="comment">&lt;!-- class,style  &#123;class名：加上？&#125;--&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123;active:isActive,&#x27;text-danger&#x27;:hasError&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">:style</span>=<span class="string">&quot;&#123;color: color1,fontSize: size&#125;&quot;</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">link</span>: <span class="string">&quot;http://www.baidu.com&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">isActive</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">hasError</span>:<span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">color1</span>:<span class="string">&#x27;red&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">size</span>:<span class="string">&#x27;36px&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上面所完成的任务就是给a标签绑定一个超链接。并且当“isActive”和“hasError”都是true的时候，将属性动态的绑定到，则绑定该“active”和 “text-danger”class。这样可以动态的调整属性的存在。</p>
<p>而且如果想要实现修改vm的”color1”和“size”， span元素的style也能够随之变化，则可以写作v-bind:style，也可以省略v-bind。</p>
<h3 id="5、v-model双向绑定"><a href="#5、v-model双向绑定" class="headerlink" title="5、v-model双向绑定"></a>5、v-model双向绑定</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表单项，自定义组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        精通的语言：</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Java&quot;</span>&gt;</span> java<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;PHP&quot;</span>&gt;</span> PHP<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;language&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Python&quot;</span>&gt;</span> Python<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        选中了 &#123;&#123;language.join(&quot;,&quot;)&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">language</span>: []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面完成的功能就是通过“v-model”为输入框绑定多个值，能够实现选中的值，在data的language也在不断的发生着变化，</p>
<p><img src="/post/IDE/image-20200425090955705.png" alt="image-20200425090955705"></p>
<p>如果在控制台上指定vm.language&#x3D;[“Java”,”PHP”]，则data值也会跟着变化。</p>
<p><img src="/post/IDE/image-20200425091736505.png" alt="image-20200425091736505"></p>
<blockquote>
<p>通过“v-model”实现了页面发生了变化，则数据也发生变化，数据发生变化，则页面也发生变化，这样就实现了双向绑定。<br>数组的连接操作： 选中了 <code>&#123;&#123;language.join(",")&#125;&#125;</code></p>
</blockquote>
<h3 id="6、v-on为按钮绑定事件"><a href="#6、v-on为按钮绑定事件" class="headerlink" title="6、v-on为按钮绑定事件"></a>6、v-on为按钮绑定事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!--事件中直接写js片段--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>点赞<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;!--事件指定一个回调函数，必须是<span class="title class_">Vue</span>实例中定义的函数--&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;cancle&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>上面是为两个按钮绑定了单击事件，其中一个对于num进行自增，另外一个自减。</p>
<p>v-on:click也可以写作@click</p>
<p>事件的冒泡：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;padding: 20px;&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    大div</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid blue;padding: 20px;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">        小div <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面的这两个嵌套div中，如果点击了内层的div，则外层的div也会被触发；这种问题可以事件修饰符来完成：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid red;padding: 20px;&quot;</span> <span class="attr">v-on:click.once</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">    大div</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid blue;padding: 20px;&quot;</span> @<span class="attr">click.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span></span><br><span class="line">        小div <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> @<span class="attr">click.prevent.stop</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>去百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里禁止了超链接的点击跳转操作，并且只会触发当前对象的操作--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>关于事件修饰符：</p>
<p><img src="/post/IDE/image-20200425094010008.png" alt="image-20200425094010008"></p>
<p>按键修饰符：</p>
<p><img src="/post/IDE/image-20200425094247167.png" alt="image-20200425094247167"></p>
<p><img src="/post/IDE/image-20200425100629676.png" alt="image-20200425100629676"></p>
<h3 id="7、v-for遍历循环"><a href="#7、v-for遍历循环" class="headerlink" title="7、v-for遍历循环"></a>7、v-for遍历循环</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in users&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;user.name&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;user.gender == &#x27;女&#x27;&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 1、显示user信息：v-for=&quot;item in items&quot; --&gt;</span></span><br><span class="line">               当前索引：&#123;&#123;index&#125;&#125; ==&gt; &#123;&#123;user.name&#125;&#125;  ==&gt;   &#123;&#123;user.gender&#125;&#125; ==&gt;&#123;&#123;user.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 2、获取数组下标：v-for=&quot;(item,index) in items&quot; --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 3、遍历对象：</span></span><br><span class="line"><span class="comment">                        v-for=&quot;value in object&quot;</span></span><br><span class="line"><span class="comment">                        v-for=&quot;(value,key) in object&quot;</span></span><br><span class="line"><span class="comment">                        v-for=&quot;(value,key,index) in object&quot; </span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                对象信息：</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(v,k,i) in user&quot;</span>&gt;</span>&#123;&#123;k&#125;&#125;==&#123;&#123;v&#125;&#125;==&#123;&#123;i&#125;&#125;；<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 4、遍历的时候都加上:key来区分不同数据，提高vue渲染效率 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(num,index) in nums&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">         </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">users</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;柳岩&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">name</span>: <span class="string">&#x27;范冰冰&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">24</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">name</span>: <span class="string">&#x27;刘亦菲&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123; <span class="attr">name</span>: <span class="string">&#x27;古力娜扎&#x27;</span>, <span class="attr">gender</span>: <span class="string">&#x27;女&#x27;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">nums</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>4、遍历的时候都加上:key来区分不同数据，提高vue渲染效率</p>
<h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 过滤器常用来处理文本格式化的操作。过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;user in userList&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;user.id&#125;&#125; ==&gt; &#123;&#123;user.name&#125;&#125; ==&gt; &#123;&#123;user.gender == 1?&quot;男&quot;:&quot;女&quot;&#125;&#125; ==&gt;</span><br><span class="line">                &#123;&#123;user.gender | genderFilter&#125;&#125; ==&gt; &#123;&#123;user.gender | gFilter&#125;&#125;</span><br><span class="line">                <span class="comment">&lt;!-- 这里的&quot;|&quot;表示的管道，将user.gender的值交给genderFilter --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 全局过滤器 </span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;gFilter&quot;</span>, <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (val == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;男~~~&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="string">&quot;女~~~&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">userList</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jacky&#x27;</span>, <span class="attr">gender</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">                    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;peter&#x27;</span>, <span class="attr">gender</span>: <span class="number">0</span> &#125;</span></span><br><span class="line"><span class="language-javascript">                ]</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">filters</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//// filters 定义局部过滤器，只可以在当前vue实例中使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">genderFilter</span>(<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (val == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="string">&quot;男&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="string">&quot;女&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>我被点击了 &#123;&#123;count&#125;&#125; 次<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">counter</span>&gt;</span><span class="tag">&lt;/<span class="name">counter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用所定义的组件button-counter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button-counter</span>&gt;</span><span class="tag">&lt;/<span class="name">button-counter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1、全局声明注册一个组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;counter&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">`&lt;button v-on:click=&quot;count++&quot;&gt;我被点击了 &#123;&#123;count&#125;&#125; 次&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2、局部声明一个组件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> buttonCounter = &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">template</span>: <span class="string">`&lt;button v-on:click=&quot;count++&quot;&gt;我被点击了 &#123;&#123;count&#125;&#125; 次~~~&lt;/button&gt;`</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">count</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//声明所定义的局部组件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="string">&#x27;button-counter&#x27;</span>: buttonCounter</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/post/IDE/image-20200425110048496.png" alt="image-20200425110048496"></p>
<h3 id="生命周期钩子函数"><a href="#生命周期钩子函数" class="headerlink" title="生命周期钩子函数"></a>生命周期钩子函数</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;num&quot;</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;num++&quot;</span>&gt;</span>赞！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;name&#125;&#125;，有&#123;&#123;num&#125;&#125;个人点赞<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../node_modules/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">num</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">show</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">add</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">num</span>++;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========beforeCreate=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据模型未加载：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">num</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法未加载：&quot;</span> + <span class="variable language_">this</span>.<span class="title function_">show</span>());</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板未加载：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">created</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========created=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据模型已加载：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>, <span class="variable language_">this</span>.<span class="property">num</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;方法已加载：&quot;</span> + <span class="variable language_">this</span>.<span class="title function_">show</span>());</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板已加载：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>));</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板未渲染：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========beforeMount=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板未渲染：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========mounted=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板已渲染：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========beforeUpdate=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="variable language_">this</span>.<span class="property">num</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板未更新：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=========updated=============&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;数据模型已更新：&quot;</span> + <span class="variable language_">this</span>.<span class="property">num</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;html模板已更新：&quot;</span> + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;num&quot;</span>).<span class="property">innerText</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="13-element-ui"><a href="#13-element-ui" class="headerlink" title="13. element ui"></a>13. element ui</h2><p>官网： <a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a> </p>
<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i element-ui -S</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><p> 在 main.js 中写入以下内容： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span>  <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br></pre></td></tr></table></figure>


<h2 id="14-递归树形结构获取数据"><a href="#14-递归树形结构获取数据" class="headerlink" title="14. 递归树形结构获取数据"></a>14. 递归树形结构获取数据</h2><p>在注册中心中“product”命名空间中，创建“gulimall-product.yml”配置文件：</p>
<p><img src="/post/IDE/image-20200425153735737.png" alt="image-20200425153735737"></p>
<p>将“application.yml”内容拷贝到该配置文件中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#MySQL配置</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://192.168.137.14:3306/gulimall_pms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-product</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在本地创建“bootstrap.properties”文件，指明配置中心的位置和使用到的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">spring.application.name=gulimall-product</span><br><span class="line">spring.cloud.nacos.config.server-addr=192.168.137.14:8848</span><br><span class="line">spring.cloud.nacos.config.namespace=3c50ffaa-010b-4b59-9372-902e35059232</span><br><span class="line">spring.cloud.nacos.config.extension-configs[0].data-id=gulimall-product.yml</span><br><span class="line">spring.cloud.nacos.config.extension-configs[0].group=DEFAULT_GROUP</span><br><span class="line">spring.cloud.nacos.config.extension-configs[0].refresh=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>然后启动gulimall-product，查看到该服务已经出现在了nacos的注册中心中了</p>
<p>修改“com.bigdata.gulimall.product.service.CategoryService”类，添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list/tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = categoryService.listWithTree();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> categoryEntities;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：<a href="http://localhost:10000/product/category/list/tree">http://localhost:10000/product/category/list/tree</a></p>
<p><img src="/post/IDE/image-20200425154348716.png" alt="image-20200425154348716"></p>
<p>如何区别是哪种分类级别？</p>
<p>答：可以通过分类的parent_cid来进行判断，如果是一级分类，其值为0.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/list/tree&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;CategoryEntity&gt; categoryEntities = categoryService.listWithTree();</span><br><span class="line">    <span class="comment">//找到所有的一级分类</span></span><br><span class="line">    List&lt;CategoryEntity&gt; level1Menus = categoryEntities.stream()</span><br><span class="line">            .filter(item -&gt; item.getParentCid() == <span class="number">0</span>)</span><br><span class="line">            .map(menu-&gt;&#123;</span><br><span class="line">                menu.setChildCategoryEntity(getChildrens(menu,categoryEntities));</span><br><span class="line">                <span class="keyword">return</span> menu;</span><br><span class="line">            &#125;)</span><br><span class="line">            .sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">return</span> (menu1.getSort() ==<span class="literal">null</span> ? <span class="number">0</span>:menu1.getSort())- (menu2.getSort()==<span class="literal">null</span>?<span class="number">0</span>:menu2.getSort());</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">            .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> level1Menus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title function_">getChildrens</span><span class="params">(CategoryEntity root,List&lt;CategoryEntity&gt; all)</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;CategoryEntity&gt; childrens = all.stream().filter(item -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> item.getParentCid() == root.getCatId();</span><br><span class="line">    &#125;).map(item -&gt; &#123;</span><br><span class="line">        item.setChildCategoryEntity(getChildrens(item, all));</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> (menu1.getSort() ==<span class="literal">null</span> ? <span class="number">0</span>:menu1.getSort())- (menu2.getSort()==<span class="literal">null</span>?<span class="number">0</span>:menu2.getSort());</span><br><span class="line">    &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> childrens;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>下面是得到的部分JSON数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;图书、音像、电子书刊&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子书刊&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">165</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子书&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">166</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网络原创&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">167</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数字杂志&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">168</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;多媒体图书&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">22</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;音像&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">169</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;音乐&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">170</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;影视&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;catId&quot;</span><span class="punctuation">:</span> <span class="number">171</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;教育音像&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;parentCid&quot;</span><span class="punctuation">:</span> <span class="number">23</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;catLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;showStatus&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productUnit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;productCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;childCategoryEntity&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br></pre></td></tr></table></figure>



<p>启动后端项目renren-fast</p>
<p>启动前端项目renren-fast-vue：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>



<p>访问： <a href="http://localhost:8001/#/login">http://localhost:8001/#/login</a> </p>
<p>创建一级菜单：</p>
<p><img src="/post/IDE/image-20200425164019287.png" alt="image-20200425164019287"></p>
<p>创建完成后，在后台的管理系统中会创建一条记录：</p>
<p><img src="/post/IDE/image-20200425164201813.png" alt="image-20200425164201813"></p>
<p>然后创建子菜单：</p>
<p><img src="/post/IDE/image-20200425164509143.png" alt="image-20200425164509143"></p>
<p>创建renren-fast-vue\src\views\modules\product目录，子所以是这样来创建，是因为product&#x2F;category，对应于product-category</p>
<p>在该目录下，新建“category.vue”文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<p>刷新页面出现404异常，查看请求发现，请求的是“<a href="http://localhost:8080/renren-fast/product/category/list/tree%E2%80%9D">http://localhost:8080/renren-fast/product/category/list/tree”</a></p>
<p><img src="/post/IDE/image-20200425173615149.png" alt="image-20200425173615149"></p>
<p>这个请求是不正确的，正确的请求是：<a href="http://localhost:10000/product/category/list/tree%EF%BC%8C">http://localhost:10000/product/category/list/tree，</a></p>
<p>修正这个问题：</p>
<p>替换“static\config\index.js”文件中的“window.SITE_CONFIG[‘baseUrl’]”</p>
<p>替换前：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.SITE_CONFIG[&#x27;baseUrl&#x27;] = &#x27;http://localhost:8080/renren-fast&#x27;;</span><br></pre></td></tr></table></figure>

<p>替换后：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">window.SITE_CONFIG[&#x27;baseUrl&#x27;] = &#x27;http://localhost:88/api&#x27;;</span><br></pre></td></tr></table></figure>

<p><a href="http://localhost:88，这个地址是我们网关微服务的接口。">http://localhost:88，这个地址是我们网关微服务的接口。</a></p>
<p>这里我们需要通过网关来完成路径的映射，因此将renren-fast注册到nacos注册中心中，并添加配置中心</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">renren-fast</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">config:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">renren-fast</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.8848</span></span><br><span class="line">        <span class="attr">namespace:</span> <span class="string">ee409c3f-3206-4a3b-ba65-7376922a886d</span></span><br></pre></td></tr></table></figure>



<p>配置网关路由，前台的所有请求都是经由“<a href="http://localhost:88/api%E2%80%9D%E6%9D%A5%E8%BD%AC%E5%8F%91%E7%9A%84%EF%BC%8C%E5%9C%A8%E2%80%9Cgulimall-gateway%E2%80%9D%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%B7%AF%E7%94%B1%E8%A7%84%E5%88%99%EF%BC%9A">http://localhost:88/api”来转发的，在“gulimall-gateway”中添加路由规则：</a></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br></pre></td></tr></table></figure>



<p>但是这样做也引入了另外的一个问题，再次访问：<a href="http://localhost:8001/#/login%EF%BC%8C%E5%8F%91%E7%8E%B0%E9%AA%8C%E8%AF%81%E7%A0%81%E4%B8%8D%E5%86%8D%E6%98%BE%E7%A4%BA%EF%BC%9A">http://localhost:8001/#/login，发现验证码不再显示：</a></p>
<p>分析原因：</p>
<ol>
<li>现在的验证码请求路径为，<a href="http://localhost:88/api/captcha.jpg?uuid=69c79f02-d15b-478a-8465-a07fd09001e6">http://localhost:88/api/captcha.jpg?uuid=69c79f02-d15b-478a-8465-a07fd09001e6</a></li>
<li>原始的验证码请求路径：<a href="http://localhost:8001/renren-fast/captcha.jpg?uuid=69c79f02-d15b-478a-8465-a07fd09001e6">http://localhost:8001/renren-fast/captcha.jpg?uuid=69c79f02-d15b-478a-8465-a07fd09001e6</a></li>
</ol>
<p>在admin_route的路由规则下，在访问路径中包含了“api”，因此它会将它转发到renren-fast，网关在转发的时候，会使用网关的前缀信息，为了能够正常的取得验证码，我们需要对请求路径进行重写</p>
<p>关于请求路径重写：</p>
<p><a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-gateway/2.2.2.RELEASE/reference/html/#the-rewritepath-gatewayfilter-factory">6.16. The <code>RewritePath</code> <code>GatewayFilter</code> Factory</a></p>
<p>The <code>RewritePath</code> <code>GatewayFilter</code> factory takes a path <code>regexp</code> parameter and a <code>replacement</code> parameter. This uses Java regular expressions for a flexible way to rewrite the request path. The following listing configures a <code>RewritePath</code> <code>GatewayFilter</code>:</p>
<p>Example 41. application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">rewritepath_route</span></span><br><span class="line">        <span class="attr">uri:</span> <span class="string">https://example.org</span></span><br><span class="line">        <span class="attr">predicates:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Path=/foo/**</span></span><br><span class="line">        <span class="attr">filters:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">RewritePath=/red(?&lt;segment&gt;/?.*),</span> <span class="string">$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>For a request path of <code>/red/blue</code>, this sets the path to <code>/blue</code> before making the downstream request. Note that the <code>$</code> should be replaced with <code>$\</code> because of the YAML specification.</p>
<p>修改“admin_route”路由规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),</span> <span class="string">/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>



<p>再次访问：<a href="http://localhost:8001/#/login%EF%BC%8C%E9%AA%8C%E8%AF%81%E7%A0%81%E8%83%BD%E5%A4%9F%E6%AD%A3%E5%B8%B8%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%BA%86%E3%80%82">http://localhost:8001/#/login，验证码能够正常的加载了。</a></p>
<p>但是很不幸新的问题又产生了，访问被拒绝了</p>
<p><img src="/post/IDE/image-20200425192722821.png" alt="image-20200425192722821"></p>
<p> 问题描述：已拦截跨源请求：同源策略禁止读取位于 <a href="http://localhost:88/api/sys/login">http://localhost:88/api/sys/login</a> 的远程资源。（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。 </p>
<p>问题分析：这是一种跨域问题。访问的域名和端口和原来的请求不同，请求就会被限制</p>
<p><img src="/post/IDE/image-20200425192902637.png" alt="image-20200425192902637"></p>
<p>跨域流程：</p>
<p><img src="/post/IDE/image-20200425193136641.png" alt="image-20200425193136641"></p>
<p><img src="/post/IDE/image-20200425193523849.png" alt="image-20200425193523849"></p>
<p><img src="/post/IDE/image-20200425193614185.png" alt="image-20200425193614185"></p>
<p>解决方法：在网关中定义“GulimallCorsConfiguration”类，该类用来做过滤，允许所有的请求跨域。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallCorsConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source=<span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        </span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>再次访问：<a href="http://localhost:8001/#/login">http://localhost:8001/#/login</a></p>
<p><img src="/post/IDE/image-20200425195437299.png" alt="image-20200425195437299"></p>
<p><a href="http://localhost:8001/renre%E5%B7%B2%E6%8B%A6%E6%88%AA%E8%B7%A8%E6%BA%90%E8%AF%B7%E6%B1%82%EF%BC%9A%E5%90%8C%E6%BA%90%E7%AD%96%E7%95%A5%E7%A6%81%E6%AD%A2%E8%AF%BB%E5%8F%96%E4%BD%8D%E4%BA%8E">http://localhost:8001/renre已拦截跨源请求：同源策略禁止读取位于</a> <a href="http://localhost:88/api/sys/login">http://localhost:88/api/sys/login</a> 的远程资源。（原因：不允许有多个 ‘Access-Control-Allow-Origin’ CORS 头）n-fast&#x2F;captcha.jpg?uuid&#x3D;69c79f02-d15b-478a-8465-a07fd09001e6</p>
<p>出现了多个请求，并且也存在多个跨源请求。</p>
<p>为了解决这个问题，需要修改renren-fast项目，注释掉“io.renren.config.CorsConfig”类。然后再次进行访问。</p>
<p>在显示分类信息的时候，出现了404异常，请求的<a href="http://localhost:88/api/product/category/list/tree%E4%B8%8D%E5%AD%98%E5%9C%A8">http://localhost:88/api/product/category/list/tree不存在</a></p>
<p><img src="/post/IDE/image-20200425213240724.png" alt="image-20200425213240724"></p>
<p>这是因为网关上所做的路径映射不正确，映射后的路径为<a href="http://localhost:8001/renren-fast/product/category/list/tree">http://localhost:8001/renren-fast/product/category/list/tree</a></p>
<p>但是只有通过<a href="http://localhost:10000/product/category/list/tree%E8%B7%AF%E5%BE%84%E6%89%8D%E8%83%BD%E5%A4%9F%E6%AD%A3%E5%B8%B8%E8%AE%BF%E9%97%AE%EF%BC%8C%E6%89%80%E4%BB%A5%E4%BC%9A%E6%8A%A5404%E5%BC%82%E5%B8%B8%E3%80%82">http://localhost:10000/product/category/list/tree路径才能够正常访问，所以会报404异常。</a></p>
<p>解决方法就是定义一个product路由规则，进行路径重写：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>

<p>在路由规则的顺序上，将精确的路由规则放置到模糊的路由规则的前面，否则的话，精确的路由规则将不会被匹配到，类似于异常体系中try catch子句中异常的处理顺序。</p>
<h2 id="15-删除数据"><a href="#15-删除数据" class="headerlink" title="15. 删除数据"></a>15. 删除数据</h2><p>添加delete和append标识，并且增加复选框</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-tree</span><br><span class="line">   :data=&quot;menus&quot;</span><br><span class="line">   show-checkbox  //显示复选框</span><br><span class="line">   :props=&quot;defaultProps&quot;  </span><br><span class="line">   :expand-on-click-node=&quot;false&quot; //设置节点点击时不展开</span><br><span class="line">   node-key=&quot;catId&quot;   </span><br><span class="line"> &gt;</span><br><span class="line">   &lt;span class=&quot;custom-tree-node&quot; slot-scope=&quot;&#123; node, data &#125;&quot;&gt;</span><br><span class="line">     &lt;span&gt;&#123;&#123; node.label &#125;&#125;&lt;/span&gt;</span><br><span class="line">     &lt;span&gt;</span><br><span class="line">       &lt;el-button v-if=&quot;node.level &lt;= 2&quot; type=&quot;text&quot; size=&quot;mini&quot; @click=&quot;() =&gt; append(data)&quot;&gt;Append&lt;/el-button&gt;</span><br><span class="line">       &lt;el-button</span><br><span class="line">         v-if=&quot;node.childNodes.length == 0&quot;</span><br><span class="line">         type=&quot;text&quot;</span><br><span class="line">         size=&quot;mini&quot;</span><br><span class="line">         @click=&quot;() =&gt; remove(node, data)&quot;</span><br><span class="line">       &gt;Delete&lt;/el-button&gt;</span><br><span class="line">     &lt;/span&gt;</span><br><span class="line">   &lt;/span&gt;</span><br><span class="line"> &lt;/el-tree&gt;</span><br></pre></td></tr></table></figure>



<p>测试删除数据，打开postman输入“ <a href="http://localhost:88/api/product/category/delete">http://localhost:88/api/product/category/delete</a> ”，请求方式设置为POST，为了比对效果，可以在删除之前查询数据库的pms_category表：</p>
<p><img src="/post/IDE/image-20200426112814069.png" alt="image-20200426112814069"></p>
<p>由于delete请求接收的是一个数组，所以这里使用JSON方式，传入了一个数组：</p>
<p><img src="/post/IDE/image-20200426113003531.png" alt="image-20200426113003531"></p>
<p>再次查询数据库能够看到cat_id为1000的数据已经被删除了。</p>
<p>修改“com.bigdata.gulimall.product.controller.CategoryController”类，添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] catIds)</span>&#123;</span><br><span class="line">        <span class="comment">//删除之前需要判断待删除的菜单那是否被别的地方所引用。</span></span><br><span class="line"><span class="comment">//		categoryService.removeByIds(Arrays.asList(catIds));</span></span><br><span class="line"></span><br><span class="line">        categoryService.removeMenuByIds(Arrays.asList(catIds));</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>com.bigdata.gulimall.product.service.impl.CategoryServiceImpl</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span>   <span class="keyword">void</span> <span class="title function_">removeMenuByIds</span><span class="params">(List&lt;Long&gt; asList)</span> &#123;</span><br><span class="line">    <span class="comment">//TODO 检查当前的菜单是否被别的地方所引用</span></span><br><span class="line">    categoryDao.deleteBatchIds(asList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>然而多数时候，我们并不希望删除数据，而是标记它被删除了，这就是逻辑删除；</p>
<p>可以设置show_status为0，标记它已经被删除。</p>
<p><img src="/post/IDE/image-20200426115332899.png" alt="image-20200426115332899"></p>
<p>mybatis-plus的逻辑删除：</p>
<p><img src="/post/IDE/image-20200426115420393.png" alt="image-20200426115420393"></p>
<p>配置全局的逻辑删除规则，在“src&#x2F;main&#x2F;resources&#x2F;application.yml”文件中添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>修改“com.bigdata.gulimall.product.entity.CategoryEntity”类，添加上@TableLogic，表明使用逻辑删除：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否显示[0-不显示，1显示]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableLogic(value = &quot;1&quot;,delval = &quot;0&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>

<p>然后在POSTMan中测试一下是否能够满足需要。另外在“src&#x2F;main&#x2F;resources&#x2F;application.yml”文件中，设置日志级别，打印出SQL语句：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.bigdata.gulimall.product:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure>

<p>打印的日志：</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">==&gt;  Preparing: UPDATE pms_category SET show_status=<span class="number">0</span> WHERE cat_id IN ( ? ) AND show_status=<span class="number">1</span> </span><br><span class="line">==&gt; Parameters: <span class="number">1431</span>(Long)</span><br><span class="line">&lt;==    Updates: <span class="number">1</span></span><br><span class="line">get changedGroupKeys:[]</span><br></pre></td></tr></table></figure>



<h2 id="16-菜单拖动"><a href="#16-菜单拖动" class="headerlink" title="16. 菜单拖动"></a>16. 菜单拖动</h2><table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>同一个菜单内拖动</td>
<td>正常</td>
</tr>
<tr>
<td>拖动到父菜单的前面或后面</td>
<td>正常</td>
</tr>
<tr>
<td>拖动到父菜单同级的另外一个菜单中</td>
<td>正常</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>关注的焦点在于，拖动到目标节点中，使得目标节点的catlevel+deep小于3即可。拖动到目标节点前后的条件是，使得</p>
<h3 id="拖动菜单时需要修改顺序和级别"><a href="#拖动菜单时需要修改顺序和级别" class="headerlink" title="拖动菜单时需要修改顺序和级别"></a>拖动菜单时需要修改顺序和级别</h3><p>需要考虑两种类型节点的catLevel</p>
<p>一种关系是：如果是同一个节点下的子节点的前后移动，则不需要修改其catLevel</p>
<p>如果是拖动到另外一个节点内或父节点中，则要考虑修改其catLevel</p>
<p>如果拖动到与父节点平级的节点关系中，则要将该拖动的节点的catLevel，设置为兄弟节点的Level，</p>
<p>先考虑parentCid还是先考虑catLevel?</p>
<p>两种关系在耦合</p>
<p>另外还有一种是前后拖动的情况</p>
<p>哪个范围最大？</p>
<p>肯定是拖动类型关系最大，</p>
<p>如果是前后拖动，则拖动后需要看待拖动节点的层级和设置待拖动节点的parentId，</p>
<p>​       如果待拖动节点和目标节点的层级相同，则认为是同级拖动，只需要修改节点的先后顺序即可；</p>
<p>​       否则认为是跨级拖动，则需要修改层级和重新设置parentID</p>
<p>​              如果</p>
<p>​      以拖动类型来分，并不合适，比较合适的是跨级拖动和同级拖动</p>
<p>如何判断是跨级拖动还是同级拖动，根据拖动的层级来看，如果是同一级的拖动，只需要修改先后顺序即可，但是这样也会存在一个问题，就是当拖动到另外一个分组下的同级目录中，显然也需要修改parentID，究竟什么样的模型最好呢？</p>
<p>  另外也可以判断在跨级移动时，跨级后的parentID是否相同，如果不相同，则认为是在不同目录下的跨级移动需要修改parentID。</p>
<p>顺序、catLevel和parentID</p>
<p>同级移动：</p>
<p>（1）首先判断待移动节点和目标节点的catLevel是否相同，</p>
<p> （2）相同则认为是同级移动，</p>
<p>​          如果此时移动后目标节点的parentID和待移动节点的相同，但是移动类型是前后移动，只需要调整顺序即可，此时移动类型是inner，则需要修改catLevel和parentId和顺序</p>
<p>​         如果此时移动后目标节点的parentID和待移动节点的不相同，但是移动类型是前后移动，则需要调整顺序和parentId，此时移动类型是inner，则需要修改catLevel和parentId和顺序</p>
<p>通过这两步的操作能看到一些共性，如果抽取移动类型作为大的分类，则在这种分类下，</p>
<p>如果是前后移动，则分为下面几种情况：</p>
<p>​    同级别下的前后移动：界定标准为catLevel相同，但是又可以分为parentID相同和parentID不同，parent相同时，只需要修改顺序即可；parentID不同时，需要修改parentID和顺序</p>
<p>​    不同级别下的前后移动：界定标准为catLevel不同，此时无论如何都要修改parentID，顺序和catLevel</p>
<p>如果是inner类型移动，则分为一下的几种情况。</p>
<p>​     此时不论是同级inner，还是跨级innner，都需要修改parentID，顺序和catLevel</p>
<p>哪种情况需要更新子节点呢？</p>
<p>那就要看要拖拽的节点是否含有子节点，如果有子节点，则需要更新子节点的catLevel，不需要更新它之间的顺序和parentId，只需要更新catLevel即可。这种更新子节点的Level应该归类，目前的目标是只要有子节点就更新它的catLevel，</p>
<p>（2）如果待移动节点和目标节点的catLevel不同，则认为是跨级移动。如果是移动到父节点中，则需要设置catLevel，parentID和顺序。此时需要分两种情况来考虑，如果是移动到父节点中，则需要设置catLevel，parentID和顺序，如果是移动到兄弟节点中，则需要设置</p>
<p>包含移动到父节点同级目录，兄弟节点中。</p>
<h3 id="设置菜单拖动开关"><a href="#设置菜单拖动开关" class="headerlink" title="设置菜单拖动开关"></a>设置菜单拖动开关</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-switch v-model=&quot;draggable&quot; active-text=&quot;开启拖拽&quot; inactive-text=&quot;关闭拖拽&quot;&gt;&lt;/el-switch&gt;</span><br></pre></td></tr></table></figure>



<p>但是现在存在的一个问题是每次拖拽的时候，都会发送请求，更新数据库这样频繁的与数据库交互，现在想要实现一个拖拽过程中不更新数据库，拖拽完成后，统一提交拖拽后的数据。</p>
<p>现在还存在一个问题，如果是将一个菜单连续的拖拽，最终还放到了原来的位置，但是updateNode中却出现了很多节点更新信息，这样显然也是一个问题。</p>
<h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button type=&quot;danger&quot; plain size=&quot;small&quot; @click=&quot;batchDelete&quot;&gt;批量删除&lt;/el-button&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除</span></span><br><span class="line">   <span class="title function_">batchDelete</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> checkNodes = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">menuTree</span>.<span class="title function_">getCheckedNodes</span>();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//  console.log(&quot;被选中的节点：&quot;,checkNodes);</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">let</span> catIds = [];</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; checkNodes.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       catIds.<span class="title function_">push</span>(checkNodes[i].<span class="property">catId</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="variable language_">this</span>.$confirm(<span class="string">`确定要删除?`</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">       <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">       <span class="attr">cancelButtonText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">       <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">     &#125;)</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="variable language_">this</span>.$http(&#123;</span><br><span class="line">           <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornUrl</span>(<span class="string">&quot;/product/category/delete&quot;</span>),</span><br><span class="line">           <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">           <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornData</span>(catIds, <span class="literal">false</span>)</span><br><span class="line">         &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">           <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">             <span class="attr">message</span>: <span class="string">&quot;菜单批量删除成功&quot;</span>,</span><br><span class="line">             <span class="attr">type</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">           &#125;);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//重新刷新页面</span></span><br><span class="line">           <span class="variable language_">this</span>.<span class="title function_">getMeus</span>();</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;)</span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="comment">//取消删除</span></span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;,</span><br></pre></td></tr></table></figure>



<h2 id="17-品牌管理菜单"><a href="#17-品牌管理菜单" class="headerlink" title="17. 品牌管理菜单"></a>17. 品牌管理菜单</h2><p><img src="/post/IDE/image-20200428164054517.png" alt="image-20200428164054517"></p>
<p>（2）将“”逆向工程得到的resources\src\views\modules\product文件拷贝到gulimall&#x2F;renren-fast-vue&#x2F;src&#x2F;views&#x2F;modules&#x2F;product目录下，也就是下面的两个文件</p>
<p>brand.vue  brand-add-or-update.vue</p>
<p>但是显示的页面没有新增和删除功能，这是因为权限控制的原因，</p>
<p><img src="/post/IDE/image-20200428170325515.png" alt="image-20200428170325515"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-button v-if=&quot;isAuth(&#x27;product:brand:save&#x27;)&quot; type=&quot;primary&quot; @click=&quot;addOrUpdateHandle()&quot;&gt;新增&lt;/el-button&gt;</span><br><span class="line">&lt;el-button v-if=&quot;isAuth(&#x27;product:brand:delete&#x27;)&quot; type=&quot;danger&quot; @click=&quot;deleteHandle()&quot; :disabled=&quot;dataListSelections.length &lt;= 0&quot;&gt;批量删除&lt;/el-button&gt;</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

<p>查看“isAuth”的定义位置：</p>
<p><img src="/post/IDE/image-20200428170437592.png" alt="image-20200428170437592"></p>
<p>它是在“index.js”中定义，现在将它设置为返回值为true，即可显示添加和删除功能。</p>
<p>再次刷新页面能够看到，按钮已经出现了：</p>
<p><img src="/post/IDE/image-20200428170644511.png" alt="image-20200428170644511"></p>
<h3 id="添加“显示状态按钮”"><a href="#添加“显示状态按钮”" class="headerlink" title="添加“显示状态按钮”"></a>添加“显示状态按钮”</h3><p>brand.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template slot-scope=&quot;scope&quot;&gt;</span><br><span class="line">  &lt;el-switch</span><br><span class="line">    v-model=&quot;scope.row.showStatus&quot;</span><br><span class="line">    active-color=&quot;#13ce66&quot;</span><br><span class="line">    inactive-color=&quot;#ff4949&quot;</span><br><span class="line">    @change=&quot;updateBrandStatus(scope.row)&quot;</span><br><span class="line">    :active-value = &quot;1&quot;</span><br><span class="line">    :inactive-value	= &quot;0&quot;</span><br><span class="line">  &gt;&lt;/el-switch&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>brand-add-or-update.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-form-item label=&quot;显示状态&quot; prop=&quot;showStatus&quot;&gt;</span><br><span class="line">   &lt;el-switch v-model=&quot;dataForm.showStatus&quot; active-color=&quot;#13ce66&quot; inactive-color=&quot;#ff4949&quot;&gt;&lt;/el-switch&gt;</span><br><span class="line">&lt;/el-form-item&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//更新开关的状态</span></span><br><span class="line">    <span class="title function_">updateBrandStatus</span>(<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;最新状态&quot;</span>, data);</span><br><span class="line">      <span class="keyword">let</span> &#123;brandId,showStatus&#125; = data;</span><br><span class="line">      <span class="variable language_">this</span>.$http(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornUrl</span>(<span class="string">&quot;/product/brand/update&quot;</span>),</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">        <span class="attr">data</span>: <span class="variable language_">this</span>.<span class="property">$http</span>.<span class="title function_">adornData</span>(&#123;brandId,showStatus&#125;, <span class="literal">false</span>)</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&quot;状态更新成功&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;success&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>







<h3 id="添加上传"><a href="#添加上传" class="headerlink" title="添加上传"></a>添加上传</h3><p>和传统的单体应用不同，这里我们选择将数据上传到分布式文件服务器上。</p>
<p>这里我们选择将图片放置到阿里云上，使用对象存储。</p>
<p>阿里云上使使用对象存储方式：</p>
<p><img src="/post/IDE/image-20200428182755992.png" alt="image-20200428182755992"></p>
<p>创建Bucket</p>
<p><img src="/post/IDE/image-20200428183041570.png" alt="image-20200428183041570"></p>
<p>上传文件：</p>
<p><img src="/post/IDE/image-20200428183213694.png" alt="image-20200428183213694"></p>
<p>上传成功后，取得图片的URL</p>
<p><img src="/post/IDE/image-20200428183644020.png" alt="image-20200428183644020"></p>
<p>这种方式是手动上传图片，实际上我们可以在程序中设置自动上传图片到阿里云对象存储。</p>
<p>上传模型：</p>
<p><img src="/post/IDE/image-20200428184029655.png" alt="image-20200428184029655"></p>
<p>查看阿里云关于文件上传的帮助： <a href="https://help.aliyun.com/document_detail/32009.html?spm=a2c4g.11186623.6.768.549d59aaWuZMGJ">https://help.aliyun.com/document_detail/32009.html?spm=a2c4g.11186623.6.768.549d59aaWuZMGJ</a> </p>
<h4 id="1）添加依赖包"><a href="#1）添加依赖包" class="headerlink" title="1）添加依赖包"></a>1）添加依赖包</h4><p>在Maven项目中加入依赖项（推荐方式）</p>
<p>在 Maven 工程中使用 OSS Java SDK，只需在 pom.xml 中加入相应依赖即可。以 3.8.0 版本为例，在 <dependencies> 内加入如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2）上传文件流"><a href="#2）上传文件流" class="headerlink" title="2）上传文件流"></a>2）上传文件流</h4><p>以下代码用于上传文件流：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;http://oss-cn-hangzhou.aliyuncs.com&quot;</span>;</span><br><span class="line"><span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;&lt;yourAccessKeyId&gt;&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;&lt;yourAccessKeySecret&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建OSSClient实例。</span></span><br><span class="line"><span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传文件流。</span></span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;&lt;yourlocalFile&gt;&quot;</span>);</span><br><span class="line">ossClient.putObject(<span class="string">&quot;&lt;yourBucketName&gt;&quot;</span>, <span class="string">&quot;&lt;yourObjectName&gt;&quot;</span>, inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭OSSClient。</span></span><br><span class="line">ossClient.shutdown();</span><br></pre></td></tr></table></figure>

<p>endpoint的取值：</p>
<p><img src="/post/IDE/image-20200428190553350.png" alt="image-20200428190553350"></p>
<p>accessKeyId和accessKeySecret需要创建一个RAM账号：</p>
<p><img src="/post/IDE/image-20200428190532924.png" alt="image-20200428190532924"></p>
<p>创建用户完毕后，会得到一个“AccessKey ID”和“AccessKeySecret”，然后复制这两个值到代码的“AccessKey ID”和“AccessKeySecret”。</p>
<p>另外还需要添加访问控制权限：</p>
<p><img src="/post/IDE/image-20200428191518591.png" alt="image-20200428191518591"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;oss-cn-shanghai.aliyuncs.com&quot;</span>;</span><br><span class="line">        <span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI4G4W1RA4JXz2QhoDwHhi&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;R99lmDOJumF2x43ZBKT259Qpe70Oxw&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上传文件流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\timg.jpg&quot;</span>);</span><br><span class="line">        ossClient.putObject(<span class="string">&quot;gulimall-images&quot;</span>, <span class="string">&quot;time.jpg&quot;</span>, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;上传成功.&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>更为简单的使用方式，是使用SpringCloud Alibaba</p>
<p><img src="/post/IDE/image-20200428195507730.png" alt="image-20200428195507730"></p>
<p>详细使用方法，见： <a href="https://help.aliyun.com/knowledge_detail/108650.html">https://help.aliyun.com/knowledge_detail/108650.html</a>  </p>
<p>（1）添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2）创建“AccessKey ID”和“AccessKeySecret”</p>
<p>（3）配置key，secret和endpoint相关信息</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">access-key:</span> <span class="string">LTAI4G4W1RA4JXz2QhoDwHhi</span></span><br><span class="line"><span class="attr">secret-key:</span> <span class="string">R99lmDOJumF2x43ZBKT259Qpe70Oxw</span></span><br><span class="line"><span class="attr">oss:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">oss-cn-shanghai.aliyuncs.com</span></span><br></pre></td></tr></table></figure>



<p>（4）注入OSSClient并进行文件上传下载等操作</p>
<p><img src="/post/IDE/image-20200428224840535.png" alt="image-20200428224840535"></p>
<p>但是这样来做还是比较麻烦，如果以后的上传任务都交给gulimall-product来完成，显然耦合度高。最好单独新建一个Module来完成文件上传任务。</p>
<h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><h4 id="1）新建gulimall-third-party"><a href="#1）新建gulimall-third-party" class="headerlink" title="1）新建gulimall-third-party"></a>1）新建gulimall-third-party</h4><h4 id="2）添加依赖，将原来gulimall-common中的“spring-cloud-starter-alicloud-oss”依赖移动到该项目中"><a href="#2）添加依赖，将原来gulimall-common中的“spring-cloud-starter-alicloud-oss”依赖移动到该项目中" class="headerlink" title="2）添加依赖，将原来gulimall-common中的“spring-cloud-starter-alicloud-oss”依赖移动到该项目中"></a>2）添加依赖，将原来gulimall-common中的“spring-cloud-starter-alicloud-oss”依赖移动到该项目中</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alicloud-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.bigdata.gulimall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gulimall-common<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p> 另外也需要在“pom.xml”文件中，添加如下的依赖管理</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3）在主启动类中开启服务的注册和发现"><a href="#3）在主启动类中开启服务的注册和发现" class="headerlink" title="3）在主启动类中开启服务的注册和发现"></a>3）在主启动类中开启服务的注册和发现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br></pre></td></tr></table></figure>



<h4 id="4）在nacos中注册"><a href="#4）在nacos中注册" class="headerlink" title="4）在nacos中注册"></a>4）在nacos中注册</h4><p>（1）创建命名空间“ gulimall-third-party ”</p>
<p><img src="/post/IDE/image-20200429075831984.png" alt="image-20200429075831984"></p>
<p>（2）在“ gulimall-third-party”命名空间中，创建“ gulimall-third-party.yml”文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">alicloud:</span></span><br><span class="line">      <span class="attr">access-key:</span> <span class="string">LTAI4G4W1RA4JXz2QhoDwHhi</span></span><br><span class="line">      <span class="attr">secret-key:</span> <span class="string">R99lmDOJumF2x43ZBKT259Qpe70Oxw</span></span><br><span class="line">      <span class="attr">oss:</span></span><br><span class="line">        <span class="attr">endpoint:</span> <span class="string">oss-cn-shanghai.aliyuncs.com</span></span><br></pre></td></tr></table></figure>



<h4 id="5）编写配置文件"><a href="#5）编写配置文件" class="headerlink" title="5）编写配置文件"></a>5）编写配置文件</h4><p>application.yml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">30000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gulimall-third-party</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.14</span><span class="string">:8848</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.bigdata.gulimall.product:</span> <span class="string">debug</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>bootstrap.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.name</span>=<span class="string">gulimall-third-party</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.137.14:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">f995d8ee-c53a-4d29-8316-a1ef54775e00</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">gulimall-third-party.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<h4 id="6）-编写测试类"><a href="#6）-编写测试类" class="headerlink" title="6） 编写测试类"></a>6） 编写测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bigdata.gulimall.thirdparty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GulimallThirdPartyApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OSSClient ossClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpload</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Endpoint以杭州为例，其它Region请按实际情况填写。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">endpoint</span> <span class="operator">=</span> <span class="string">&quot;oss-cn-shanghai.aliyuncs.com&quot;</span>;</span><br><span class="line">        <span class="comment">// 云账号AccessKey有所有API访问权限，建议遵循阿里云安全最佳实践，创建并使用RAM子账号进行API访问或日常运维，请登录 https://ram.console.aliyun.com 创建。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeyId</span> <span class="operator">=</span> <span class="string">&quot;LTAI4G4W1RA4JXz2QhoDwHhi&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">accessKeySecret</span> <span class="operator">=</span> <span class="string">&quot;R99lmDOJumF2x43ZBKT259Qpe70Oxw&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建OSSClient实例。</span></span><br><span class="line">        <span class="type">OSS</span> <span class="variable">ossClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSClientBuilder</span>().build(endpoint, accessKeyId, accessKeySecret);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//上传文件流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\timg.jpg&quot;</span>);</span><br><span class="line">        ossClient.putObject(<span class="string">&quot;gulimall-images&quot;</span>, <span class="string">&quot;time3.jpg&quot;</span>, inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭OSSClient。</span></span><br><span class="line">        ossClient.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;上传成功.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>





<p> <a href="https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.6.1527.228d74b8V6IZuT">https://help.aliyun.com/document_detail/31926.html?spm=a2c4g.11186623.6.1527.228d74b8V6IZuT</a> </p>
<p><strong>背景</strong></p>
<p>采用JavaScript客户端直接签名（参见<a href="https://help.aliyun.com/document_detail/31925.html#concept-frd-4gy-5db">JavaScript客户端签名直传</a>）时，AccessKeyID和AcessKeySecret会暴露在前端页面，因此存在严重的安全隐患。因此，OSS提供了服务端签名后直传的方案。</p>
<p><strong>原理介绍</strong></p>
<p><a href="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/6875011751/p1472.png"><img src="http://static-aliyun-doc.oss-cn-hangzhou.aliyuncs.com/assets/img/6875011751/p1472.png" alt="img"></a></p>
<p>服务端签名后直传的原理如下：</p>
<ol>
<li>用户发送上传Policy请求到应用服务器。</li>
<li>应用服务器返回上传Policy和签名给用户。</li>
<li>用户直接上传数据到OSS。</li>
</ol>
<p>编写“com.bigdata.gulimall.thirdparty.controller.OssController”类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bigdata.gulimall.thirdparty.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSS;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.common.utils.BinaryUtil;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.MatchMode;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PolicyConditions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    OSS ossClient;</span><br><span class="line">    <span class="meta">@Value</span> (<span class="string">&quot;$&#123;spring.cloud.alicloud.oss.endpoint&#125;&quot;</span>)</span><br><span class="line">    String endpoint ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.oss.bucket&#125;&quot;)</span></span><br><span class="line">    String bucket ;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.access-key&#125;&quot;)</span></span><br><span class="line">    String accessId ;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.cloud.alicloud.secret-key&#125;&quot;)</span></span><br><span class="line">    String accessKey ;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/oss/policy&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">policy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;https://&quot;</span> + bucket + <span class="string">&quot;.&quot;</span> + endpoint; <span class="comment">// host的格式为 bucketname.endpoint</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">dir</span> <span class="operator">=</span> format; <span class="comment">// 用户上传文件时指定的前缀。</span></span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; respMap=<span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expireEndTime</span> <span class="operator">=</span> System.currentTimeMillis() + expireTime * <span class="number">1000</span>;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expireEndTime);</span><br><span class="line">            <span class="type">PolicyConditions</span> <span class="variable">policyConds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PolicyConditions</span>();</span><br><span class="line">            policyConds.addConditionItem(PolicyConditions.COND_CONTENT_LENGTH_RANGE, <span class="number">0</span>, <span class="number">1048576000</span>);</span><br><span class="line">            policyConds.addConditionItem(MatchMode.StartWith, PolicyConditions.COND_KEY, dir);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">postPolicy</span> <span class="operator">=</span> ossClient.generatePostPolicy(expiration, policyConds);</span><br><span class="line">            <span class="type">byte</span>[] binaryData = postPolicy.getBytes(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">encodedPolicy</span> <span class="operator">=</span> BinaryUtil.toBase64String(binaryData);</span><br><span class="line">            <span class="type">String</span> <span class="variable">postSignature</span> <span class="operator">=</span> ossClient.calculatePostSignature(postPolicy);</span><br><span class="line"></span><br><span class="line">            respMap= <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">            respMap.put(<span class="string">&quot;accessid&quot;</span>, accessId);</span><br><span class="line">            respMap.put(<span class="string">&quot;policy&quot;</span>, encodedPolicy);</span><br><span class="line">            respMap.put(<span class="string">&quot;signature&quot;</span>, postSignature);</span><br><span class="line">            respMap.put(<span class="string">&quot;dir&quot;</span>, dir);</span><br><span class="line">            respMap.put(<span class="string">&quot;host&quot;</span>, host);</span><br><span class="line">            respMap.put(<span class="string">&quot;expire&quot;</span>, String.valueOf(expireEndTime / <span class="number">1000</span>));</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// Assert.fail(e.getMessage());</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ossClient.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> respMap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试： <a href="http://localhost:30000/oss/policy">http://localhost:30000/oss/policy</a> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;accessid&quot;:&quot;LTAI4G4W1RA4JXz2QhoDwHhi&quot;,&quot;policy&quot;:&quot;eyJleHBpcmF0aW9uIjoiMjAyMC0wNC0yOVQwMjo1ODowNy41NzhaIiwiY29uZGl0aW9ucyI6W1siY29udGVudC1sZW5ndGgtcmFuZ2UiLDAsMTA0ODU3NjAwMF0sWyJzdGFydHMtd2l0aCIsIiRrZXkiLCIyMDIwLTA0LTI5LyJdXX0=&quot;,&quot;signature&quot;:&quot;s42iRxtxGFmHyG40StM3d9vOfFk=&quot;,&quot;dir&quot;:&quot;2020-04-29/&quot;,&quot;host&quot;:&quot;https://gulimall-images.oss-cn-shanghai.aliyuncs.com&quot;,&quot;expire&quot;:&quot;1588129087&quot;&#125;</span><br></pre></td></tr></table></figure>



<p>以后在上传文件时的访问路径为“ <a href="http://localhost:88/api/thirdparty/oss/policy%E2%80%9D%EF%BC%8C">http://localhost:88/api/thirdparty/oss/policy”，</a></p>
<p>在“gulimall-gateway”中配置路由规则：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">third_party_route</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-gateway</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/thirdparty/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/thirdparty/(?&lt;segment&gt;/?.*),/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>



<p>测试是否能够正常跳转： <a href="http://localhost:88/api/thirdparty/oss/policy">http://localhost:88/api/thirdparty/oss/policy</a> </p>
<p><img src="/post/IDE/image-20200429111408164.png" alt="image-20200429111408164"></p>
<h3 id="上传组件"><a href="#上传组件" class="headerlink" title="上传组件"></a>上传组件</h3><p>放置项目提供的upload文件夹到components目录下，一个是单文件上传，另外一个是多文件上传</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PS D:\Project\gulimall\renren-fast-vue\src\components\upload&gt; ls</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    目录: D:\Project\gulimall\renren-fast-vue\src\components\upload</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----                -------------         ------ ----</span><br><span class="line">-a----  2020/4/29 星期三     12:0           3122 multiUpload.vue</span><br><span class="line">                                2</span><br><span class="line">-a----  2019/11/11 星期一     21:            343 policy.js</span><br><span class="line">                               20</span><br><span class="line">-a----  2020/4/29 星期三     12:0           3053 singleUpload.vue</span><br><span class="line">                                1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PS D:\Project\gulimall\renren-fast-vue\src\components\upload&gt;</span><br></pre></td></tr></table></figure>



<p>修改这两个文件的配置后</p>
<p>开始执行上传，但是在上传过程中，出现了如下的问题：</p>
<p><img src="/post/IDE/image-20200429124629150.png" alt="image-20200429124629150"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Access to XMLHttpRequest at &#x27;http://gulimall-images.oss-cn-shanghai.aliyuncs.com/&#x27; from origin &#x27;http://localhost:8001&#x27; has been blocked by CORS policy: Response to preflight request doesn&#x27;t pass access control check: No &#x27;Access-Control-Allow-Origin&#x27; header is present on the requested resource.</span><br></pre></td></tr></table></figure>

<p>这又是一个跨域的问题，解决方法就是在阿里云上开启跨域访问：</p>
<p><img src="/post/IDE/image-20200429124940091.png" alt="image-20200429124940091"></p>
<p>再次执行文件上传。</p>
<h2 id="18-JSR303校验"><a href="#18-JSR303校验" class="headerlink" title="18. JSR303校验"></a>18. JSR303校验</h2><h3 id="步骤1：使用校验注解"><a href="#步骤1：使用校验注解" class="headerlink" title="步骤1：使用校验注解"></a>步骤1：使用校验注解</h3><p>在Java中提供了一系列的校验方式，它这些校验方式在“javax.validation.constraints”包中，提供了如@Email，@NotNull等注解。</p>
<p>在非空处理方式上提供了@NotNull，@Blank和@</p>
<p>（1）@NotNull</p>
<p>The annotated element must not be null. Accepts any type.<br>注解元素禁止为null，能够接收任何类型</p>
<p>（2）@NotEmpty</p>
<p>the annotated element must not be null nor empty.</p>
<p>该注解修饰的字段不能为null或””</p>
<p>Supported types are:</p>
<p>支持以下几种类型</p>
<p>CharSequence (length of character sequence is evaluated)</p>
<p>字符序列（字符序列长度的计算）</p>
<p>Collection (collection size is evaluated)<br>集合长度的计算</p>
<p>Map (map size is evaluated)<br>map长度的计算</p>
<p>Array (array length is evaluated)<br>数组长度的计算</p>
<p>（3）@NotBlank</p>
<p>The annotated element must not be null and must contain at least one non-whitespace character. Accepts CharSequence.<br>该注解不能为null，并且至少包含一个非空白字符。接收字符序列。</p>
<h3 id="步骤2：在请求方法种，使用校验注解-Valid，开启校验，"><a href="#步骤2：在请求方法种，使用校验注解-Valid，开启校验，" class="headerlink" title="步骤2：在请求方法种，使用校验注解@Valid，开启校验，"></a>步骤2：在请求方法种，使用校验注解@Valid，开启校验，</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand)</span>&#123;</span><br><span class="line">brandService.save(brand);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> R.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<p>测试： <a href="http://localhost:88/api/product/brand/save">http://localhost:88/api/product/brand/save</a> </p>
<p>在postman种发送上面的请求</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-29T09:20:46.383+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;NotBlank.brandEntity.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank.java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;brandEntity.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;name&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;不能为空&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brandEntity&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object=&#x27;brandEntity&#x27;. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/product/brand/save&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>能够看到”defaultMessage”: “不能为空”，这些错误消息定义在“hibernate-validator”的“\org\hibernate\validator\ValidationMessages_zh_CN.properties”文件中。在该文件中定义了很多的错误规则：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">javax.validation.constraints.AssertFalse.message</span>     = <span class="string">只能为false</span></span><br><span class="line"><span class="attr">javax.validation.constraints.AssertTrue.message</span>      = <span class="string">只能为true</span></span><br><span class="line"><span class="attr">javax.validation.constraints.DecimalMax.message</span>      = <span class="string">必须小于或等于&#123;value&#125;</span></span><br><span class="line"><span class="attr">javax.validation.constraints.DecimalMin.message</span>      = <span class="string">必须大于或等于&#123;value&#125;</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Digits.message</span>          = <span class="string">数字的值超出了允许范围(只允许在&#123;integer&#125;位整数和&#123;fraction&#125;位小数范围内)</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Email.message</span>           = <span class="string">不是一个合法的电子邮件地址</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Future.message</span>          = <span class="string">需要是一个将来的时间</span></span><br><span class="line"><span class="attr">javax.validation.constraints.FutureOrPresent.message</span> = <span class="string">需要是一个将来或现在的时间</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Max.message</span>             = <span class="string">最大不能超过&#123;value&#125;</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Min.message</span>             = <span class="string">最小不能小于&#123;value&#125;</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Negative.message</span>        = <span class="string">必须是负数</span></span><br><span class="line"><span class="attr">javax.validation.constraints.NegativeOrZero.message</span>  = <span class="string">必须是负数或零</span></span><br><span class="line"><span class="attr">javax.validation.constraints.NotBlank.message</span>        = <span class="string">不能为空</span></span><br><span class="line"><span class="attr">javax.validation.constraints.NotEmpty.message</span>        = <span class="string">不能为空</span></span><br><span class="line"><span class="attr">javax.validation.constraints.NotNull.message</span>         = <span class="string">不能为null</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Null.message</span>            = <span class="string">必须为null</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Past.message</span>            = <span class="string">需要是一个过去的时间</span></span><br><span class="line"><span class="attr">javax.validation.constraints.PastOrPresent.message</span>   = <span class="string">需要是一个过去或现在的时间</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Pattern.message</span>         = <span class="string">需要匹配正则表达式&quot;&#123;regexp&#125;&quot;</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Positive.message</span>        = <span class="string">必须是正数</span></span><br><span class="line"><span class="attr">javax.validation.constraints.PositiveOrZero.message</span>  = <span class="string">必须是正数或零</span></span><br><span class="line"><span class="attr">javax.validation.constraints.Size.message</span>            = <span class="string">个数必须在&#123;min&#125;和&#123;max&#125;之间</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.CreditCardNumber.message</span>        = <span class="string">不合法的信用卡号码</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Currency.message</span>                = <span class="string">不合法的货币 (必须是&#123;value&#125;其中之一)</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.EAN.message</span>                     = <span class="string">不合法的&#123;type&#125;条形码</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Email.message</span>                   = <span class="string">不是一个合法的电子邮件地址</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Length.message</span>                  = <span class="string">长度需要在&#123;min&#125;和&#123;max&#125;之间</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.CodePointLength.message</span>         = <span class="string">长度需要在&#123;min&#125;和&#123;max&#125;之间</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.LuhnCheck.message</span>               = <span class="string">$&#123;validatedValue&#125;的校验码不合法, Luhn模10校验和不匹配</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Mod10Check.message</span>              = <span class="string">$&#123;validatedValue&#125;的校验码不合法, 模10校验和不匹配</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Mod11Check.message</span>              = <span class="string">$&#123;validatedValue&#125;的校验码不合法, 模11校验和不匹配</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.ModCheck.message</span>                = <span class="string">$&#123;validatedValue&#125;的校验码不合法, $&#123;modType&#125;校验和不匹配</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.NotBlank.message</span>                = <span class="string">不能为空</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.NotEmpty.message</span>                = <span class="string">不能为空</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.ParametersScriptAssert.message</span>  = <span class="string">执行脚本表达式&quot;&#123;script&#125;&quot;没有返回期望结果</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.Range.message</span>                   = <span class="string">需要在&#123;min&#125;和&#123;max&#125;之间</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.SafeHtml.message</span>                = <span class="string">可能有不安全的HTML内容</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.ScriptAssert.message</span>            = <span class="string">执行脚本表达式&quot;&#123;script&#125;&quot;没有返回期望结果</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.URL.message</span>                     = <span class="string">需要是一个合法的URL</span></span><br><span class="line"></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.time.DurationMax.message</span>        = <span class="string">必须小于$&#123;inclusive == true ? &#x27;或等于&#x27; : &#x27;&#x27;&#125;$&#123;days == 0 ? &#x27;&#x27; : days += &#x27;天&#x27;&#125;$&#123;hours == 0 ? &#x27;&#x27; : hours += &#x27;小时&#x27;&#125;$&#123;minutes == 0 ? &#x27;&#x27; : minutes += &#x27;分钟&#x27;&#125;$&#123;seconds == 0 ? &#x27;&#x27; : seconds += &#x27;秒&#x27;&#125;$&#123;millis == 0 ? &#x27;&#x27; : millis += &#x27;毫秒&#x27;&#125;$&#123;nanos == 0 ? &#x27;&#x27; : nanos += &#x27;纳秒&#x27;&#125;</span></span><br><span class="line"><span class="attr">org.hibernate.validator.constraints.time.DurationMin.message</span>        = <span class="string">必须大于$&#123;inclusive == true ? &#x27;或等于&#x27; : &#x27;&#x27;&#125;$&#123;days == 0 ? &#x27;&#x27; : days += &#x27;天&#x27;&#125;$&#123;hours == 0 ? &#x27;&#x27; : hours += &#x27;小时&#x27;&#125;$&#123;minutes == 0 ? &#x27;&#x27; : minutes += &#x27;分钟&#x27;&#125;$&#123;seconds == 0 ? &#x27;&#x27; : seconds += &#x27;秒&#x27;&#125;$&#123;millis == 0 ? &#x27;&#x27; : millis += &#x27;毫秒&#x27;&#125;$&#123;nanos == 0 ? &#x27;&#x27; : nanos += &#x27;纳秒&#x27;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>想要自定义错误消息，可以覆盖默认的错误提示信息，如@NotBlank的默认message是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotBlank &#123;</span><br><span class="line"></span><br><span class="line">	String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;javax.validation.constraints.NotBlank.message&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>可以在添加注解的时候，修改message：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须非空&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<p>当再次发送请求时，得到的错误提示信息：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;timestamp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2020-04-29T09:36:04.125+0000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span> <span class="number">400</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Bad Request&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;errors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;NotBlank.brandEntity.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank.java.lang.String&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;codes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                        <span class="string">&quot;brandEntity.name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="string">&quot;name&quot;</span></span><br><span class="line">                    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;arguments&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defaultMessage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;品牌名必须非空&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;objectName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brandEntity&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;rejectedValue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;bindingFailure&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NotBlank&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Validation failed for object=&#x27;brandEntity&#x27;. Error count: 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/product/brand/save&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>但是这种返回的错误结果并不符合我们的业务需要。</p>
<h3 id="步骤3：给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。"><a href="#步骤3：给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。" class="headerlink" title="步骤3：给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。"></a>步骤3：给校验的Bean后，紧跟一个BindResult，就可以获取到校验的结果。拿到校验的结果，就可以自定义的封装。</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> BrandEntity brand, BindingResult result)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>( result.hasErrors())&#123;</span><br><span class="line">           Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">           <span class="comment">//1.获取错误的校验结果</span></span><br><span class="line">           result.getFieldErrors().forEach((item)-&gt;&#123;</span><br><span class="line">               <span class="comment">//获取发生错误时的message</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> item.getDefaultMessage();</span><br><span class="line">               <span class="comment">//获取发生错误的字段</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> item.getField();</span><br><span class="line">               map.put(field,message);</span><br><span class="line">           &#125;);</span><br><span class="line">           <span class="keyword">return</span> R.error(<span class="number">400</span>,<span class="string">&quot;提交的数据不合法&quot;</span>).put(<span class="string">&quot;data&quot;</span>,map);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">	brandService.save(brand);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> R.ok();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这种是针对于该请求设置了一个内容校验，如果针对于每个请求都单独进行配置，显然不是太合适，实际上可以统一的对于异常进行处理。</p>
<h3 id="步骤4：统一异常处理"><a href="#步骤4：统一异常处理" class="headerlink" title="步骤4：统一异常处理"></a>步骤4：统一异常处理</h3><p>可以使用SpringMvc所提供的@ControllerAdvice，通过“basePackages”能够说明处理哪些路径下的异常。</p>
<p>（1）抽取一个异常处理类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bigdata.gulimall.product.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bigdata.common.utils.R;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.BindingResult;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestControllerAdvice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 集中处理所有异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.bigdata.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GulimallExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleValidException</span><span class="params">(MethodArgumentNotValidException exception)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">BindingResult</span> <span class="variable">bindingResult</span> <span class="operator">=</span> exception.getBindingResult();</span><br><span class="line">        bindingResult.getFieldErrors().forEach(fieldError -&gt; &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> fieldError.getDefaultMessage();</span><br><span class="line">            <span class="type">String</span> <span class="variable">field</span> <span class="operator">=</span> fieldError.getField();</span><br><span class="line">            map.put(field,message);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        log.error(<span class="string">&quot;数据校验出现问题&#123;&#125;,异常类型&#123;&#125;&quot;</span>,exception.getMessage(),exception.getClass());</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>,<span class="string">&quot;数据校验出现问题&quot;</span>).put(<span class="string">&quot;data&quot;</span>,map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（2）测试： <a href="http://localhost:88/api/product/brand/save">http://localhost:88/api/product/brand/save</a> </p>
<p><img src="/post/IDE/image-20200429183334783.png" alt="image-20200429183334783"></p>
<p>（3）默认异常处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line"> <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">     log.error(<span class="string">&quot;未知异常&#123;&#125;,异常类型&#123;&#125;&quot;</span>,throwable.getMessage(),throwable.getClass());</span><br><span class="line">     <span class="keyword">return</span> R.error(BizCodeEnum.UNKNOW_EXEPTION.getCode(),BizCodeEnum.UNKNOW_EXEPTION.getMsg());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>（4）错误状态码</p>
<p>上面代码中，针对于错误状态码，是我们进行随意定义的，然而正规开发过程中，错误状态码有着严格的定义规则，如该在项目中我们的错误状态码定义</p>
<p><img src="/post/IDE/image-20200429183748249.png" alt="image-20200429183748249"></p>
<p>为了定义这些错误状态码，我们可以单独定义一个常量类，用来存储这些错误状态码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bigdata.common.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 错误码和错误信息定义类</span></span><br><span class="line"><span class="comment"> * 1. 错误码定义规则为5为数字</span></span><br><span class="line"><span class="comment"> * 2. 前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常</span></span><br><span class="line"><span class="comment"> * 3. 维护错误码后需要维护错误描述，将他们定义为枚举形式</span></span><br><span class="line"><span class="comment"> * 错误码列表：</span></span><br><span class="line"><span class="comment"> *  10: 通用</span></span><br><span class="line"><span class="comment"> *      001：参数格式校验</span></span><br><span class="line"><span class="comment"> *  11: 商品</span></span><br><span class="line"><span class="comment"> *  12: 订单</span></span><br><span class="line"><span class="comment"> *  13: 购物车</span></span><br><span class="line"><span class="comment"> *  14: 物流</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">BizCodeEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    UNKNOW_EXEPTION(<span class="number">10000</span>,<span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line"></span><br><span class="line">    VALID_EXCEPTION( <span class="number">10001</span>,<span class="string">&quot;参数格式校验失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    BizCodeEnum(<span class="type">int</span> code, String msg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>（5）测试： <a href="http://localhost:88/api/product/brand/save">http://localhost:88/api/product/brand/save</a> </p>
<img src="/post/IDE/image-20200429191830967.png" alt="image-20200429191830967" style="zoom:67%;" />

<h2 id="19-分组校验功能（完成多场景的复杂校验）"><a href="#19-分组校验功能（完成多场景的复杂校验）" class="headerlink" title="19. 分组校验功能（完成多场景的复杂校验）"></a>19. 分组校验功能（完成多场景的复杂校验）</h2><h3 id="1、给校验注解，标注上groups，指定什么情况下才需要进行校验"><a href="#1、给校验注解，标注上groups，指定什么情况下才需要进行校验" class="headerlink" title="1、给校验注解，标注上groups，指定什么情况下才需要进行校验"></a>1、给校验注解，标注上groups，指定什么情况下才需要进行校验</h3><p>如：指定在更新和添加的时候，都需要进行校验</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="meta">@NotBlank(message = &quot;品牌名必须非空&quot;,groups = &#123;UpdateGroup.class,AddGroup.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br></pre></td></tr></table></figure>

<p>在这种情况下，没有指定分组的校验注解，默认是不起作用的。想要起作用就必须要加groups。</p>
<h3 id="2、业务方法参数上使用-Validated注解"><a href="#2、业务方法参数上使用-Validated注解" class="headerlink" title="2、业务方法参数上使用@Validated注解"></a>2、业务方法参数上使用@Validated注解</h3><p>@Validated的value方法：</p>
<p>Specify one or more validation groups to apply to the validation step kicked off by this annotation.<br> 指定一个或多个验证组以应用于此注释启动的验证步骤。 </p>
<p>JSR-303 defines validation groups as custom annotations which an application declares for the sole purpose of using<br>them as type-safe group arguments, as implemented in SpringValidatorAdapter.</p>
<p> JSR-303 将验证组定义为自定义注释，应用程序声明的唯一目的是将它们用作类型安全组参数，如 SpringValidatorAdapter 中实现的那样。 </p>
<p>Other SmartValidator implementations may support class arguments in other ways as well.</p>
<p> 其他SmartValidator 实现也可以以其他方式支持类参数。 </p>
<h3 id="3、默认情况下，在分组校验情况下，没有指定指定分组的校验注解，将不会生效，它只会在不分组的情况下生效。"><a href="#3、默认情况下，在分组校验情况下，没有指定指定分组的校验注解，将不会生效，它只会在不分组的情况下生效。" class="headerlink" title="3、默认情况下，在分组校验情况下，没有指定指定分组的校验注解，将不会生效，它只会在不分组的情况下生效。"></a>3、默认情况下，在分组校验情况下，没有指定指定分组的校验注解，将不会生效，它只会在不分组的情况下生效。</h3><h2 id="20-自定义校验功能"><a href="#20-自定义校验功能" class="headerlink" title="20. 自定义校验功能"></a>20. 自定义校验功能</h2><h3 id="1、编写一个自定义的校验注解"><a href="#1、编写一个自定义的校验注解" class="headerlink" title="1、编写一个自定义的校验注解"></a>1、编写一个自定义的校验注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class&#125;)</span></span><br><span class="line"><span class="meta">@Target(&#123; METHOD, FIELD, ANNOTATION_TYPE, CONSTRUCTOR, PARAMETER, TYPE_USE &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line">    String <span class="title function_">message</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&#123;com.bigdata.common.valid.ListValue.message&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? <span class="keyword">extends</span> <span class="title class_">Payload</span>&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span>[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="2、编写一个自定义的校验器"><a href="#2、编写一个自定义的校验器" class="headerlink" title="2、编写一个自定义的校验器"></a>2、编写一个自定义的校验器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title class_">ConstraintValidator</span>&lt;ListValue,Integer&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initialize</span><span class="params">(ListValue constraintAnnotation)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] value = constraintAnnotation.value();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : value) &#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(Integer value, ConstraintValidatorContext context)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  set.contains(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="3、关联自定义的校验器和自定义的校验注解"><a href="#3、关联自定义的校验器和自定义的校验注解" class="headerlink" title="3、关联自定义的校验器和自定义的校验注解"></a>3、关联自定义的校验器和自定义的校验注解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Constraint(validatedBy = &#123; ListValueConstraintValidator.class&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="4、使用实例"><a href="#4、使用实例" class="headerlink" title="4、使用实例"></a>4、使用实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 显示状态[0-不显示；1-显示]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ListValue(value = &#123;0,1&#125;,groups =&#123;AddGroup.class&#125;)</span></span><br><span class="line"><span class="keyword">private</span> Integer showStatus;</span><br></pre></td></tr></table></figure>

<h2 id="21-商品SPU和SKU管理"><a href="#21-商品SPU和SKU管理" class="headerlink" title="21. 商品SPU和SKU管理"></a>21. 商品SPU和SKU管理</h2><p>重新执行“sys_menus.sql”</p>
<h2 id="22-点击子组件，父组件触发事件"><a href="#22-点击子组件，父组件触发事件" class="headerlink" title="22. 点击子组件，父组件触发事件"></a>22. 点击子组件，父组件触发事件</h2><p>现在想要实现点击菜单的左边，能够实现在右边展示数据</p>
<p><img src="/post/IDE/image-20200430215649355.png" alt="image-20200430215649355"></p>
<p>父子组件传递数据：</p>
<p>1）子组件给父组件传递数据，事件机制；</p>
<p>在category中绑定node-click事件，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el-tree :data=&quot;menus&quot; :props=&quot;defaultProps&quot; node-key=&quot;catId&quot; ref=&quot;menuTree&quot; @node-click=&quot;nodeClick&quot;	&gt;&lt;/el-tree&gt;</span><br></pre></td></tr></table></figure>

<p>2）子组件给父组件发送一个事件，携带上数据；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">nodeClick</span>(<span class="params">data,Node,component</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;子组件&quot;</span>,data,<span class="title class_">Node</span>,component);</span><br><span class="line">   <span class="variable language_">this</span>.$emit(<span class="string">&quot;tree-node-click&quot;</span>,data,<span class="title class_">Node</span>,component);</span><br><span class="line">&#125;, </span><br></pre></td></tr></table></figure>

<p>this.$emit(事件名,”携带的数据”);</p>
<p>3）父组件中的获取发送的事件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;category @tree-node-click=&quot;treeNodeClick&quot;&gt;&lt;/category&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取发送的事件数据</span></span><br><span class="line"><span class="title function_">treeNodeClick</span>(<span class="params">data,Node,component</span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;attgroup感知到的category的节点被点击&quot;</span>,data,<span class="title class_">Node</span>,component);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;刚才被点击的菜单ID&quot;</span>,data.<span class="property">catId</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<h2 id="23-规格参数新增与VO"><a href="#23-规格参数新增与VO" class="headerlink" title="23. 规格参数新增与VO"></a>23. 规格参数新增与VO</h2><p>规格参数新增时，请求的URL：Request URL: </p>
<p><a href="http://localhost:88/api/product/attr/base/list/0?t=1588731762158&page=1&limit=10&key=">http://localhost:88/api/product/attr/base/list/0?t=1588731762158&amp;page=1&amp;limit=10&amp;key=</a></p>
<p>当有新增字段时，我们往往会在entity实体类中新建一个字段，并标注数据库中不存在该字段，然而这种方式并不规范</p>
<p><img src="/post/IDE/1588732021702.png" alt="1588732021702"></p>
<p>比较规范的做法是，新建一个vo文件夹，将每种不同的对象，按照它的功能进行了划分。在java中，涉及到了这几种类型</p>
<p><img src="/post/IDE/1588732152646.png" alt="1588732152646"></p>
<p>Request URL: <a href="http://localhost:88/api/product/attr/save%EF%BC%8C%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%83%85%E5%86%B5%E6%98%AF%EF%BC%8C%E5%AE%83%E5%9C%A8%E4%BF%9D%E5%AD%98%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E5%8F%AA%E6%98%AF%E4%BF%9D%E5%AD%98%E4%BA%86attr%EF%BC%8C%E5%B9%B6%E6%B2%A1%E6%9C%89%E4%BF%9D%E5%AD%98attrgroup%EF%BC%8C%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%86%B3%E8%BF%99%E4%B8%AA%E9%97%AE%E9%A2%98%EF%BC%8C%E6%88%91%E4%BB%AC%E6%96%B0%E5%BB%BA%E4%BA%86%E4%B8%80%E4%B8%AAvo/AttrVo%EF%BC%8C%E5%9C%A8%E5%8E%9FAttrEntity%E5%9F%BA%E7%A1%80%E4%B8%8A%E5%A2%9E%E5%8A%A0%E4%BA%86attrGroupId%E5%AD%97%E6%AE%B5%EF%BC%8C%E4%BD%BF%E5%BE%97%E4%BF%9D%E5%AD%98%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE%E7%9A%84%E6%97%B6%E5%80%99%EF%BC%8C%E4%B9%9F%E4%BF%9D%E5%AD%98%E4%BA%86%E5%AE%83%E4%BB%AC%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%E3%80%82">http://localhost:88/api/product/attr/save，现在的情况是，它在保存的时候，只是保存了attr，并没有保存attrgroup，为了解决这个问题，我们新建了一个vo/AttrVo，在原AttrEntity基础上增加了attrGroupId字段，使得保存新增数据的时候，也保存了它们之间的关系。</a></p>
<p>通过” BeanUtils.copyProperties(attr,attrEntity);”能够实现在两个Bean之间拷贝数据，但是两个Bean的字段要相同</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAttr</span><span class="params">(AttrVo attr)</span> &#123;</span><br><span class="line">     <span class="type">AttrEntity</span> <span class="variable">attrEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AttrEntity</span>();</span><br><span class="line">     BeanUtils.copyProperties(attr,attrEntity);</span><br><span class="line">     <span class="built_in">this</span>.save(attrEntity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>问题：现在有两个查询，一个是查询部分，另外一个是查询全部，但是又必须这样来做吗？还是有必要的，但是可以在后台进行设计，两种查询是根据catId是否为零进行区分的。</p>
<h2 id="24-查询分组关联属性和删除关联"><a href="#24-查询分组关联属性和删除关联" class="headerlink" title="24. 查询分组关联属性和删除关联"></a>24. 查询分组关联属性和删除关联</h2><p>获取属性分组的关联的所有属性</p>
<p>API：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/LnjzZHPj">https://easydoc.xyz/doc/75716633/ZUqEdvA4/LnjzZHPj</a></p>
<p>发送请求：&#x2F;product&#x2F;attrgroup&#x2F;{attrgroupId}&#x2F;attr&#x2F;relation</p>
<p>获取当前属性分组所关联的属性</p>
<p><img src="/post/IDE/1588766303205.png" alt="1588766303205"></p>
<p>如何查找：既然给出了attr_group_id，那么到中间表中查询出来所关联的attr_id，然后得到最终的所有属性即可。</p>
<p>可能出现null值的问题</p>
<h2 id="25-查询分组未关联的属性"><a href="#25-查询分组未关联的属性" class="headerlink" title="25. 查询分组未关联的属性"></a>25. 查询分组未关联的属性</h2><p>&#x2F;product&#x2F;attrgroup&#x2F;{attrgroupId}&#x2F;noattr&#x2F;relation</p>
<p>API：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/d3EezLdO">https://easydoc.xyz/doc/75716633/ZUqEdvA4/d3EezLdO</a></p>
<p>获取属性分组里面还没有关联的本分类里面的其他基本属性，方便添加新的关联</p>
<p>Request URL: <a href="http://localhost:88/api/product/attrgroup/1/noattr/relation?t=1588780783441&page=1&limit=10&key=">http://localhost:88/api/product/attrgroup/1/noattr/relation?t=1588780783441&amp;page=1&amp;limit=10&amp;key=</a></p>
<p><img src="/post/IDE/1588780868214.png" alt="1588780868214"></p>
<p>属性分组，对应于“pms_attr_group”表，每个分组下，需要查看到关联了哪些属性信息，销售属性不需要和分组进行关联，但是规格参数要和属性分组进行关联。</p>
<p>规格参数：对应于<code>pms_attr</code>表，attr_type&#x3D;1，需要显示分组信息</p>
<p>销售属性：对应于pms_attr&#96;表，attr_type&#x3D;0，不需要显示分组信息</p>
<p>分组ID为9的分组：Request URL: <a href="http://localhost:88/api/product/attrgroup/9/noattr/relation?t=1588822258669&page=1&limit=10&key=">http://localhost:88/api/product/attrgroup/9/noattr/relation?t=1588822258669&amp;page=1&amp;limit=10&amp;key=</a></p>
<p>对应的数据库字段</p>
<p>attr_group_id  attr_group_name    sort  descript                icon    catelog_id  </p>
<hr>
<pre><code>        9  主体                    1  型号 平台                   wu               454
       10  显卡                    1  显存容量                    wu               454
       11  输入设备                  1  鼠标 键盘                   wu               454
       12  主板                    1  显卡类型 芯片组                wu               454
       13  规格                    1  尺寸                      wu               454
</code></pre>
<p>查询attrgroupId&#x3D;9的属性分组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AttrGroupEntity</span> <span class="variable">attrGroupEntity</span> <span class="operator">=</span> attrGroupDao.selectById(attrgroupId);</span><br></pre></td></tr></table></figure>

<p>获取到分类信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Long catelogId = attrGroupEntity.getCatelogId();</span><br></pre></td></tr></table></figure>



<p>目标：获取属性分组没有关联的其他属性</p>
<p>也就是获取attrgroupId&#x3D;9的属性分组中，关联的分类catelog_id &#x3D;454 （台式机），其他基本属性</p>
<p>在该属性分组中，现在已经关联的属性：</p>
<p><img src="/post/IDE/1588822997675.png" alt="1588822997675"></p>
<p>本分类下，存在哪些基本属性？</p>
<p>没有关联的其他属性</p>
<p>已经关联的属性，这些属性是如何关联上的？</p>
<p>答：在创建规格参数的时候，已经设置了需要关联哪些属性分组。</p>
<p>想要知道还没有关联哪些，先查看关联了哪些，如何排除掉这些就是未关联的</p>
<p>在中间表中显示了属性和属性分组之间的关联关系，在属性表中显示了所有的属性，</p>
<p>先查询中间表，得到所有已经关联的属性的id，然后再次查询属性表，排除掉已经建立关联的属性ID，将剩下的属性ID和属性建立起关联关系</p>
<h2 id="26-添加属性和分组的关联关系"><a href="#26-添加属性和分组的关联关系" class="headerlink" title="26. 添加属性和分组的关联关系"></a>26. 添加属性和分组的关联关系</h2><p>请求类型：Request URL: <a href="http://localhost:88/api/product/attrgroup/attr/relation">http://localhost:88/api/product/attrgroup/attr/relation</a></p>
<p>请求方式：POST</p>
<p>请求数据：[{“attrId”:10,”attrGroupId”:9}]</p>
<p>API：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/VhgnaedC">https://easydoc.xyz/doc/75716633/ZUqEdvA4/VhgnaedC</a></p>
<p>响应数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;success&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>本质就是在中间表pms_attr_attrgroup_relation中，添加一条记录的过程</p>
<h2 id="27-发布商品"><a href="#27-发布商品" class="headerlink" title="27. 发布商品"></a>27. 发布商品</h2><p>获取所有会员等级：&#x2F;member&#x2F;memberlevel&#x2F;list</p>
<p>API：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/jCFganpf">https://easydoc.xyz/doc/75716633/ZUqEdvA4/jCFganpf</a></p>
<p>在“gulimall-gateway”中修改“”文件，添加对于member的路由</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">id:</span> <span class="string">gulimall-member</span></span><br><span class="line">  <span class="attr">uri:</span> <span class="string">lb://gulimall-member</span></span><br><span class="line">  <span class="attr">predicates:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Path=/api/member/**</span></span><br><span class="line">  <span class="attr">filters:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RewritePath=/api/(?&lt;segment&gt;/?.*),/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure>



<p>在“gulimall-member”中，创建“bootstrap.properties”文件，内容如下：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.cloud.nacos.config.name</span>=<span class="string">gulimall-member</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.server-addr</span>=<span class="string">192.168.137.14:8848</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.namespace</span>=<span class="string">795521fa-77ef-411e-a8d8-0889fdfe6964</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">gulimall-member.yml</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">DEFAULT_GROUP</span></span><br><span class="line"><span class="attr">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>



<p>获取分类关联的品牌：&#x2F;product&#x2F;categorybrandrelation&#x2F;brands&#x2F;list</p>
<p>API：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/HgVjlzWV">https://easydoc.xyz/doc/75716633/ZUqEdvA4/HgVjlzWV</a></p>
<p>遇到PubSub问题</p>
<ol>
<li>首先安装pubsub-js</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`npm install --save pubsub-js`</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>订阅方组件</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`import PubSub from &#x27;pubsub-js&#x27;`</span><br></pre></td></tr></table></figure>

<p>该this.PubSub为PubSub。</p>
<p>获取分类下所有分组&amp;关联属性</p>
<p>请求类型：&#x2F;product&#x2F;attrgroup&#x2F;{catelogId}&#x2F;withattr</p>
<p>请求方式：GET</p>
<p>请求URL：<a href="http://localhost:88/api/product/attrgroup/225/withattr?t=1588864569478">http://localhost:88/api/product/attrgroup/225/withattr?t=1588864569478</a></p>
<p>mysql默认的隔离级别为读已提交，为了能够在调试过程中，获取到数据库中的数据信息，可以调整隔离级别为读未提交：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</span><br></pre></td></tr></table></figure>

<p>但是它对于当前的事务窗口生效，如果想要设置全局的，需要加上global字段。</p>
<h2 id="28-商品管理"><a href="#28-商品管理" class="headerlink" title="28. 商品管理"></a>28. 商品管理</h2><p>当新建时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t: 1588983621569</span><br><span class="line">status: 0</span><br><span class="line">key: </span><br><span class="line">brandId: 0</span><br><span class="line">catelogId: 0</span><br><span class="line">page: 1</span><br><span class="line">limit: 10</span><br></pre></td></tr></table></figure>

<p>当上架时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t: 1588983754030</span><br><span class="line">status: 1</span><br><span class="line">key: </span><br><span class="line">brandId: 0</span><br><span class="line">catelogId: 0</span><br><span class="line">page: 1</span><br><span class="line">limit: 10</span><br></pre></td></tr></table></figure>

<p>当下架时：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t: 1588983789089</span><br><span class="line">status: 2</span><br><span class="line">key: </span><br><span class="line">brandId: 0</span><br><span class="line">catelogId: 0</span><br><span class="line">page: 1</span><br><span class="line">limit: 10</span><br></pre></td></tr></table></figure>



<p>在SPU中，写出的日期数据都不符合规则：<br><img src="/post/IDE/image-20200509083248660.png" alt="image-20200509083248660"></p>
<p>想要符合规则，可以设置写出数据的规则：</p>
<p>spring.jackson</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jackson:</span></span><br><span class="line">  <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure>



<p>SKU检索：</p>
<p>Request URL: <a href="http://localhost:88/api/product/skuinfo/list?t=1588989437944&page=1&limit=10&key=&catelogId=0&brandId=0&min=0&max=0">http://localhost:88/api/product/skuinfo/list?t=1588989437944&amp;page=1&amp;limit=10&amp;key=&amp;catelogId=0&amp;brandId=0&amp;min=0&amp;max=0</a></p>
<p>请求体：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t: 1588989437944</span><br><span class="line">page: 1</span><br><span class="line">limit: 10</span><br><span class="line">key: </span><br><span class="line">catelogId: 0</span><br><span class="line">brandId: 0</span><br><span class="line">min: 0</span><br><span class="line">max: 0</span><br></pre></td></tr></table></figure>

<p>API： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/ucirLq1D">https://easydoc.xyz/doc/75716633/ZUqEdvA4/ucirLq1D</a> </p>
<h2 id="29-仓库管理"><a href="#29-仓库管理" class="headerlink" title="29. 仓库管理"></a>29. 仓库管理</h2><p> 库存信息表：wms_ware_info</p>
<p>【1】仓库列表功能： </p>
<p>【2】查询商品库存：</p>
<p>【3】查询采购需求：</p>
<p>【4】 合并采购需求：</p>
<p>合并整单选中parcharseID：Request URL: <a href="http://localhost:88/api/ware/purchase/merge">http://localhost:88/api/ware/purchase/merge</a></p>
<p>请求数据：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>purchaseId<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> items<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br><span class="line">items<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">1</span><span class="punctuation">,</span> <span class="number">2</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>



<p>合并整单未选择parcharseID :Request URL: <a href="http://localhost:88/api/ware/purchase/merge">http://localhost:88/api/ware/purchase/merge</a></p>
<p><img src="/post/IDE/image-20200509170916557.png" alt="image-20200509170916557"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">items: [1, 2]</span><br></pre></td></tr></table></figure>



<p>涉及到两张表：wms_purchase_detail，wms_purchase</p>
<p>现在采购单中填写数据，然后关联用户，关联用户后，</p>
<p>总的含义，就是根据采购单中的信息，更新采购需求，在采购单中填写采购人员，采购单号，采购的时候，更新采购细节表中的采购人员ID和采购状态。</p>
<p><img src="/post/IDE/image-20200509191108806.png" alt="image-20200509191108806"></p>
<p>领取采购单</p>
<p><a href="http://localhost:88/api/ware/purchase/received">http://localhost:88/api/ware/purchase/received</a></p>
<p>（1）某个人领取了采购单后，先看采购单是否处于未分配状态，只有采购单是新建或以领取状态时，才更新采购单的状态</p>
<p>（2）</p>
<p>【1】仓库列表功能： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/mZgdqOWe">https://easydoc.xyz/doc/75716633/ZUqEdvA4/mZgdqOWe</a> </p>
<p>【2】查询商品库存： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/hwXrEXBZ">https://easydoc.xyz/doc/75716633/ZUqEdvA4/hwXrEXBZ</a> </p>
<p>【3】查询采购需求： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/Ss4zsV7R">https://easydoc.xyz/doc/75716633/ZUqEdvA4/Ss4zsV7R</a> </p>
<p>【4】 合并采购需求：<a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/cUlv9QvK">https://easydoc.xyz/doc/75716633/ZUqEdvA4/cUlv9QvK</a> </p>
<p>【5】查询未领取的采购单： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/hI12DNrH">https://easydoc.xyz/doc/75716633/ZUqEdvA4/hI12DNrH</a> </p>
<p>【6】领取采购单： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/vXMBBgw1">https://easydoc.xyz/doc/75716633/ZUqEdvA4/vXMBBgw1</a> </p>
<p>完成采购，在完成采购过程中，需要涉及到设置SKU的name信息到仓库中，这是通过远程调用“gulimall-product”来实现根据sku_id查询得到sku_name的，如果这个过程发生了异常，事务不想要回滚，目前采用的方式是通过捕获异常的方式，防止事务回滚，是否还有其他的方式呢？这个问题留待以后解决。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStock</span><span class="params">(Long skuId, Long wareId, Integer skuNum)</span> &#123;</span><br><span class="line"></span><br><span class="line">       List&lt;WareSkuEntity&gt; wareSkuEntities = wareSkuDao.selectList(<span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;WareSkuEntity&gt;().eq(<span class="string">&quot;sku_id&quot;</span>, skuId).eq(<span class="string">&quot;ware_id&quot;</span>, wareId));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(wareSkuEntities == <span class="literal">null</span> || wareSkuEntities.size() ==<span class="number">0</span> )&#123;</span><br><span class="line">            <span class="comment">//新增</span></span><br><span class="line">           <span class="type">WareSkuEntity</span> <span class="variable">wareSkuEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WareSkuEntity</span>();</span><br><span class="line">           wareSkuEntity.setSkuId(skuId);</span><br><span class="line">           wareSkuEntity.setWareId(wareId);</span><br><span class="line">           wareSkuEntity.setStock(skuNum);</span><br><span class="line">           wareSkuEntity.setStockLocked(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//远程查询SKU的name，若失败无需回滚</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="type">R</span> <span class="variable">info</span> <span class="operator">=</span> productFeignService.info(skuId);</span><br><span class="line">               <span class="keyword">if</span>(info.getCode() == <span class="number">0</span>)&#123;</span><br><span class="line">                   Map&lt;String,Object&gt; data=(Map&lt;String,Object&gt;)info.get(<span class="string">&quot;skuInfo&quot;</span>);</span><br><span class="line">                   wareSkuEntity.setSkuName((String) data.get(<span class="string">&quot;skuName&quot;</span>));</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           wareSkuDao.insert(wareSkuEntity);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="comment">//插入</span></span><br><span class="line">           wareSkuDao.addStock(skuId,wareId,skuNum);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h2 id="30-获取spu规格"><a href="#30-获取spu规格" class="headerlink" title="30. 获取spu规格"></a>30. 获取spu规格</h2><p>在SPU管理页面，获取商品规格的时候，出现400异常，浏览器显示跳转不了</p>
<p>问题现象：</p>
<p><img src="/post/IDE/image-20200510182051355.png" alt="image-20200510182051355"></p>
<p>出现问题的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">attrUpdateShow</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/product-attrupdate&quot;</span>,</span><br><span class="line">    <span class="attr">query</span>: &#123; <span class="attr">spuId</span>: row.<span class="property">id</span>, <span class="attr">catalogId</span>: row.<span class="property">catalogId</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>



<p>暂时不知道如何解决问题。只能留待以后解决。</p>
<p>经过测试发现，问题和上面的代码没有关系，问题出现在“attrupdate.vue”上，该vue页面无法通过浏览器访问，当输入访问URL（ <a href="http://localhost:8001/#/product-attrupdate">http://localhost:8001/#/product-attrupdate</a> ）的时候，就会出现404，而其他的请求则不会出现这种情况，不知为何。</p>
<p>通过POSTMAN进行请求的时候，能够请求到数据。</p>
<p>经过分析发现，是因为在数据库中没有该页面的导航所导致的，为了修正这个问题，可以在“sys-menu”表中添加一行，内容位：</p>
<p><img src="/post/IDE/image-20200510231012714.png" alt="image-20200510231012714"></p>
<p>这样当再次访问的时候，在“平台属性”下，会出现“规格维护”菜单，</p>
<p><img src="/post/IDE/image-20200510231041708.png" alt="image-20200510231041708"></p>
<p>当再次点击“规格”的时候，显示出菜单</p>
<p><img src="/post/IDE/image-20200510231200130.png" alt="image-20200510231200130"></p>
<p>不过这种菜单并不符合我们的需要，我们需要让它以弹出框的形式出现。</p>
<h2 id="31-修改商品规格"><a href="#31-修改商品规格" class="headerlink" title="31. 修改商品规格"></a>31. 修改商品规格</h2><p>API： <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/GhnJ0L85">https://easydoc.xyz/doc/75716633/ZUqEdvA4/GhnJ0L85</a> </p>
<p>URL：&#x2F;product&#x2F;attr&#x2F;update&#x2F;{spuId}</p>
<h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><h3 id="1-在open-fen中会将调用的数据转换为JSON，接收方接收后，将JSON转换为对象，此时调用方和被调用方的处理JSON的对象不一定都是同一个类，只要它们的字段类型吻合即可。"><a href="#1-在open-fen中会将调用的数据转换为JSON，接收方接收后，将JSON转换为对象，此时调用方和被调用方的处理JSON的对象不一定都是同一个类，只要它们的字段类型吻合即可。" class="headerlink" title="1.  在open fen中会将调用的数据转换为JSON，接收方接收后，将JSON转换为对象，此时调用方和被调用方的处理JSON的对象不一定都是同一个类，只要它们的字段类型吻合即可。"></a>1.  在open fen中会将调用的数据转换为JSON，接收方接收后，将JSON转换为对象，此时调用方和被调用方的处理JSON的对象不一定都是同一个类，只要它们的字段类型吻合即可。</h3><p>调用方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FeignClient(value = &quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CouponFenService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/coupon/spubounds/save&quot;)</span></span><br><span class="line">    R <span class="title function_">saveSpuBounds</span><span class="params">(<span class="meta">@RequestBody</span> SpuBoundTo spuBoundTo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/coupon/skufullreduction/saveInfo&quot;)</span></span><br><span class="line">    R <span class="title function_">saveSkuReduction</span><span class="params">(<span class="meta">@RequestBody</span> SkuReductionTo skuReductionTo)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被调用方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SpuBoundsEntity spuBounds)</span>&#123;</span><br><span class="line">spuBoundsService.save(spuBounds);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> R.ok();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping(&quot;/saveInfo&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> R <span class="title function_">saveInfo</span><span class="params">(<span class="meta">@RequestBody</span> SkuReductionTo skuReductionTo)</span>&#123;</span><br><span class="line">      skuFullReductionService.saveSkuReduction(skuReductionTo);</span><br><span class="line">      <span class="keyword">return</span> R.ok();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>



<p>调用方JSON化时的对象SpuBoundTo：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">public class SpuBoundTo &#123;</span><br><span class="line">    private Long spuId;</span><br><span class="line">    private BigDecimal buyBounds;</span><br><span class="line">    private BigDecimal growBounds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被调用方JSON数据对象化时的对象SpuBoundsEntity：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 商品spu积分设置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> cosmoswong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> cosmoswong@sina.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-04-23 23:38:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;sms_spu_bounds&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpuBoundsEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * id</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="meta">@TableId</span></span><br><span class="line">	<span class="keyword">private</span> Long id;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * </span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Long spuId;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 成长积分</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> BigDecimal growBounds;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 购物积分</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> BigDecimal buyBounds;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 优惠生效情况[1111（四个状态位，从右到左）;0 - 无优惠，成长积分是否赠送;1 - 无优惠，购物积分是否赠送;2 - 有优惠，成长积分是否赠送;3 - 有优惠，购物积分是否赠送【状态位0：不赠送，1：赠送】]</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> Integer work;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="2-事务究竟要如何加上？"><a href="#2-事务究竟要如何加上？" class="headerlink" title="2. 事务究竟要如何加上？"></a>2. 事务究竟要如何加上？</h3><p>存在Batch操作的时候，才需要加上事务，单个操作无需添加事务控制。</p>
<p>SpringBoot中的是事务</p>
<p>批量操作的时候，才需要事务</p>
<p>一个事务标注的方法上，方法内存在这些操作：</p>
<p>（1）批量更新一个表中字段</p>
<p>（2）更新多张表中的操作</p>
<p>实际上不论是哪种类型，方法中所有对于数据库的写操作，都会被整体当做一个事务，在这个事务过程中，如果某个操作出现了异常，则整体都不会被提交。这就是对于SpringBoot中的@Transactional的理解。</p>
<p>@EnableTransactionManagement和@Transactional的区别？</p>
<p> <a href="https://blog.csdn.net/abysscarry/article/details/80189232">https://blog.csdn.net/abysscarry/article/details/80189232</a><br> <a href="https://blog.csdn.net/Driver_tu/article/details/99679145">https://blog.csdn.net/Driver_tu/article/details/99679145</a> </p>
<p> <a href="https://www.cnblogs.com/leaveast/p/11765503.html">https://www.cnblogs.com/leaveast/p/11765503.html</a> </p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="1-文档参考地址"><a href="#1-文档参考地址" class="headerlink" title="1. 文档参考地址"></a>1. 文档参考地址</h3><p> <a href="http://www.jayh.club/#/02.PassJava%E6%9E%B6%E6%9E%84%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%92%8C%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97">http://www.jayh.club/#/02.PassJava%E6%9E%B6%E6%9E%84%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%92%8C%E6%B7%BB%E5%8A%A0%E6%A8%A1%E5%9D%97</a> </p>
<p> <a href="https://blog.csdn.net/ok_wolf/article/details/105400748">https://blog.csdn.net/ok_wolf/article/details/105400748</a> </p>
<p><a href="https://www.cnblogs.com/javalbb/p/12690862.html">https://www.cnblogs.com/javalbb/p/12690862.html</a></p>
<p> <a href="https://blog.csdn.net/ok_wolf/article/details/105456170">https://blog.csdn.net/ok_wolf/article/details/105456170</a> </p>
<p> <a href="https://easydoc.xyz/doc/75716633/ZUqEdvA4/jCFganpf">https://easydoc.xyz/doc/75716633/ZUqEdvA4/jCFganpf</a> </p>
<h3 id="2-开机启动docker"><a href="#2-开机启动docker" class="headerlink" title="2. 开机启动docker"></a>2. 开机启动docker</h3><p><img src="/post/IDE/image-20200422221237751.png" alt="image-20200422221237751"></p>
<p>在Docker中设置开机启动容器</p>
<p><img src="/post/IDE/image-20200423005200485.png" alt="image-20200423005200485"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态</span></span><br><span class="line">[root@hadoop-104 module]# systemctl status firewalld</span><br><span class="line">  firewalld.service - firewalld - dynamic firewall daemon</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2020-04-22 21:26:23 EDT; 10min ago</span><br><span class="line">     Docs: man:firewalld(1)</span><br><span class="line"> Main PID: 5947 (firewalld)</span><br><span class="line">   CGroup: /system.slice/firewalld.service</span><br><span class="line">           └─5947 /usr/bin/python -Es /usr/sbin/firewalld --nofork --nopid</span><br><span class="line"></span><br><span class="line">Apr 22 21:26:20 hadoop-104 systemd[1]: Starting firewalld - dynamic firewall daemon...</span><br><span class="line">Apr 22 21:26:23 hadoop-104 systemd[1]: Started firewalld - dynamic firewall daemon.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙是否是开机启动</span></span><br><span class="line">[root@hadoop-104 module]# systemctl list-unit-files|grep firewalld</span><br><span class="line">firewalld.service                             enabled </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭开机启动防火墙</span></span><br><span class="line">[root@hadoop-104 module]# systemctl disable firewalld             </span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">停止防火墙</span></span><br><span class="line">[root@hadoop-104 module]# systemctl stop firewalld         </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再次查看防火墙</span></span><br><span class="line">[root@hadoop-104 module]# systemctl list-unit-files|grep firewalld</span><br><span class="line">firewalld.service                             disabled</span><br><span class="line">[root@hadoop-104 module]# </span><br></pre></td></tr></table></figure>



<h3 id="3-查看命令的安装位置"><a href="#3-查看命令的安装位置" class="headerlink" title="3. 查看命令的安装位置"></a>3. 查看命令的安装位置</h3><p>whereis mysql：查看mysql的安装位置</p>
<h3 id="4-vscode中生成代码片段"><a href="#4-vscode中生成代码片段" class="headerlink" title="4. vscode中生成代码片段"></a>4. vscode中生成代码片段</h3><p><img src="/post/IDE/image-20200425165814903.png" alt="image-20200425165814903"></p>
<p>新建一个全局的代码片段，名字为vue，然后回车：</p>
<p><img src="/post/IDE/image-20200425165929332.png" alt="image-20200425165929332"></p>
<p>将下面的代码片段粘贴到“vue.code-snippets”</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and </span></span><br><span class="line">    <span class="comment">// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope </span></span><br><span class="line">    <span class="comment">// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is </span></span><br><span class="line">    <span class="comment">// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: </span></span><br><span class="line">    <span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. </span></span><br><span class="line">    <span class="comment">// Placeholders with the same ids are connected.</span></span><br><span class="line">    <span class="comment">// Example:</span></span><br><span class="line">    <span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line">    <span class="comment">// 	&quot;scope&quot;: &quot;javascript,typescript&quot;,</span></span><br><span class="line">    <span class="comment">// 	&quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line">    <span class="comment">// 	&quot;body&quot;: [</span></span><br><span class="line">    <span class="comment">// 		&quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line">    <span class="comment">// 		&quot;$2&quot;</span></span><br><span class="line">    <span class="comment">// 	],</span></span><br><span class="line">    <span class="comment">// 	&quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="attr">&quot;生成vue模板&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;&lt;!-- $1 --&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;div class=&#x27;$2&#x27;&gt;$5&lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//这里可以导入其他文件（比如：组件，工具js，第三方插件js，json文件，图片文件等等）&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//例如：import 《组件名称》 from &#x27;《组件路径》&#x27;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;export default &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//import引入的组件需要注入到对象中才能使用&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;components: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;data() &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//这里存放数据&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;return &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//监听属性 类似于data概念&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;computed: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//监控data中的数据变化&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;watch: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//方法集合&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;methods: &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//生命周期 - 创建完成（可以访问当前this实例）&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;created() &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//生命周期 - 挂载完成（可以访问DOM元素）&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;mounted() &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;beforeCreate() &#123;&#125;, //生命周期 - 创建之前&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;beforeMount() &#123;&#125;, //生命周期 - 挂载之前&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;beforeUpdate() &#123;&#125;, //生命周期 - 更新之前&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;updated() &#123;&#125;, //生命周期 - 更新之后&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;beforeDestroy() &#123;&#125;, //生命周期 - 销毁之前&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;destroyed() &#123;&#125;, //生命周期 - 销毁完成&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;activated() &#123;&#125;, //如果页面有keep-alive缓存功能，这个函数会触发&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;style lang=&#x27;scss&#x27; scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;//@import url($3); 引入公共css类&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$4&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;生成VUE模板&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;http-get请求&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpget&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;this.\\$http(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;url: this.\\$http.adornUrl(&#x27;&#x27;),&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;method: &#x27;get&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;params: this.\\$http.adornParams(&#123;&#125;)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;).then((&#123; data &#125;) =&gt; &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;)&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpGET请求&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;http-post请求&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httppost&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;this.\\$http(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;url: this.\\$http.adornUrl(&#x27;&#x27;),&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;method: &#x27;post&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;data: this.\\$http.adornData(data, false)&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;).then((&#123; data &#125;) =&gt; &#123; &#125;);&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpPOST请求&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>更多详细说明见： <a href="https://blog.csdn.net/z772330927/article/details/105730430/">https://blog.csdn.net/z772330927/article/details/105730430/</a> </p>
<h3 id="5-vscode快捷键"><a href="#5-vscode快捷键" class="headerlink" title="5. vscode快捷键"></a>5. vscode快捷键</h3><p>ctrl+shift+f 全局搜索</p>
<p>alt+shift+f 格式化代码</p>
<h3 id="6-关闭eslint的语法检查"><a href="#6-关闭eslint的语法检查" class="headerlink" title="6.  关闭eslint的语法检查"></a>6.  关闭eslint的语法检查</h3><p><img src="/post/IDE/image-20200428171043110.png" alt="image-20200428171043110"></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="7-安装mybatisx插件"><a href="#7-安装mybatisx插件" class="headerlink" title="7. 安装mybatisx插件"></a>7. 安装mybatisx插件</h3><p>在Marketplace中搜索“mybatisx”，安装后重启IDEA，使用时会自动在@Mapper标注的接口上，产生小图标，然后alt+enter，generate statement，就会自动的在xml文件中生成SQL。</p>
<p><img src="/post/IDE/1588730028929.png" alt="1588730028929"></p>
<h3 id="8-mysql的批量删除"><a href="#8-mysql的批量删除" class="headerlink" title="8. mysql的批量删除"></a>8. mysql的批量删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span>  `pms_attr_attrgroup_relation` <span class="keyword">WHERE</span> (attr_id<span class="operator">=</span> ? <span class="keyword">AND</span> attr_group_id ) <span class="keyword">OR</span> (attr_id<span class="operator">=</span> ? <span class="keyword">AND</span> attr_group_id )</span><br></pre></td></tr></table></figure>



<h3 id="9-String-join"><a href="#9-String-join" class="headerlink" title="9. String.join"></a>9. String.join</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.String <span class="meta">@NotNull</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(<span class="meta">@NotNull</span> CharSequence delimiter,</span></span><br><span class="line"><span class="params">                          <span class="meta">@NotNull</span> Iterable&lt;? extends CharSequence&gt; elements)</span></span><br></pre></td></tr></table></figure>

<p>Returns a new String composed of copies of the CharSequence elements joined together with a copy of the specified delimiter.</p>
<p> 返回一个由CharSequence元素的副本和指定分隔符的副本组成的新字符串。 </p>
<p>For example,</p>
<pre><code> List&lt;String&gt; strings = new LinkedList&lt;&gt;();
 strings.add(&quot;Java&quot;);strings.add(&quot;is&quot;);
 strings.add(&quot;cool&quot;);
 String message = String.join(&quot; &quot;, strings);
 //message returned is: &quot;Java is cool&quot;

 Set&lt;String&gt; strings = new LinkedHashSet&lt;&gt;();
 strings.add(&quot;Java&quot;); strings.add(&quot;is&quot;);
 strings.add(&quot;very&quot;); strings.add(&quot;cool&quot;);
 String message = String.join(&quot;-&quot;, strings);
 //message returned is: &quot;Java-is-very-cool&quot;
</code></pre>
<p>Note that if an individual element is null, then “null” is added.</p>
<p> 注意，如果单个元素为null，则添加“null”。 </p>
<p>Params:<br>delimiter – a sequence of characters that is used to separate each of the elements in the resulting String<br>               用于分隔结果字符串中的每个元素的字符序列 </p>
<p>elements – an Iterable that will have its elements joined together.<br>                  将其元素连接在一起的可迭代的。 </p>
<p>Returns:<br>a new String that is composed from the elements argument<br> 由elements参数组成的新字符串 </p>
<p>Throws:<br>NullPointerException – If delimiter or elements is null</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">join</span><span class="params">(CharSequence delimiter,</span></span><br><span class="line"><span class="params">        Iterable&lt;? extends CharSequence&gt; elements)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(delimiter);</span><br><span class="line">    Objects.requireNonNull(elements);</span><br><span class="line">    <span class="type">StringJoiner</span> <span class="variable">joiner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(delimiter);</span><br><span class="line">    <span class="keyword">for</span> (CharSequence cs: elements) &#123;</span><br><span class="line">        joiner.add(cs);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> joiner.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>能够看到实际上它就是通过创建StringJoiner，然后遍历elements，加入每个元素来完成的。</p>
<p>StringJoiner</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StringJoiner</span></span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Object</span></span><br></pre></td></tr></table></figure>

<p>StringJoiner is used to construct a sequence of characters separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix.<br> tringJoiner用于构造由分隔符分隔的字符序列，可以选择以提供的前缀开始，以提供的后缀结束。 </p>
<p>Prior to adding something to the StringJoiner, its sj.toString() method will, by default, return prefix + suffix. However, if the setEmptyValue method is called, the emptyValue supplied will be returned instead. This can be used, for example, when creating a string using set notation to indicate an empty set, i.e. “{}”, where the prefix is “{“, the suffix is “}” and nothing has been added to the StringJoiner.<br> 在向StringJoiner添加内容之前，它的sj.toString()方法在默认情况下会返回前缀+后缀。但是，如果调用setEmptyValue方法，则返回所提供的emptyValue。例如，当使用set符号创建一个字符串来表示一个空集时，可以使用这种方法。“{}”，其中前缀是“{”，后缀是“}”，没有向StringJoiner添加任何内容。 </p>
<p>apiNote:<br>The String “[George:Sally:Fred]” may be constructed as follows:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StringJoiner</span> <span class="variable">sj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringJoiner</span>(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;[&quot;</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">sj.add(<span class="string">&quot;George&quot;</span>).add(<span class="string">&quot;Sally&quot;</span>).add(<span class="string">&quot;Fred&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">desiredString</span> <span class="operator">=</span> sj.toString();</span><br></pre></td></tr></table></figure>

<p>A StringJoiner may be employed to create formatted output from a java.util.stream.Stream using java.util.stream.Collectors.joining(CharSequence). For example:<br> 使用StringJoiner从java.util.stream创建格式化输出流，使用java.util.stream.Collectors.joining (CharSequence进行)。例如: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = Arrays.asList(1, 2, 3, 4);</span><br><span class="line">String commaSeparatedNumbers = numbers.stream()</span><br><span class="line">    .map(i -&gt; i.toString())</span><br><span class="line">    .collect(Collectors.joining(&quot;, &quot;));</span><br></pre></td></tr></table></figure>



<p>通过分析源码发现，在“”内部维护了一个StringBuilder，所有加入到它内部的元素都会先拼接上分割符，然后再拼接上加入的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> StringJoiner <span class="title function_">add</span><span class="params">(CharSequence newElement)</span> &#123;</span><br><span class="line">       prepareBuilder().append(newElement);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> StringBuilder <span class="title function_">prepareBuilder</span><span class="params">()</span> &#123;</span><br><span class="line">     <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">         value.append(delimiter);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         value = <span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append(prefix);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> value;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>





<h3 id="10-在Service中微服务比较多的时候，可以配置将一些微服务放置到compound中，组成一个小组"><a href="#10-在Service中微服务比较多的时候，可以配置将一些微服务放置到compound中，组成一个小组" class="headerlink" title="10. 在Service中微服务比较多的时候，可以配置将一些微服务放置到compound中，组成一个小组"></a>10. 在Service中微服务比较多的时候，可以配置将一些微服务放置到compound中，组成一个小组</h3><p><img src="/post/IDE/image-20200508222508833.png" alt="image-20200508222508833"></p>
<p>以后再运行时，直接选择这个compound即可很方便的运行或停止一组微服务：</p>
<p><img src="/post/IDE/image-20200508223524543.png" alt="image-20200508223524543"></p>
<p>另外可以单独为每个微服务，设置需要的运行时最大堆内存大小：</p>
<p><img src="/post/IDE/image-20200508222812353.png" alt="image-20200508222812353"></p>
<h3 id="11-mysql的dateTime和timestamp的区别？"><a href="#11-mysql的dateTime和timestamp的区别？" class="headerlink" title="11. mysql的dateTime和timestamp的区别？"></a>11. mysql的dateTime和timestamp的区别？</h3><p><a href="https://www.cnblogs.com/mxwz/p/7520309.html">MySQL中datetime和timestamp的区别及使用</a></p>
<p><strong>TIMESTAMP和DATETIME的相同点：</strong></p>
<p>1&gt; 两者都可用来表示YYYY-MM-DD HH:MM:SS[.fraction]类型的日期。</p>
<p><strong>TIMESTAMP和DATETIME的不同点：</strong></p>
<p>1&gt; 两者的存储方式不一样</p>
<p>对于TIMESTAMP，它把客户端插入的时间从当前时区转化为UTC（世界标准时间）进行存储。查询时，将其又转化为客户端当前时区进行返回。</p>
<p>而对于DATETIME，不做任何改变，基本上是原样输入和输出。</p>
<p>2&gt; 两者所能存储的时间范围不一样</p>
<p>timestamp所能存储的时间范围为：’1970-01-01 00:00:01.000000’ 到 ‘2038-01-19 03:14:07.999999’。</p>
<p>datetime所能存储的时间范围为：’1000-01-01 00:00:00.000000’ 到 ‘9999-12-31 23:59:59.999999’。</p>
<p>总结：TIMESTAMP和DATETIME除了存储范围和存储方式不一样，没有太大区别。当然，对于跨时区的业务，TIMESTAMP更为合适。</p>
<p> <a href="https://www.cnblogs.com/Jashinck/p/10472398.html">https://www.cnblogs.com/Jashinck/p/10472398.html</a> </p>
<h3 id="12-SpringBoot中的事务"><a href="#12-SpringBoot中的事务" class="headerlink" title="12. SpringBoot中的事务"></a>12. SpringBoot中的事务</h3><p> <a href="https://blog.csdn.net/Z__Sheng/article/details/89489053">https://blog.csdn.net/Z__Sheng/article/details/89489053</a> </p>
<h3 id="13-IDEA-RESTFUll-clinet"><a href="#13-IDEA-RESTFUll-clinet" class="headerlink" title="13. IDEA RESTFUll clinet"></a>13. IDEA RESTFUll clinet</h3><p><a href="https://blog.csdn.net/qq_37502106/article/details/103183492">IntelliJ IDEA 使用 rest client</a></p>
<h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="1-TypeError-vm-previewHandle-is-not-a-function"><a href="#1-TypeError-vm-previewHandle-is-not-a-function" class="headerlink" title="1. TypeError: _vm.previewHandle is not a function"></a>1. TypeError: _vm.previewHandle is not a function</h3>]]></content>
      <categories>
        <category>谷粒商城</category>
      </categories>
      <tags>
        <tag>谷粒商城-基础篇</tag>
      </tags>
  </entry>
  <entry>
    <title>面试高频考点</title>
    <url>/post/%E9%9D%A2%E8%AF%95%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>根据一个大佬的收集整理而来</p>
<blockquote>
<p>链接网站：<a href="http://localhost:4000/post/csdn.html">http://localhost:4000/post/csdn.html</a></p>
</blockquote>
<h1 id="对JVM的理解-8-24"><a href="#对JVM的理解-8-24" class="headerlink" title="对JVM的理解(8-24)"></a>对JVM的理解(8-24)</h1><h2 id="JDK包括什么"><a href="#JDK包括什么" class="headerlink" title="JDK包括什么"></a>JDK包括什么</h2><p>Java Development Kit (JDK) 是用于开发和编译 Java 应用程序的软件包。</p>
<ol>
<li><strong>编译器（javac）：</strong> 它将 Java 源代码编译成 Java 字节码，这是 Java 虚拟机（JVM）可以理解和执行的中间代码。</li>
<li><strong>运行时环境（JRE）：</strong> JRE 包括了 JVM 以及 Java 标准库，允许你运行已编译的 Java 程序。</li>
</ol>
<h2 id="JVM包括什么"><a href="#JVM包括什么" class="headerlink" title="JVM包括什么"></a>JVM包括什么</h2><p>主要分为下面五个部分：</p>
<ul>
<li>类加载器（Class Loader）：加载字节码文件到内存。</li>
<li>运行时数据区（Runtime Data Area）：JVM 核心内存空间结构模型。</li>
<li>执行引擎（Execution Engine）：对 JVM 指令进行解析，翻译成机器码，解析完成后提交到操作系统中。</li>
<li>本地库接口（Native Interface）：供 Java 调用的融合了不同开发语言的原生库。</li>
<li>本地方法库（Native Libraies）：Java 本地方法的具体实现。</li>
</ul>
<p><img src="/post/%E9%9D%A2%E7%BB%8F/1-1.jpg"></p>
<p>这其中最复杂的是运行时数据区，它也是 JVM 内存结构最重要的部分。运行时数据区又可以分为方法区、虚拟机栈、本地方法栈、堆以及程序计数器，并且方法区和堆是线程共享的，虚拟机栈、本地方法栈、程序计数器是线程隔离的。下面详细讲解运行时数据区的各个组成部分。</p>
<h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><p>方法区存储虚拟机加载的类信息、常量、静态变量以及即时编译器编译后的代码等数据。方法区是一种规范，它的其中一种实现是永久代。JDK 7 以前的版本字符串常量池是放在永久代中的，JDK 7 将字符串常量池移动到了堆中，JDK 8 直接删除了永久代，改用元空间替代永久代。</p>
<h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><p>本地方法栈与 Java 栈的作用和原理基本相同，都可以用来执行方法，不同点在于 Java 栈执行的是 Java 方法，本地方法栈执行的是本地方法。</p>
<h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><p>程序计数器占用的内存空间较小，是当前线程所执行的字节码行号指示器，通过改变这个计数器的值来选取下一条需要执行的字节码指令。多个线程之间的程序计数器相互独立，为了保证每个线程恢复后都可以找到具体的执行位置。</p>
<h3 id="Java-堆"><a href="#Java-堆" class="headerlink" title="Java 堆"></a>Java 堆</h3><p>Java 堆用来存放实例化对象，它被所有线程共享，在虚拟机启动时创建，用来存放对象实例，其占用了 Java 内存的大部分空间，是 GC 的主要管理区域，又可分为年轻代、老年代、永久代。</p>
<h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><p>Java 栈中存放的是多个栈帧，每个栈帧对应一个被调用的方法，主要包括局部变量表、操作数栈、动态链接、方法返回地址（方法出口）。每一个方法的执行，JVM 都会创建一个栈帧，并且将栈帧压入 Java 栈，方法执行完毕，该栈帧出栈。也就是说，每个方法的执行都是一个栈帧的入栈和出栈过程，Java 虚拟机栈用来存储栈帧，方法调用结束之后，帧会被销毁。</p>
<h2 id="为什么编译成字节码"><a href="#为什么编译成字节码" class="headerlink" title="为什么编译成字节码"></a>为什么编译成字节码</h2><ol>
<li><p><strong>跨平台性（平台无关性）：</strong> Java 字节码具有跨平台性，也就是说，一旦将源代码编译成字节码，它就可以在任何支持 Java 虚拟机（JVM）的平台上运行，而不需要重新编译。这使得 Java 成为一种具有很高可移植性的编程语言。</p>
</li>
<li><p><strong>动态执行：</strong> Java 字节码由 JVM 解释和执行。这意味着字节码可以在运行时动态加载和执行，而不需要在编译时确定所有细节。这种灵活性使得 Java 支持许多动态特性，如反射、动态代理等。</p>
</li>
</ol>
<h2 id="面向对象、面向过程"><a href="#面向对象、面向过程" class="headerlink" title="面向对象、面向过程"></a>面向对象、面向过程</h2><p><strong>面向对象：</strong><br>考虑一个图书馆管理系统，其中有图书、读者和图书管理员。在面向对象编程中，我们可以创建三个类：<code>Book</code>（图书类）、<code>Reader</code>（读者类）和<code>Librarian</code>（图书管理员类）。每个类都有自己的属性和方法。例如，<code>Book</code> 类可以有属性如书名、作者、出版日期等，以及方法如借阅和归还。通过创建这些类，我们可以创建图书对象、读者对象和图书管理员对象，并通过它们的交互来模拟图书馆管理系统。</p>
<p><strong>面向过程：</strong><br>考虑一个简单的计算器程序，它可以执行加法、减法、乘法和除法操作。在面向过程编程中，我们可以编写不同的函数来执行每个操作，例如 <code>add(a, b)</code>、<code>subtract(a, b)</code>、<code>multiply(a, b)</code> 和 <code>divide(a, b)</code>。然后，我们可以按照需要调用这些函数，以便完成计算器的功能。</p>
<p>面向对象编程将程序组织为对象的集合，强调对象之间的关系和交互。而面向过程编程将程序组织为一系列的步骤或过程，强调问题解决的步骤和顺序。</p>
<h1 id="内存溢出和内存泄漏的区别-8-28"><a href="#内存溢出和内存泄漏的区别-8-28" class="headerlink" title="内存溢出和内存泄漏的区别(8-28)"></a>内存溢出和内存泄漏的区别(8-28)</h1><blockquote>
<p>内存溢出 out of memory，是指程序在申请内存时，没有足够的内存空间供其使用，出现out of memory；比如申请了一个integer,但给它存了long才能存下的数，那就是内存溢出。<br>内存泄露 memory leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光。</p>
<blockquote>
<p>内存泄漏是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了），而系统也不能再次将它分配给需要的程序。</p>
</blockquote>
</blockquote>
<ol>
<li>常发性内存泄漏。发生内存泄漏的代码会被多次执行到，<code>每执行一次都会导致一块内存泄漏</code>。 </li>
<li>偶发性内存泄漏。发生内存泄漏的代码只有<code>在某些特定环境或操作过程下</code>才会发生。常发性和偶发性是相对的。对于特定的环境，偶发性的也许就变成了常发性的。所以<code>测试环境</code>和测试方法对检测内存泄漏至关重要。 </li>
<li>一次性内存泄漏。<code>发生内存泄漏的代码只会被执行一次</code>，或者由于算法上的缺陷，导致总会有一块仅且一块内存发生泄漏。比如，在类的构造函数中分配内存，在析构函数中却没有释放该内存，所以内存泄漏只会发生一次。 </li>
<li>隐式内存泄漏。<code>程序在运行过程中不停的分配内存，但是直到结束的时候才释放内存</code>。严格的说这里并没有发生内存泄漏，因为最终程序释放了所有申请的内存。但是对于一个服务器程序，需要运行几天，几周甚至几个月，不及时释放内存也可能导致最终耗尽系统的所有内存。所以，我们称这类内存泄漏为隐式内存泄漏。</li>
</ol>
<p>自己的理解：溢出：空间不足。泄露：不去释放。</p>
<h1 id="JDK1-7和JDK1-8的内存模型比较"><a href="#JDK1-7和JDK1-8的内存模型比较" class="headerlink" title="JDK1.7和JDK1.8的内存模型比较"></a>JDK1.7和JDK1.8的内存模型比较</h1><h1 id="java一日游"><a href="#java一日游" class="headerlink" title="java一日游"></a>java一日游</h1><p><a href="http://t.csdn.cn/EMBz3">点我</a></p>
<h1 id="Hello-World-是如何运行的"><a href="#Hello-World-是如何运行的" class="headerlink" title="Hello World 是如何运行的"></a>Hello World 是如何运行的</h1><p><a href="https://cloud.tencent.com/developer/article/1012907?areaId=106001">点我</a></p>
<h1 id="链接推荐"><a href="#链接推荐" class="headerlink" title="链接推荐"></a>链接推荐</h1><p><a href="http://t.csdnimg.cn/ed69B">点我</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试高频考点</tag>
      </tags>
  </entry>
  <entry>
    <title>天涯神贴</title>
    <url>/post/%E5%A4%A9%E6%B6%AF%E7%A5%9E%E8%B4%B4.html</url>
    <content><![CDATA[<h1 id="kkndme-tianya（持续更新中…）"><a href="#kkndme-tianya（持续更新中…）" class="headerlink" title="kkndme_tianya（持续更新中…）"></a>kkndme_tianya（持续更新中…）</h1><blockquote>
<p>天涯神贴<a href="http://bbs.tianya.cn/post-house-252774-1.shtml">「2010年的房地产调控，我们收获了什么？写在房价暴涨前」</a>脱水版，内容时间顺序和原贴一致，原贴中的优质非楼主写的内容，添加了引用格式便于区分。</p>
</blockquote>
<ul>
<li><a href="#%E8%B0%83%E6%8E%A7%E9%99%8D%E6%88%BF%E4%BB%B7%E6%98%AF%E5%88%9A%E9%9C%80%E7%9A%84%E4%B8%80%E5%8E%A2%E6%83%85%E6%84%BF">调控降房价是刚需的一厢情愿</a><ul>
<li><a href="#1%E4%BA%BA%E4%BA%BA%E9%83%BD%E6%9C%89%E5%B1%85%E4%BD%8F%E6%9D%83%E6%88%BF%E5%AD%90%E6%98%AF%E7%94%A8%E6%9D%A5%E4%BD%8F%E7%9A%84%E4%B8%8D%E6%98%AF%E7%94%A8%E6%9D%A5%E7%82%92%E7%9A%84">1、人人都有居住权。房子是用来住的，不是用来炒的。</a></li>
<li><a href="#2%E6%88%BF%E5%AD%90%E5%A4%AA%E8%B4%B5%E4%BA%86%E7%A7%9F%E5%94%AE%E6%AF%94%E4%B8%A5%E9%87%8D%E4%B8%8D%E5%90%88%E7%90%86%E7%A9%BA%E7%BD%AE%E7%8E%87%E5%A4%AA%E9%AB%98%E4%BA%BA%E5%9D%87%E6%94%B6%E5%85%A5%E5%A4%AA%E4%BD%8E%E6%97%A9%E6%99%9A%E8%A6%81%E5%B4%A9%E7%9B%98">2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。</a></li>
<li><a href="#3%E6%88%BF%E4%BB%B7%E4%B8%8A%E6%B6%A8%E9%80%A0%E6%88%90%E7%89%A9%E4%BB%B7%E4%B8%8A%E6%B6%A8%E4%BA%BA%E6%B0%91%E7%94%9F%E6%B4%BB%E5%8F%98%E5%BE%97%E5%9B%B0%E9%9A%BE">3、房价上涨造成物价上涨，人民生活变得困难</a></li>
</ul>
</li>
<li><a href="#%E8%B0%83%E6%8E%A7%E7%9A%84%E7%9C%9F%E6%AD%A3%E7%9B%AE%E7%9A%84%E9%98%B2%E8%8C%83%E9%87%91%E8%9E%8D%E9%A3%8E%E9%99%A9--%E9%80%9A%E8%BF%87%E5%9E%84%E6%96%AD%E5%AE%9E%E7%8E%B0gj%E5%88%A9%E7%9B%8A%E6%9C%80%E5%A4%A7%E5%8C%96">调控的真正目的：防范金融风险 &amp; 通过垄断实现gj利益最大化</a></li>
<li><a href="#%E5%AE%98%E6%96%B9%E5%85%AC%E5%B8%83%E7%9A%84%E7%BB%9F%E8%AE%A1%E6%95%B0%E6%8D%AE%E5%8F%AA%E8%A6%81%E5%85%B3%E7%B3%BB%E5%88%B0%E6%9F%90%E4%B8%AA%E7%BE%A4%E4%BD%93%E7%9A%84%E5%88%A9%E7%9B%8A%E5%B0%B1%E4%B8%80%E5%AE%9A%E4%BC%9A%E8%A2%AB%E4%BF%AE%E9%A5%B0%E5%AF%BC%E8%87%B4%E5%A4%B1%E7%9C%9F">官方公布的统计数据，只要关系到某个群体的利益，就一定会被修饰导致失真</a></li>
<li><a href="#%E7%A8%8E%E6%94%B6%E4%BB%8E%E6%9D%A5%E9%83%BD%E6%98%AF%E5%90%91%E4%B8%8B%E6%B8%B8%E8%BD%AC%E5%AB%81%E7%9A%84--%E6%88%BF%E4%BA%A7%E7%A8%8E%E8%BF%9F%E8%BF%9F%E4%B8%8D%E5%87%BA%E5%8F%B0%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%8E%9F%E5%9B%A0">税收从来都是向下游转嫁的 &amp; 房产税迟迟不出台的真正原因</a></li>
<li><a href="#%E6%88%BF%E5%9C%B0%E4%BA%A7%E7%9A%84%E7%8E%B0%E7%8A%B6">房地产的现状</a></li>
<li><a href="#%E6%88%BF%E4%BB%B7%E6%8C%81%E7%BB%AD%E4%B8%8A%E6%B6%A8%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E7%A8%80%E7%BC%BA%E6%80%A7%E8%AE%A9%E5%A5%BD%E6%88%BF%E5%AD%90%E6%88%90%E4%B8%BA%E8%B5%84%E9%87%91%E6%9C%80%E5%A5%BD%E7%9A%84%E5%8E%BB%E5%A4%84">房价持续上涨的本质是稀缺性让好房子成为资金最好的去处</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E5%9E%84%E6%96%AD">关于垄断</a><ul>
<li><a href="#1%E5%9E%84%E6%96%AD%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E6%B2%A1%E6%9C%89%E9%A3%8E%E9%99%A9">1、垄断的好处是没有风险</a></li>
<li><a href="#2%E5%9E%84%E6%96%AD%E5%8F%AF%E4%BB%A5%E8%A7%A3%E5%86%B3%E7%A4%BE%E4%BC%9A%E7%A8%B3%E5%AE%9A">2、垄断可以解决社会稳定</a></li>
<li><a href="#3%E6%88%BF%E5%B1%8B%E5%9E%84%E6%96%AD%E5%8F%AA%E4%BC%9A%E6%84%88%E6%BC%94%E6%84%88%E7%83%88%E5%BA%95%E5%B1%82%E4%BA%BA%E6%B0%91%E6%83%B3%E8%A6%81%E6%8B%A5%E6%9C%89%E4%B8%80%E5%A5%97%E6%88%BF%E5%AD%90%E7%9A%84%E9%9A%BE%E5%BA%A6%E5%8F%AA%E4%BC%9A%E8%B6%8A%E6%9D%A5%E8%B6%8A%E9%9A%BE">3、房屋垄断只会愈演愈烈，底层人民想要拥有一套房子的难度只会越来越难</a></li>
</ul>
</li>
<li><a href="#%E6%B0%91%E7%94%9F%E9%97%AE%E9%A2%98">民生问题</a></li>
<li><a href="#%E6%88%BF%E4%BA%A7%E7%A8%8E%E7%9A%84%E5%88%B6%E5%AE%9A%E5%8E%9F%E5%88%99">房产税的制定原则</a></li>
<li><a href="#%E7%BB%B4%E7%A8%B3%E7%9A%84%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%BA%BA%E6%B0%91%E8%83%BD%E5%90%83%E9%A5%B1%E9%A5%AD">维稳的本质是人民能吃饱饭</a></li>
<li><a href="#%E5%85%AC%E7%A7%9F%E6%88%BF%E6%98%AF%E4%B8%BA%E4%BD%93%E5%88%B6%E5%86%85%E6%9C%8D%E5%8A%A1%E7%9A%84">公租房是为体制内服务的</a></li>
<li><a href="#%E6%88%BF%E4%BA%A7%E7%A8%8E%E4%B8%80%E5%AE%9A%E4%BC%9A%E8%BD%AC%E5%AB%81%E7%BB%99%E7%A7%9F%E6%88%BF%E4%BA%BA">房产税一定会转嫁给租房人</a></li>
<li><a href="#%E5%B7%A8%E5%A4%A7%E7%9A%84%E7%A8%8E%E6%94%B6%E6%B6%88%E8%80%97%E4%B9%9F%E5%86%B3%E5%AE%9A%E4%BA%86GDP%E5%BF%85%E9%A1%BB%E5%BF%AB%E9%80%9F%E5%A2%9E%E9%95%BF">巨大的税收消耗也决定了GDP必须快速增长</a></li>
<li><a href="#%E8%B0%83%E6%8E%A7%E7%9A%84%E5%A5%BD%E5%A4%84%E6%98%AF%E8%AE%A9zf%E5%88%A9%E7%9B%8A%E6%9C%80%E5%A4%A7%E5%8C%96&%E9%98%B2%E8%8C%83%E9%87%91%E8%9E%8D%E9%A3%8E%E9%99%A9">调控的好处是让zf利益最大化&amp;防范金融风险</a></li>
<li><a href="#%E5%9E%84%E6%96%AD%E5%8F%AF%E4%BB%A5%E6%8E%A7%E5%88%B6%E4%BB%B7%E6%A0%BC%E7%BB%B4%E6%8C%81%E7%A8%B3%E5%AE%9A">垄断可以控制价格，维持稳定</a></li>
<li><a href="#%E4%BD%93%E5%88%B6%E5%86%85%E7%9A%84%E4%BD%8F%E6%88%BF%E9%97%AE%E9%A2%98%E6%9C%89%E5%9B%BD%E5%AE%B6%E4%BF%9D%E9%A9%BE%E6%8A%A4%E8%88%AA">体制内的住房问题有国家保驾护航</a></li>
<li><a href="#%E4%BE%9D%E9%9D%A0%E4%BD%86%E5%8F%88%E4%B8%8D%E8%83%BD%E5%AE%8C%E5%85%A8%E4%BE%9D%E9%9D%A0%E5%BC%80%E5%8F%91%E5%95%86%E5%BB%BA%E5%85%AC%E7%A7%9F%E6%88%BF">依靠但又不能完全依靠开发商建公租房</a></li>
<li><a href="#%E4%BD%93%E5%88%B6%E5%86%85%E7%9A%84%E4%BD%8F%E6%88%BF%E9%97%AE%E9%A2%98%E4%B8%8D%E9%9A%BE%E8%A7%A3%E5%86%B3">体制内的住房问题不难解决</a></li>
<li><a href="#%E8%A7%A3%E5%86%B3%E4%BD%93%E5%88%B6%E5%A4%96%E7%9A%84%E4%BD%8F%E6%88%BF%E9%97%AE%E9%A2%98%E5%9B%BD%E5%AE%B6%E5%9E%84%E6%96%AD%E7%BB%86%E6%B0%B4%E9%95%BF%E6%B5%81%E6%94%B6%E7%A7%9F">解决体制外的住房问题：国家垄断，细水长流收租</a></li>
<li><a href="#%E6%99%AE%E9%80%9A%E4%BA%BA%E4%B9%B0%E5%BE%97%E8%B5%B7%E4%BC%98%E8%B4%A8%E5%95%86%E5%93%81%E6%88%BF%E5%B0%B1%E5%B0%BD%E6%97%A9%E4%B9%B0%E6%8A%8A">普通人买得起「优质商品房」就尽早买把</a></li>
<li><a href="#%E5%95%86%E5%93%81%E6%88%BF%E5%92%8C%E5%85%AC%E7%A7%9F%E6%88%BF%E7%9A%84%E5%8C%BA%E5%88%AB">商品房和公租房的区别</a></li>
<li><a href="#%E6%8F%90%E8%AE%AE%E9%80%9A%E8%BF%87%E5%BE%81%E6%99%AE%E7%A8%8E%E8%B0%83%E8%8A%82%E8%B4%AB%E5%AF%8C%E5%B7%AE%E8%B7%9D%E4%B8%8D%E6%98%AF%E5%82%BB%E5%B0%B1%E6%98%AF%E5%9D%8F%E5%88%B6%E5%AE%9A%E6%94%BF%E7%AD%96%E7%9A%84%E4%BA%BA%E4%B8%8D%E4%BC%9A%E8%AE%A9%E6%94%BF%E7%AD%96%E9%92%88%E5%AF%B9%E8%87%AA%E5%B7%B1%E9%82%A3%E4%B9%88%E6%94%BF%E7%AD%96%E9%83%BD%E6%98%AF%E8%B0%81%E5%88%B6%E5%AE%9A%E7%9A%84%E5%91%A2">提议通过征普税调节贫富差距，不是傻，就是坏（制定政策的人不会让政策针对自己，那么政策都是谁制定的呢）</a></li>
<li><a href="#%E8%B0%83%E6%8E%A7%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%BD%B1%E5%93%8D">调控带来的影响</a></li>
<li><a href="#%E5%86%9C%E4%BA%A7%E5%93%81%E7%9A%84%E4%BB%B7%E6%A0%BC%E5%85%B3%E7%B3%BB%E5%88%B0%E5%BD%B1%E5%93%8D%E7%A8%B3%E5%AE%9A%E7%9A%84%E5%90%83%E9%A5%AD%E9%97%AE%E9%A2%98">农产品的价格关系到影响稳定的吃饭问题</a></li>
<li><a href="#%E5%86%9C%E4%BA%A7%E5%93%81%E4%BB%B7%E6%A0%BC%E7%9A%84%E6%8A%AC%E5%A4%B4%E4%BC%9A%E5%AF%BC%E8%87%B4%E7%89%A9%E4%BB%B7%E5%85%A8%E9%9D%A2%E4%B8%8A%E6%B6%A8%EF%BC%8C%E4%BD%86%E5%9B%BD%E5%AE%B6%E4%B8%8D%E4%BC%9A%E5%9D%90%E8%A7%86%E4%B8%8D%E7%AE%A1%E4%B8%94%E6%9C%89%E8%83%BD%E5%8A%9B%E7%AE%A1">农产品价格的抬头会导致物价全面上涨，但国家不会坐视不管且有能力管</a></li>
<li><a href="#%E8%B5%84%E9%87%91%E4%BC%9A%E5%9C%A8%E4%BC%98%E8%B4%A8%E8%B5%84%E4%BA%A7%E4%B9%8B%E9%97%B4%E6%B5%81%E5%8A%A8%EF%BC%8C%E8%80%8C%E5%86%B3%E5%AE%9A%E4%BC%98%E8%B4%A8%E8%B5%84%E4%BA%A7%E4%BB%B7%E6%A0%BC%E7%9A%84%E6%98%AF%E7%B2%BE%E8%8B%B1%E9%98%B6%E5%B1%82%E7%9A%84%E8%B4%AD%E4%B9%B0%E5%8A%9B">资金会在优质资产之间流动，而决定优质资产价格的是精英阶层的购买力</a></li>
<li><a href="#%E8%B5%84%E9%87%91%E6%B5%81%E5%90%91%E8%A7%84%E5%BE%8B%E5%86%B3%E5%AE%9A%E4%BA%86%E5%86%9C%E4%BA%A7%E5%93%81%E5%92%8C%E8%B5%84%E4%BA%A7%E4%BB%B7%E6%A0%BC%E6%80%BB%E6%9C%89%E4%B8%80%E4%B8%AA%E8%A6%81%E6%B6%A8%E4%BA%BA%E4%B8%BA%E5%8E%8B%E5%88%B6%E4%B8%80%E5%AE%9A%E4%BC%9A%E6%8C%89%E4%B8%8B%E8%91%AB%E8%8A%A6%E6%B5%AE%E8%B5%B7%E7%93%A2">资金流向规律决定了农产品和资产价格总有一个要涨，人为压制，一定会按下葫芦浮起瓢</a></li>
<li><a href="#%E8%B5%84%E9%87%91%E6%B5%81%E5%90%91%E8%A7%84%E5%BE%8B%E5%86%B3%E5%AE%9A%E4%BA%86%E6%B4%BC%E5%9C%B0%E4%B8%8D%E4%BC%9A%E4%B8%80%E7%9B%B4%E6%98%AF%E6%B4%BC%E5%9C%B0">资金流向规律决定了洼地不会一直是洼地</a></li>
<li><a href="#%E5%A4%A7%E5%9F%8E%E5%B8%82%E5%AF%B9%E8%BF%91%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%B0%8F%E5%9F%8E%E5%B8%82%E6%9C%89%E8%99%B9%E5%90%B8%E6%95%88%E5%BA%94">大城市对近距离的小城市有虹吸效应</a></li>
<li><a href="#%E5%86%B3%E5%AE%9A%E6%88%BF%E4%BB%B7%E7%9A%84%E5%9B%A0%E7%B4%A0%E6%9C%89%E5%BE%88%E5%A4%9A%EF%BC%8C%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90">决定房价的因素有很多，具体情况具体分析</a></li>
<li><a href="#%E6%88%BF%E4%BB%B7%E6%9A%B4%E6%B6%A8%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E9%92%B1%E8%80%8C%E8%A8%80%E7%9A%84%E4%B8%8D%E6%98%AF%E7%9B%B8%E5%AF%B9%E4%BA%8E%E5%AE%9E%E9%99%85%E8%B4%AD%E4%B9%B0%E5%8A%9B%E8%80%8C%E8%A8%80%E7%9A%84">房价暴涨是相对于钱而言的，不是相对于实际购买力而言的</a></li>
<li><a href="#%E5%9C%9F%E5%9C%B0%E4%B8%8D%E7%A8%80%E7%BC%BA%E4%BC%98%E8%B4%A8%E5%9C%9F%E5%9C%B0%E7%A8%80%E7%BC%BA">土地不稀缺，优质土地稀缺</a></li>
<li><a href="#%E9%9B%86%E4%B8%AD%E5%8F%91%E5%B1%95%E5%A4%A7%E5%9F%8E%E5%B8%82%E6%98%AF%E5%AF%BC%E8%87%B4%E4%BC%98%E8%B4%A8%E5%9C%9F%E5%9C%B0%E7%A8%80%E7%BC%BA%E7%9A%84%E5%8E%9F%E5%9B%A0">集中发展大城市是导致优质土地稀缺的原因</a></li>
<li><a href="#%E4%B8%BA%E4%BA%BA%E6%B0%91%E6%9C%8D%E5%8A%A1%E6%98%AF%E8%AF%B4%E7%BB%99%E4%BA%BA%E6%B0%91%E5%90%AC%E7%9A%84">为人民服务是说给人民听的</a></li>
<li><a href="#%E5%8E%86%E5%8F%B2%E6%98%AF%E4%B8%80%E9%9D%A2%E9%95%9C%E5%AD%90%E4%B8%8D%E5%90%8C%E7%9A%84%E5%9B%BD%E6%83%85%E5%86%B3%E5%AE%9A%E4%BA%86%E9%87%87%E5%8F%96%E5%90%8C%E6%A0%B7%E7%9A%84%E6%94%BF%E7%AD%96%E7%BB%93%E6%9E%9C%E5%8F%AF%E8%83%BD%E6%98%AF%E5%8D%97%E8%BE%95%E5%8C%97%E8%BE%99">历史是一面镜子，不同的国情决定了采取同样的政策结果可能是南辕北辙</a></li>
<li><a href="#zf%E9%99%90%E5%88%B6%E6%94%BF%E7%AD%96%E6%88%BF%E7%9A%84%E5%88%A9%E6%B6%A6%E9%82%A3kfs%E5%B0%B1%E4%B8%80%E5%AE%9A%E4%BC%9A%E5%81%B7%E5%B7%A5%E5%87%8F%E6%96%99">zf限制政策房的利润，那kfs就一定会偷工减料</a></li>
<li><a href="#%E5%B1%81%E8%82%A1%E5%86%B3%E5%AE%9A%E8%84%91%E8%A2%8B%E4%BA%BA%E6%B0%91%E4%B8%8D%E7%9F%A5%E5%8E%89%E5%AE%B3%E5%85%B3%E7%B3%BB%E9%80%89%E6%88%BF%E5%AD%90zf%E9%80%89%E5%86%9C%E4%BA%A7%E5%93%81">屁股决定脑袋，人民不知厉害关系选房子，zf选农产品</a></li>
<li><a href="#%E5%90%84%E4%B8%AA%E9%98%B6%E5%B1%82%E7%9A%84%E4%BD%8F%E6%88%BF%E9%97%AE%E9%A2%98%E9%83%BD%E5%AE%89%E6%8E%92%E7%9A%84%E5%A6%A5%E5%A6%A5%E7%9A%84">各个阶层的住房问题都安排的妥妥的</a></li>
<li><a href="#%E9%A1%B6%E5%B1%82%E7%9A%84%E5%B2%81%E6%9C%88%E9%9D%99%E5%A5%BD%E6%9D%A5%E8%87%AA%E4%BA%8E%E5%BA%95%E5%B1%82%E7%9A%84%E8%B4%9F%E9%87%8D%E5%89%8D%E8%A1%8C">顶层的岁月静好来自于底层的负重前行</a></li>
<li><a href="#%E5%BA%95%E5%B1%82%E6%8C%87%E7%9A%84%E6%98%AF%E4%BD%93%E5%88%B6%E5%A4%96%E5%BA%95%E8%96%AA%E7%99%BD%E9%A2%86">底层指的是体制外底薪白领</a></li>
<li><a href="#%E8%B5%84%E9%87%91%E7%BB%88%E4%BC%9A%E6%B5%81%E5%90%91%E5%85%B7%E6%9C%89%E7%A8%80%E7%BC%BA%E6%80%A7%E7%9A%84%E8%B5%84%E4%BA%A7">资金终会流向具有稀缺性的资产</a></li>
<li><a href="#%E5%9C%9F%E5%9C%B0%E7%9A%84%E7%A8%80%E7%BC%BA%E5%86%B3%E5%AE%9A%E4%BA%86%E5%A4%A7%E5%A4%9A%E6%95%B0%E4%BA%BA%E6%B0%B8%E8%BF%9C%E4%B9%B0%E4%B8%8D%E8%B5%B7%E6%83%B3%E4%B9%B0%E7%9A%84%E6%88%BF%E5%AD%90">土地的稀缺决定了大多数人永远买不起想买的房子</a></li>
<li><a href="#%E4%B8%8D%E5%90%8C%E9%98%B6%E5%B1%82%E7%9A%84%E4%BA%BA%E5%AF%B9%E6%94%B6%E5%85%A5%E9%AB%98%E4%BD%8E%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E7%90%86%E8%A7%A3">不同阶层的人对收入高低有不同的理解</a></li>
<li><a href="#%E4%B8%80%E4%BA%8C%E7%BA%BF%E4%B9%B0%E6%88%BF%E5%8F%AA%E4%BC%9A%E8%B6%8A%E6%9D%A5%E8%B6%8A%E9%9A%BE%EF%BC%8C%E6%9C%80%E7%BB%88%E7%A7%9F%E6%88%BF%E4%BC%9A%E6%88%90%E4%B8%BA%E4%B8%BB%E6%B5%81">一二线买房只会越来越难，最终租房会成为主流</a></li>
<li><a href="#%E4%BA%BA%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%AE%89%E8%BA%AB%E4%B9%8B%E6%89%80%E8%83%BD%E4%B9%B0%E6%97%A9%E4%B9%B0%E6%AF%94%E6%99%9A%E4%B9%B0%E5%A5%BD">人需要一个安身之所，能买早买比晚买好</a></li>
<li><a href="#%E8%82%A1%E5%B8%82">股市</a></li>
<li><a href="#%E5%A6%82%E6%9E%9C%E6%88%BF%E4%BB%B7%E4%B8%8D%E6%B6%A8%E9%82%A3%E5%85%B6%E4%BB%96%E4%BA%A7%E5%93%81%E4%BC%9A%E6%80%8E%E4%B9%88%E6%B6%A8">如果房价不涨，那其他产品会怎么涨</a></li>
<li><a href="#zf%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E5%85%AC%E7%A7%9F%E6%88%BF%E6%8E%A7%E5%88%B6%E7%A7%9F%E6%88%BF%E5%B8%82%E5%9C%BA">zf如何利用公租房控制租房市场</a></li>
<li><a href="#%E5%9F%8E%E4%B8%AD%E6%9D%91%E4%B8%8D%E4%BC%9A%E9%95%BF%E6%9C%9F%E5%AD%98%E5%9C%A8">城中村不会长期存在</a></li>
<li><a href="#%E4%B8%89%E5%9B%9B%E7%BA%BF%E5%9F%8E%E5%B8%82%E7%9A%84%E6%9C%AA%E6%9D%A5">三四线城市的未来</a></li>
<li><a href="#%E6%88%BF%E7%A7%9F%E4%BB%B7%E6%A0%BC%E6%B6%A8%E4%B8%8D%E4%B8%8A%E5%8E%BB%EF%BC%8C%E6%9C%AC%E8%B4%A8%E6%98%AF%E4%B9%B0%E6%88%BF%E8%BF%98%E7%9C%8B%E8%B5%B7%E6%9D%A5%E6%9C%89%E5%B8%8C%E6%9C%9B">房租价格涨不上去，本质是买房还看起来有希望</a></li>
<li><a href="#%E7%A8%80%E7%BC%BA%E6%88%BF%E7%9A%84%E4%BB%B7%E6%A0%BC%E6%B0%B8%E8%BF%9C%E6%B6%A8">稀缺房的价格永远涨</a></li>
<li><a href="#%E7%B2%AE%E9%A3%9F%E5%92%8C%E6%88%BF%E5%AD%90%E7%9A%84%E4%B8%8D%E5%90%8C%E6%98%AF%E6%88%BF%E5%AD%90%E6%97%A0%E6%B3%95%E5%92%8C%E5%9C%9F%E5%9C%B0%E5%89%A5%E7%A6%BB">粮食和房子的不同是，房子无法和土地剥离</a></li>
<li><a href="#%E8%B4%AD%E4%B9%B0%E6%88%BF%E4%BB%B7%E5%9F%BA%E6%95%B0%E4%BD%8E%E7%9A%84%E7%9C%81%E4%BC%9A%E5%9F%8E%E5%B8%82%E6%80%8E%E4%B9%88%E9%83%BD%E4%B8%8D%E4%BC%9A%E4%BA%8F%E7%9A%84">购买房价基数低的省会城市，怎么都不会亏的</a></li>
<li><a href="#%E6%88%BF%E5%9C%B0%E4%BA%A7%E6%98%AF%E8%B5%84%E6%9C%AC%E5%B8%82%E5%9C%BA%E8%BF%98%E6%98%AF%E5%AE%9E%E4%BD%93%E7%BB%8F%E6%B5%8E">房地产是资本市场还是实体经济？</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%82%BB%E7%A9%BA">什么是傻空</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%9C%9F%E4%B9%B0%E4%B8%8D%E8%B5%B7%E6%88%BF">什么是真买不起房</a></li>
<li><a href="#%E5%85%B7%E4%BD%93%E6%83%85%E5%86%B5%E5%85%B7%E4%BD%93%E5%88%86%E6%9E%90%E5%A6%82%E6%9E%9C%E7%9C%8B%E4%B8%8D%E6%87%82%E4%B8%80%E5%AE%9A%E6%98%AF%E6%B2%A1%E6%9C%89%E6%8A%93%E4%BD%8F%E9%97%AE%E9%A2%98%E6%9C%AC%E8%B4%A8">具体情况具体分析，如果看不懂，一定是没有抓住问题本质</a></li>
<li><a href="#%E6%A1%82%E6%9E%97-vs-%E5%8D%97%E5%AE%81">桂林 vs 南宁</a></li>
<li><a href="#%E5%85%AC%E7%A7%9F%E6%88%BF%E7%9A%84%E9%87%8F%E7%BA%A7%E4%B8%8D%E4%BC%9A%E5%86%B2%E5%87%BB%E5%88%B0%E5%95%86%E5%93%81%E6%88%BF%E5%B8%82%E5%9C%BA">公租房的量级不会冲击到商品房市场</a></li>
<li><a href="#%E8%B4%B5%E9%98%B3%E8%B5%84%E6%BA%90%E7%9A%84%E7%A8%80%E7%BC%BA%E5%AF%BC%E8%87%B4%E6%9D%83%E8%B4%B5%E6%9B%B4%E5%AE%B9%E6%98%93%E5%9E%84%E6%96%AD%E9%80%9A%E8%BF%87%E4%BD%8E%E6%94%B6%E5%85%A5%E9%AB%98%E7%89%A9%E4%BB%B7%E7%9A%84%E6%96%B9%E5%BC%8F%E5%89%A5%E5%89%8A%E5%BA%95%E5%B1%82%E7%BE%A4%E4%BD%93">贵阳，资源的稀缺导致权贵更容易垄断，通过低收入高物价的方式剥削底层群体</a></li>
<li><a href="#%E9%87%8D%E5%BA%86%E9%AB%98%E5%B1%82%E5%92%8C%E5%88%AB%E5%A2%85%E6%80%8E%E4%B9%88%E9%80%89">重庆：高层和别墅怎么选？</a></li>
<li><a href="#%E8%B4%A7%E5%B8%81%E8%B4%AC%E5%80%BC">货币贬值</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BE%8E%E5%9B%BD%E4%BA%BA%E5%B7%A5%E9%AB%98%E4%BA%8E%E4%B8%AD%E5%9B%BD%E4%BD%86%E5%A4%A7%E5%A4%9A%E6%95%B0%E5%95%86%E5%93%81%E7%9A%84%E7%89%A9%E4%BB%B7%E5%8D%B4%E4%BD%8E%E4%BA%8E%E4%B8%AD%E5%9B%BD">为什么美国人工高于中国，但大多数商品的物价却低于中国</a></li>
<li><a href="#%E8%BF%98%E8%83%BD%E4%B8%8A%E8%BD%A6%E7%9A%84%E8%B5%B6%E7%B4%A7%E4%B8%8A%E8%BD%A6">还能上车的赶紧上车</a></li>
<li><a href="#%E6%AD%A6%E6%B1%89%E5%9F%8E%E5%B8%82%E5%8F%91%E5%B1%95%E7%A9%BA%E9%97%B4%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%BE%80%E5%BE%80%E5%92%8C%E6%88%BF%E4%BB%B7%E7%9A%84%E5%8D%87%E5%80%BC%E7%A9%BA%E9%97%B4%E6%88%90%E6%AD%A3%E6%AF%94">武汉：城市发展空间的大小，往往和房价的升值空间成正比</a></li>
<li><a href="#%E6%9D%83%E5%88%A9%E8%AE%A9%E9%9D%A9%E6%97%8F%E6%88%90%E4%B8%BA%E8%8B%97%E6%97%8F%E7%9A%84%E4%B8%80%E6%94%AF">权利让革族成为苗族的一支</a></li>
<li><a href="#%E6%88%BF%E4%BB%B7%E6%98%AF%E5%90%A6%E4%BC%9A%E8%B7%8C%E5%A6%82%E6%9E%9C%E4%BC%9A%E4%BC%9A%E6%80%8E%E4%B9%88%E8%B7%8C">房价是否会跌，如果会，会怎么跌</a></li>
<li><a href="#%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80%E6%98%AF%E5%87%8F%E7%BC%93%E7%81%AD%E4%BA%A1%E6%9C%80%E5%A5%BD%E7%9A%84%E8%89%AF%E8%8D%AF">通货膨胀是减缓灭亡最好的良药</a></li>
<li><a href="#%E8%B4%A7%E5%B8%81%E4%BE%9B%E5%BA%94%E4%B8%8D%E8%B6%B3%E6%98%AF%E6%98%8E%E6%9C%9D%E7%9A%84%E7%9C%9F%E6%AD%A3%E5%8E%9F%E5%9B%A0">货币供应不足是明朝的真正原因</a></li>
<li><a href="#%E7%BB%8F%E6%B5%8E%E9%97%AE%E9%A2%98%E6%98%AF%E5%AF%BC%E8%87%B4%E6%B8%85%E6%9C%9D%E7%81%AD%E4%BA%A1">经济问题是导致清朝灭亡</a></li>
<li><a href="#%E6%88%BF%E4%BA%A7%E6%8A%95%E8%B5%84%E7%9A%84%E5%87%A0%E7%82%B9%E5%BB%BA%E8%AE%AE">房产投资的几点建议</a></li>
<li><a href="#%E4%BA%BA%E6%B0%91%E5%B8%81%E5%AF%B9%E5%A4%96%E5%8D%87%E5%80%BC%E5%AF%B9%E5%86%85%E8%B4%AC%E5%80%BC">人民币对外升值，对内贬值</a></li>
<li><a href="#%E5%8D%97%E5%AE%81%E4%B9%B0%E6%88%BF%E5%BB%BA%E8%AE%AE">南宁买房建议</a></li>
<li><a href="#%E7%BB%8F%E6%B5%8E%E9%80%82%E7%94%A8%E6%88%BF%E9%83%BD%E6%98%AF%E5%86%85%E9%83%A8%E5%88%86%E9%85%8D%E7%9A%84">经济适用房都是内部分配的</a></li>
<li><a href="#%E6%99%AE%E9%80%9A%E4%BA%BA%E6%80%8E%E4%B9%88%E5%8A%9E%E5%B0%BD%E6%97%A9%E4%B9%B0%E6%88%BF%E5%8A%AA%E5%8A%9B%E6%8C%A3%E9%92%B1%E6%8A%B5%E5%BE%A1%E9%80%9A%E8%83%80">普通人怎么办：尽早买房，努力挣钱抵御通胀</a></li>
<li><a href="#%E6%88%BF%E4%BB%B7%E4%BC%9A%E5%87%BA%E7%8E%B0%E5%BE%88%E5%A4%9A%E4%B8%8A%E4%B8%8B%E6%B3%A2%E5%8A%A8">房价会出现很多上下波动</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E6%97%B6%E6%9C%BA%E7%9A%84%E9%80%89%E6%8B%A9%E7%9C%9FTM%E5%8E%89%E5%AE%B3%E8%BF%99%E7%AB%9F%E7%84%B6%E6%98%AF2010%E5%B9%B4%E7%9A%84%E5%BB%BA%E8%AE%AE%E5%8F%AF%E6%81%A8%E7%9A%84%E6%98%AF2020%E5%B9%B4%E6%89%8D%E7%9C%8B%E5%88%B0">买房时机的选择（真TM厉害，这竟然是2010年的建议，可恨的是2020年才看到）</a></li>
<li><a href="#%E6%94%B6%E5%85%A5%E5%88%86%E9%85%8D%E6%94%B9%E9%9D%A9%E8%B7%9F%E4%BD%93%E5%88%B6%E5%A4%96%E7%9A%84%E4%BA%BA%E6%B2%A1%E5%85%B3%E7%B3%BB">收入分配改革跟体制外的人没关系</a></li>
<li><a href="#%E4%BD%93%E5%88%B6%E5%A4%96%E7%9A%84%E4%BA%BA%E8%A6%81%E6%97%A9%E6%97%A9%E8%80%83%E8%99%91%E5%85%BB%E8%80%81%E9%97%AE%E9%A2%98">体制外的人要早早考虑养老问题</a></li>
<li><a href="#%E6%B0%B8%E8%BF%9C%E4%B8%8D%E8%A6%81%E5%92%8C%E7%99%BD%E7%97%B4%E4%BA%89%E8%BE%A9%E5%9B%A0%E4%B8%BA%E4%BB%96%E4%BC%9A%E6%8A%8A%E4%BD%A0%E7%9A%84%E6%99%BA%E5%95%86%E6%8B%89%E5%88%B0%E5%92%8C%E4%BB%96%E5%90%8C%E4%B8%80%E6%B0%B4%E5%B9%B3%E7%84%B6%E5%90%8E%E7%94%A8%E4%B8%B0%E5%AF%8C%E7%9A%84%E7%BB%8F%E9%AA%8C%E6%89%93%E8%B4%A5%E4%BD%A0">永远不要和白痴争辩，因为他会把你的智商拉到和他同一水平，然后用丰富的经验打败你</a></li>
<li><a href="#%E5%BD%93%E4%B8%AA%E5%86%9C%E6%B0%91%E4%B9%9F%E8%A6%81%E6%87%82%E6%94%BF%E7%AD%96%E8%A6%81%E9%A1%BA%E6%94%BF%E7%AD%96%E8%80%8C%E4%B8%BA">当个农民也要懂政策，要顺政策而为</a></li>
<li><a href="#%E5%AD%98%E9%92%B1%E4%B8%8D%E5%A6%82%E5%AD%98%E8%B5%84%E4%BA%A7%E9%92%B1%E4%BC%9A%E8%B4%AC%E5%80%BC%E8%B5%84%E4%BA%A7%E4%BC%9A%E5%8D%87%E5%80%BC">存钱不如存资产，钱会贬值，资产会升值</a></li>
<li><a href="#%E6%88%BF%E5%AD%90%E8%B6%8A%E6%97%A9%E4%B9%B0%E8%B6%8A%E5%A5%BDzf%E6%83%B3%E9%92%B1%E6%83%B3%E7%96%AF%E4%BA%86">房子越早买越好，zf想钱想疯了</a></li>
<li><a href="#%E5%88%A9%E7%9B%8A%E6%89%8D%E6%98%AFzf%E8%A1%8C%E4%B8%BA%E7%9A%84%E6%8C%87%E6%8C%A5%E6%A3%92">利益才是zf行为的指挥棒</a></li>
<li><a href="#%E5%BB%BA%E8%AE%AE%E4%B8%80%E5%AE%9A%E6%98%AF%E5%BB%BA%E7%AB%8B%E5%9C%A8%E4%B8%A5%E8%82%83%E8%80%83%E5%AF%9F%E7%9A%84%E5%9F%BA%E7%A1%80%E4%B8%8A">建议一定是建立在严肃考察的基础上</a></li>
<li><a href="#%E7%9F%B3%E5%AE%B6%E5%BA%84">石家庄</a></li>
<li><a href="#%E6%8A%95%E8%B5%84%E6%9C%80%E9%87%8D%E8%A6%81%E7%9A%84%E6%98%AF%E7%A8%80%E7%BC%BA%E6%80%A7%E4%B9%B0%E6%88%BF%E9%A6%96%E9%80%89%E5%85%AC%E5%8A%A1%E5%91%98%E5%B0%8F%E5%8C%BA">投资最重要的是稀缺性，买房首选公务员小区</a></li>
<li><a href="#%E8%BF%9C%E7%A6%BB%E5%9E%83%E5%9C%BE%E4%BA%BA">远离垃圾人</a></li>
<li><a href="#%E9%AB%98%E6%88%BF%E4%BB%B7%E6%88%96%E8%AE%B8%E6%9C%89%E5%A4%A9%E4%BC%9A%E5%B4%A9%E7%9B%98%E4%BD%86%E4%BD%A0%E7%AD%89%E4%B8%8D%E5%88%B0%E9%82%A3%E4%B8%80%E5%A4%A9">高房价或许有天会崩盘，但你等不到那一天</a></li>
<li><a href="#%E6%88%BF%E5%AD%90%E4%B8%8D%E4%BB%85%E8%A6%81%E6%97%A9%E4%B9%B0%E8%80%8C%E4%B8%94%E6%9C%89%E8%83%BD%E5%8A%9B%E7%9A%84%E8%AF%9D%E4%B8%8D%E8%A6%81%E6%80%95%E5%8E%8B%E5%8A%9B%E4%BA%89%E5%8F%96%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D">房子不仅要早买，而且有能力的话不要怕压力，争取一步到位</a></li>
<li><a href="#%E9%87%91%E8%9E%8D%E6%9D%A0%E6%9D%86%E6%98%AF%E7%82%92%E6%88%BF%E8%B5%9A%E9%92%B1%E7%9A%84%E6%94%BE%E5%A4%A7%E5%99%A8">金融杠杆是炒房赚钱的放大器</a></li>
<li><a href="#%E8%A6%81%E7%94%A8%E5%8F%91%E5%B1%95%E7%9A%84%E7%9C%BC%E5%85%89%E7%9C%8B%E9%97%AE%E9%A2%98%E5%8F%AA%E8%A6%81%E5%8A%AA%E5%8A%9B%E5%8F%AA%E4%BC%9A%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A5%BD%E8%B6%8A%E6%9D%A5%E8%B6%8A%E8%BD%BB%E6%9D%BE">要用发展的眼光看问题，只要努力，只会越来越好，越来越轻松</a></li>
<li><a href="#%E6%80%A7%E6%A0%BC%E5%86%B3%E5%AE%9A%E5%91%BD%E8%BF%90">性格决定命运</a></li>
<li><a href="#2012%E5%B9%B4%E4%B8%8D%E5%8F%96%E6%B6%88%E8%B0%83%E6%8E%A7%E8%BF%98%E6%9C%89%E6%88%BF%E4%BB%B7%E7%BB%B4%E7%A8%B3%E9%A1%BA%E5%88%A9%E6%8D%A2%E5%B1%8A%E8%80%83%E8%99%91">2012年不取消调控，还有房价维稳顺利换届考虑</a></li>
<li><a href="#%E6%B4%BC%E5%9C%B0%E6%9C%80%E7%BB%88%E9%83%BD%E4%BC%9A%E8%A2%AB%E5%A1%AB%E5%B9%B3%E5%A4%9A%E6%95%B0%E5%9F%8E%E5%B8%82%E6%98%AF%E6%97%A9%E4%B9%B0%E8%83%9C%E4%BA%8E%E6%99%9A%E4%B9%B0">洼地最终都会被填平，多数城市是早买胜于晚买</a></li>
<li><a href="#%E8%A5%BF%E9%83%A8">西部</a></li>
<li><a href="#%E7%9F%AD%E6%9C%9F%E6%B3%A2%E5%8A%A8%E5%B1%9E%E4%BA%8E%E6%AD%A3%E5%B8%B8%E7%8E%B0%E8%B1%A1%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E6%98%AF%E9%95%BF%E6%9C%9F%E8%B6%8B%E5%8A%BF">短期波动属于正常现象，需要关注的是长期趋势</a></li>
<li><a href="#%E9%A2%86%E5%AF%BC%E4%BA%BA%E7%9A%84%E6%99%BA%E6%85%A7%E5%92%8C%E6%89%8D%E5%B9%B2%E5%86%B3%E5%AE%9A%E4%BA%86%E5%9B%BD%E5%AE%B6%E7%9A%84%E5%91%BD%E8%BF%90%E7%BB%9F%E5%B8%85%E7%9A%84%E6%99%BA%E6%85%A7%E5%92%8C%E6%89%8D%E5%B9%B2%E5%86%B3%E5%AE%9A%E4%BA%86%E5%86%9B%E9%98%9F%E7%9A%84%E5%91%BD%E8%BF%90%E8%80%8C%E4%B8%AA%E4%BA%BA%E7%9A%84%E6%99%BA%E6%85%A7%E5%92%8C%E6%89%8D%E5%B9%B2%E5%86%B3%E5%AE%9A%E4%BA%86%E4%B8%AA%E4%BA%BA%E7%9A%84%E5%91%BD%E8%BF%90">领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运</a></li>
<li><a href="#%E5%AF%B9%E4%BA%8E%E5%85%B7%E5%A4%87%E6%8A%95%E8%B5%84%E5%B1%9E%E6%80%A7%E7%9A%84%E5%95%86%E5%93%81%E4%BE%9B%E6%B1%82%E5%85%B3%E7%B3%BB%E6%98%AF%E6%8C%87%E8%B4%A7%E5%B8%81%E4%B8%8E%E5%95%86%E5%93%81%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">对于具备投资属性的商品，供求关系是指货币与商品之间的关系</a></li>
<li><a href="#%E6%97%A9%E4%B9%B0%E7%9A%84%E9%A3%8E%E9%99%A9%E5%B0%8F%E4%BA%8E%E6%99%9A%E4%B9%B0">早买的风险小于晚买</a></li>
<li><a href="#%E5%B0%8F%E5%BC%80%E5%8F%91%E5%95%86%E7%9A%84%E6%88%BF%E5%AD%90%E8%83%BD%E4%B8%8D%E8%83%BD%E4%B9%B0">小开发商的房子能不能买？</a></li>
<li><a href="#%E5%A4%A7%E5%85%B4%E5%9C%9F%E6%9C%A8%E6%90%9E%E5%BB%BA%E8%AE%BE%E7%9A%84%E5%9F%8E%E5%B8%82%E6%88%BF%E4%BB%B7%E9%83%BD%E5%BA%95%E4%B8%8D%E4%BA%86">大兴土木搞建设的城市，房价都底不了</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E8%80%81%E5%BC%8F%E7%A0%96%E6%B7%B7%E6%9D%BF%E6%A5%BC%E7%9A%84%E6%9C%80%E7%BB%88%E5%91%BD%E8%BF%90">北京老式砖混板楼的最终命运？</a></li>
<li><a href="#%E6%8A%8A%E6%88%BF%E4%B9%B0%E5%9C%A8zf%E8%BE%B9%E5%B7%AE%E4%B8%8D%E4%BA%86">把房买在zf边，差不了</a></li>
<li><a href="#%E5%A4%A9%E5%AD%90%E8%84%9A%E4%B8%8B%E4%BA%8C%E6%89%8B%E8%80%81%E6%88%BF%E4%B9%B0%E5%BE%97%E5%A5%BD%E6%8B%86%E8%BF%81%E8%A1%A5%E5%81%BF%E5%B0%91%E4%B8%8D%E4%BA%86">天子脚下：二手老房买得好，拆迁补偿少不了</a></li>
<li><a href="#3%E4%B8%87%E5%85%A5%E6%89%8B%E5%8C%97%E4%BA%AC%E5%9B%9B%E7%8E%AF%E4%BD%A0%E4%B9%9F%E6%98%AF%E5%B9%B8%E8%BF%90%E7%9A%84">3万入手北京四环，你也是幸运的</a></li>
<li><a href="#%E5%90%9B%E4%B8%BA%E8%B4%B5%E5%95%86%E4%BA%BA%E6%8A%80%E5%B7%A5%E6%AC%A1%E4%B9%8B%E5%86%9C%E6%B0%91%E4%B8%BA%E8%BD%BB%E6%89%93%E5%B7%A5%E4%BA%BA%E4%B8%BA%E5%BA%95">君为贵，商人、技工次之，农民为轻，打工人为底</a></li>
<li><a href="#10%E5%B9%B4%E7%9A%84%E8%B0%83%E6%8E%A7%E5%92%8C08%E5%B9%B4%E8%B0%83%E6%8E%A7%E7%9A%84%E5%8C%BA%E5%88%AB%E5%B8%A6%E6%9D%A5%E7%9A%84%E5%BD%B1%E5%93%8D%E6%9C%BA%E4%BC%9A">10年的调控和08年调控的区别、带来的影响、机会</a></li>
<li><a href="#%E5%8E%86%E5%8F%B2%E6%80%BB%E6%98%AF%E6%83%8A%E4%BA%BA%E7%9A%84%E7%9B%B8%E4%BC%BC">历史总是惊人的相似</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%88%BF%E8%B4%B7">关于房贷</a></li>
<li><a href="#%E4%B9%B0%E5%8D%96%E5%95%86%E5%93%81%E6%88%BF%E4%BC%9A%E9%80%90%E6%B8%90%E5%8F%98%E6%88%90%E5%AF%8C%E4%BA%BA%E7%9A%84%E6%B8%B8%E6%88%8F">买卖商品房会逐渐变成富人的游戏</a></li>
<li><a href="#zf%E8%BF%98%E6%98%AF%E6%9B%B4%E5%9C%A8%E6%84%8F%E5%86%9C%E6%B0%91%E9%97%AE%E9%A2%98">zf还是更在意农民问题</a></li>
<li><a href="#%E6%B2%BB%E5%9B%BD%E9%9C%80%E8%A6%81%E7%94%A8%E8%B4%AA%E5%AE%98%E5%8F%8D%E8%B4%AA%E5%AE%98">治国需要用贪官、反贪官</a></li>
<li><a href="#%E4%BA%8C%E7%BA%BF%E5%9F%8E%E5%B8%82%E5%85%B8%E5%9E%8B%E4%BB%A3%E8%A1%A8">二线城市典型代表</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E5%95%86%E9%93%BA%E5%92%8C%E4%BD%8F%E5%AE%85%E6%8A%95%E8%B5%84">关于商铺和住宅投资</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%88%BF%E4%BA%A7%E8%B0%83%E6%8E%A7">关于房产调控</a></li>
<li><a href="#%E5%85%B3%E4%BA%8E%E6%88%BF%E4%BA%A7%E7%A8%8E">关于房产税</a></li>
<li><a href="#%E8%80%81%E5%85%AC%E6%88%BF%E7%9A%84%E6%8B%86%E8%BF%81%E9%97%AE%E9%A2%98">老公房的拆迁问题</a></li>
<li><a href="#%E6%8A%95%E8%B5%84%E6%96%B0%E6%88%BF%E8%BF%98%E6%98%AF%E8%80%81%E5%85%AC%E6%88%BF">投资新房还是老公房</a></li>
<li><a href="#%E9%AB%98%E7%AB%AF%E7%9B%98%E6%9C%89%E6%88%BF%E4%BB%B7%E5%B8%A6%E5%8A%A8%E4%BD%9C%E7%94%A8">高端盘有房价带动作用</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E5%92%8C%E6%B2%A1%E4%B9%B0%E6%88%BF%E7%9A%84%E5%B7%AE%E8%B7%9D">买房和没买房的差距</a></li>
<li><a href="#%E6%88%BF%E4%BA%A7%E4%BA%A4%E6%98%93%E5%8E%86%E5%8F%B2">房产交易历史</a></li>
<li><a href="#%E5%A5%91%E7%A8%8E%E7%9A%84%E5%8E%86%E5%8F%B2">契税的历史</a></li>
<li><a href="#%E5%BB%89%E7%A7%9F%E6%88%BF%E7%9A%84%E5%8E%86%E5%8F%B2">廉租房的历史</a></li>
<li><a href="#%E5%8E%86%E5%8F%B2%E4%B8%8A%E4%B9%B0%E6%88%BF%E6%9C%80%E5%A5%BD%E7%9A%84%E6%9C%9D%E4%BB%A3">历史上买房最好的朝代</a></li>
<li><a href="#%E6%9C%AA%E6%9D%A5%E6%88%BF%E5%9C%B0%E4%BA%A7%E5%B8%82%E5%9C%BA%E7%9A%84%E5%8F%91%E5%B1%95">未来房地产市场的发展</a></li>
<li><a href="#%E6%88%BF%E4%BA%A7%E5%88%B0%E6%9C%9F">房产到期</a></li>
<li><a href="#%E4%B9%B0%E5%AD%A6%E5%8C%BA%E6%88%BF%E9%97%AE%E9%A2%98">买学区房问题</a></li>
<li><a href="#%E5%8E%86%E5%8F%B2%E7%9A%84%E7%BB%93%E5%B1%80">历史的结局</a></li>
<li><a href="#%E4%BA%BA%E5%8F%A3%E6%99%AE%E6%9F%A5">人口普查</a></li>
<li><a href="#%E6%98%86%E5%B1%B1%E6%88%BF%E4%BB%B7%E5%88%86%E6%9E%90%E4%B8%8E%E4%B9%B0%E6%88%BF">昆山房价分析与买房</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E7%8E%B0%E5%9C%A8%E7%A7%9F%E5%94%AE%E6%AF%94%E8%BF%99%E4%B9%88%E4%BD%8E%E2%80%94%E5%90%8C%E5%B0%8F%E5%8C%BA%E4%B9%B0%E4%B8%80%E5%A5%97%E5%A4%A7%E8%BF%98%E6%98%AF%E4%B8%A4%E5%A5%97%E5%B0%8F">为什么现在租售比这么低 &amp; 同小区买一套大还是两套小</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E9%9A%BE%E4%B9%8B%E5%9B%9E%E4%B8%8D%E5%8E%BB%E7%9A%84%E4%B9%A1%E2%80%94%E6%8B%89%E7%BE%8E%E4%BA%BA%E8%BF%87%E5%BE%97%E6%AF%94%E4%BD%A0%E6%83%B3%E8%B1%A1%E7%9A%84%E5%A5%BD">买房难之回不去的乡 &amp; 拉美人过得比你想象的好</a></li>
<li><a href="#%E7%A7%9F%E6%88%BF%E7%9A%84%E8%8B%A6">租房的苦</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E8%A5%BF%E4%B8%89%E6%97%97">北京西三旗</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E4%BA%89%E5%8F%96%E4%B8%80%E6%AD%A5%E5%88%B0%E4%BD%8D">买房争取一步到位</a></li>
<li><a href="#%E6%94%B6%E5%85%A5%E7%A8%B3%E5%AE%9A%E7%9A%84%E5%AE%B6%E5%BA%AD%E5%A6%82%E4%BD%95%E4%B9%B0%E6%88%BF">收入稳定的家庭如何买房</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E5%9B%9E%E9%BE%99%E8%A7%82">北京回龙观</a></li>
<li><a href="#%E8%B4%B7%E6%AC%BE%E8%BF%98%E6%98%AF%E5%85%A8%E6%AC%BE">贷款还是全款</a></li>
<li><a href="#00%E5%90%8E%E7%9A%84%E4%B9%B0%E6%88%BF%E9%9C%80%E6%B1%82%E4%BB%8E%E4%BD%95%E8%80%8C%E6%9D%A5">00后的买房需求从何而来</a></li>
<li><a href="#%E6%84%8F%E5%A4%A7%E5%88%A9%E7%9A%84%E4%BD%8F%E6%88%BF%E6%A8%A1%E5%BC%8F">意大利的住房模式</a></li>
<li><a href="#%E4%B8%AD%E5%9B%BD%E7%9A%84%E5%AD%A6%E6%9C%AF">中国的学术</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E8%BF%9C%E6%B4%8B%E5%B1%B1%E6%B0%B4">北京远洋山水</a></li>
<li><a href="#%E7%B2%BE%E8%8B%B1%E7%9A%84%E8%B5%84%E4%BA%A7">精英的资产</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E4%B8%89%E7%8E%AF%E5%A1%94%E6%A5%BC">北京三环塔楼</a></li>
<li><a href="#%E6%99%AE%E9%80%9A%E4%BA%BA%E4%B9%B0%E6%88%BF%E7%9A%84%E6%9C%AA%E6%9D%A5">普通人买房的未来</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E6%88%BF%E4%BB%B7%E8%B6%85%E9%A6%99%E6%B8%AF">北京房价超香港</a></li>
<li><a href="#%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%96%B0%E9%97%BB%E4%B8%8D%E5%8F%AF%E4%BF%A1%E7%B2%BE%E8%8B%B1%E7%9A%84%E6%9C%89%E9%92%B1%E6%98%AF%E4%BD%A0%E6%83%B3%E8%B1%A1%E4%B8%8D%E5%88%B0%E7%9A%84">中国的新闻不可信，精英的有钱是你想象不到的</a></li>
<li><a href="#40%E5%B9%B4%E7%9A%84%E5%95%86%E4%BD%8F%E6%88%BF%E6%B2%A1%E6%9C%8970%E5%B9%B4%E7%9A%84%E4%BD%8F%E5%AE%85%E6%9C%89%E6%8A%95%E8%B5%84%E4%BB%B7%E5%80%BC">40年的商住房没有70年的住宅有投资价值</a></li>
<li><a href="#%E9%99%90%E8%B4%B7%E5%AF%B9%E7%B2%BE%E8%8B%B1%E6%B2%A1%E7%94%A8">限贷对精英没用</a></li>
<li><a href="#%E5%A4%96%E6%B1%87%E7%AE%A1%E5%88%B6%E5%86%B3%E5%AE%9A%E4%BA%86%E5%A4%A7%E9%83%A8%E5%88%86%E6%9C%89%E9%92%B1%E4%BA%BA%E5%8F%AA%E8%83%BD%E5%9C%A8%E5%9B%BD%E5%86%85%E6%8A%95%E8%B5%84">外汇管制决定了大部分有钱人只能在国内投资</a></li>
<li><a href="#%E5%A4%96%E5%9B%BD%E5%9B%BD%E7%B1%8D%E5%9C%A8%E4%B8%AD%E5%9B%BD%E7%94%9F%E6%B4%BB%E6%98%AF%E6%9B%B4%E5%A5%BD%E7%9A%84%E9%80%89%E6%8B%A9">外国国籍在中国生活是更好的选择</a></li>
<li><a href="#%E5%88%86%E6%9C%9F%E4%BB%98%E6%AC%BE%E4%B9%B0%E6%88%BF%E5%A6%82%E6%9E%9C%E6%88%BF%E4%BB%B7%E4%B8%8A%E6%B6%A8%E5%BE%88%E5%AE%B9%E6%98%93%E6%AF%81%E7%BA%A6--%E8%87%AA%E4%BD%8F%E8%A6%81%E9%80%89%E5%A4%A7%E5%93%81%E7%89%8C%E5%BC%80%E5%8F%91%E5%95%86">分期付款买房，如果房价上涨，很容易毁约 &amp; 自住要选大品牌开发商</a></li>
<li><a href="#%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80%E5%92%8C%E6%88%BF%E4%BB%B7%E7%9A%84%E5%85%B3%E7%B3%BB">通货膨胀和房价的关系</a></li>
<li><a href="#%E5%8D%97%E4%BA%AC%E4%B9%B0%E6%88%BF%E5%88%86%E6%9E%90--%E4%B9%B0%E6%88%BF%E8%A6%81%E5%81%9A%E5%A5%BD%E8%B0%83%E6%9F%A5%E5%88%86%E6%9E%90%E5%B7%A5%E4%BD%9C">南京买房分析 &amp; 买房要做好调查分析工作</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E5%8D%8E%E6%B8%85%E5%98%89%E5%9B%AD">北京华清嘉园</a></li>
<li><a href="#%E4%B8%AD%E5%9B%BD%E7%9A%84%E6%9C%9D%E4%BB%A3%E6%9B%B4%E6%9B%BF">中国的朝代更替</a></li>
<li><a href="#%E4%B8%AD%E5%9B%BD%E5%8F%AF%E4%BB%A5%E6%97%A0%E9%99%90%E5%8D%B0%E9%92%9E%E5%90%97">中国可以无限印钞吗</a></li>
<li><a href="#%E8%AF%BB%E5%8F%B2%E8%AF%BB%E7%9A%84%E4%B8%8D%E6%98%AF%E6%95%85%E4%BA%8B%E8%BF%98%E6%98%AF%E6%89%BE%E5%8E%86%E5%8F%B2%E8%A7%84%E5%BE%8B%E4%BB%A5%E5%8F%A4%E9%89%B4%E4%BB%8A">读史读的不是故事，还是找历史规律，以古鉴今</a></li>
<li><a href="#%E6%AF%9B%E5%A4%AA%E9%98%B3%E5%BE%80%E4%BA%8B">毛太阳往事</a></li>
<li><a href="#%E5%8C%97%E4%BA%AC%E5%A4%A7%E5%85%B4">北京大兴</a></li>
<li><a href="#%E8%B4%B5%E9%98%B3">贵阳</a></li>
<li><a href="#%E5%AF%8C%E4%BA%BA%E8%B6%8A%E5%AF%8C%E7%A9%B7%E4%BA%BA%E8%B6%8A%E7%A9%B7">富人越富、穷人越穷</a></li>
<li><a href="#%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80%E7%9A%84%E5%BD%A2%E6%88%90%E5%8E%9F%E5%9B%A0">通货膨胀的形成原因</a></li>
<li><a href="#%E6%B7%B1%E5%9C%B3--%E6%98%86%E6%98%8E%E4%BB%87%E4%B9%A6%E8%AE%B0%E2%80%94-%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80%E4%BD%93%E5%88%B6%E5%86%85%E9%AB%98%E6%9E%95%E6%97%A0%E5%BF%A7%E4%BD%93%E5%88%B6%E5%A4%96%E8%87%AA%E6%B1%82%E5%A4%9A%E7%A6%8F">深圳 &amp; 昆明仇书记 &amp; 通货膨胀体制内高枕无忧、体制外自求多福</a></li>
<li><a href="#%E9%95%BF%E6%98%A5">长春</a></li>
<li><a href="#%E4%BD%9B%E5%B1%B1">佛山</a></li>
<li><a href="#%E9%A6%96%E4%BB%98%E6%8F%90%E9%AB%98%E7%9A%84%E9%80%BB%E8%BE%91">首付提高的逻辑</a></li>
<li><a href="#%E5%9B%9B%E7%BA%BF%E5%9F%8E%E5%B8%82">四线城市</a></li>
<li><a href="#%E8%8B%8F%E5%B7%9E%E5%B7%A5%E4%B8%9A%E5%9B%AD">苏州工业园</a></li>
<li><a href="#%E4%BD%8F%E6%88%BF%E5%85%AC%E7%A7%AF%E9%87%91%E5%88%A9%E7%8E%87">住房公积金利率</a></li>
<li><a href="#%E6%B5%8E%E5%8D%97--%E5%A4%A7%E8%A7%84%E5%BE%8B%E6%8B%86%E8%BF%81%E7%9A%84%E5%9F%8E%E5%B8%82%E6%88%BF%E4%BB%B7%E4%B8%8D%E4%BC%9A%E4%B8%8B%E9%99%8D">济南 &amp; 大规律拆迁的城市房价不会下降</a></li>
<li><a href="#%E5%85%AC%E5%8A%A1%E5%91%98%E5%B0%8F%E5%8C%BA%E7%89%9B%E9%80%BC">公务员小区牛逼</a></li>
<li><a href="#%E6%88%BF%E5%B1%8B%E6%9C%9D%E5%90%91%E5%8F%AA%E8%A6%81%E4%B8%8D%E6%98%AF%E7%BA%AF%E5%8C%97%E8%A5%BF%E5%B0%B1%E8%A1%8C--%E4%B9%B0%E6%88%BF%E9%A6%96%E9%80%89%E5%B8%82%E4%B8%AD%E5%BF%83%E5%85%AC%E5%9B%AD%E5%9C%B0%E4%BA%A7">房屋朝向只要不是纯北西就行 &amp; 买房首选市中心、公园地产</a></li>
<li><a href="#zf%E6%90%AC%E8%BF%81">zf搬迁</a></li>
<li><a href="#%E4%BF%84%E7%BD%97%E6%96%AF">俄罗斯</a></li>
<li><a href="#%E7%8F%A0%E6%B5%B7--%E5%94%AF%E4%B8%80%E8%87%AA%E4%BD%8F%E6%88%BF%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%8A%95%E8%B5%84--%E8%B0%83%E6%8E%A7%E6%98%AF%E6%9C%80%E4%BD%B3%E7%9A%84%E9%80%89%E6%88%BF%E6%97%B6%E6%9C%BA">珠海 &amp; 唯一自住房不只是投资 &amp; 调控是最佳的选房时机</a></li>
<li><a href="#%E7%BB%8F%E6%B5%8E%E5%B4%A9%E6%BA%83%E6%9C%80%E5%90%8E%E6%8E%A5%E7%9B%98%E7%9A%84%E6%98%AF%E8%80%81%E7%99%BE%E5%A7%93">经济崩溃，最后接盘的是老百姓</a></li>
<li><a href="#%E5%91%BD%E8%BF%90%E4%B9%8B%E7%9F%9B">命运之矛</a></li>
<li><a href="#%E9%99%A4%E9%9D%9E%E5%A4%96%E6%97%8F%E5%85%A5%E4%BE%B5%E6%88%96%E5%85%A8%E5%9B%BD%E5%A4%A7%E9%A5%A5%E8%8D%92%EF%BC%8C%E5%90%A6%E5%88%99%E5%8F%8C%E8%BD%A8%E5%88%B6%E5%86%B3%E5%AE%9A%E4%BA%86%E6%88%BF%E4%BB%B7%E4%B8%8D%E4%BC%9A%E5%B4%A9%E7%9B%98">除非外族入侵或全国大饥荒，否则双轨制决定了房价不会崩盘</a></li>
<li><a href="#kkndme%E8%81%8A%E5%8C%97%E5%AE%8B%E5%94%90%E6%9C%9D">kkndme聊北宋、唐朝</a></li>
<li><a href="#%E5%AE%8B%E4%BB%A3%E6%88%BF%E5%A5%B4">宋代房奴</a></li>
<li><a href="#ZG%E6%B0%91%E4%B8%BB">ZG民主</a></li>
<li><a href="#%E7%8E%8B%E5%AE%89%E7%9F%B3%E7%9A%84%E9%9D%92%E8%8B%97%E6%B3%95%E4%B9%8B%E5%9B%BD%E5%AE%B6%E5%87%BA%E6%94%BF%E7%AD%96%E7%9A%84%E5%8A%A8%E6%9C%BA">王安石的青苗法之国家出政策的动机</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E7%A4%BE%E4%BC%9A%E5%85%AC%E5%B9%B3">什么是社会公平</a></li>
<li><a href="#%E8%BF%98%E6%98%AF%E6%9C%89%E5%BE%88%E5%A4%9A%E6%9C%89%E9%92%B1%E4%BA%BA">还是有很多有钱人</a></li>
<li><a href="#%E5%8F%8C%E8%BD%A8%E5%88%B6%E4%B9%8B%E4%BD%93%E5%88%B6%E5%86%85%E7%9A%84%E7%A6%8F%E5%88%A9">双轨制之体制内的福利</a></li>
<li><a href="#%E5%BC%80%E5%8F%91%E5%95%86%E6%80%9D%E7%BB%B4">开发商思维</a></li>
<li><a href="#%E5%86%9C%E6%B0%91%E6%94%BF%E6%9D%83%E7%9A%84%E7%BC%BA%E7%82%B9">农民政权的缺点</a></li>
<li><a href="#%E9%83%91%E5%B7%9E%E6%9C%89%E5%89%8D%E6%99%AF">郑州有前景</a></li>
<li><a href="#%E5%85%AC%E5%9B%AD%E5%9C%B0%E4%BA%A7%E6%98%AF%E7%A8%80%E7%BC%BA%E8%B5%84%E6%BA%90">公园地产是稀缺资源</a></li>
<li><a href="#%E5%BC%A0%E7%8C%AE%E5%BF%A0%E5%B1%A0%E5%B7%9D">张献忠屠川</a></li>
<li><a href="#%E6%B4%AA%E7%A7%80%E5%85%A8%E9%BB%84%E5%B7%A2%E6%9D%8E%E8%87%AA%E6%88%90">洪秀全、黄巢、李自成</a></li>
<li><a href="#%E6%9C%B1%E5%85%83%E7%92%8B">朱元璋</a></li>
<li><a href="#%E6%9B%B9%E5%8F%82%E6%B2%BB%E5%9B%BD">曹参治国</a></li>
<li><a href="#%E6%99%81%E9%94%99">晁错</a></li>
<li><a href="#%E6%B0%91%E8%90%A5%E5%B0%8F%E4%BC%81%E4%B8%9A%E7%9A%84%E8%80%81%E6%9D%BF%E5%92%8C%E6%89%93%E5%B7%A5%E8%80%85">民营小企业的老板和打工者</a></li>
<li><a href="#%E9%83%AD%E8%A7%A3">郭解</a></li>
<li><a href="#2010%E5%B9%B4%E7%9A%84%E4%B8%AD%E5%9B%BD%E6%88%BF%E5%9C%B0%E4%BA%A7">2010年的中国房地产</a></li>
<li><a href="#%E6%88%BF%E5%A5%B4%E7%AE%97%E4%B8%8D%E4%B8%8A%E4%B8%8D%E5%B9%B8%E7%9B%B8%E5%BD%93%E5%BD%93%E4%B8%8D%E4%BA%86%E6%89%8D%E7%AE%97">房奴算不上不幸，相当当不了才算</a></li>
<li><a href="#%E7%B2%BE%E8%8B%B1%E4%BA%BA%E7%BE%A4%E7%9A%84%E5%B9%B3%E5%9D%87%E6%94%B6%E5%85%A5%E5%86%B3%E5%AE%9A%E6%88%BF%E4%BB%B7">精英人群的平均收入决定房价</a></li>
<li><a href="#%E5%86%85%E5%9C%B0%E4%B8%8D%E6%98%AF%E9%A6%99%E6%B8%AF%E6%B5%B7%E5%8D%97">内地不是香港、海南</a></li>
<li><a href="#%E5%8E%86%E5%8F%B2%E6%98%AF%E4%B8%80%E9%9D%A2%E9%95%9C%E5%AD%90">历史是一面镜子</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E4%B8%80%E6%AC%A1%E6%80%A7%E5%88%B0%E4%BD%8D%E6%AF%94%E8%BE%83%E5%A5%BD">买房一次性到位比较好</a></li>
<li><a href="#%E5%A4%96%E6%B1%87%E7%AE%A1%E5%88%B6">外汇管制</a></li>
<li><a href="#%E4%B8%80%E7%BA%BF%E5%92%8C%E4%BA%8C%E7%BA%BF">一线和二线</a></li>
<li><a href="#%E5%90%95%E5%90%8E%E7%AF%A1%E6%9D%83">吕后篡权</a></li>
<li><a href="#%E5%B0%8F%E4%BA%A7%E6%9D%83%E6%88%BF">小产权房</a></li>
<li><a href="#%E5%95%86%E9%93%BA%E5%92%8C%E4%BD%8F%E5%AE%85">商铺和住宅</a></li>
<li><a href="#%E4%BD%93%E5%88%B6%E5%86%85%E5%A4%96">体制内外</a></li>
<li><a href="#2010%E5%B9%B4%E7%9A%84%E4%B8%8A%E6%B5%B7">2010年的上海</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E7%89%A9%E4%B8%9A%E4%B8%8E%E6%88%BF%E8%B4%B7">买房：物业与房贷</a></li>
<li><a href="#%E6%94%B6%E7%B4%A7%E4%BD%8F%E6%88%BF%E8%B4%B7%E6%AC%BE">收紧住房贷款</a></li>
<li><a href="#%E4%B9%B0%E6%88%BF%E7%89%A9%E4%B8%9A%E4%B8%8E%E6%88%BF%E8%B4%B7">买房：物业与房贷</a></li>
<li><a href="#%E5%A5%B8%E8%87%A3%E8%94%A1%E4%BA%AC">奸臣蔡京</a></li>
<li><a href="#%E4%BD%93%E5%88%B6%E5%86%85%E7%9A%8428%E5%8E%9F%E5%88%99">体制内的28原则</a></li>
<li><a href="#%E8%B4%BE%E8%B0%8A">贾谊</a></li>
<li><a href="#kkndme-%E6%8E%A8%E8%8D%90%E7%9A%84%E5%8E%86%E5%8F%B2%E4%B9%A6">kkndme 推荐的历史书</a></li>
<li><a href="#%E5%B9%B4%E8%BD%BB%E4%BA%BA%E8%A6%81%E6%97%A9%E4%B9%B0%E6%88%BF">年轻人要早买房</a></li>
<li><a href="#%E4%B8%8D%E8%A6%81%E4%BD%8E%E4%BC%B0%E9%80%9A%E8%B4%A7%E8%86%A8%E8%83%80">不要低估通货膨胀</a></li>
<li><a href="#%E4%BA%8C%E4%B8%89%E7%BA%BF%E5%9F%8E%E5%B8%82%E4%B8%8E%E9%87%8D%E5%BA%86">二三线城市与重庆</a></li>
<li><a href="#%E5%9F%8E%E5%8C%BA%E5%92%8C%E9%83%8A%E5%8C%BA">城区和郊区</a></li>
<li><a href="#%E5%AE%88%E7%9D%80%E9%87%91%E7%A2%97%E8%A6%81%E9%A5%AD%E5%90%83">守着金碗要饭吃</a></li>
<li><a href="#%E4%BA%BA%E5%88%B6%E7%9A%84%E7%A4%BE%E4%BC%9A%E4%BA%BA%E5%B0%B1%E6%98%AF%E5%88%B6%E5%BA%A6">人制的社会，人就是制度</a></li>
<li><a href="#%E5%87%86%E5%85%AC%E5%8A%A1%E5%91%98%E7%9A%84%E5%A5%BD%E5%A4%84">准公务员的好处</a></li>
<li><a href="#%E5%B0%8F%E5%9F%8E%E5%B8%82%E6%88%BF%E4%BB%B7%E4%BC%9A%E5%9B%A0%E4%B8%BA%E4%BA%BA%E6%B0%91%E5%B8%81%E8%B4%AC%E5%80%BC%E6%B6%A8%E4%BB%B7%E4%BD%86%E4%BE%9D%E7%84%B6%E9%9A%BE%E5%8F%98%E7%8E%B0">小城市房价会因为人民币贬值涨价，但依然难变现</a></li>
<li><a href="#%E4%B8%80%E7%BA%BF%E6%9D%AD%E5%B7%9E">一线杭州</a></li>
<li><a href="#%E4%BA%8C%E4%B8%89%E7%BA%BF%E5%9F%8E%E5%B8%82%E7%9A%84%E5%8F%91%E5%B1%95%E9%9D%A0%E6%8B%86%E8%BF%81">二三线城市的发展靠拆迁</a></li>
<li><a href="#%E8%BD%AC%E7%AF%87%E6%96%87%E7%AB%A0%E4%B8%80%E4%B8%AA%E5%BF%BD%E6%82%A0%E4%BA%86%E5%87%A0%E4%BA%BF%E4%B8%AD%E5%9B%BD%E4%BA%BA%E7%9A%84%E4%BC%AA%E6%A6%82%E5%BF%B5%E6%89%80%E8%B0%93%E4%B8%AD%E5%9B%BD%E6%88%BF%E5%9C%B0%E4%BA%A7%E6%B3%A1%E6%B2%AB">转篇文章：一个忽悠了几亿中国人的伪概念：所谓“中国房地产泡沫”</a></li>
<li><a href="#%E6%8B%86%E8%BF%81%E8%A1%A5%E5%81%BF">拆迁补偿</a></li>
<li><a href="#%E5%9F%8E%E5%B8%82%E5%BA%95%E5%B1%82">城市底层</a></li>
<li><a href="#%E5%9E%84%E6%96%AD%E4%BC%81%E4%B8%9A">垄断企业</a></li>
<li><a href="#%E5%86%9C%E6%9D%91%E8%87%AA%E6%9D%A5%E6%B0%B4">农村自来水</a></li>
<li><a href="#%E8%A2%81%E7%9B%8E">袁盎</a></li>
<li><a href="#%E4%BA%8C%E4%B8%89%E7%BA%BF%E5%9F%8E%E5%B8%82%E9%80%89%E6%96%B0%E5%9F%8E%E8%BF%98%E6%98%AF%E8%80%81%E5%9F%8E">二三线城市，选新城还是老城</a></li>
<li><a href="#%E5%9C%A8%E4%B8%AD%E5%9B%BD%E6%99%AE%E9%80%9A%E4%BA%BA%E6%89%8B%E4%B8%8A%E9%97%B2%E9%92%B1%E4%B8%8D%E5%A4%9A%E7%9A%84%E4%BA%BA%E8%A2%AB%E5%89%A5%E5%89%8A">在中国，普通人手上闲钱不多的人被剥削</a></li>
<li><a href="#%E4%B8%89%E5%88%86%E5%A4%A9%E6%B3%A8%E5%AE%9A%E4%B8%83%E5%88%86%E9%9D%A0%E6%89%93%E6%8B%BC">三分天注定七分靠打拼</a></li>
<li><a href="#%E4%BA%BA%E7%9A%84%E5%89%8D%E7%A8%8B%E6%9C%89%E7%9A%84%E6%97%B6%E5%80%99%E4%B8%8D%E6%8E%8C%E6%8F%A1%E5%9C%A8%E8%87%AA%E5%B7%B1%E6%89%8B%E9%87%8C">人的前程有的时候不掌握在自己手里</a></li>
<li><a href="#%E6%B2%B3%E5%8D%97%E9%83%91%E5%B7%9E%E4%B8%8E%E6%B4%9B%E9%98%B3">河南郑州与洛阳</a></li>
<li><a href="#%E6%9D%AD%E5%B7%9E">杭州</a></li>
<li><a href="#%E8%A5%BF%E5%AE%89-%E4%B8%8E-%E9%87%8D%E5%BA%86">西安与重庆</a></li>
<li><a href="#%E8%B0%A2%E5%9B%BD%E4%B8%AD%E7%A9%BA%E7%BD%AE%E7%8E%87">谢国中「空置率」</a></li>
<li><a href="#%E6%89%93%E5%B7%A5%E4%B8%8D%E5%A6%82%E6%9C%89%E4%B8%80%E6%8A%80%E4%B9%8B%E9%95%BF%E7%9A%84%E5%B0%8F%E8%80%81%E6%9D%BF">打工不如有一技之长的小老板</a></li>
<li><a href="#%E4%B8%80%E7%BA%BF%E4%BA%8C%E7%BA%BF%E7%9A%84%E7%94%9F%E6%B4%BB">一线、二线的生活</a></li>
<li><a href="#%E8%AE%B2%E6%95%85%E4%BA%8B%E5%90%AB%E6%B2%99%E5%B0%84%E5%BD%B1ZG%E4%B9%8B%E6%88%BF%E5%AD%90%E4%B8%8D%E5%B1%9E%E4%BA%8E%E5%B8%82%E5%9C%BA%E7%BB%8F%E6%B5%8E">讲故事含沙射影ZG之房子不属于市场经济</a></li>
<li><a href="#%E4%BB%80%E4%B9%88%E6%98%AF%E5%A5%BD%E7%9A%84%E6%94%BF%E7%AD%96">什么是好的政策</a></li>
<li><a href="#%E6%9D%8E%E5%95%86%E9%9A%90%E6%B8%A3%E7%94%B7%E7%A5%96%E5%B8%88%E7%88%B7">李商隐「渣男」祖师爷</a></li>
<li><a href="#%E8%A5%BF%E4%BA%94%E7%8E%AF%E5%86%85%E7%9A%84%E5%88%AB%E5%A2%85%E6%98%AF%E7%9B%B8%E5%BD%93%E7%A8%80%E7%BC%BA%E7%9A%84%E8%B5%84%E6%BA%90">西五环内的别墅，是相当稀缺的资源</a></li>
</ul>
<h2 id="调控降房价是刚需的一厢情愿"><a href="#调控降房价是刚需的一厢情愿" class="headerlink" title="调控降房价是刚需的一厢情愿"></a>调控降房价是刚需的一厢情愿</h2><p>2010年的房地产调控，让很多人看到了希望：让房价降得再猛烈些吧。还有人更是幸灾乐祸似的呼喊：让房地产赶紧崩盘吧。让没房子的好好看看有房子的笑话，是人生的一大快事。</p>
<p>但是我们是不是要仔细想想，为什么调控？调控期望得到什么样的效果？</p>
<ol>
<li>是如千千万万想买房子的人期望的那样，让人人买的起房吗？</li>
<li>是如千千万万的流氓无产者期望的那样，让房地产崩盘，开发商上吊，dfzf不再靠卖地实现gdp吗？</li>
</ol>
<p>2010年房价下跌已经变成了人民最急切的期望，已经高过了解决超贫困家庭的温饱问题，已经超过了子女教育，医疗和养老。并且为房地产必须下降提出了若干义正言辞理由，总结下来无外乎三条：</p>
<ol>
<li>人人都有居住权。房子是用来住的，不是用来炒的。</li>
<li>房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘。</li>
<li>房价上涨造成物价上涨，人民生活变得困难。</li>
</ol>
<p>的确，当经济过热，房价过高，会对经济运行和社会安定带来较高的风险。这也是国家所担忧的。防范金融风险，一切维稳才是zy考虑的重中之中。</p>
<p>而民间所总结的三条，应该和调控的原因和目的基本不沾边。让我们一条一条的分析一下：</p>
<h3 id="1、人人都有居住权。房子是用来住的，不是用来炒的"><a href="#1、人人都有居住权。房子是用来住的，不是用来炒的" class="headerlink" title="1、人人都有居住权。房子是用来住的，不是用来炒的"></a>1、人人都有居住权。房子是用来住的，不是用来炒的</h3><p>其实这是一个伪命题。房子包括房屋及房屋所属的土地两个部分。房屋本身只有居住价值；而土地所具备稀缺性，决定了土地的投资价值。房地产贵的不是房屋，而是房屋下面那块地皮。所以商品房具备了投资与自住双重属性。</p>
<p>任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。</p>
<blockquote>
<p><strong>liougehooa：</strong></p>
<p>“任志强说的并没有错，居者有其屋并不等于人人享有商品房的产权。居住的房屋也不等于商品房。” 任志强这句话绝对没说炒房价，房子在他眼里还是住的。<br>难道你用byt是你老er比较稀缺才买？那也没看见byt暴涨到5W一个。<br>”而土地所具备稀缺性？“任志强也说了，拿出全国耕地的1%也够老百姓住了！现在是啥科技了，舍掉1%耕地对农作物有什么影响？</p>
<p><strong>kkndme：</strong></p>
<p>华北平原从河北到山东有大片的盐碱地，你都可以用于盖房，而且会非常便宜，也没有人跟你竞价。但是你在那里盖了房子并不能保证你天天按时在北京城区上班。</p>
</blockquote>
<h3 id="2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘"><a href="#2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘" class="headerlink" title="2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘"></a>2、房子太贵了，租售比严重不合理，空置率太高，人均收入太低，早晚要崩盘</h3><p>这个问题比较大。房价是不是太贵了？有没有泡沫？</p>
<p>我们首先从国民的收入结构来分析</p>
<p>一个遵从“丛林法则”的精英社会决定了国民收入的金字塔结构。</p>
<p>既然是金字塔，底端的中低收入者占据了金子塔的最大比例，但是大家要知道金字塔的顶端既使只有10%人口，那也将是一个1亿多的绝对庞大的数字，远远超过了绝大多数西方国家的人口总和。</p>
<p>而北上广深以及三十多个省会，这些个靠掠夺全国或者一省资源，以牺牲大多数人口的利益为代价发展壮大起来的超大型及大型城市，需要容纳全国1亿多的精英人群，是否能得出房地产严重泡沫，空置率过高的结论？</p>
<p>当低收入者们努力挥洒汗水期望着自己年薪能够超过5万，8万，10万。。。的时候，他们可能做梦也想不出精英阶层手中究竟拥有多少财富。</p>
<p>精英们会象流氓无产者们一厢情愿认为的那样：因为一个区区房产税而恐慌性抛弃手中的大量房产吗？</p>
<blockquote>
<p><strong>liougehooa：</strong></p>
<p>”因为一个区区房产税而恐慌性抛弃手中的大量房产吗？“ 现在不说哪个富豪不是靠偷税漏税爆发的，我就举个例子，一套房不收税，二套房也不收税，三套房收300%税，你龟儿子还敢买三套房？</p>
<p><strong>kkndme：</strong></p>
<p>你说的事情在历史上已有发生，大明律明令禁止超标准建房，如果违禁，不仅仅是收税的问题，而是打板子下大狱，没收充公的，比房产税可要狠多了。但是终究没能执行下去，原因在于官员太腐败，不符合官员地主阶层的利益，最后名存实亡了。光是梗着脖子叫唤是没有用的，利益驱动着社会的发展，违背统治阶层利益的事情即使出台也难以执行，最后的下场都是不了了之。</p>
</blockquote>
<p>答案显然是否定的。</p>
<p>可以确认的是，房价不是由统计局的平均收入决定的。而是精英的平均收入决定的。</p>
<p>为了便于分析，我们剥离掉商品房（注意：只是商品房，而不是房屋）的社会属性，先把它看做商品。是商品就有他的内在规律。</p>
<p>什么决定商品的价格，价值？对不起，我只能说你上学上傻了。</p>
<p>是供求关系，只有供求关系。</p>
<p>我们判断一个核心城市市区内的商品房是具备足够稀缺性的。</p>
<p>如果你在北京海淀区上班，即使你在山海关拥有1000平方米的住宅也不能替代你住在北京市近郊区以内的愿望。而无论你是租房，分房还是买房，只要你还在海淀区上班，你就必须住在北京市近郊区以内。</p>
<p>假设你挣得钱不足够多，你需要租一套房子解决你的上班问题，上班距离的远近及居住的质量，取决于你愿意支付的租金。</p>
<p>假设你的钱够买房子，我相信你更愿意买房，因为你可以拥有房屋的产权和房产增值的收益。而买房子的大小，品质，离你上班的远近，取决于你手中的资金和你对未来收入的预期。</p>
<p>买房问题很象是中国的上学问题，而且简直是异曲同工。</p>
<p>假设你家附近有个重点中学，教学质量很好，考大学几率很高，而其他的学校你觉得不理想，你肯定希望无论如何自家小孩也要上这个重点中学。</p>
<p>上重点中学凭什么？我们简单的剥离掉其他社会因素的影响，可以认为想上重点中学就要凭好成绩，小孩努力考到前多少名，就可以上重点中学。这与努力赚钱买房是一个道理，有钱的出高价就能买到好位置好环境的房子。</p>
<p>我们再加入社会因素的影响，比如某大人物看到这个中学很抢手，很可以赚一笔，于是就设计了加分项，谁给自己送的钱多，就给谁加分，于是小孩要上重点中学不但要考高分，还要送钱加分。</p>
<p>同理，当好位置的商品房成为稀缺资源，各类炒房客的出现是必然的。</p>
<p>如果说炒房客加高价给最终住户的行为会产生泡沫，那么重点小学和公立幼儿园高昂的择校费应不应该也叫做泡沫？</p>
<blockquote>
<p><strong>liougehooa：</strong></p>
<p>”如果说炒房客加高价给最终住户的行为会产生泡沫，那么重点小学和公立幼儿园高昂的择校费应不应该也叫做泡沫？“ 你拿一个错误的现象，说这个现象是正确的来证明你错误的房价观念是正确的，可笑！</p>
<p><strong>kkndme：</strong></p>
<p>事情不能简单用正确还是错误来评价，一件事物发生一定有发生的原因。你说皇帝统治老百姓，想杀谁杀谁是正确还是错误？如果是错的，但是却在中国延续了几千年。</p>
</blockquote>
<p>尽管炒房和公立幼儿园加价成为普遍的社会现象是令人痛心的，但它们不以刚需人群的意志为转移的存在着，且与泡沫无关。</p>
<p>最被提及与泡沫有关的是以下两点：</p>
<p>第一，中国的房价甚至高于某些发达国家的房价。</p>
<p>其实，众所周知的是：不光房价高于某些发达国家，石油，高速，教育，医疗，税收等费用都远远高于某些发达国家。</p>
<p>而且中国的精英人群尽管所占比例不大，但是绝对数量足够大，而且精英平均收入甚至远远高于某些发达国家的收入水平。</p>
<p>第二：租售比问题</p>
<p>这个问题不用过多解释，使租售比更合理的方法不是只有降低房价一种，还有一种更靠谱的：房租大幅度上涨。而且已经在行动中。房租长期保持低价就像1990年以前的和田玉长期保持低价一样不可能。</p>
<h3 id="3、房价上涨造成物价上涨，人民生活变得困难"><a href="#3、房价上涨造成物价上涨，人民生活变得困难" class="headerlink" title="3、房价上涨造成物价上涨，人民生活变得困难"></a>3、房价上涨造成物价上涨，人民生活变得困难</h3><p>这个问题其实也不用多解释，懂经济学的该明白自然会明白，不会轻易被忽悠，不懂的解释半天也不会明白。</p>
<p>简单的可以这样说，物价上涨是经济过热，钞票印多了的后果。而房地产因为稀缺性和易保存比较吸金，所以吸收了大量的钞票，以至于大家光看到了房地产的飞涨。</p>
<blockquote>
<p><strong>liougehooa：</strong></p>
<p>”而房地产因为稀缺性和易保存比较吸金，所以吸收了大量的钞票，以至于大家光看到了房地产的飞涨。“</p>
<p>房价高涨，你要发的钞票必须要多，不然怎么去买房子？你发的钞票越多，钞票不是你发下来去买房子就死掉了不流通了，它只要流到人的口袋或者银行的口袋，这钱立马回出现流动，能不造成通货膨胀吗？除非这笔钱收到后限制房东使用。<br>为了支持高房价，国家必须发大量货币，这也是去年房价高涨的原因。</p>
<p><strong>kkndme：</strong></p>
<p>请先了解一下中国的货币发行制度，人可以无知，但不可以乱说。让人笑话。</p>
</blockquote>
<p>其实如果房地产交易量下降，不再具有吸金功能，那么农产品等生活必须品以及房屋租金等等就会大幅上涨。这是因为多出来的大量钞票总要有个流向，如果不被房地产吸收，就会被大蒜，绿豆，姜，及全部生活必须品的上涨来吸收</p>
<p>事实也证明确实如此。2010年房产调控后，物价上涨的势头非常迅猛。</p>
<h2 id="调控的真正目的：防范金融风险-amp-通过垄断实现gj利益最大化"><a href="#调控的真正目的：防范金融风险-amp-通过垄断实现gj利益最大化" class="headerlink" title="调控的真正目的：防范金融风险 &amp; 通过垄断实现gj利益最大化"></a>调控的真正目的：防范金融风险 &amp; 通过垄断实现gj利益最大化</h2><p>那麽是不是房地产就没有泡沫呢？</p>
<p>这个问题谁也不知道，因为到现在zf拿不出一份权威的数据来说明房地产到底有无泡沫。</p>
<p>但是房价高了就有风险，zf从感性上还是有清楚认识的。</p>
<p>注意，我们前面啰嗦了很多，现在才开始接近这次调控的真实意图。</p>
<p>防范金融风险？不错，你说的很对，但是没这么简单。</p>
<p>辨别利益是看透一切事物真相的武器。</p>
<p>高房价谁是受益者？</p>
<p>房地产游戏的模式三个环节：dfzf卖地、银行贷款、开发商在二级市场销售</p>
<p>dfzf卖地之后，剩余的风险和收益都归银行和开发商</p>
<p>dfzf卖地的款则用于地方广场，地铁，公路之类的建设和权贵的挥霍。</p>
<p>dfzf只负责卖地，是无风险的买卖。</p>
<p>只要房价不断上涨，加杠杆的炒房客就会赚到盆满钵满</p>
<p>这么分析下来，最受益的地方政府、开发商、炒房客。</p>
<p>独独缺了zy。</p>
<p>这时你是否猜到zy为什么要调控？如果还猜不到没关系，听我道来。</p>
<p>纵观古今，上位者最不能容忍的是别人受益，自己被黑锅。</p>
<p>大kfs，小kfs，大炒房客，小炒房客，dfzf都是收益者，但是风险却由zy来抗。这是一笔很不划算的买卖。</p>
<p>而房地产混战的局面，造成了国家队央企成员只有凭财大气粗高价拿地的份，钱花的最多，风险却抗的最大。</p>
<p>zy深深的感觉到要想国家队受益，要想控制风险只有做到两个字：垄断。</p>
<p>提高资金门槛，让小kfs，小炒房客，有点钱的小老百姓推出这个游戏。房地产很好玩，但不是小人物应该玩的。</p>
<p>先让市场冷静，彻底整顿，踢出那些个跳梁小丑，然后国家队出马，绝对垄断的市场，才能够统一定价，才能够控制风险，才能够利润最大化。</p>
<p>既然油价高于美国是合理的，那麽房价高于美国一定也是合理的，关键在于垄断。</p>
<p>不仅仅是房价的垄断，因为过高的垄断定价将会使交易量下降，国家队也需要资金周转。</p>
<p>真正厉害的，还是房租的垄断。公租房的推出是房租垄断进程的里程碑。</p>
<p>至于苦等廉租房的同志，不要抱太大的希望。城市要建设，地铁，广场，政府大楼都要上马，钱从哪里来？不会无缘无故凭空出来。</p>
<p>想想小学就近上学，但是重点小学真的就近就能上吗？小学名额可以寻租，经适房，廉租房也是一个道理。</p>
<blockquote>
<p><strong>tjOOSAN：</strong></p>
<p>真扯啊~~~ 油价跟房价去比？？</p>
<p>这位kkndme ，你就别忽悠了！~~</p>
<p>汽车对于百姓而言，可有可无，油价涨到是美国的一百倍，中国百姓才高兴了。</p>
<p>大哥！房子是必须品。ok？那么既然你也认为政府的钱大多从地产来。</p>
<p>那么这种发展正常嘛？会持续吗？？没有实体经济，能行吗？</p>
<p>招你的法子说，炒楼才是中国的前途？</p>
<p><strong>kkndme：</strong></p>
<p>这位兄弟，您比那些希望钱钱去炒大米的还不靠谱。</p>
<p>石油影响的不仅仅是开车的人花费多了。疯狂上涨的运输成本会导致民不聊生的。</p>
<p>假设一斤蔬菜从广西的农民地里收购是0.5元一斤，但是由于油价的像你说的上百倍的涨，运到北京，这斤蔬菜要卖300块一斤。</p>
<p>社会就瘫痪了</p>
<p><strong>tjOOSAN：</strong></p>
<p>那么这种发展正常嘛？会持续吗？？没有实体经济，能行吗？</p>
<p><strong>kkndme：</strong></p>
<p>实体经济的发展不是简单的钱不去投资房产，就会去投资实体经济，实体经济就发展起来了。估计媒体洗脑洗的比较厉害，你中毒了。</p>
<p>资本是趋利的。无论是哪个国家，哪个社会，只要存在市场经济，这个道理就一定不会错。</p>
<p>为什么资金进入房地产及其他资本市场而逃离实体经济？是因为实体经济环境不好，不赚钱。</p>
<p>一是税赋太高，二是各种需要打点孝敬的部门、管理人员、工作人员太多，比税赋还高，不能承受之重。三是国家队在各个重要领域的垄断，使国企变成了变相税务局的职能，垄断企业的暴利定价，又是压在本应该蓬勃发展的实体经济上的又一座大山。</p>
<p>现在央企基本是不垄断的行业不做，把产能过剩，充分竞争的产业交给民间资本，并且还要给这些资本压上高昂的负担.</p>
<p>有可能垄断的行业包括房地产都会收到国家队手里，以后更是将发展成为一个高度垄断的社会。</p>
<p>资本不是傻子，一定会趋利，所以资本放弃了操心受累不挣钱的实体经济，转而投向房地产。房地产的调控，让资本又进入了黄金、农产品领域参与爆炒，反正就是不进实体经济。因为国家不给实体经济的环境做任何的改善。</p>
<p>如果实体经济有一个好的环境，有一个好的获利空间，大量的资金就不会撤出实体经济，没有资金潮涌般的投入房地产市场，中国的房地产将会是一个平稳的上涨趋势。</p>
<p>但是体制决定了资金的去向，不以人的意志为转移。</p>
<p>高税赋、暗箱成本及垄断不但造成巨大的贫富差距，而且将会导致生活成本的大幅提高，生活负担日益沉重。</p>
<p>一方面百姓生活负担的加重，导致一些非生活必须品严重产能过剩，将会出现大量亏损倒闭的内需企业。</p>
<p>另一方面精英阶层快速聚集大量财富，使奢侈品供不应求。古董，字画，玉器，豪车，顶级服装的消费比重也将越来越大。</p>
<p>但是能够容纳大量资金的只有两个领域：农产品领域（满足老百姓的肚子）和商品房领域（居住权要满足老百姓的需求，产权要满足精英阶层的需求）。</p>
<p>资金的流向只能疏导不能强堵，zf很明白这个道理。两者危害取其轻，你认为zf会选择哪个领域？</p>
</blockquote>
<blockquote>
<p><strong>tjOOSAN：</strong></p>
<p>真扯啊~~~ 油价跟房价去比？？</p>
<p>这位kkndme ，你就别忽悠了！~~</p>
<p>汽车对于百姓而言，可有可无，油价涨到是美国的一百倍，中国百姓才高兴了。</p>
<p><strong>vavan2010：</strong></p>
<p>这种人肯定最后就是蠢死的。你没车，不用汽油，你可知道生活中有多少东西是需要用汽油的？无知才最可悲！</p>
<p><strong>kkndme：</strong></p>
<p>我们为确实买不起房的低收入群体，只能感到无奈</p>
<p>但有些本来能买房却嫌这嫌那而不买房的傻空通知，我们只能说你买不起房，完全是自己的原因，连油价上涨意味着什么都搞不懂，贫穷真的不能怨别人。</p>
</blockquote>
<h2 id="官方公布的统计数据，只要关系到某个群体的利益，就一定会被修饰导致失真"><a href="#官方公布的统计数据，只要关系到某个群体的利益，就一定会被修饰导致失真" class="headerlink" title="官方公布的统计数据，只要关系到某个群体的利益，就一定会被修饰导致失真"></a>官方公布的统计数据，只要关系到某个群体的利益，就一定会被修饰导致失真</h2><p>说到房产泡沫的问题，就不得说说官方的统计数据。</p>
<p>官方的统计数据从来是可以很雷，但不可以很真。</p>
<p>我们的统计原则基本就是：村骗乡，乡骗县，一骗骗到国务院。</p>
<p>不知道有人去市、县、乡、村进行过社会调查没有？</p>
<p>社会调查是怎么一回事？</p>
<p>我来告诉你，所有的关于人口、收入、田地、贫困户的数据都是官方统一编写，统一口径，如果胆敢有哪个小民对调查人员乱说，那是吃不了兜着走的。</p>
<p>你问了数据编来编去的意义在哪里呢？</p>
<p>意义很大，起码跟向上申请拨款是关系非常密切的。数据不假，钱从哪来？</p>
<p>统计数据无所谓是否真实并不重要，重要的是它是获取利益的重要手段。</p>
<p>假设官方想证明房地产不存在泡沫，那么一定拿的出不存在泡沫的统计数据作证。</p>
<p>反之，也一样。</p>
<p>好比,CCAV为了证明高空置率的结论，派出记者专门找偏远且刚刚完工的楼盘，进行了一次纯粹为了证明内部已事先得出结论的毫无科学依据的调研。</p>
<p>而dfzf，为了证明刚需多么强劲，也立刻拿出了选择性失明的统计数据来进行回击。</p>
<p>无论是左还是右，同样都是不科学，都是现有结论，再有证据。</p>
<p>我们到底应该信谁</p>
<blockquote>
<p><strong>cdw1：</strong></p>
<p>商品房本来名字中就有商品二字不准投资岂不是笑话？真正不准投资的那叫公房，这才是保证老百姓有房住的关键，商品房诞生的时候就很明确是改善居民居住条件的，现在政府怪商品房价格过高造成老百姓没房住本来就是颠倒黑白，政府不造保障老百姓居住的公房，而让老百姓去购买改善居住条件的商品房来解决本该政府解决的居住问题，政府不作为才是造成老百姓出现居住问题的罪魁祸首。我不期望人人有房，我只希望每一个在城市里找到工作的人通过努力工作勤俭持家能在生活城市里有希望拥有一套安稳的房子来容身，不管这房子的性质是商品房、经适房、廉租房或者其他什么房子。</p>
<p><strong>kkndme：</strong></p>
<p>你说的正是根源所在啊，zf的职责应该向无房者提供的保障房，建成经适房、两限房，被权贵占有牟利，而非要把商品房赋予稳定社会的职能。zf不是不知道问题的根源，而是不愿意放弃巨大的利益。</p>
</blockquote>
<h2 id="税收从来都是向下游转嫁的-amp-房产税迟迟不出台的真正原因"><a href="#税收从来都是向下游转嫁的-amp-房产税迟迟不出台的真正原因" class="headerlink" title="税收从来都是向下游转嫁的 &amp; 房产税迟迟不出台的真正原因"></a>税收从来都是向下游转嫁的 &amp; 房产税迟迟不出台的真正原因</h2><p>闲扯了一下统计数据</p>
<p>还是回到这次调控中来</p>
<p>房地产游戏的模式三个环节：dfzf卖地、银行贷款、开发商在二级市场销售</p>
<p>dfzf卖地之后，剩余的风险和收益都归银行和开发商</p>
<p>dfzf卖地的款则用于地方广场，地铁，公路之类的建设和权贵的挥霍。</p>
<p>dfzf只负责卖地，是无风险的买卖。当然还有人企图利用流氓无产者和无知群众的群情激奋来进一步收取房产税来提高dfzf收入。</p>
<p>税收从来都是向下游转嫁的，zf多收出来的钱一定是通过最下游的房租来体现。</p>
<p>当然，也有很多明白人士大声疾呼反对房产税。</p>
<p>自古而今，即使最辉煌的朝代，最被广大群众津津乐道的太平盛世，普通群众也仅仅只是解决了温饱而已，包括贞观、文景、康乾。</p>
<p>国家的富庶都是以老百姓勒紧裤腰带为代价的。</p>
<p>所以，zf是不会理会部分明白人反对房产税的呼声的。</p>
<p>真正对房产税的顾及来自于dfzf对土地出卖前途的担忧，真是鱼与熊掌不可兼得。</p>
<p>尽管流氓无产者和无知群众的呼声很高，然而房产税征收一旦实际操作起来，就会变的不得人心，征收难度非常之大，实际效果难以预知。也就是说zf没有底。而如果房产税征收效果不佳，dfzf卖地收入再受到巨大影响，那就真正是得不偿失了。</p>
<p>就会变成赔了夫人又折兵。</p>
<p>这样的买卖，zf是不会轻易做的</p>
<h2 id="房地产的现状"><a href="#房地产的现状" class="headerlink" title="房地产的现状"></a>房地产的现状</h2><p>房地产的现状是，商品房二级市场是由各种类型的开发商自由竞争的，一手房开发商之间的竞争，二手房投资客之间的的竞争。</p>
<h2 id="房价持续上涨的本质是稀缺性让好房子成为资金最好的去处"><a href="#房价持续上涨的本质是稀缺性让好房子成为资金最好的去处" class="headerlink" title="房价持续上涨的本质是稀缺性让好房子成为资金最好的去处"></a>房价持续上涨的本质是稀缺性让好房子成为资金最好的去处</h2><p>房价为什麽在一个自由竞争的市场上能够持续上涨？因为稀缺性。不是房屋的稀缺性，而是房屋所必须占用的土地的稀缺性。</p>
<p>有些群情激奋的群众立刻以6500万套房子空置的事情提出质疑，还有ccav的报道，那是要多煽情又多煽情。</p>
<p>我们无需说6500万套的真实性（明白人都知道非常离谱）和空置我心的科学性。为什么不说，因为这种稀缺性跟空置率就完全没有关系。商品房的稀缺性是相对人民币而言的。人民币印多了，资金没地方去，商品房就涨价了。</p>
<h2 id="关于垄断"><a href="#关于垄断" class="headerlink" title="关于垄断"></a>关于垄断</h2><h3 id="1、垄断的好处是没有风险"><a href="#1、垄断的好处是没有风险" class="headerlink" title="1、垄断的好处是没有风险"></a>1、垄断的好处是没有风险</h3><p>垄断的市场是没有风险的，土地是完全垄断的，所以dfzf完全没有风险。</p>
<p>而商品房是自由竞争的市场，是具备风险属性的，尽管由于大量印钞造成了商品房的飞涨，但随着房价的高涨，风险也在积聚。</p>
<p>dfzf土地垄断没有风险，完全可以置身事外。</p>
<p>可是银行呢？属于国家的银行。</p>
<p>银行正在承担自由竞争市场房价高涨积聚的风险。</p>
<p>这是zy不允许看到的，dfzf受益，而风险全部甩给zy。</p>
<p>既然垄断的市场是没有风险的，那还是让房屋和土地一起垄断好了。</p>
<h3 id="2、垄断可以解决社会稳定"><a href="#2、垄断可以解决社会稳定" class="headerlink" title="2、垄断可以解决社会稳定"></a>2、垄断可以解决社会稳定</h3><p>垄断还可以解决一个问题：社会稳定。</p>
<p>常被媒体和群情激奋群众所提及的一个重要问题就是：房价收入比。</p>
<p>大量印刷的人民币促成了房价高企（因为商品房实在是具备了大资金需要的所有投资品属性），可是那些个巨额的资金普通老百姓并没有见到。</p>
<p>路人甲：我们一个月就挣2000多块钱，干一辈子买不起房啊。</p>
<p>路人乙：我一个月上万都买不起房。</p>
<p>媒体：一个家庭不吃不喝22年买一套房</p>
<p>大量的疯狂印刷的人民币在哪里呢？</p>
<p>在精英手里。</p>
<p>我们在回顾一下开篇，我们奉行的是精英社会，丛林法则，金字塔式收入结构。</p>
<p>人民币再多，也不可能流到金字塔的底端。</p>
<p>dfzf垄断卖地也就让百姓们发发牢骚。</p>
<p>而炒房客，kfs赚的盆满钵满就让生活在中下层的老百姓眼红和不能容忍。</p>
<p>不患寡而患不均啊。</p>
<p>垄断，国家队的垄断，可以解决眼红问题，也就是社会稳定问题。</p>
<h3 id="3、房屋垄断只会愈演愈烈，底层人民想要拥有一套房子的难度只会越来越难"><a href="#3、房屋垄断只会愈演愈烈，底层人民想要拥有一套房子的难度只会越来越难" class="headerlink" title="3、房屋垄断只会愈演愈烈，底层人民想要拥有一套房子的难度只会越来越难"></a>3、房屋垄断只会愈演愈烈，底层人民想要拥有一套房子的难度只会越来越难</h3><p>还有一个最重要的问题：银行和民营开发商之间，是官与民之间的问题。</p>
<p>而银行和国家队央企，是左兜和右兜的问题。</p>
<p>土地是垄断的</p>
<p>然而房屋垄断并不是一件容易的事情。</p>
<p>因为民间百姓手里是存在大量二手房的，当然这也是为什么调控的板子只打在二套房、投资客、炒房客身上的原因。</p>
<p>同样，房租的垄断也并不是一件容易的事情，因为民间百姓手中的大量二手房都具备出租的特性。</p>
<p>俗话说，问渠哪得清如许，唯有源头活水来。</p>
<p>要垄断，必须抓住源头。</p>
<p>源头在哪里？</p>
<p>在一级市场，而不是二级市场。</p>
<p>房地产的垄断就是要国家队从一级市场做起，从一级市场开发着手完成对商品房开发的垄断。</p>
<p>一级市场，那是一个高高的门槛，民间资金，就让他该干嘛干嘛吧，房地产不是你玩的。</p>
<p>一级市场包括的内容是一般开发商无法参与的：</p>
<p>城市规划，城中村改造，旧房拆迁，城市综合体开发。</p>
<p>可以说从规划、改造拆迁、开发、到二级市场销售，一条龙服务。</p>
<p>一级市场开发的最大特点就是可以创造需求：你不是有房子吗？我拆掉你的房子，看你有没有刚需。</p>
<p>国家垄断控制风险的意义还在于：需求可以拆出来。</p>
<p>以后的路，民营开发商的日子将变得越发艰难。</p>
<p>土地是dfzf的，商品房开发是央企和国企的。</p>
<p>处于金字塔下层的40%家庭，如果还没有一套自己的房子，那么买一套自己的房子就越发的变得不可能。</p>
<p>商品房将逐渐往金字塔的上层积聚。</p>
<p>处于金字塔下层40%的无房家庭将只能以租房来解决居住问题。</p>
<p>租金的快速上涨期即将到来，zf已经盯上了房租这块巨大的蛋糕。因为房租的收益比房产税更靠谱，更具有操作性。</p>
<p>公租房，呼之欲出</p>
<h2 id="民生问题"><a href="#民生问题" class="headerlink" title="民生问题"></a>民生问题</h2><blockquote>
<p><strong>sunxinmfc：</strong></p>
<p>政府无需考虑民生问题么，本次号称史上最严厉的打压政策再起不到一点效果，ZF威信力将进一步下降，需要仔细考量</p>
<p><strong>kkndme：</strong></p>
<p>自古以来，民生问题的底线就是不要出现陈胜吴广的极端情况。所以zf更在意的是农民问题。</p>
<p>因为历史的改朝换代都是大饥荒引起的，无论是汉末、唐末、隋末、还是明末。农产品价格上涨的对zf的震动要远远大于房价的上涨。</p>
<p>农民具备最原始的力量，而他们关心的并不是三线以上城市的房价，而是能否填饱肚子。</p>
<p>而关心自己能否拥有一套产权房的都市白领，除了呻吟一下意外，几乎是没有什么有效反抗的可能的。</p>
<p><strong>sunxinmfc：</strong></p>
<p>秀才造反，三年不成，自古已然。</p>
<p>但我们还没有谈到所谓“造反”的地步，只是说房价如你所述，暴涨，中国的中产和以上人士将进一步携款合法外流（在房价暴涨的09年，中国外流人口达到历史峰值）。这一部分人利益如何保证？您觉得zf不需要考虑对么？</p>
<p><strong>kkndme：</strong></p>
<p>现在社会跟几百年前最大的不同是，世界是开放的，这得益于地理大发现和世界经济一体化，即使缅甸朝鲜这样封闭的国家也免不了受到来自世界范围的影响。大一统的集权社会融入了西方民主的思想，同时互联网的出现也让人们对过去的思维进行了再思考。</p>
<p>尽管底层百姓出国还是一个梦想，但对于精英人群，基本上是在世界范围自由流动的。</p>
<p>中国自古以来，商人都是没有地位的，商人的财产可以随时被官员没收，自古如此，至今如此，即使是今天也并没有出现私人财产神圣不可侵犯的宣言。即使出现了，也没有任何可以操作的可能。</p>
<p>明朝以后大量的商人移居海外成了华侨，现今的商人为了安全移居海外也不是什么新鲜事，不过是步明朝华侨的后尘罢了，zf会真的放在心上吗？朱元璋没有放在心上，朱棣没有放在心上，现在同样也不会放在心上。</p>
<p>真正可怕的是官员一方面谋取私利一方面把亲属和存款送到国外，这其实是一种国家背叛。在国内榨干老百姓的血汗，得到的金钱却在国外挥霍。什么叫卖国，不过如此。</p>
<p><strong>connstr：</strong></p>
<p>假如商人可以移居海外，官员自然也可以。官商能分家吗？</p>
<p><strong>kkndme：</strong></p>
<p>商人还是要分的吧：红顶商人就是官商，统治阶级，那是上位者。</p>
<p>普通商人，比如开个袜子厂赚个辛苦钱，最后袜子厂不挣钱了，官员还天天找他，让他孝敬，他就只好移民了。</p>
<p>普通商人在中国也是海量的，有点钱，但是没一点地位。</p>
</blockquote>
<p>中国自古以来都不是人人都能有属于自己的房子，大量的丫鬟、仆妇、管家、小厮寄养在权贵人家，身体都是不自由的，何谈拥有自己的房子。</p>
<p>自古以来，最多的就是失去土地的农民，住在地主家做长工，又何谈属于自己的房子。</p>
<p>只要是有贫富差距的社会，只要存在阶级，只要存在统治和被统治，这个社会就会不以人的意志为转移的出现大量的底层居民，没有这些底层居民。权贵就不能很好的生活。</p>
<p>为了权贵生活的更好，就要维持大量的底层群众。</p>
<p>权贵必须保证大量底层群众的基本生活，才能够让自己过得更舒服，仅此而已。这就是民生</p>
<blockquote>
<p><strong>sunxinmfc：</strong></p>
<p>删掉了一大段，不得不说，你说的很对。</p>
<p>（呻吟一下）。君不见，天涯上多少盼着被美军解放的铁杆准汉奸，政府楼被炸七成网民不是替死者默哀，而是一片欢呼。为什么会有这样的民意，参考前苏联，ZF确实应三思</p>
<p><strong>kkndme：</strong></p>
<p>爱国是与中华的历史分不开的，自秦统一以来，中国由封建时代转变为帝国时代，只有在项羽焚烧咸阳后，对诸侯进行了一次分封，但时间非常短暂，刘邦重新统一了天下，帝国时代经历了漫长的汉、唐、宋、元、明、清。天下一统的爱国情结是根深蒂固的。</p>
<p>而在秦以前，与中世纪的欧洲是极为相似的，齐国人可以到秦国做宰相，赵国人可以到燕国做将军。中世纪法国的诺曼底公爵可以到英格兰继承王位，瑞典的贵族可以到基普做大公，封建时代的国家概念并不是明显。欧洲经历了漫长的封建时代，国家观念很淡薄，能够抛弃国家货币成立欧盟就是明证。这对于漫长帝国时代，天下一统的国家是很难想象的。</p>
<p>爱国只跟历史文化传统有关。</p>
<p>1978年越南入侵红色高棉，当时的红色高棉对内实行红色恐怖，以gongchanzhuyi的名义对全国700万人口进行奴役和屠杀，总共屠杀了100万人。当越南军入侵时，受到了广大柬埔寨群众的热烈欢迎，称越南军解放柬埔寨是解放人类的战争。</p>
<p>红色高棉失去了民心，必然败亡。</p>
<p>那时，为了支援红色高棉，中越战争打响。有我国的强力支持，红色高棉仍然走向败亡。</p>
</blockquote>
<h2 id="房产税的制定原则"><a href="#房产税的制定原则" class="headerlink" title="房产税的制定原则"></a>房产税的制定原则</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>不过从政府要分租房市场的蛋糕而言，我有不同的看法</p>
<p>政府的公租房要想租出好价格，有两种方式</p>
<p>1）减少市场可出租房源（北京就这样干了，拆迁廉价城中村）</p>
<p>2）提高竞争房源的成本。（所以我认为推出房产税是大概率的事情，因为政府的公租房是不需要交房产税的）</p>
<p>于是竞争房源的房租暴涨，政府的公租房也就可以羞羞答答的打个9则来</p>
<p>安抚一些底层了，反正所有的黑锅都有竞争房源的房东背了</p>
<p><strong>kkndme：</strong></p>
<p>房产税的问题我觉得zf还是慎重的</p>
<p>1、如果采用不公平法则：</p>
<p>公务员，垄断企业，事业单位的福利房不上税，权贵与利益集团购买囤积的大量商品房不上税，只有普通百姓上税，会加剧社会矛盾，而房产税会大幅提升租金，在公租房没有大量建起来之前，对稳定不利，维稳才是第一要务。</p>
<p>2、如果实行公平法则</p>
<p>小产权房，福利房，权贵囤积房都要上税，执行难度太大，可操作性不强，阻力几乎难以逾越。</p>
<p>如果真的收房产税，采用不公平法则的可能性最大，普通的无房百姓生活将变得非常艰难。</p>
</blockquote>
<h2 id="维稳的本质是人民能吃饱饭"><a href="#维稳的本质是人民能吃饱饭" class="headerlink" title="维稳的本质是人民能吃饱饭"></a>维稳的本质是人民能吃饱饭</h2><p>维稳问题其实最终还是吃饭问题。</p>
<p>房价上涨可以不买，如果房租价格不能控制，农产品价格不能控制。一旦大批群众吃饭出现了问题，维稳就无从谈起了。这个底线，还是要严守的</p>
<h2 id="公租房是为体制内服务的"><a href="#公租房是为体制内服务的" class="headerlink" title="公租房是为体制内服务的"></a>公租房是为体制内服务的</h2><p>说到公租房问题</p>
<p>首先还是要提到我们实行的双轨制</p>
<p>从某一方面可以简单的理解为统治阶级内和统治阶级外。 <br>也就是我们常说的体制内，体制外。</p>
<p>体制内：公务员、垄断企业及医院高校科研院所等事业单位。</p>
<p>体制外：外资、私企打工者，个体工商户，农民，这里面也应当包括高层的老板和最底层的长期无业人员。</p>
<p>我们感受最深的就是涨工资的问题，一旦政府涨工资，那就一定是体制内涨工资，跟体制外完全没有关系。在金融危机的08年，大批企业关门，减薪，裁员，美国欧洲因为钱紧不得不降低公务员薪水。而这时，我们神奇的国家在干一件事：公务员普遍加薪，是为了全国百姓着想—刺激消费。</p>
<p>还有保障房问题，这个也是我们感受最深的：保障房&#x3D;公务员及垄断企业住房；解决住房问题变成了如何让领导干部住更多更大的房子，如何让体制内员工拥有足够舒适住房的问题。</p>
<p>体制外的群众，那是别想得到一点好处的。谁让你是被统治阶级呢。</p>
<p>公租房的推出，也要解决两个问题：</p>
<p>1、体制内的最下层（最下层也是统治阶级，也就是是古代官吏中的吏）员工的基本住房问题</p>
<p>2、向体制外被统治的小民稳定收钱的问题。</p>
<h2 id="房产税一定会转嫁给租房人"><a href="#房产税一定会转嫁给租房人" class="headerlink" title="房产税一定会转嫁给租房人"></a>房产税一定会转嫁给租房人</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>对公租房的问题受教了</p>
<p>不过当前从来不存在什么公平正义</p>
<p>税收向来是穷人多交，富人不交或少交</p>
<p>不过我很感兴趣的是假如推出了房产税</p>
<p>政府采取何种方式收</p>
<p>难道是如同鬼子进村了，挨家挨户的收？</p>
<p>但鬼子本身就是房产税的征收对象（不然也当不了鬼子）</p>
<p>他们自己都抵制，难道还指望他们向屁民收</p>
<p>遇到那种要钱没有，要命有一条的主</p>
<p>难道政府还开拖拉机来收？</p>
<p>5年前就叫嚣对房租收个人所得税</p>
<p>到现在也没有个影了</p>
<p>操作性实在太差</p>
</blockquote>
<p>房产税无论是持有环节征收，还是交易环节征收都是要向最终租房人转嫁的。</p>
<p>好比鸡饲料上涨没有可能鸡肉不涨价，但是养鸡的并没有赚更多钱。</p>
<h2 id="巨大的税收消耗也决定了GDP必须快速增长-amp-公务员越精减越多"><a href="#巨大的税收消耗也决定了GDP必须快速增长-amp-公务员越精减越多" class="headerlink" title="巨大的税收消耗也决定了GDP必须快速增长 &amp; 公务员越精减越多"></a>巨大的税收消耗也决定了GDP必须快速增长 &amp; 公务员越精减越多</h2><p>降低百姓租房困难的唯一国际通行办法就是减税。但是减税，在我国是很难行的通的。一个高增长高通胀的国家，高昂的腐败成本和巨大的浪费将导致国家必须维持高税收才能维持运转，gdp保8实际上是必须的也是迫不得已的。维持正常的运转，维持庞大的消耗税收而不是创造税收的公务员队伍，没有gdp快速的增长怎么可能呢。</p>
<blockquote>
<p><strong>feiying：</strong></p>
<p>这种看法很有道理，但保8毕竟会有个尽头，一旦走到头了那怎么去做呢</p>
<p><strong>kkndme：</strong></p>
<p>对于小富即安的我等小老百姓来说，希望此生不要见到这一天的到来。</p>
<p>对于流氓无产者来说，盼望着这一天的到来。届时新的英雄将从流氓无产者中产生。如同威武的 同志。</p>
<p><strong>艾馨999：</strong></p>
<p>我也觉得应精减公务员，也许减掉三分之二房价就见效了，呵呵。中国确实存在很多不应有的机构。</p>
<p><strong>kkndme：</strong></p>
<p>千万不能精减，越精减越多。<br>一般裁减公务员都是专门裁那些没背景，没关系，不会拍马屁，傻干活的。而留下的就是有背景有关系，会拍马而不干活的。<br>当傻干活的公务员被裁掉以后，剩下的不干活的公务员照样不干活。<br>于是政府发现没人干活了，人不够用了，再大批量招人，所以越精简人越多。<br>这就叫精减膨胀</p>
<p>特别是把熟悉业务的熟手减下来后，不得不招3个新手才能顶的住。等新手熟练了，人又富裕出来了。<br>精减膨胀这是不可更改的。<br>千万别精减，谁提出精减跟谁急，到时人民更没活路了。</p>
<p><strong>跳坑的青蛙：</strong></p>
<p>楼主关于精简膨胀的见解很精辟~<br>很多事情看起来、听起来很美，也仅仅是看起来、听起来而已，<br>有丰富生活经验的人仔细思考一下、观察一下就不是那么回事了~</p>
<p><strong>kkndme：</strong></p>
<p>是啊，很多空空们扯着脖子呼喊这个政策那个政策，殊不知执行下来，最倒霉的还是自己。管老爷利用空空们鸡冻的心情趁机敛财，赚个盆满钵满。等空空们明白过来，也没办法了。<br>好比许多人最欢迎的费改税，结果税增加了，费却一点没见少。</p>
</blockquote>
<h2 id="调控的好处是让zf利益最大化-amp-防范金融风险"><a href="#调控的好处是让zf利益最大化-amp-防范金融风险" class="headerlink" title="调控的好处是让zf利益最大化&amp;防范金融风险"></a>调控的好处是让zf利益最大化&amp;防范金融风险</h2><blockquote>
<p><strong>骑自行车买别墅：</strong></p>
<p>就说政府为什么要调控？</p>
<p>难道就为了给你说的P民面子？？</p>
<p>如果房价一直暴涨，不更符合食利阶层的利益？房价低价一起彪～</p>
<p><strong>kkndme：</strong></p>
<p>真不知道你仔细看了没有。我通篇也没下过调控是为了给P民面子的结论。</p>
<p>调控的根本原因还是zy在房地产的游戏中没有得到好处。调控是为了让zy的国家队参与进来，成为主体。</p>
</blockquote>
<h2 id="垄断可以控制价格，维持稳定"><a href="#垄断可以控制价格，维持稳定" class="headerlink" title="垄断可以控制价格，维持稳定"></a>垄断可以控制价格，维持稳定</h2><p>垄断的目的还在于能够控制价格，为了维稳，zy是不希望暴涨的，但也不希望不涨。</p>
<h2 id="体制内的住房问题有国家保驾护航"><a href="#体制内的住房问题有国家保驾护航" class="headerlink" title="体制内的住房问题有国家保驾护航"></a>体制内的住房问题有国家保驾护航</h2><p>回头还说公租房</p>
<p>在私企打过工的都知道，毫无归属感可言，老板脑袋一发热，随时让员工卷铺盖卷走人。那是要多没保障有多没保障。原因是社会关系，关键客户，都掌握在老板一个人手里，员工就是打个下手，一不爽了，就换人呗。</p>
<p>统治者可知道不能这么用人的。一个庞大的国家机器要想正常运转，必须得让手下的和自己的利益一致。如果自己吃肉，手下的连汤都没得喝，这个机器就转不动了。</p>
<p>因此，在房价高涨的时代，保障房才成为zy默认的公务员房、垄断企业房。 <br>公租房首要解决的就是手下里面最底层人士的住房问题。 <br>我认为针对于体制内来说，无论是公务员，事业单位，还是国有企业的初级员工，都可以通过所在单位申请公租房，公租房的租金会略低于市场，主要是单位一定会提供补贴。 <br>体制外对公租房的申请就没有那么幸运了。</p>
<h2 id="依靠但又不能完全依靠开发商建公租房"><a href="#依靠但又不能完全依靠开发商建公租房" class="headerlink" title="依靠但又不能完全依靠开发商建公租房"></a>依靠但又不能完全依靠开发商建公租房</h2><p>钱的问题，dfzf也想到了解决的办法。</p>
<p>在卖地时就要求开发商配套建设一定比例的经适房、廉租房或公租房。 <br>然而，羊毛出在羊身上，开发商不可能做赔本的买卖。经适房好说，反正是卖个住户，大不了利润很低，顶多挣得少点。而廉租房和公租房就纯粹是只见投入不见产出的（开发商可没资金没耐心收租子）。廉租房和公租房的建设成本必须加到所建的商品房身上，这肯定会抬高房价。<br> 关键是拿地成本逐年上涨，孝敬的资金也在逐年上涨，在加上多出来的廉租房和公租房建设成本，房价不可能无限抬高的。开发商也需要资金回笼周转。房价越高风险越大只是无论zf，开发商，炒房客和买房群众都有的共识。只是房价多高才是高，不同的人理解是不同的。</p>
<p>显然，把大量廉租房和公租房的建设寄托在开发商配套身上是完全行不通的，不仅不能解决住房问题，还让本来就高企的房价更加雪上加霜。</p>
<h2 id="体制内的住房问题不难解决"><a href="#体制内的住房问题不难解决" class="headerlink" title="体制内的住房问题不难解决"></a>体制内的住房问题不难解决</h2><p>体制内公务员、垄断企业和事业单位的员工住房问题是不难解决的，因为有zf行为的强制意志在里面。</p>
<p>1、df划拨土地，征集开发商建经适房、公租房</p>
<p>2、dfzf强制要求开发商建配套经适房、公租房，建设成本就转嫁给购买商品房的冤大头吧。</p>
<p>3、体制内单位自有土地，集资建房。</p>
<p>多管齐下，体制内人员的住房不难解决，甚至体制内人员每人住好房子大房子多套房子的问题都不难解决。处于金字塔的中上层，他们俯瞰着芸芸众生。</p>
<h2 id="解决体制外的住房问题：国家垄断，细水长流收租"><a href="#解决体制外的住房问题：国家垄断，细水长流收租" class="headerlink" title="解决体制外的住房问题：国家垄断，细水长流收租"></a>解决体制外的住房问题：国家垄断，细水长流收租</h2><p>处于金字塔下层的体制外的广大群众怎么办？</p>
<p>体制内员工的住房舒适性和投资获利是首要保证的，不然光让干活不给好处，怎么能让手下听话呢？</p>
<p>体制外广大群众的住房问题也要解决，这关系到社会稳定。</p>
<p>能不能拿出一个办法，即解决了群众住房问题，又可以从群众手里长期获取收益？</p>
<p>细水长流收租子的事情开发商做不了，但zf可以做。</p>
<p>公租房，如果解决了钱的问题，面向广大群众的公租房的推出，将会取得双赢的局面。</p>
<p>既然房地产开发最肥的肉留给了国家队，国家队也应该投身到公租房的建设中来。</p>
<p>国家队全面进场之前，大鱼小鱼虾米泥鳅，皆可得利。</p>
<p>不把小鱼虾米泥鳅赶出池塘，市场无法控制，风险无法控制，公租房建设也无从谈起。</p>
<p>二套房首付提高到50%，第三套房停止贷款，小开发商的清理整顿，民营企业在招拍挂中无论价高价低都无法取得土地，等等一系列重拳直击小鱼虾米。</p>
<p>土地将回到国家队手中，这个世界将变得清爽。</p>
<p>让时光倒流到80、90年代，我们的dfzf守着蕴藏着巨大财富的金矿、锡矿、铜矿却过着贫穷的日子。没有资金，矿山是没有办法变成财富的。于是招商引资，为了gdp,为了解决就业问题，出台了各种优惠政策，于是外商堂而皇之的走进来了。成为了这些矿山的主人。5年，7年或者10年，外商享受的免税期满的时候，外商卷着巨额财富走了，留下了一个个废弃的充满危险的大坑。这是血琳琳的教训，zf没有理由不吸取。外资、私企、小业主总有一天会让他们清场，尽管这一天晚来了十几年。</p>
<p>在土地日益稀缺的今天，房租难道不是可持续产出的金矿？让炒房客、投资客、民企开发商见鬼去吧。</p>
<blockquote>
<p><strong>kkndme：</strong></p>
<p>在土地日益稀缺的今天，房租难道不是可持续产出的金矿？</p>
<p><strong>百无一用一书生：</strong></p>
<p>如果人们宁愿住桥洞呢，如果人们决定离开呢，如果房租收入不断下降呢</p>
<p><strong>kkndme：</strong></p>
<p>宁愿住桥洞的早晚要当盲流处理的</p>
<p>逃离城市基本是一部分人被淘汰掉，选择，离开，而又有更多的人冲击去。</p>
<p>房租收入下降基本是做梦才会出现的事情，国家队的进场就是不让房租下降</p>
</blockquote>
<h2 id="普通人买得起「优质商品房」就尽早买把"><a href="#普通人买得起「优质商品房」就尽早买把" class="headerlink" title="普通人买得起「优质商品房」就尽早买把"></a>普通人买得起「优质商品房」就尽早买把</h2><blockquote>
<p><strong>懒兔爱散漫：</strong></p>
<p>楼主的意思是今后体制外的人（除最高层)外，是无缘商品房，只能住公租房了？</p>
<p><strong>kkndme：</strong></p>
<p>如果你现在还买的起商品房，那你就尽早买吧</p>
</blockquote>
<h2 id="商品房和公租房的区别"><a href="#商品房和公租房的区别" class="headerlink" title="商品房和公租房的区别"></a>商品房和公租房的区别</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>有个疑问</p>
<p>商品房和公租房相比，优势在什么地方？</p>
<p>那些楼裂裂的商品房估计质量还不如公租房吧</p>
<p>楼主应该加一句，买质量好的商品房</p>
<p><strong>kkndme：</strong></p>
<p>商品房和公租房的区别实际就是土地性质的不同，一个是出让，一个是划拨</p>
<p>出让那必须是招拍挂，那必须是天价。</p>
<p>划拨就基本算是白给，收钱就是象征性的意思意思。</p>
<p>是商品房还是公租房，土地的性质说了算，dfzf说了算。跟房屋质量没有关系。</p>
<p>一套房子假设20000一平，房子的价值也就占30%，剩余的都是土地的价值</p>
</blockquote>
<h2 id="提议通过征普税调节贫富差距，不是傻，就是坏（制定政策的人不会让政策针对自己，那么政策都是谁制定的呢）"><a href="#提议通过征普税调节贫富差距，不是傻，就是坏（制定政策的人不会让政策针对自己，那么政策都是谁制定的呢）" class="headerlink" title="提议通过征普税调节贫富差距，不是傻，就是坏（制定政策的人不会让政策针对自己，那么政策都是谁制定的呢）"></a>提议通过征普税调节贫富差距，不是傻，就是坏（制定政策的人不会让政策针对自己，那么政策都是谁制定的呢）</h2><p>今天看到搜狐上一篇文章说道要通过征税来调节贫富差距，提出这个方案的人不知是无知还是故意，如果zf听了这种无耻参谋的建议，不知道多少老百姓会活的更惨。</p>
<p>假设出台又一个新税种，无乱它叫什么，我们暂定为财产税。既然有了新税种，就要定任务，那好了为了这个税种制定了年上缴多少多少的任务。</p>
<p>实操的时候，执行的工作人员发现一旦轮到权贵脑袋上的事就没办法执行，你执行，他先让你下课。</p>
<p>但是任务必须完成，那还是从普通老百姓身上打主意吧。于是政策就完全走样了，非但起不了劫富济贫的目的，反而加重了穷人的负担。</p>
<p>往近里说，个人所得税，挣的是谁的税？权贵没看见交，月薪3000块的工薪层可一个都跑不了。3000块月薪上缴的个人所得税你看着不多，可对于养孩子糊口的老百姓来说，哪怕10块钱都是重要的。他们可没有资本象月薪上万的小资一样动不动花500块钱泡个吧。</p>
<p>个人所得税是有任务的，工作人员必须完成任务，税别管是局级干部交的，还是连孩子幼儿园都上不起的穷光蛋交的，总之完成任务就是好样的。既然局长的税收不上来，就要从穷光蛋身上加倍收上来。</p>
<p>往远里说，王安石变法是怎么失败的，以史为鉴可以知得失。王安石的初衷难道不是好的吗，可结果怎么样呢？只有一个——民不聊生。</p>
<p>书生误国啊。</p>
<h2 id="调控带来的影响"><a href="#调控带来的影响" class="headerlink" title="调控带来的影响"></a>调控带来的影响</h2><p>许多兄弟关心房价什么时候会涨</p>
<p>那么先看看这次调控后都出现了什么样的现象。</p>
<ol>
<li>全国房产成交量大幅下降</li>
<li>一线城市房价略有下跌，但并不持续，到现在基本跌不动了</li>
<li>多数二三线城市房价不跌反涨，成交量逐渐回升</li>
<li>大多数二线以上城市租金持续上涨</li>
<li>农产品价格有上涨迹象，大蒜、姜等小品种农产品遭遇爆炒。</li>
<li>变化莫测的政策导致精英阶层出现移民潮</li>
</ol>
<p>还有什么，欢迎大家补充</p>
<h2 id="农产品的价格关系到影响稳定的吃饭问题"><a href="#农产品的价格关系到影响稳定的吃饭问题" class="headerlink" title="农产品的价格关系到影响稳定的吃饭问题"></a>农产品的价格关系到影响稳定的吃饭问题</h2><p>农产品价格的上涨是很值得警惕的。想买房子但嫌房子贵的都市白领对农产品的价格很不敏感，但是金字塔最底层的最大多数群众是很敏感的。领导们也很敏感。这牵扯到相当大比例人口的吃饭问题，稳定压倒一切。</p>
<h2 id="农产品价格的抬头会导致物价全面上涨，但国家不会坐视不管且有能力管"><a href="#农产品价格的抬头会导致物价全面上涨，但国家不会坐视不管且有能力管" class="headerlink" title="农产品价格的抬头会导致物价全面上涨，但国家不会坐视不管且有能力管"></a>农产品价格的抬头会导致物价全面上涨，但国家不会坐视不管且有能力管</h2><p>农产品价格的抬头将会导致物价全面上涨，在不引起质变的前提下，房价作为商品也不例外。这个引起质变的前提是出现饥荒的极端情况，这样的几率在现在社会很少。尽管干旱和洪涝使农产品大幅度减产，但是农产品还可以进口，国家还有粮食储备，保证全国人民填饱肚子还是不存在问题的。</p>
<h2 id="资金会在优质资产之间流动，而决定优质资产价格的是精英阶层的购买力"><a href="#资金会在优质资产之间流动，而决定优质资产价格的是精英阶层的购买力" class="headerlink" title="资金会在优质资产之间流动，而决定优质资产价格的是精英阶层的购买力"></a>资金会在优质资产之间流动，而决定优质资产价格的是精英阶层的购买力</h2><p>一线城市仍然沉默，国家队在积极运动。二三线城市的房价上涨的成交量的回升却给了市场一个明确的信号。这是资金运动的规律。国家队对一线城市的布局，迫使资金流向二三线城市。二三线城市相对（与一线城市相比）不高的价位给出了较大上升空间的预期。</p>
<p>全国富人买北京上海，全省富人买省会，房价的合理性已经不能用简单的本地平均收入来衡量。精英阶层的购买力才是关键。</p>
<h2 id="资金流向规律决定了农产品和资产价格总有一个要涨，人为压制，一定会按下葫芦浮起瓢"><a href="#资金流向规律决定了农产品和资产价格总有一个要涨，人为压制，一定会按下葫芦浮起瓢" class="headerlink" title="资金流向规律决定了农产品和资产价格总有一个要涨，人为压制，一定会按下葫芦浮起瓢"></a>资金流向规律决定了农产品和资产价格总有一个要涨，人为压制，一定会按下葫芦浮起瓢</h2><p>明年物价进入持续上涨期是一个不容回避的问题。</p>
<p>在资金总量不变的前提下，巨量资金推动农产品价格上涨或者推动房价上涨是一个必须的选择。</p>
<p>今年zf用行政手段严厉打击蒜和绿豆价格的暴炒，基本上没有起到作用，资金有自己的运作规律，光靠拿张悟本出气也不能解决问题。</p>
<h2 id="资金流向规律决定了洼地不会一直是洼地"><a href="#资金流向规律决定了洼地不会一直是洼地" class="headerlink" title="资金流向规律决定了洼地不会一直是洼地"></a>资金流向规律决定了洼地不会一直是洼地</h2><p>二三线城市的房价的上涨使与一线城市的差价缩小，为一线城市的发力提供了动能。</p>
<p>无论你喜欢还是不喜欢，都不是以人的意志为转移的</p>
<h2 id="大城市对近距离的小城市有虹吸效应"><a href="#大城市对近距离的小城市有虹吸效应" class="headerlink" title="大城市对近距离的小城市有虹吸效应"></a>大城市对近距离的小城市有虹吸效应</h2><p>许多人心怀房价肯定会跌回2004年的美好愿望，刻舟求剑似的思维错过了一次次购房的机会。在患得患失中，在牛刀的号角声中，在任志强的大炮声中，迷失了自我。</p>
<p>任何事物都是有其规律性的。关键是否有一双慧眼能够穿透重重的迷雾。</p>
<p>假设你是个投资客，你非要去石家庄和长沙买房子，结果发现不怎么升值，怨天怨地：</p>
<p>石家庄作为一个二线省会怎么会不涨？长沙的房价怎么那么低？</p>
<p>我们知道，北京的房子是全国有钱人买的，省会的房子是全省的有钱人买的。但是当省会城市距离一线大城市在6个小时高速以内，省里的有钱人的资金就会流向一线大城市，而不是省会。河北的富人一定会选择在北京投资房产，湖南的富人一定会选择广州深圳投资房产。</p>
<p>假设你是一个投资客，你去昆明旅行，发现昆明的房价甚至高过重庆，很不理解。你很疑惑昆明这么小的西部边陲城市投资价值在哪里？</p>
<p>昆明是云南省内唯一的大城市，且相邻的二线以上城市离云南省都比较远。云南地州资源丰富，虽然穷人占的比例大，富人的数量却也不少。昆明南有滇池，北有长虫山，作为一个700万人口的城市，土地资源非常稀缺。所以贵，一定有贵的原因。便宜一定有便宜的道理。</p>
<h2 id="决定房价的因素有很多，具体情况具体分析"><a href="#决定房价的因素有很多，具体情况具体分析" class="headerlink" title="决定房价的因素有很多，具体情况具体分析"></a>决定房价的因素有很多，具体情况具体分析</h2><blockquote>
<p><strong>zzz4697：</strong></p>
<p>楼主针对南昌的房价做个分析吗？从刚公布的100个城市房子均价看，南昌5k每平左右，是高了还是低了？</p>
<p><strong>kkndme：</strong></p>
<p>对于不了解的城市不敢妄下断言。没到现场调查就没有发言权啊。</p>
<p>房价会不会涨还要看dfzf的规划。<br>比如广州拥有大量的城中村，其周边有较多的大城市，广州的房价就比北京和上海低。如果广州的城中村一旦大规模拆迁，房价将会大幅上涨。</p>
<p>比如南宁东盟贸易自由港的概念使南宁的房价涨幅惊人。</p>
<p>南昌的地理位置，zf规划，发展前景，江西富裕人口的多少，都是决定房价的因素</p>
</blockquote>
<h2 id="房价暴涨是相对于钱而言的，不是相对于实际购买力而言的"><a href="#房价暴涨是相对于钱而言的，不是相对于实际购买力而言的" class="headerlink" title="房价暴涨是相对于钱而言的，不是相对于实际购买力而言的"></a>房价暴涨是相对于钱而言的，不是相对于实际购买力而言的</h2><blockquote>
<p><strong>tjOOSAN：</strong></p>
<p>。。。。。。暴涨之后。。。。。。</p>
<p>我们不就是第二个日本吗？</p>
<p>供求关系？供求关系，现在是谁在决定？国家！</p>
<p>国家的经济结构决定的。制造业的资金都进入房地产了。能不涨吗？普通人有几个可以够炒房资格的？</p>
<p>日本 当初也是供求关系！~~ 供求关系的根本也不应脱离，国家的经济实力！！</p>
<p>还暴涨？怎么涨？再涨都够去美国买房了！！ 你这不扯淡么</p>
<p><strong>kkndme：</strong></p>
<p>中国和日本最大的不同在于日本的货币是开放的，中国的不是，是不能自由兑换的。</p>
<p>暴涨是相对于钱而言的，不是相对于实际购买力而言的。</p>
<p>80年代工资200多块钱一个月的时候，是不能想象90年代末北京城区5000每平米的房价的。那时候万元户已经是富人的代表了。</p>
<p>90年代末工资1000块钱的时候是不能想象现在30000一平米的房价的。90年代的100万绝对是富裕群体。可现在连个中产都算不上。</p>
<p>货币的持续贬值你没有考虑</p>
</blockquote>
<h2 id="土地不稀缺，优质土地稀缺"><a href="#土地不稀缺，优质土地稀缺" class="headerlink" title="土地不稀缺，优质土地稀缺"></a>土地不稀缺，优质土地稀缺</h2><blockquote>
<p><strong>tjOOSAN：</strong></p>
<p>在反驳楼主一句！！</p>
<p>在中国的土地，可不稀缺！~~ 只是没开发罢了！！~~</p>
<p>中国与世界不同！ok？13亿人！！用十三亿的居住权作为市场竞争的资本。</p>
<p>那太可怕了！真的！！！如果可能，中国绝对可以产出世界第一贵的地价！</p>
<p>为什么？这么多人需要房子。能不涨吗？</p>
<p>呵呵！多少有点扯淡！！别再提供求关系了！~~ 供求根本是平衡的！！</p>
<p><strong>kkndme：</strong></p>
<p>中国有13亿人口，960万平方公里土地，土地一点不稀缺。</p>
<p>但假设你在北京西城上班，让你去塔特拉马干买房子，你愿意去吗？</p>
<p>全国有点钱的都要在一线城市和省会城市买房子，所以才会稀缺。</p>
<p>大兴安岭有大量的土地，哪个有钱愿意跑去置业呢？</p>
</blockquote>
<h2 id="集中发展大城市是导致优质土地稀缺的原因"><a href="#集中发展大城市是导致优质土地稀缺的原因" class="headerlink" title="集中发展大城市是导致优质土地稀缺的原因"></a>集中发展大城市是导致优质土地稀缺的原因</h2><p>中国经济发展不平衡，牺牲全国大多数城市和乡村，来保证北上广深及大部分省会城市的繁荣才是造成土地稀缺的愿意。</p>
<p>土地有的是，房子有的是，但好位置的土地和房子并不多。</p>
<p>一方面大量的小县城和乡镇、村庄人口锐减，因为缺乏谋生手段不得不背景离乡外出打工，另一方面超大型城市越来越拥挤，土地资源越来越稀缺。</p>
<p>这就是中国集中发展极少数标杆城市所造成的呀，也是因为如此，才造成了中国金子塔式的收入结构，贫富差距越来越悬殊。</p>
<h2 id="为人民服务是说给人民听的"><a href="#为人民服务是说给人民听的" class="headerlink" title="为人民服务是说给人民听的"></a>为人民服务是说给人民听的</h2><p>很多人很疑惑，贪官越来越多，根本不把老百姓的利益放在心里，这些贪官即使被曝光了，还能继续当官。这是为什么呢？</p>
<p>首先理解一下老百姓，也就是民到底是什么？</p>
<p>民就是牛养，古代的时候，官员管理百姓叫做牧。官员管理百姓就是替君主放牧，只要保证牛羊不逃跑，不骚乱，那么就是合格的官员。</p>
<p>秦始皇暴政，百姓揭竿而起，可是陈胜起事后基本视民众如草芥，项羽屠杀平民比始皇更残暴。</p>
<p>萧何是一个很贤德的人，对百姓很好，赢得了很高的名声。刘邦在广武山和项羽对峙，得知了萧何在关中深受百姓爱戴，就疑心萧何要造反。一个君主爱民如子是为了百姓的支持，江山永固，一个臣子对老百姓好是不是要造反呢？于是派人去调查萧何。</p>
<p>萧何是个聪明人，感觉到刘邦已经不信任他了。于是赶紧改变工作作风，开始霸占百姓的田产，上大街欺负漂亮的妇女同志，并且派自己的子女上前线给刘邦做人质。</p>
<p>刘邦看到了萧何的行为非常高兴，知道萧何不会造反就放心了。</p>
<p>百姓不是牛羊是什么？</p>
<p>在红色高棉统治下的柬埔寨人，民连牛羊都不如呀。</p>
<p>波尔布特同志坚持gongchanzhuyi的按需分配，取消了货币。于是市场经济完全没有了。群众完全变成了按阶级分配了。</p>
<p>阶级只分为两种，波尔布特老板及其打手是绝对的统治阶级，其他人为被统治阶级，也可以称为奴隶阶级。统治阶级对奴隶阶级不爽可以直接拿ak47突突。柬全国700万人口被波老板突突死了100万，当然不光是突突，还有活埋。</p>
<p>以至于越南派了10万军队侵略柬埔寨，受到了柬埔寨人民的夹道欢迎，称为解放人类的战争。</p>
<p>公道自在人心</p>
<h2 id="历史是一面镜子，不同的国情决定了采取同样的政策结果可能是南辕北辙"><a href="#历史是一面镜子，不同的国情决定了采取同样的政策结果可能是南辕北辙" class="headerlink" title="历史是一面镜子，不同的国情决定了采取同样的政策结果可能是南辕北辙"></a>历史是一面镜子，不同的国情决定了采取同样的政策结果可能是南辕北辙</h2><p>博古才能通今，不了解历史无法治理国家，不了解历史也无法对事务有一个清楚的认识。</p>
<p>我们的今天本来就是历史的延续，前人经验和智慧的总结，不是一句话就可以抹杀的。</p>
<p>因为秦以后漫长帝国时代的大一统，才会把中央集权延续到现在。</p>
<p>而西方封建时代延续到地理大发现，诸侯割据王国、公国、侯国林立为现代的西方提供了民主制度的可能。</p>
<p>在制度上完全的不可比性，使向国际接轨成为了笑话。</p>
<p>我们看到的结果就是，物价上涨与西方接轨，甚至堂而皇之的超过西方，体制外的工资则与非洲结果，也算是国际化了。</p>
<h2 id="zf限制政策房的利润，那kfs就一定会偷工减料"><a href="#zf限制政策房的利润，那kfs就一定会偷工减料" class="headerlink" title="zf限制政策房的利润，那kfs就一定会偷工减料"></a>zf限制政策房的利润，那kfs就一定会偷工减料</h2><blockquote>
<p><strong>mellyzhang：</strong></p>
<p>大家听过那个西三旗的有名的限价房——旗胜家园吧<del>！外表看起来那么光鲜，地段也不是特别偏，紧邻城铁，当然是被人疯抢都抢不到的两限房呀</del>！还不是质量问题一大堆。</p>
<p> ZF安排的政策房也是要KFS建的，哪个KFS没肉吃还能保证把房子盖好？？！！所谓检测都TMD是虚的~。</p>
<p><strong>kkndme：</strong></p>
<p>这是肯定的，开发商都追求利润最大化。</p>
<p>zf建设两限房限制开发商利润，开发商必然偷工减料，zf都知道怎么回事，必须争一只眼闭一只眼，否则这个政策就执行不下去了</p>
</blockquote>
<h2 id="屁股决定脑袋，人民不知厉害关系选房子，zf选农产品"><a href="#屁股决定脑袋，人民不知厉害关系选房子，zf选农产品" class="headerlink" title="屁股决定脑袋，人民不知厉害关系选房子，zf选农产品"></a>屁股决定脑袋，人民不知厉害关系选房子，zf选农产品</h2><p>对于渴望拥有一套产权住房的都市小白领对希望房价狂降已经到了歇斯底里的程度，他们赞成农产品价格放开，让资金炒作农产品，而离开房地产市场。理由很简单，一套房子一涨就是几十万甚至上百万，而大米小麦，一斤就算涨到10块，也根本不能影响到自己的生活质量。</p>
<p>如果我国农产品价格是开放的，资金流向大米、小麦、猪肉，并且允许囤积，房地产一定会下跌的，这是毫无疑问的。</p>
<p>但是，我们看到的绝不是10块钱一斤的大米、小麦，而是500块钱、1000块钱一斤的大米、小麦。</p>
<p>我国将会出现大面积的饥荒，几千万甚至上亿的底层人士饿死街头，社会将出现大的动荡。</p>
<p>而产权房屋价格的上涨牺牲的主体只是体制外部分都市白领的利益，换来的不过是网络上没完没了的牢骚和咒骂。</p>
<p>巨量资金必须有地方去，如今面临的房地产和农产品之间的选择，你认为zf会怎么做？</p>
<h2 id="各个阶层的住房问题都安排的妥妥的"><a href="#各个阶层的住房问题都安排的妥妥的" class="headerlink" title="各个阶层的住房问题都安排的妥妥的"></a>各个阶层的住房问题都安排的妥妥的</h2><p>体制内中层、高层可以分到多套福利房，低层至少能够分到一套保障房，即使最不重要部门的底层员工，搞到由单位补贴的公租房是没有问题的。</p>
<p>体制外的高层、中层，以他们的资金实力买多套房子都是不成问题的。</p>
<p>农民，分配有宅基地。国家要稳定，首先就是要农民稳定，因此我国只有农民能够分到土地自己盖房子。</p>
<p>军人，会享受到比公务员更好的福利，让军人享受更高标准的福利待遇，国家有深刻的认识。</p>
<p>那么只有体制外的都市中下层群众才是高房价的受害者，可是这个群体的地位真的很微不足道。</p>
<h2 id="顶层的岁月静好来自于底层的负重前行"><a href="#顶层的岁月静好来自于底层的负重前行" class="headerlink" title="顶层的岁月静好来自于底层的负重前行"></a>顶层的岁月静好来自于底层的负重前行</h2><p>这些既无稳定工作（低层都市白领失业的概率还是蛮大的）又无自己的房产的都市小白领是金子塔底层被压榨的对象，甚至远远不如交通便利地区的农民。</p>
<p>没有这个群体的存在，金字塔上层的权贵是无法享受舒适的生活的。</p>
<p>社会需要底层群体用巨大的付出和极少的收获为金字塔上层群体服务。</p>
<p>当然，在巨大的付出后，有少数人会从低层脱颖而出，爬到金子塔的中层、甚至上层。 <br>这些少数人带给了底层群体奋斗的希望。</p>
<p>拥有一套属于自己产权的房子，就只有一套路：从金字塔的底层往上爬。这条路很艰辛，并且会越来越艰辛，但总有希望。</p>
<h2 id="底层指的是体制外底薪白领"><a href="#底层指的是体制外底薪白领" class="headerlink" title="底层指的是体制外底薪白领"></a>底层指的是体制外底薪白领</h2><blockquote>
<p><strong>天地间间：</strong></p>
<p>楼主有一点没说透彻，那就是白领的工资普遍较高，他们有能力买房子，但是受到几千年以来的小农经济思想的约束，他们普遍认为买房子不划算，占便宜心里普遍严重，别看他们外表光鲜，其实还都是一帮农民</p>
<p><strong>kkndme：</strong></p>
<p>我说的是买不起房的低收入小白领</p>
<p>高薪白领不买房的不多吧，都是网上吹的吧。</p>
<p>高薪白领一般还是有自住房的，只是有人不愿意投资房产。每个人想法不同而已。</p>
</blockquote>
<h2 id="资金终会流向具有稀缺性的资产"><a href="#资金终会流向具有稀缺性的资产" class="headerlink" title="资金终会流向具有稀缺性的资产"></a>资金终会流向具有稀缺性的资产</h2><blockquote>
<p><strong>天地间间：</strong></p>
<p>请问楼主所说的低薪白领一个月赚多少钱算底薪？</p>
<p>就拿我说吧，我06年买的房子，当时月薪3000元，这在当时算不算低薪？</p>
<p>但是我买房了，还是一个人买的，当然老爸赞助了点。每个月还完月供兜里就剩几十元，硬扛下来了。</p>
<p>目前年薪12万，我老婆年薪6万？这算不算高新？</p>
<p>如果我当时没买房子，以我们2个人的收入当下也买的起，只不过生活负担重一些。</p>
<p>所以请楼主明示，什么是低薪？</p>
<p><strong>kkndme：</strong></p>
<p>兄弟，你所描述的是另外一个问题。先说说你所说的这个问题，再谈谈什么叫低薪</p>
<p>先说06年你月薪3000买房子的问题。</p>
<p>我们打一个比方：</p>
<p>假设80年代，咱们两个月薪都是100块。你喜欢清朝的瓷盘子，咬咬牙，一年用好不容易攒下的100块钱买了清朝瓷盘子。我喜欢缝纫机，用一年好不容易攒的钱买了一个缝纫机。</p>
<p>市场有价值发现功能。显然，80年代清代瓷盘子的价值没有得到发现。</p>
<p>进入90年代，随着社会的发展，社会财富的增加，钞票也大幅度增加。清代瓷盘子的市场价值发现出来了，瓷盘子价格开始大幅上涨，你的瓷盘子由100块涨到1000块。而我买的缝纫机已经淘汰了</p>
<p>瓷盘子具备投资品的一切属性，能够吸收社会的富裕资金，而缝纫机没有这个功能。我很眼红，我虽然买的起这个瓷盘子（因为90年代我的工资由100涨到了800），但是我觉得价格太高了，没有买。而你的瓷盘子在90年代为你挣了900元钱。</p>
<p>时光又到21世纪，社会资金越来越多，钞票越印越多，可瓷盘子在市场上越来越少（都被收藏了），于是瓷盘子涨到了1千万一个，我即使想买瓷盘子再也买不起了，而不是嫌价格高的问题。而你已经成为了千万富翁。那个瓷盘子也并没有因为1千万的价格实在太高而暴跌，相反价格仍以每年20%的速度增长。</p>
<p>06年你在房价价值发现的初期买了房子，就像90年代你用1000块买清代瓷盘子。</p>
<p>如果你的工资不变，或者变化不足够大，现在你将没不起房子，就像你在21世纪不可能买的起瓷盘子。</p>
<p><strong>天地间间：</strong></p>
<p>楼主啊，你有一个概念错误：清代的瓷盘子是收藏品是古董，其价值是由拥有瓷盘子的收藏家决定的，而房子是商品（我指的是商品房，不是公租房之类的保障房），其价值远没有古董增值速度快，所以说收藏品和商品是有区别的。</p>
<p><strong>kkndme：</strong></p>
<p>呵呵，商品房当然和清代磁盘是不同的，升值空间不同，投资对象也不同，但价值发现的道理是一样的。投资品的基本属性：稀缺性是共有的，当然稀缺的程度不同。</p>
<p>我所讲的是投资品的价值发现，而不是商品房&#x3D;清代瓷盘</p>
</blockquote>
<h2 id="土地的稀缺决定了大多数人永远买不起想买的房子"><a href="#土地的稀缺决定了大多数人永远买不起想买的房子" class="headerlink" title="土地的稀缺决定了大多数人永远买不起想买的房子"></a>土地的稀缺决定了大多数人永远买不起想买的房子</h2><blockquote>
<p><strong>天地间间：</strong></p>
<p>此外，您还没有正面回答我什么是低薪</p>
<p>我今年30多岁，如果我刚毕业肯定是拿底薪的，往最坏了想，我毕业几年到今年混的不好，今年只赚3000元一个月，我就买不起房么？</p>
<p>如果你觉得是，那么你错了，我仍然可以买的起，我会到比较偏远的地段去买房子，比如密云，延庆等买套小户型二手房，那里的房价我仍然可以支付月供，当然我还是要像老爸要点钱付首付的。</p>
<p>可是如果我不这么想，觉得去哪里不划算，在四环里买房子多好啊！那么我可能就买不起了，因为在四环里买房已经超出了我的能力</p>
<p>那么请问我买不起四环里的房子是房价的问题呢还是我的问题呢？是不是说我买不起四环里的房子就是我买不起房？</p>
<p>综上所述，每个人都有自己的能力极限，不同能力的人去不同的地段买房子，一味的强求自己做能力不及的事情，反而还怨天尤人的，这就是小农意识。</p>
<p><strong>kkndme：</strong></p>
<p>如果我们买首套房，不是为了投资。我们买房总有个基本的要求：</p>
<p>有一个自己的家，并且上班相对方便</p>
<p>如果你在长城饭店上班，你跑去密云买个房子。首先你上班就成问题。</p>
<p>如果我月薪3000块，我甚至不能在密云买房子（因为也上万了），但我可以在山西的某个县城买套房子。问题是我买这套房子干什么？</p>
<blockquote>
<p><strong>先天下之友：</strong></p>
<p>请问楼主，在密云延庆买房子就不能去长城饭店上班吗？貌似密云延庆的城轨马上就要开通了，一个小时就可以到三元桥的，如果你仍然觉得不可能，那么我就很同情生活在东京纽约的白领了，他们买房子都在离工作单位50-100公里的地方，他们大部分人也靠城铁上下班的，所以说东京和纽约的白领生活在水深火热中啊</p>
<p>此外，密云和延庆的二手房子10000元一平？用不用我贴个卖房帖子啊？密云和延庆县城里的二手房子均价6000一平，一居室50平吧，总价 约30万，首付12万，月供1200元左右，这个对于月薪3000元的人来说是不成问题的，当然去密云延庆买别墅确实是10000元一平。</p>
<p><strong>kkndme：</strong></p>
<p>这种抬杠没什么意义，如果密云的轻轨修通了，1小时到三元桥，密云就由远郊区变为了近郊区，房价也不会维持现有水平，一定会水涨传高。</p>
<p>我没看过密云的规划，如果真有这个规划，且密云房子还没有大涨的时候，还时值得购买的。</p>
<p>密云的房价我倒真没去看过，不过以前有个住密云的同学说密云的新盘1万多了，老房子价格我并不知道。</p>
<p>我们只不过打的一个比方，假设密云到城里上班没有问题，普通小白领又买得起，那么不买的可以称为傻空。</p>
<p>但是确实有真正买不起的，连密云也买不起的，月收入3000，但要供养老人和孩子的，即使能在河北某个县城买，可是房子不能上班就完全没有意义了。</p>
</blockquote>
<p><strong>天地间间：</strong></p>
<p>我的中心思想是：北京的白领普遍买的起房子，但是有一部分不买，其原因是想花最少的钱去获得最好的地段，最好的楼层，最好的朝向的房子，这是划算不划算的问题，不是买得起买不起的问题</p>
<p>当然有的人会说：买房了，得病了怎么办？失业了怎么办？一大堆怎么办！那么请问：既然你知道早晚要见马克思，为什么现在还活着啊？一刀了断了算了，呵呵</p>
<p><strong>kkndme：</strong></p>
<p>你说的这类人其实是因为贪婪和恐惧，幸运不会垂青即贪婪又恐惧的人。用天涯的语言来说：就是传说中的傻空</p>
</blockquote>
<h2 id="不同阶层的人对收入高低有不同的理解"><a href="#不同阶层的人对收入高低有不同的理解" class="headerlink" title="不同阶层的人对收入高低有不同的理解"></a>不同阶层的人对收入高低有不同的理解</h2><p>再说说收入高低，不同城市，不同消费水平，对收入高低有着不同的理解。<br>我们举北京为例。</p>
<p>反映真实居住成本的是房屋租金，而不是房价。</p>
<p>在北京生活，一家三口的通常情况</p>
<p>一个位置能够满足上班条件的两居室租金大约3000元，小孩花费没有3000块是下不来的，再加上夫妻俩2000元的基本生活花费，也就是说8000月收入的家庭，刚好能达到收支平衡。</p>
<p>如果是体制外的都市白领，这个收入是很可怜的，因为还要考虑到失业问题，并且应付万一发生的意外支出。所以每月能有2000元的结余是必须的，那么10000元是在北京生活的基本水平。</p>
<p>而购买商品房所支付的金钱是要远高于租金成本的，因为你买的不是房屋居住权，而是房屋的产权，一定会出现溢价。</p>
<p>如果你现在的家庭收入能够再买得起一套房子，那么你的收入水平应该至少是小康，甚至达到中产</p>
<blockquote>
<p><strong>天地间间：</strong></p>
<p>楼主，一对有工作经验的年轻的北京白领夫妻月收入只有8000元？这是怎么统计的？</p>
<p>您的统计结果不准啊，我的结论是10000-12000元&#x2F;月是北京标准的白领夫妻的月收入，那么这笔钱能不能买房子？</p>
<p>能，能不能付首付？可能不能，首付款怎么来的？一部分是父母赞助的。</p>
<p>作为父母就要把自己的孩子扶上马，再送一程，这和啃老没关系</p>
<p><strong>kkndme：</strong></p>
<p>呵呵，这个也不好这么说，不同行业间的薪水差距实在太大了。</p>
<p>比如一个有6、7年职业学校的教师或者一个有5，6年电脑分销经验的产品经理（都是大学毕业），他们辛辛苦苦干一年多点的也就7、8万块。他们都不晓得招商银行随便一个客户经理轻轻松松年薪几十万。</p>
<p>同是大学毕业，同是5、6年工作经验，北京几十万年薪收入的人不少，但一个月只挣3、4000块的数量更庞大。</p>
<p><strong>先天下之友：</strong></p>
<p>楼主，我说的是北京白领夫妻的标准工资，什么是标准工资？就是这个城市的可提供工作岗位加权平均工资，也就是说，你在北京混，正常的情况下，北京的白领夫妻在成为这个公司的主力员工以后就可以拿到的工资，什么是主力？就是在你的单位里能够独立挑起一滩活。</p>
<p>此外，在北京的白领，月薪3000元在大多数公司都是起薪价，工作几年后工资翻一番的比例很大，我在北京混了很久了，我相信在北京的绝大多数老板是给员工出路的，楼主你说是么？</p>
<p><strong>kkndme：</strong></p>
<p>我倒是觉得平均工资真没有什么意义。</p>
<p>你在中石化工作，各种收入加一起一年低于20万的还真没有。</p>
<p>你做基金经理年薪低于100万的还真不好找。</p>
<p>你在电力系统，有点职务的，一年搞个上百万都是轻轻松松的。</p>
<p>你要是公务员有点级别，好的一年收入上千万，不好的一年收入也就十来万。</p>
<p>但你要是在某个私营或者股份公司做个人事，行政，一年弄好了也就几万块钱</p>
<p>你要是做销售，好的销售年薪几十万，上百万，不好的销售一年也就挣2、3万。</p>
<p>我真不知道平均工资意义在哪里？</p>
<p>一个年收入千万的总经理跟100个失业的白领平均，人人都是年收入10万</p>
<p><strong>先天下之友：</strong></p>
<p>我还是要强调白领的平均工资，这个很重要，也是很多北漂留下来的重要理由，不同行业收入不同，但是主流行业的收入差距是不大的，至于你说的中石油和其他的高薪公司这个一般人进的去么？</p>
<p>至于失业问题，这个和国家的政策密切相关，属于不可抗力，一味的强调这一点没意思</p>
<p><strong>kkndme：</strong></p>
<p>如果仅指北漂而言，一般大学毕业的普通北漂白领有个几年经验的月薪大概是8000-15000不等吧。北漂几年的普通家庭月收入在15000-20000.</p>
<p>这个收入，即使在现在，在北京五环以外买房还是没问题的。</p>
<p>低于这个收入，真的考虑回家吧</p>
</blockquote>
<h2 id="一二线买房只会越来越难，最终租房会成为主流"><a href="#一二线买房只会越来越难，最终租房会成为主流" class="headerlink" title="一二线买房只会越来越难，最终租房会成为主流"></a>一二线买房只会越来越难，最终租房会成为主流</h2><p>在北京一个年薪15万的普通家庭仍然买的起房，在五环外，只是你愿不愿意买。</p>
<p>但以后一个年薪15-20万的普通家庭买房子，即使是五环外的，也只能是梦想了。</p>
<p>租房将成为今后小白领主流的生活方式。</p>
<h2 id="人需要一个安身之所，能买早买比晚买好"><a href="#人需要一个安身之所，能买早买比晚买好" class="headerlink" title="人需要一个安身之所，能买早买比晚买好"></a>人需要一个安身之所，能买早买比晚买好</h2><blockquote>
<p>房价是由土地决定的，而土地是咱们这个国家的根本，当年不就因为要改变土地的属性，才有了我们的党。</p>
<p>凡房屋也都是只有土地的使用权，土地属于国家，说收回的话不管你有无房证更不会和住房者商量，如（拆迁），这个性质决不变，想下，对有房者如此，会为了没有房子的而制定均衡均分的土地政策下降房价吗？</p>
<p>现在贫富分化越来越严重，真买的起房的考虑的重点不会是贷款，买不起的，房价跌去三分之一也还是买不起，不要看政府如何了，如果能少贷款或不贷款买处房的话就买吧，人早晚得有个安身之所，不要贪大求全，战争或地震来了房子不值钱，但万一战争或地震不来呢？</p>
<p>kkndme</p>
<p>没错，就是这个意思，如果战争来临，你手中的钱也变成废纸</p>
</blockquote>
<h2 id="股市"><a href="#股市" class="headerlink" title="股市"></a>股市</h2><blockquote>
<p><strong>新智战者：</strong></p>
<p>楼主对楼市的分析让人佩服！能否谈谈股市？现在的股市不管涨跌，我只是看到ZF在疯狂的发行新股大盘股，压大盘是肯定的了，看样子又是下一盘很大的棋！</p>
<p><strong>kkndme：</strong></p>
<p>你要注意2010年的股市与以往是不同的。因为股指期货的出现。</p>
<p>要时刻关注股指期货投入的资金量。</p>
<p>当股指期货资金量足够大的时候（什么叫足够大就要看个人的判断了），期指将指导沪深300指数。大盘会跟着固执期货走</p>
</blockquote>
<h2 id="如果房价不涨，那其他产品会怎么涨"><a href="#如果房价不涨，那其他产品会怎么涨" class="headerlink" title="如果房价不涨，那其他产品会怎么涨"></a>如果房价不涨，那其他产品会怎么涨</h2><blockquote>
<p><strong>lfastro：</strong></p>
<p>“上帝欲使其灭亡，必先使其疯狂！”</p>
<p>很想看看“报复性上涨”是个什么样子。</p>
<p><strong>kkndme：</strong></p>
<p>你可以这样理解（只是为了理解方便做个示意）：</p>
<p>假设房价从2004年的4000一平，涨到2010年的20000一平</p>
<p>猪肉从2004年的6块一斤，涨到2010年的10块一斤。</p>
<p>但是如果房价2004年4000一平，到了2010年还是4000一平</p>
<p>那么，猪肉从2004年的6块一斤，将在2010年涨到30块一斤，不仅猪肉，还有大米，小麦，大蒜、葱、姜、房租都会翻几倍的价格。</p>
</blockquote>
<h2 id="zf如何利用公租房控制租房市场"><a href="#zf如何利用公租房控制租房市场" class="headerlink" title="zf如何利用公租房控制租房市场"></a>zf如何利用公租房控制租房市场</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>政府要垄断房租市场？市场上已有的和不断要产生的出租房源政府怎么让它们消失呢？</p>
<p>还是说政府要造足够多的公租房来占据市场主体 那就更难了 要花多少钱呀 公租房的地段好不了的</p>
<p><strong>kkndme：</strong></p>
<p>公租房将为房租市场树立一个标杆。有了这个标杆，私人出租房将会对比公租房做一个参照。</p>
<p>公租房是有限的，是需要申请的，而私人出租房会在相同位置将自己的房租定价高于公租房。</p>
<p>这样就保证了公租房的价格低于市场。</p>
<p>公租房不是廉租房，zf要持续赚钱，他的定价不会低，私人房就会定得更高，这将导致市场上的房租整体上涨。</p>
<p>公租房的吸引力在哪里？</p>
<ol>
<li>对体制内会有单位补贴</li>
<li>对体制外人员可以提供一个较长的稳定租期。</li>
<li>zf定价的标杆作用，无论怎么定价，公租房都会低于周边市场价格.</li>
</ol>
</blockquote>
<h2 id="城中村不会长期存在"><a href="#城中村不会长期存在" class="headerlink" title="城中村不会长期存在"></a>城中村不会长期存在</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>城中村可是提供廉价房源的地方 这个公租房的竞争对手肯定要被政府干掉 所以城中村的拆迁改造那是一定的</p>
<p><strong>kkndme：</strong></p>
<p>城中村一定会消失的，不消灭城中村，哪来的GDP</p>
</blockquote>
<h2 id="三四线城市的未来"><a href="#三四线城市的未来" class="headerlink" title="三四线城市的未来"></a>三四线城市的未来</h2><blockquote>
<p><strong>alice_xg：</strong></p>
<p>写得非常好</p>
<p>楼主能否分析下未来三四线小城市的发展，是否会空心化</p>
<p>另外，请分析下海南的城市有没有投资价值</p>
<p><strong>kkndme：</strong></p>
<p>四线城市房价也会缓步上涨，但比较慢，主要还是因人工成本，原材料价格上涨造成的建筑成本上涨。</p>
<p>城市的空心化可能性不大，人口仍然会缓慢增长。但偏远乡镇却存在空心化的可能。</p>
<p>海南具备得天独厚的海岸线资源，这是全国任何一个其他海滨城市无法比拟的（其他的海滨确实比较差，毫无美感）。但关键还是zf如何开发，急功近利的开发，和毫无节制的圈海岸线可能会大幅降价海南的旅游与投资价值。</p>
<p>取决于政策，有较高风险</p>
</blockquote>
<h2 id="房租价格涨不上去，本质是买房还看起来有希望"><a href="#房租价格涨不上去，本质是买房还看起来有希望" class="headerlink" title="房租价格涨不上去，本质是买房还看起来有希望"></a>房租价格涨不上去，本质是买房还看起来有希望</h2><p>今天下午才出门，上午闲来无事，跑来再说两句。</p>
<p>一是再说说房租问题，房租的发展趋势：</p>
<p>现在房租低的一个重要原因是因为，大多数都市小白领还希望能够买一套属于自己的产权房，至少他们觉得即使现在钱钱不够，但是努力一把，跳个脚还能够得着。所以他们省吃俭用拼命的存钱。一个月薪10000块的小白领租一套月租金3000元的还算舒适的两居室是没有问题的，但是他为了攒钱买房宁可几个人合租一室，仅仅愿意在居住上花费少得可怜的500元钱。</p>
<p>随着国家队的进入，民营资本的退出，房地产开发和房地产投资的门槛都会大幅度提高，投资房产以后就成为富人的专属。</p>
<p>小白领的生活将变得“轻松”，因为除非能够上位，否则一般人跳脚是够不到属于自己的那套房子的。对于拥有房产失去希望，将使他不得不搬出合租房而转而租住一套还算舒适的两居室。</p>
<p>高昂的商品房价把大量的小白领从合租房中解放出来，转而去租住两居室或者三居室。</p>
<p>房租的价格一定会通过市场发现功能，找到他的位置。</p>
<blockquote>
<p><strong>想住清合吗：</strong></p>
<p>看了那么久，突然间觉得，楼主会不会过于武断了？</p>
<p>尽管我也看好房价和房租都上涨，但是，买房应该不会只是富人的专属。例如在日本，有许多的普通白领买的起房，难道在中国，白领就买不起吗？</p>
<p><strong>kkndme：</strong></p>
<p>白领是分层次的，有技术，有能力，有背景，肯吃苦的白领将通过努力获得更多的收入，获取更高的职位，走进金字塔的中层，买房子肯定没有问题。但进入金字塔中层的绝不会占大多数比例。</p>
<p>低级白领，公司办公室普通职员，一无技术，二无资 没有特殊的技能或本领，又没有什么关系和背景，对机会的把握能力也不是很强，如果家里也不富裕，这样的同志今后买房子就比较困难了。金字塔的底层人数比例是最大的。</p>
<p>日本的国情确实跟中国有很大不同，另外日本东京的房子也不是普通白领买的起的。我认识个NEC的部长（相当于中国企业的总监），也算大企业的中层干部，他也在东京买不起房子，家在离东京很远的郊区。</p>
<p><strong>中年不惑吗：</strong></p>
<p>日本的城市化已完成 不过东京市中心的房子小白领是买不起的 他们买的是东京卫星小城市的房子 如同你在上海工作 去扬州买房子还是能承受的 人家的地铁一个小时能跑200公里 你说生活半径能扩大多少呢 再说日本是有选票的</p>
<p><strong>kkndme：</strong></p>
<p>没错，就是这个道理。天涯里有些人说年薪30万买不起房，年薪70万买不起房。原因还是期望太高了，以为自己年薪70万了，就是人上人了，就必须住市中心的大房子。</p>
<p>但事实上市中心的大房子是绝对稀缺的，人上有人，天外有天。</p>
<p>买房子还是量力而行。有1000万资产的人是买不起价值2000万的翡翠的。有1个亿资产的人也不能买下故宫的居住权。</p>
</blockquote>
<h2 id="稀缺房的价格永远涨"><a href="#稀缺房的价格永远涨" class="headerlink" title="稀缺房的价格永远涨"></a>稀缺房的价格永远涨</h2><blockquote>
<p><strong>sunxishila：</strong></p>
<p>我认为房价不可能跌的（至少5年内） ，尤其北上广，因为</p>
<ol>
<li>地球资源就那么点，美国人不可能允许所有的人都过上他们那样的高消耗生活，所以美国人就尽可能地创造无产阶级国家来为其当奴隶进行打工，中国的现状也一样，利益集团以及国家政府为了其利益以及维稳庞大的执政集团必须要通过工具将更多的人丧失生产资料以便当其奴隶。试想如果人人都有房住，人人都有闲钱可以自由的选择生活方式，我们以出口为主的血汗工厂还能招得到工人吗？北上广还能存在这么多外资企业吗？外资企业没的话，没这么多就业机会，所有的外地人回家了，上海的办公楼，出租房不全完蛋了 ，那么势必减少了各种税收，那么北上广正常的维持城市运行的资金必将断裂…怎么可能呢。</li>
<li>适度宽松的货币政策（也就是过量发行的货币）必将导致通货膨胀，在中国货币多了必将走进房地产，因为在中国基本没有别的更靠谱的投资渠道。长期看来，货币一直是贬值的 ，世界上几乎所有的国家货币一直都在贬值，这是货币的固有属性，就是剥削。除非取消货币，可能吗？</li>
<li>房价下跌或者价格合理当然是有可能的，可是这取决于政治，除非取消一党执政，除非土地似有话，原因相信大家都清楚，你们认为近期可能吗？</li>
</ol>
</blockquote>
<h2 id="粮食和房子的不同是，房子无法和土地剥离"><a href="#粮食和房子的不同是，房子无法和土地剥离" class="headerlink" title="粮食和房子的不同是，房子无法和土地剥离"></a>粮食和房子的不同是，房子无法和土地剥离</h2><p>二是再说说粮食问题</p>
<p>中国的粮食实行储备制度，国家每年从农民手里收购一定数量粮食以及进口一定数量的粮食用于储备。</p>
<p>中国的稻米主要出自东北和广西，东北米好吃但产量小价格高，广西米难吃但产量达价格低，都市人都愿意花高点的价格购买东北米。</p>
<p>各地储粮通行的做法是以储粮为名收购的东北米加价在市场上出售牟取利润，再低价收购难吃的广西米用于粮食储备。</p>
<p>米在市场上的价格差别还是很大的，好的东北米可以卖到5块钱一市斤，一般的东北米卖到3块钱左右一斤，差点的东北米卖到2块钱一斤。而广西米基本在2块钱以下，而且除非比较穷的，一般人都不愿意吃。</p>
<p>大家可以看到在市场上交易的大米跟其他商品并没有什么不同，好的稀缺的就贵，差的产量大的就便宜。 <br>但是米和房子不同，一方面米是当年的好吃，放到第二年陈了就不值钱了，第二年土地上新的稻子又长出来，会有新的米下市。但是房子不会，一栋楼今年卖掉了，明年这块已经卖掉了的土地并不能长出另外一栋楼。另一方面，中国实行的储备粮制度将会在粮食减产的时候平易粮食价格的上涨（尽管储粮和市场上销售的粮食完全不是一个品质），而且国家对口粮的问题会高度重视。 <br>粮食作为商品本身是与土地剥离的，而房屋作为商品却无法从土地剥离出来。这是粮食与房子的根本不同。</p>
<p>商人在粮食稀缺时期进行囤积会枪毙，在粮食丰收时期囤积粮食只能亏损（第二年的米就没人吃了。</p>
<p>商品房作为商品在市场上交易，而保障房是为了保障低收入群体的最基本居住，这与粮食分为储备粮和商品粮又多少有些相似。</p>
<p>但是商品房土地和房屋无法剥离，产权和居住权却是剥离的，这就使既保障人民的基本居住权，又通过产权的升值牟取巨大的利益成为可能。zf实在是再明白不过了。</p>
<h2 id="购买房价基数低的省会城市，怎么都不会亏的"><a href="#购买房价基数低的省会城市，怎么都不会亏的" class="headerlink" title="购买房价基数低的省会城市，怎么都不会亏的"></a>购买房价基数低的省会城市，怎么都不会亏的</h2><blockquote>
<p><strong>Razerwu：</strong></p>
<p>我也年纪小，07年才毕业，学经济的，人文历史基础有一点，关注房价有两年了。看了楼主帖子，更是开朗了。</p>
<p>升斗小民一定要跟形式跑，千万别一厢情愿，也别被媒体的话语误导了。</p>
<p>以后，征服会逐渐保证居者有其屋，但是不是每个家庭住的房子有自己产权。中国社会阶层分化很严重。主要分体制内和体制外两个群体。体制内的即使明摆着的收入一般，但是福利好。体制外的，有高薪的，但是低收入的更多。我们公司一般在年收入到手5-6W左右。这个应该是这个城市的平均水平了。我相信50%的人都在这个数。这个收入租个房子，除去其他生活开支，一年还能余个1,2W，如果是两个人一起生活，也能养小孩的，只是，你永远买不起自己的房子。</p>
<p>但是我也知道，更多的小白领，在空调房里工作，一个月就领1000来块的薪水，而那里房价也不低，8000-10000了。你还是买不起。</p>
<p>所以，未来你可以选择在房价高的地方生活，然后租房。你也可以选择回到三四线城市。但是很可能，到时候那里的房子价格也不低，如果你能力够，还是有希望买到商品房。</p>
<p>非常有钱的人很多，我不知道他们会怎样投资。</p>
<p>我想给一些跟我一样收入层次的人一些建议。</p>
<p>物价必涨，这是趋势，如今农村的农民都不怎么种地了，征服在搞平整，以后都会自动流转，每个村的徒弟承包给一个人，别的农民给他打工。有资金的农村出来的，可以考虑往农业方向发展。</p>
<p>我薪水收入一般，但是有外快，跟女友一块存钱，年收入超过20W，</p>
<p>楼主在帖子里提到长沙和石家庄的例子，我认为，二三线城市也要具体分析，像我老家长沙，房产升值空间还是有的，只要每年涨20%，我就满足了。一线城市的房子更稀缺，但是，城市化的进程，不可能继续像上一个10年那样，大家都往一线城市跑了。所以，房地产暴涨的时代我不相信还有。我还相信二线城市和一线的房价差距会慢慢拉近。</p>
<p>所以，我用09年的结余，在今年上半年长沙贷款买了一套，我准备下半年再买一套。我不是炒房，我是略有结余的工薪阶层，我选择保值，总比放在银行要好。事实证明我是对的上半年买的现在已经涨了10%了。</p>
<p>一线和省会城市的商品房，未来一定会成为更加稀缺的资源。</p>
<p><strong>kkndme：</strong></p>
<p>长沙的房子一定会涨，只不过涨得会比其他城市慢。</p>
<p>低价买涨幅滞后的房子有一个好处，一旦长沙放出“大量拆迁”等利好因素，你就赚大了。购买房价基数低的省会城市，怎么都不会亏的</p>
</blockquote>
<h2 id="房地产是资本市场还是实体经济？"><a href="#房地产是资本市场还是实体经济？" class="headerlink" title="房地产是资本市场还是实体经济？"></a>房地产是资本市场还是实体经济？</h2><p>还有一个关于实体经济的问题，房地产是资本市场还是实体经济？</p>
<p>我们回顾一下，房地产的居住属性和产权属性是剥离的。</p>
<p>依照房地产的居住属性，房地产绝对属于实体经济。</p>
<p>从下游来说，不搬新家重新购买一套家具、一套家电、做一次大的装修的可能性都不大。在没有改善住房的前提下，去换家具家电，搞装修的应该是一个很小的比例。</p>
<p>从上游来说，钢铁、水泥、机械等行业无一不受到到房地产的影响。</p>
<p>房地产影响到钢铁、水泥、机械、家电、家具、建筑建材等多种领域，影响真的不小。</p>
<p>依照房地产的产权属性，房地产又是资本市场。</p>
<p>资金推动了商品房价格的快速上涨。</p>
<p>房地产为政府积聚了大量的财富（卖地），这些财富用来建造地铁、公园、广场、办公大楼、公款招待、潇洒挥霍，又推动了实体经济的增长。</p>
<h2 id="什么是傻空"><a href="#什么是傻空" class="headerlink" title="什么是傻空"></a>什么是傻空</h2><p>关于买房量力而行的事，还是有必要再说得清楚些的。</p>
<p>还是打个比方</p>
<p>假设某人家庭月收入15000块（都市小白领的通常收入），工作6年，手里有50万存款，我可以在北京北五环外（比如西三旗或者回龙观）买一套价值150万的房子（2万每平米，70几平米）。首付50万，贷款100万，月供7000多，是完全买的起的，而且因为轻轨的开通，即使在市中心工作，上班时间肯定可以在2个小时之内（作为北京这个城市来说是可以接受的）。</p>
<p>但是这个人心比较高，非要在北四环内，买一套100平的住宅，二手房3万一平米，100平米就是300万。首付按30%算，也就是90万，还要贷210万，已经完全超过了他的收入水平及收入预期。于是这个人成天怨天尤人，成天喊自己买不起房，抱怨zf，憎恨炒房客和开发商。天天叫唤社会不公平。</p>
<p>过了1年，国家队布局完毕，西三旗、回龙观房价涨到30000一平米了，买个70平的还要210万。首付30%，要60多万，贷款150万，月供12000左右。这时，他买西三旗70多平米的房子已经很费劲了。</p>
<p>这种行为叫什么？这就叫傻空。</p>
<h2 id="什么是真买不起房"><a href="#什么是真买不起房" class="headerlink" title="什么是真买不起房"></a>什么是真买不起房</h2><p>再比如说</p>
<p>某人家庭月收入比较低，8000块，在北京上班，西三旗和回龙观的房也要150万的总价，是买不起的。他的收入水平只能在密云或者河北买房子，但是即使在密云或者河北买了房也没办法上班。这个人就叫做真的买不起房。</p>
<p>如果他对未来的收入预期也不是很高的话，房价未来的上涨将使他进一步对买方绝望，他将彻底放弃攒钱买房，带着老婆孩子搬出跟人合租的城中村，每月花费2500块钱在回龙观租一间两室一厅的住宅。</p>
<p>日子就这么过下去了。</p>
<p>量变将引起质变，8000块钱的家庭月收入，是真买不起房的家庭，而15000月收入的家庭买不起房就叫傻空。</p>
<h2 id="具体情况具体分析，如果看不懂，一定是没有抓住问题本质"><a href="#具体情况具体分析，如果看不懂，一定是没有抓住问题本质" class="headerlink" title="具体情况具体分析，如果看不懂，一定是没有抓住问题本质"></a>具体情况具体分析，如果看不懂，一定是没有抓住问题本质</h2><p>小时候看春秋战国之类的书籍，总弄不明白一个问题：</p>
<p>a国家跟c国家打，他的邻国b就会很害怕，害怕a国家灭了c国家实力更强大，对自己不利。</p>
<p>e国家跟g国家打，他的邻国f就会很高兴，高兴e国家与g国家两败俱伤，自己可以获取利益。</p>
<p>后来我终于弄懂了。</p>
<p>当a国家跟c国家打仗时，如果a的国力明显强过c,他的邻国b就会很害怕，因为a国家很轻易就会灭掉c国家变得更强大。</p>
<p>当a国家跟c国家打仗时，如果a的国力跟c差不多,他的邻国b就会很高兴，因为a国家跟c国家会拼得两败俱伤。</p>
<p>分析问题，一定要深入的研究啊</p>
<h2 id="桂林-vs-南宁"><a href="#桂林-vs-南宁" class="headerlink" title="桂林 vs 南宁"></a>桂林 vs 南宁</h2><blockquote>
<p><strong>leeyq88：</strong></p>
<p>楼主的观点高明，因为把房价与整个经济及政治层面的东西联系起来了。请教一个问题，桂林属于5线城市了吧，现在均价近5000，请楼主分析一下桂林这种级别城市房价的趋势。</p>
<p><strong>kkndme：</strong></p>
<p>缓慢上涨，有钱买南宁吧，东盟贸易提供了巨大的空间</p>
</blockquote>
<h2 id="公租房的量级不会冲击到商品房市场"><a href="#公租房的量级不会冲击到商品房市场" class="headerlink" title="公租房的量级不会冲击到商品房市场"></a>公租房的量级不会冲击到商品房市场</h2><blockquote>
<p><strong>vavan2010：</strong></p>
<p>楼主说得好，根据你所描述的，关于房租的这一块，我看到的前景是，由于国家队的加入和垄断，以后开发商只有可能是财雄势大集团的地产商和国家队这两种了。</p>
<p>而大量的建筑公屋，也是要分租赁市场的一杯之羹，又有公租房又有廉租房，再加上物业税的出台，这样愿意持有普通住宅多套的收租客会不会减少？</p>
<p>因为没钱买的会去租公租或廉租，有钱租的也去租高端好房，就象香港一样，有钱的买商品房，一般的买普通限价房，经济实用房，没钱的住公屋或廉租。反而持有普通住宅多套的会不会逐渐减少？</p>
<p><strong>kkndme：</strong></p>
<p>公租房只能是有一定量，不会是大量，首先解决的也是体制内的住房问题。持有多套住宅的有自己的市场空间</p>
<p><strong>醉生梦思1：</strong></p>
<p>这个问题很好解答，香港公租房占5成比例，私人租房市场委缩了吗？没有，这是市场上不同档次的产品，对应不同的需求。</p>
<p>就像有人看盘，绿化不好，没有游泳池的房子坚决不要是一样的道理。</p>
</blockquote>
<h2 id="贵阳，资源的稀缺导致权贵更容易垄断，通过低收入高物价的方式剥削底层群体"><a href="#贵阳，资源的稀缺导致权贵更容易垄断，通过低收入高物价的方式剥削底层群体" class="headerlink" title="贵阳，资源的稀缺导致权贵更容易垄断，通过低收入高物价的方式剥削底层群体"></a>贵阳，资源的稀缺导致权贵更容易垄断，通过低收入高物价的方式剥削底层群体</h2><p>旅行的第一站，是贵阳。</p>
<p>一座低收入高消费的西部边远城市。</p>
<p>当地人说贵阳的消费太黑人，太畸形了。大多数当地人的收入相当于中部城市的县城水平，生活必需品的消费却超过了北京。</p>
<p>越偏远的地方越黑暗，越偏远的地方越不存在公平，越偏远的地方贫穷群众的比例越大，越偏远的地方权贵生活的越腐败、越奢华。</p>
<p>越是资源匮乏的地区，权贵阶层越富裕，这是以绝大多数人的贫穷为代价的。</p>
<p>资源的稀缺，导致权贵易于对资源形成垄断，通过以低收入高物价的方式，对底层群体进行赤裸裸的掠夺。</p>
<p>于是权贵们鲜衣怒马，下层群众褴褛衣衫。</p>
<p>贵州难道不是中国的缩影吗？</p>
<p>在欧洲的商业区，我国权贵们一掷万金，引来欧洲群众围观，瞠目结舌。以至于全世界都没法相信我国不是超级发达国家。</p>
<p>贵阳的近郊房价已经9000一平米，远郊的金阳房价已经接近了6000一平。</p>
<p>但是我们能就此判断贵阳的房价存在巨大泡沫吗？</p>
<p>贵阳到处是山，地少人多，物产极不丰富。</p>
<p>因此，贵阳的商品房就像贵阳的餐厅一样，和普通群众是完全没有关系的。而对于权贵与精英来说，即使再翻几倍的价格也一样买得起。（腐败啊）</p>
<p>看看贵阳，想想中国。</p>
<p>资源的匮乏将形成高度的垄断，导致贫富分化进一步加剧，生活成本大幅度提高，中国正走向低收入高消费的畸形社会结构，群众生活越艰难，权贵的生活就会越富足。 <br>生活必需品和房价都会变得比西方国家更贵。</p>
<blockquote>
<p><strong>fzh_0931：</strong></p>
<p>鉴定完毕，聪明的房托！<br>通篇围绕通货膨胀核心立论，既然商品房是商品，那就不具备投资品的一些属性，（帖子里关于清代磁盘子的案例很不错）为什么还要在这里忽悠呢？抵御通货膨胀的手段，除了买房以外还有很多不错的选择，为毛还在这里大谈特谈房价暴涨呢？既然在上世纪90年代是商品房价值发现初期阶段没有买进，那么到了现在这个所谓的价值发现中期或者后期阶段还有什么理由买进呢？（当然，没有自住房的例外，对于投资者来说，眼下投资房产恐怕不是最好的选择）我相信，随着通货膨胀的加剧，我们手里的钞票不断贬值，房子肯定还是会上涨，只不过不是暴涨和普遍上涨，会是局部的，具有某些概念的，那么试问，我们作为普通百姓，怎么才能未卜先知到底是哪一部分的房子会上涨？那一种概念的房子会上涨？恐怕也只有那些个具有神通的精英阶层才能知道，所以作为一个普通小民来说，俺是不会淌这趟浑水滴，俺自己够住就行，真要有天，时来运转，中了六合彩或者虾米大奖之类的，俺实在是不知道那钱做什么用时才会考虑在海南？还是杭州？抑或是南京买所蜗居来等待升值，否则俺只能望房兴叹。。。</p>
<p><strong>kkndme：</strong></p>
<p>从2005年开始</p>
<p>傻空眼里<br>凡是认为房价不会降的都是房托<br>凡是买房子的就认为49年加入国民党的。</p>
<p>装成傻空专骗真傻空的人，一面天天喊着房价暴跌，一面抄了一套又一套</p>
<p>真傻空除了骂街恨社会，什么也没得到</p>
</blockquote>
<h2 id="重庆：高层和别墅怎么选？"><a href="#重庆：高层和别墅怎么选？" class="headerlink" title="重庆：高层和别墅怎么选？"></a>重庆：高层和别墅怎么选？</h2><blockquote>
<p><strong>yourrainbow：</strong></p>
<p>Lz还在吗？咨询下重庆房价的走势呀！</p>
<p>投资别墅与高层的比较！</p>
<p><strong>kkndme：</strong></p>
<p>我个人很不喜欢重庆这个城市，但是我不得不说重庆的发展空间很大，无论是经济还是房价。</p>
<p>别墅，如果有钱投资，一定是别墅，只要不是太偏远的。</p>
<p><strong>hollybible2018：</strong></p>
<p>我给你解释为什么楼主推荐别墅了。看问题不是看短时间内，而是要看长远。</p>
<p>第一，中国富裕阶层追捧什么房型？别墅。要想富，先学会用富人的思维方式思考问题。</p>
<p>第二，随着中国经济越来越强，人均住房面积会进一步增加，人们选择的房型会由公寓逐渐转移到别墅。</p>
<p>第三，如果你有在欧美，日本这些发达国家的生活经验，你会知道，公寓是给穷人住的地方，而稍微收入可以的住的都是别墅型的房子。我国按照这样的发展趋势，是能达到这些发达国家的水平。我国曾经现在将来发生的事情都是那些发达国家曾经现在发生的事情。</p>
</blockquote>
<h2 id="货币贬值"><a href="#货币贬值" class="headerlink" title="货币贬值"></a>货币贬值</h2><p>刚从青岩古镇玩回来，饭前说说货币贬值。</p>
<p>货币贬值，来自于大量的印钞</p>
<p>可不可以少发点钞票。</p>
<p>对不起，不行。</p>
<p>这是我国的官有经济体制决定的。</p>
<h2 id="为什么美国人工高于中国，但大多数商品的物价却低于中国"><a href="#为什么美国人工高于中国，但大多数商品的物价却低于中国" class="headerlink" title="为什么美国人工高于中国，但大多数商品的物价却低于中国"></a>为什么美国人工高于中国，但大多数商品的物价却低于中国</h2><p>凡是去过美国的朋友，会惊奇一个现象 <br>除了人工服务行业，几乎大多数产品的绝对价格都低于国内。</p>
<p>从数码产品，到奢饰品，从矿泉水，鸡蛋到汽车，统统比国内的绝对价格（把美金换成人民币，再拿人民币进行比较）便宜。（美国的餐馆比较贵是因为包含了人工服务成本）</p>
<p>不仅仅是美国货比在中国卖的便宜，几乎所有made in china的商品在美国卖的绝对价格都低于国内售价（一件国内生产出口的服装在美国售价150人民币左右，但在国内售价竟然达到800-1000人民币）</p>
<p>贫穷的发展中国家——我们的物价却远远高于美国，这是什么样的原因呢？</p>
<p>我想主要还是我们的体制决定的：</p>
<p>1、高昂的行政成本</p>
<p>中国庞大的公务员队伍对货币的消耗达到惊人的程度。任何一种商品的销售都要分摊政府高昂的行政开支。不大量印钞票是无法维持正常运转的</p>
<p>2、过渡依靠政府投资。 <br>大家都知道，中国的经济发展，是依靠政府投资为主导的，全世界都知道，政府投资的效率是最底下的，1个亿的投资往好了说只能产生3000万的效益，剩余7000万损耗掉了。因此政府不得不持续增加货币发行量 <br>3、惊人的fb成本</p>
<p>一集中箱货物运到美国的成本甚至低于从北京运到深圳的国内运费。这是令人惊讶的事情，又是确凿的事实。中国高昂的高速费用使物流贵得吓人，从农民手中2分钱收购的蔬菜，运到了目的地，成本就变成了1元钱。</p>
<p>这中间不仅仅是高速费，当公路及铁路运输变得紧张的时候，你不得不花费比高速费更贵的支出用于打点关系。</p>
<p>关系的成本已经远远贵过商品本身。惊人的fb成本是物价上涨的重要原因，因为权贵贪心也是逐年增加的，fb成本越来越高。fb成本的每年高速增长，迫使印钞需求高速增长。</p>
<p>4、低附加值产品出口创汇</p>
<p>低附加值产品出口创汇是我国经济发展的主要支柱。</p>
<p>可以这样理解，我们的商品卖到了国外，换回的是外汇。国内的商品少了，就变贵了。换回的外汇，国家就会按照外汇的总金额依据汇率全都印成人民币，投放到社会。社会上不但商品变少了，每年还会多印出一大堆钞票，这就是通货膨胀。货币的购买力在持续贬值，国家通过货币持续贬值来收割普通劳动者的羊毛。</p>
<p>所以说我国高通胀，货币持续贬值，是官有经济体制所决定的。</p>
<p>是不可能改变的。</p>
<p>持有闲置现金的风险，比持有任何一种可保存的商品的风险都大。</p>
<h2 id="还能上车的赶紧上车"><a href="#还能上车的赶紧上车" class="headerlink" title="还能上车的赶紧上车"></a>还能上车的赶紧上车</h2><p>奉劝那些盼着zf政策出打击房产直到崩盘，以此得到高潮的同志们，真的不要等了，除非出现明末的极端事件，否则一辈子等不到高潮。</p>
<p>也奉劝希望房价能降个30%-50%好买套自己的房子的善良百姓，还是看有什么机会多挣点钱吧，等房价大降真的不现实。</p>
<p>百姓们希望领导们能给自己做个主，可是几千年以来，中国的上位者们从来都只考虑一个问题：“卧榻之上，岂容他人安睡。”真的没有时间管你们的那些小事儿。</p>
<blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>大家应该知道所谓的康乾盛世，开元盛世都是什么样子了</p>
<p>上层阶级的盛世而已</p>
<p>底层老百姓在史书上连“某人甲，某人乙”都留不下</p>
<p><strong>dantez13：</strong></p>
<p>康乾确实是虚假的所谓“盛世”开元还是不错的</p>
<p>看历史不光纵向看 也要横向看</p>
<p><strong>kkndme：</strong></p>
<p>开元盛世留下巨大的隐患才导致玄宗悲惨的人生，不应简单的认为是杨玉环和安史之乱的原因。</p>
<p>首先是大量的土地兼并，大量的农民同志逃跑，社会的不安定为安史之乱埋下了隐患。还有就是节度使的权力太大，以全国之力供养节度使的军备，而内地养了一群废兵。</p>
<p>相当于老大把精兵干将派去边远山区收保护费，结果自己身边连个像样的保镖都没有。有个收保护费的领班突然不爽，自己想当老大，带着打手跑回去揍老大，准备上位。这时老大就光杆司令一个，看着自己的手下叛变之能干瞪眼</p>
<p><strong>dantez13：</strong></p>
<p>我说的看历史纵向横向的意思是指</p>
<p>康乾时期 纵向来看 还算是个稳定时期 但是17 18世纪 欧洲正轰轰烈烈的搞工业革命</p>
<p>乾隆却几下江南 还搞什么骑射乃满洲之本</p>
<p>而开元时期 ，虽然的确有很多隐患 但是大唐还是当之无愧的世界老大</p>
<p>唐朝也是那个时候达到的巅峰</p>
<p><strong>kkndme：</strong></p>
<p>呵呵，大唐当世界老大也不知道是好事还是坏事</p>
<p>欧洲经历了漫长的中世纪黑暗时代，结果由诸侯割据的封建社会直接进入了资本主义社会，并向国家社会主义过渡。</p>
<p>中国早在秦就结束了诸侯国林立的封建时代，进入了大一统高度集权的帝国时代，到现在也没完全结束。</p>
</blockquote>
<h2 id="武汉：城市发展空间的大小，往往和房价的升值空间成正比"><a href="#武汉：城市发展空间的大小，往往和房价的升值空间成正比" class="headerlink" title="武汉：城市发展空间的大小，往往和房价的升值空间成正比"></a>武汉：城市发展空间的大小，往往和房价的升值空间成正比</h2><blockquote>
<p><strong>dantez13：</strong></p>
<p>挨楼主好近 呵呵</p>
<p>请教一下楼主对武汉这个城市的看法 房价 以及将来发展的空间</p>
<p>今年刚在武汉出手两套房</p>
<p><strong>kkndme：</strong></p>
<p>对武汉的房价真没研究过，不敢妄言。但很看好武汉这个城市的发展。城市发展空间的大小，往往和房价的升值空间成正比，虽然不是绝对</p>
</blockquote>
<h2 id="权利让革族成为苗族的一支"><a href="#权利让革族成为苗族的一支" class="headerlink" title="权利让革族成为苗族的一支"></a>权利让革族成为苗族的一支</h2><p>刚从大山深处（枫香）出来，做了6个小时车，到榕江现城，居然赶上全程停水，狂晕。</p>
<p>枫香是革家聚居区，名族识别的时候本来应该定为革族，结果苗王（也是贵州shengzhang)一句话就把完全不同祖先的革族变成苗族的一支啊。这就是权利的力量。</p>
<h2 id="房价是否会跌，如果会，会怎么跌"><a href="#房价是否会跌，如果会，会怎么跌" class="headerlink" title="房价是否会跌，如果会，会怎么跌"></a>房价是否会跌，如果会，会怎么跌</h2><p>几天没有上来，发现来了很多比较鸡冻的同志。心情可予以理解。</p>
<p>但是鸡冻并不能让日子过的更好。</p>
<p>油价大涨小跌，我们鸡冻了，但是事实并没有改变。</p>
<p>高速费早就收回成本，可是依然雷打不动的收着，我们鸡冻了，可是事实也没有任何改变。</p>
<p>房价就能真如很多人所愿，使劲跌到人人买的起吗？今后的现实将告诉我们答案。</p>
<p>房价会不会跌？</p>
<p>我说在较远的将来一定会跌，但下跌的方式是完全不同的。不可能象大家所期望的由2010年的30000一平跌到2004年的6000一平。</p>
<p>下跌一定是另一种方式：当农产品价格以几年翻10倍甚至几十倍的速度上涨的时候，房产却相对滞涨。这是最有可能的下跌方式。</p>
<h2 id="通货膨胀是减缓灭亡最好的良药"><a href="#通货膨胀是减缓灭亡最好的良药" class="headerlink" title="通货膨胀是减缓灭亡最好的良药"></a>通货膨胀是减缓灭亡最好的良药</h2><p>最善良的意愿并不能阻止事务向邪恶的方向发展。</p>
<p>我们大家都很清楚却都没关注的一个常识，当我们满怀热情无偿献血的时候，有哪个贫穷的患者在需要输血时，能够因为广大群众的无偿献血而得到医院的优惠吗？</p>
<p>不能，无论你是穷是富，只要你是平头百姓，你都不得不因为需要输血而支付昂贵的医药费。</p>
<p>同样，zf并不会因为拆迁给你补偿的太低，而强迫开发商降低房价卖给群众。压低建设成本，抬高售价，中间的利润由商人和权贵进行分配，这是官商结合的通行做法。自古以来，能够赚大钱的都是红顶商人，而不是普通个体户。</p>
<p>对于很多鸡冻的群众，指着鼻子问我：国家会不管吗？疯狂难道不是导致灭亡吗？</p>
<p>我告诉你，通货膨胀就是减缓灭亡时间的最好良药</p>
<blockquote>
<p><strong>被忽悠的群众：</strong></p>
<p>请楼主解释一下</p>
<p>通货膨胀是zf偷偷掠夺人民财富的手段，极少数人暴利，怎是良药？？？</p>
<p><strong>kkndme：</strong></p>
<p>通货膨胀是zf偷偷掠夺人民财富的手段，极少数人暴利————没错，通货膨胀就是剪老百姓的羊毛，让权贵的财富更集中，中下层群众更贫穷。</p>
<p>但是，从国家的统治与巩固来讲，的确是良药啊（当然有一定限度）。</p>
<p>当大多数资源掌握在少数人手中的时候，占有绝大多数的金字塔下层的群众能够分配到的资源就越少，资源的价格就会越高，少数的金字塔中上层的既得利益者就会越富有。</p>
<p>大家知道，有些资源会变成富人间的游戏（比如现在的古董，字画），完全失去群众基础；而如果与生活密切相关的资源过度集中，一定会爆发极端冲突事件，造成社会动荡。</p>
<p>zf通过不断稀释货币的实际购买能力，并且对粮食等生活必需品实行平准制度，一方面保证了绝大多数人民的基本吃饭问题，另一方面让中下层群众手中的余钱基本消耗在特定的商品上，以至于不得不马不停蹄的劳作，这才能保证社会的稳定和向前发展。而上层精英就可以坐享其成。</p>
<p>让我们回顾一下过去</p>
<p>80年代，那时的人们靠省吃俭用积攒出节余，被消耗在自行车、手表、缝纫机上。通过不断的劳动，才能吃饱饭，才能攒点钱买三大件取媳妇。</p>
<p>80年代末，90年代初，人们的工资提高了，手里的结余增加了，彩电、冰箱的大规模普及又消灭了老百姓手中的流动性。</p>
<p>紧接着电话、空调又接过了彩电、冰箱的大旗。那时安装个电话可要5000大元啊。</p>
<p>随着工业化水平大幅度提高，经济高速增长，货币发行量也迅速增加，彩电、冰箱等工业化大规模产品已经不具备稀缺资源的特性，也无法吸收百姓手中庞大的结余资金。</p>
<p>汽车和商品房的发展成为消灭老百姓手中的流动性的最好工具。</p>
<p>在经济发展的大潮中，一旦对资源的支配权可以换取利益，贫富两极分化是发展的必然。随着贫富分化开始加剧，财富集中在少部分人手中，集中了大量财富的少部分人已经不满足于购买普通的消费品（汽车是工业化的产物，不具备稀缺性），对投资品的追捧造就了2005年房地产的崛起。</p>
<p>房地产具备了投资品和生活必须品的双重属性，即可以让金字塔中上层的精英群体依靠房地产保值增值，又可吸收掉中下层群众的未来若干年的结余资金。</p>
<p>大量印刷的货币还是有一定数量留到勤劳肯干的白领手中的，而这些货币又因为通货膨胀因素消耗在不断上涨的生活必需品上，必需品中商品房占了大头。</p>
<p>于是拥有大量房产的金字塔中上层精英可以坐享其成，享受房产升值带来的收益，而中下层群众不得不为房子打工。</p>
<p>发行大量货币满足经济发展的需要，同时通过通货膨胀来消灭广大群众手中的流动性，是zf稳定社会，发展经济的法宝，适度的通货膨胀当然是缓解社会矛盾的良药</p>
<p><strong>tjOOSAN：</strong></p>
<p>楼主！这段话，我不是很明白。</p>
<p>好像世界上，每个国家都是如此把？谁会不买东西？谁会不买生活必须品？</p>
<p>别忘了，中国发展到现在，百姓也没有能力购买一切生活必须品！当然，随着社会的发展，人民在一点一点的去完善基本生活。</p>
<p>这你却说成。。。精英和国家的阴谋。。。我。。。很难理解。</p>
<p>稳定粮食价格，这对每个国家而言，都是必须的啊！？？这最最基本了吧？</p>
<p>房子为什么涨价？？？国家决策！懂吗？间接取消了经济适用房政策。市场上百分之九十都是商品房！！你告诉我，房价能不涨吗？</p>
<p>房价涨了，受益人是谁？？？是政府！！不是你嘴里所谓的精英，他们只是傀儡罢了！</p>
<p><strong>kkndme：</strong></p>
<p>不是阴谋，我没提过一句阴谋，是国策</p>
<p>好比美国，以中产阶级利益为代表的美国，一个币值相对稳定的国家，主导借钱消费，这就是国策。</p>
<p>当08年的金融危机，多数中产却尝到了惨痛的教训。而在美国的华人，因为热爱储蓄的原因（这跟美国币值相对稳定、华人储蓄习惯都有关系），生活并没有受到太大影响。</p>
</blockquote>
<h2 id="货币供应不足是明朝的真正原因"><a href="#货币供应不足是明朝的真正原因" class="headerlink" title="货币供应不足是明朝的真正原因"></a>货币供应不足是明朝的真正原因</h2><p>明朝末年，可怜的崇祯皇帝面临的最可怕的问题貌似两个:一是努尔哈赤的入侵；一是大饥荒下，到处闹蚁贼。光是努尔哈赤的入侵，明末的关宁铁骑完全可以将满人挡在山海关外；光是蚁贼肆虐，凭洪承畴、孙传庭等名将镇压一群乌合之众还是易如反掌的；内忧外患才导致了明朝的灭亡。这是通行的说法。</p>
<p>明朝灭亡的真正原因，是经济原因。</p>
<p>当然，这也是句废话，无论是社会的稳定，还是国家的动乱，或者邻国间的战争，都是经济原因导致的。</p>
<p>明朝真正灭亡的原因是：货币供给不足。</p>
<p>不要说百姓的经济行为受到很大制约，即使是军队也发不出饷银。以至于除了关宁铁骑以外，明朝就找不出一支有战斗力的军队，甚至洪承畴、孙传庭打高迎祥、李自成、张献忠，居然靠农民军的馈赠过日子。</p>
<p>货币供给不足，明朝的经济崩溃了。</p>
<h2 id="经济问题是导致清朝灭亡"><a href="#经济问题是导致清朝灭亡" class="headerlink" title="经济问题是导致清朝灭亡"></a>经济问题是导致清朝灭亡</h2><p>再谈谈鸦片战争和那个满脑子浆糊的林则徐。</p>
<p>鸦片战争的原因，在于大清国与欧洲诸国之间存在的巨大贸易顺差。</p>
<p>大清虽然闭关锁国，丝绸、茶叶、瓷器通过民间和官员私下大量出口欧洲换取白银，却没有任何的进口需求。以至于英、法国家不得不世界范围开采银矿，但依然不能满足采购中国商品的需求。</p>
<p>英法诸国必须要与中国通商贸易，才能解决贸易顺差这个根本的问题。英国人实在不知道拿什么商品来进行贸易(貌似中国什么都不需要），于是不法商人想出了鸦片撬开中英贸易缺口的馊主意——这并没有得到英国官方的支持。</p>
<p>但是林则徐同志既不懂得经济，又不懂得外交，对欧洲人的认识也就停留在：我不给你茶叶，你的腿都站不直。 <br>不管洋人打算干什么，总之洋人就是邪恶的，就该抓起来打板子。于是，自然而然的一顿开打，结果可想而知。 <br>于是清朝官员施展出了村骗乡，乡骗县，一骗骗到guowuyuan，的传统技能，咸丰同志在故宫几乎自始至终听到的都是捷报频传。</p>
<p>清末，一会儿闹拳匪，一会儿闹白莲教，一会儿闹太平天国。然而，靠鸡冻的群众杀几个洋毛子并不能使中国变得强大。林则徐如果能够有点知识，不妄自尊大，能够说动咸丰开放正常通商贸易、拒绝鸦片，联军入侵圆明园的事大致可以避免。</p>
<p>经济问题才是导致社会动荡，战争爆发的根源。</p>
<blockquote>
<p>挑个刺 第一次鸦片战争清的皇帝是道光不是咸丰 白莲教不是清末的而是清中叶嘉庆年间的</p>
<p><strong>kkndme：</strong></p>
<p>确实是道光不是咸丰，笔误，特此道歉。</p>
<p>白莲教始于宋，最早可以追朔到南北朝时期，最早的名字叫“白莲社”。白莲教其实就是摩尼教，也就是倚天屠龙记里的明教，朱元璋靠白莲教得了天下，所以明代对白莲教的镇压异常残酷。清代的白莲教出现了许多分支，如八卦教、天地门教，先天教等等，总之白莲教从元代开始一直到清末都是闹得很凶的。</p>
</blockquote>
<h2 id="房产投资的几点建议"><a href="#房产投资的几点建议" class="headerlink" title="房产投资的几点建议"></a>房产投资的几点建议</h2><p>感谢大家的支持，不少朋友还提了一些关于房产投资的问题。</p>
<p>我觉得无论做什么样的投资，自己一定要做足功课。就房产来说，对于区域经济发展，要有深刻的理解，否则就不要轻易出手。</p>
<p>关于房产，我只是从大方向上说了一下自己的判断，并没有对区域的房产升值做过研究，所以没法给大家提供建议，请大家谅解。</p>
<p>不过，关于房产投资的方向，也有几点心得：供大家参考： <br>一、坚决不能投资自己不熟悉的城市<br>二、坚决不投资中小城市，一般省会及计划单列以上城市问题都不大，但中小城市即使房价上涨也存在变现困难问题。<br>三、坚决不投资距离大城市较偏远的旅游城市，比如山东乳山之类的，几乎无法变现。<br>四、慎重投资大城市的郊区，除非价格绝对低。如果外来人口比较多，zf又有发展规划，且价格与城区相比有较大的价差，才可以考虑</p>
<h2 id="人民币对外升值，对内贬值"><a href="#人民币对外升值，对内贬值" class="headerlink" title="人民币对外升值，对内贬值"></a>人民币对外升值，对内贬值</h2><blockquote>
<p>楼主，据sz的统计公布09年底的商品房存量4~5万套，33%左右的自由率，10年新建成面积在300万平米左右，应该不算泡沫吧？目前美元走强，人民币贬值会导致国外热钱以及权贵的钱逃走么？对房地产影响怎么看？</p>
<p><strong>kkndme：</strong></p>
<p>人民币对外是升值，对内贬值</p>
</blockquote>
<h2 id="南宁买房建议"><a href="#南宁买房建议" class="headerlink" title="南宁买房建议"></a>南宁买房建议</h2><blockquote>
<p><strong>showforme：</strong></p>
<p>LZ帮忙分析南宁的楼市情况，这边的房价均价是6000多，最近中央说要投资1.5万亿给广西发展北部湾经济，也许对南宁楼市有一定的刺激作用，我想近期买一套房自住+投资，现在入手合适还是等到年底合适？</p>
<p><strong>kkndme：</strong></p>
<p>自住+投资？</p>
<p>自住房首要考虑的还是生活方便，不要太多考虑涨跌，没有意义，如果手里有钱就可以买。</p>
<p>南宁的房价我不清楚。但南宁是一个经济高速发展的城市是毋庸置疑的。</p>
<p>相对于昆明，南宁在面向东南亚贸易方面，有着更得天独厚的优势——港口。</p>
</blockquote>
<h2 id="经济适用房都是内部分配的"><a href="#经济适用房都是内部分配的" class="headerlink" title="经济适用房都是内部分配的"></a>经济适用房都是内部分配的</h2><blockquote>
<p><strong>yjfsam：</strong></p>
<p>看新闻说,在经济适用房里提供一定数量的廉租房,而不是大量廉租房,经济适用房是可以购买的,而且是建在市中心附近,如果是我,我当然是想买经济适用房,而廉租房又不多,这会不会跟楼主的意思有点不一样?</p>
<p>另外经济适用房在高价房附近推出,可以打压附近房价?</p>
<p><strong>kkndme：</strong></p>
<p>你认为建在市中心附近的经济适用房是给普通老百姓建的吗？是低收入群众有资格购买的吗？</p>
<p>经济适用房都是内部分配的，但一旦走进市场就可以牟取暴利了。</p>
<p><strong>tjOOSAN：</strong></p>
<p>大哥！！我真服你了。。。。。。</p>
<p>你知道 定向分配吗？？？就是只有拆迁户才有资格买的房子。不存在收入的问题！！</p>
<p>你纯粹是胡诌啊！我发现</p>
<p><strong>kkndme：</strong></p>
<p>兄弟，你一直比较鸡栋，呵呵</p>
<p>拆迁户的定向房属于另外的问题，作为有产阶级的拆迁户来说，部分是城市扩大化的受益者，而部分又是受害者，不能一概而论。时机不同，城市不同，境遇也不同。</p>
<p>但是有一点可以肯定，拆迁的目的，不是为了拆迁户过得更好更舒服。开发商愿意支付高额的拆迁费（只限于超大型文明的城市，许多城市拆迁户的补偿是很可怜的）而是有更大的利润可图。</p>
<p>zf为主导建设的市中心经济适用房也不仅仅为了拆迁户回迁，拆迁户回迁比例最多占小区总放量的30%，而其余的基本上是权贵房</p>
<p><strong>tjOOSAN：</strong></p>
<p>我可不激动！就是闲的没事，来找事吧！还算是正事！</p>
<p>你说的什么给权贵房，固然存在。但是比例太太少了！！你说的话，根本没有依据！</p>
<p>现在买限价房的和经济适用房的人，都要在报纸上公布姓名和住址。</p>
<p>而且只要不是太穷的，基本都希望拆迁！因为第一，给的钱多。 第二 可以有定向分配。而且还是好地段的房子！！</p>
<p><strong>kkndme：</strong></p>
<p>兄弟你还是去了解一下体制内分福利房的真相吧。</p>
<p>福利房占用的都是经济适用房的指标啊</p>
<p>真正向社会公示的保障房才有多少呢？相对于数量庞大的福利房，可以说凤毛麟角。</p>
<p>不了解真相就没有发言权啊</p>
<p>特别是在二三线城市，房源比一线相对略为宽松，一个有点级别的公务员，通常都是分两三套房，这些房子占用的都是保障房的指标，都是要统计入保障房数据的。</p>
<p>不信你可以问问身边的公务员、银行员工、垄断企业员工。</p>
<p><strong>tjOOSAN：</strong></p>
<p>奥！你说的是，传说中的 国企员工啊！！</p>
<p>可你一开始却说得是 经济适用房！是你搞错了把？</p>
<p>国企员工分配房子的，也要够一定工龄！一定级别！不是谁都有的。好伐？</p>
<p>而且 现在中国地产，很大一部分就是国企投资的。</p>
<p>所以叫内部分配么！！国企分房，在中国的体制内是正常的！</p>
<p><strong>kkndme：</strong></p>
<p>传说中的上海人？</p>
<p>我没有搞错，体制内员工分配的福利房就是经济适用房。</p>
<p>我举个例子，昆明武警干部的福利房叫恒安新邻居，它的官方名称叫什么？</p>
<p>我告诉你，叫做“武警经济适用房小区”</p>
<p>你看到的内部分房，占用的都是经济适用房的指标，也就是占用的是：我们所说的为了解决民生问题的保障房的指标。</p>
<p><strong>tjOOSAN：</strong></p>
<blockquote>
<p>kkndme</p>
<p>你认为建在市中心附近的经济适用房是给普通老百姓建的吗？是低收入群众有资格购买的吗？</p>
<p>经济适用房都是内部分配的，但一旦走进市场就可以牟取暴利了。</p>
</blockquote>
<p>这可是您自己的原话啊？？对吧？？</p>
<p>市中心的经适，就是叫做定向分配。就是 在这附近拆迁的人，住的！！</p>
<p>你非要说，有人谋私，我也不反对！但绝对不会多。</p>
<p><strong>kkndme：</strong></p>
<p>我估计是你理解错了，谋私和牟取暴利是两回事。</p>
<p>假设你是某市科级公务员，分到两套房子，以保障房的价格购买，但是却可以按照市场价格出售，只要一转手就可以进账几十万甚至上百万。</p>
<p>这就是分房双轨制给体制内有级别的员工带来的暴力机会。这跟谋私没有关系</p>
<p><strong>tjOOSAN：</strong></p>
<p>我觉得楼主拿经济适用房 做例子。很愚笨。</p>
<p>中国房价高起的根本原因，不就是国企，制造业资金进入地产么。</p>
<p>经济适用，现阶段就是为拆迁户盖得。</p>
<p><strong>kkndme：</strong></p>
<p>晕，也许你们上海是吧，放眼全国肯定不是</p>
<p><strong>jellyoak：</strong></p>
<p>上海今年以前根本没有过经济适用房，恰恰相反，上海是商品房最彻底的城市</p>
<p>给动迁户的叫动迁安置房，绝对都是建在最偏僻的地方的，最近5年基本上没有原拆原回的安置。</p>
<p>那位激动的同志有点多动症的嫌疑，忽略算了。</p>
<p><strong>tjOOSAN：</strong></p>
<blockquote>
<p><strong>kkndme：</strong></p>
<p>我估计是你理解错了，谋私和牟取暴利是两回事。</p>
<p>假设你是某市科级公务员，分到两套房子，以保障房的价格购买，但是却可以按照市场价格出售，只要一转手就可以进账几十万甚至上百万。</p>
<p>这就是分房双轨制给体制内有级别的员工带来的暴力机会。这跟谋私没有关系</p>
</blockquote>
<p>你。。我不知道你说这个是什么意思？</p>
<p>贪污腐败是少数。这是肯定存在的现象。但我现在讨论的是大众现象！</p>
<p>而且内部分房的们都要够一定级别！就算他们一人分三套，那根本对楼市没有影响的</p>
<p><strong>kkndme：</strong></p>
<p>我说的是房产双轨制，是一种制度，不是说个人的以权谋私。</p>
<p>房屋问题实际上是土地问题，当一少部分人群能够以很低的代价占有更多的土地，市场上的土地就会变得稀缺，价格就会上升。</p>
<p><strong>jellyoak：</strong></p>
<p>可以说上海是最彻底的商品房市场化的城市。</p>
<p>没有小产权，没有福利分配，完全的市场化。</p>
<p>唯一的例外就是动迁户能分配到动迁安置房，虽然都是地处偏远但现在也都价值高昂。</p>
<p>lz说的那种公务员分配的安置房在很多城市是很普遍的。</p>
<p>情况绝非那位偏执狂TX所理解的</p>
<p>事实是庞大臃肿的公务员机构都有机会给这些公务员分配到一套住房，总数量很是惊人。</p>
<p>如果严控贷款的话，现在上海的房价是得不到长久支撑的。</p>
<p>看长期政策如何了。</p>
<p>现在没人相信贷款可以一直这样卡下去。</p>
</blockquote>
<h2 id="普通人怎么办：尽早买房，努力挣钱抵御通胀"><a href="#普通人怎么办：尽早买房，努力挣钱抵御通胀" class="headerlink" title="普通人怎么办：尽早买房，努力挣钱抵御通胀"></a>普通人怎么办：尽早买房，努力挣钱抵御通胀</h2><blockquote>
<p><strong>被忽悠的群众：</strong></p>
<p>楼主：我们P民怎么办呢？只有买房保住自己的社会地位！？</p>
<p><strong>kkndme：</strong></p>
<p>问题是房子将会是普通人越来越难以参与的游戏，门槛越来越高。</p>
<p>只有努力工作赚钱才是唯一能抵抗通胀的办法，这也是zf最希望看到的。</p>
<p>当然体制内员工，工资制度本身就可以抵御通胀。这些多发出来的钱是需要体制外广大群众创造出来的，因为体制内员工本身并不直接创造价值。</p>
<p>而体制外的广大群众要想抵御通胀，就必须努力工作，创造更大的价值来提高收入水平。</p>
<p>这也就是国家能够维持运转的根源所在啊</p>
</blockquote>
<h2 id="房价会出现很多上下波动"><a href="#房价会出现很多上下波动" class="headerlink" title="房价会出现很多上下波动"></a>房价会出现很多上下波动</h2><blockquote>
<p><strong>fengyu1218：</strong></p>
<p>楼主，你所分析问题透彻明晰，很受启发</p>
<p>但是立足于将任何问题都用P民跟精英阶层对立的观点，我觉得有点绝对</p>
<p>社会阶层的复杂性，以及相互之间的博弈会在特定的阶段</p>
<p>有特定的表现形式，比如，当房价太高，P民阶层抗议不断的时候</p>
<p>会有所谓的调控出来，尽管成效不大</p>
<p>统治阶层也不会任由社会矛盾积累到最大程度而不作为</p>
<p>所以房价的表现形式会出现很多的上下波动</p>
<p><strong>kkndme：</strong></p>
<p>你说的对，房价趋势是上涨，但一定会有短期的波动</p>
<p><strong>tjOOSAN：</strong></p>
<p>而且对于你所标榜的“暴涨” 你自己后来也改了，是在波动中上涨！</p>
<p>那还是暴涨吗？你都违背了自己的标题。</p>
<p><strong>kkndme：</strong></p>
<p>呵呵，短期的调控并不能改变长期上涨的趋势，</p>
<p>当资金的运作规律收到外力的压制，短暂低头的房价就会迎来暴涨。这是规律。</p>
</blockquote>
<h2 id="买房时机的选择（真TM厉害，这竟然是2010年的建议，可恨的是2020年才看到）"><a href="#买房时机的选择（真TM厉害，这竟然是2010年的建议，可恨的是2020年才看到）" class="headerlink" title="买房时机的选择（真TM厉害，这竟然是2010年的建议，可恨的是2020年才看到）"></a>买房时机的选择（真TM厉害，这竟然是2010年的建议，可恨的是2020年才看到）</h2><p>很多朋友都关心买房时机问题</p>
<p>对于自住需求者和投资需求者是要区别对待的</p>
<p>对于一线城市与二三线城市也是要区别对待的</p>
<p>对于自住需求者（仅指普通群众）来说，只要你还有钱能够买的起房，那你就买吧。</p>
<p>不要赌博和赌气，因为真的赌不起。</p>
<p>人人都可以买得起商品房，只是一个美丽的童话。</p>
<p>当然如果你赶上了国家调控的好时机，那你就要认真选房，做足功课，迅速出手。因为买到一套户型、位置、楼层都让你满意的房子，在商品房热销期，是很难的事情，根本没有给你挑选的机会，而在调控期，或许房价没怎么下降，但绝对给了你挑选的余地。</p>
<p>对于投资来说，问题就比较复杂，要考虑的问题就会更多，不同条件的人就有不同的需求。</p>
<p>总的来说在严厉调控期，需要关注以下几点：</p>
<p>一、当新盘的价格低于周边二手房的价格。<br>二、当看房的人不断增加<br>三、当kas拿地热情大减，以至于多处土地流拍</p>
<p>以上三点是提示你准备出手的信号。</p>
<p>对于一线城市，一定会有一段时期小幅下跌，及跌后滞涨。</p>
<p>对于二三线城市，多数城市会缓步持续上涨。但遇到大规模拆迁的城市，那房价就会忽视调控，选择快速上涨。近期，在二三线城市，无论自住还是投资，都是早买好于晚买。</p>
<h2 id="收入分配改革跟体制外的人没关系"><a href="#收入分配改革跟体制外的人没关系" class="headerlink" title="收入分配改革跟体制外的人没关系"></a>收入分配改革跟体制外的人没关系</h2><blockquote>
<p><strong>feifeilongdi：</strong></p>
<p>请问楼主国家的收入分配改革调整的是哪一部分人的收入？</p>
<p>我们底层p民如果真的连公租房都只能勉强供得起，那以后子女的抚养费用，夫妻以后的养老资金如何解决</p>
<p><strong>kkndme：</strong></p>
<p>工资收入分配改革应该只是个说法，对公有制经济是很有实惠的。但非公有制员工的工资是阳光雨露都撒不到的。</p>
<p>以前说涨工资基本都是公务员，收入分配改革后可能对事业单位及国企工资收入有明显改善。</p>
<p>至于体制外，无论打工仔和个体户都是自生自灭的</p>
</blockquote>
<h2 id="体制外的人要早早考虑养老问题"><a href="#体制外的人要早早考虑养老问题" class="headerlink" title="体制外的人要早早考虑养老问题"></a>体制外的人要早早考虑养老问题</h2><p>体制外人员养老确实是个问题</p>
<p>做生意的赚钱养老</p>
<p>聪明的下手早的以房养老</p>
<p>最惨的是没有混上去，且又没有特殊技能的私企打工仔。养老实在是个大问题。</p>
<p>所以东部地区才有宁挣老板1000元，不赚打工5000块的说法。</p>
<p>双轨制下，低层群众想翻身确实比较难。</p>
<h2 id="永远不要和白痴争辩，因为他会把你的智商拉到和他同一水平，然后用丰富的经验打败你"><a href="#永远不要和白痴争辩，因为他会把你的智商拉到和他同一水平，然后用丰富的经验打败你" class="headerlink" title="永远不要和白痴争辩，因为他会把你的智商拉到和他同一水平，然后用丰富的经验打败你"></a>永远不要和白痴争辩，因为他会把你的智商拉到和他同一水平，然后用丰富的经验打败你</h2><p>鸡冻先生</p>
<p>能够有资格跟你辩论的一定只有两种人</p>
<p>一种是智商极高，世间罕见的</p>
<p>一种是智商比较低的。</p>
<p>其他人跟你辩论那是自找苦吃</p>
<h2 id="当个农民也要懂政策，要顺政策而为"><a href="#当个农民也要懂政策，要顺政策而为" class="headerlink" title="当个农民也要懂政策，要顺政策而为"></a>当个农民也要懂政策，要顺政策而为</h2><p>刚从深山老林钻出来，终于找到地方洗澡了，我激动啊。</p>
<p>洗完澡轻松，讲一个刚从支书那里听来的故事。</p>
<p>大家普遍感觉很穷的贵州省榕江县栽麻乡宰荡村，在解放前却是有名的富裕村，他们靠勤劳开垦荒地，良田多到种不过来，直到土改后，zf将宰荡的良田分给了加所、林所等周围几个土地较少的村子的村民（这些村子土地少的原因主要还是周围几个村子的村民比较懒惰，宁肯受穷也不愿意开垦荒地），宰荡才穷下来。</p>
<p>因为宰荡村过去比较富裕，拨给的富农指标就比较多。有一户人家很富裕，按理应该划为富农，但这户人家很了解政策，知道评上富农就会挨整，于是走关系，成分改成了中农。</p>
<p>而其他大多数依靠勤劳致富的人家非常老实，也不懂评为富农有什么不好，认为什么成分都无所谓，还不是老老实实干活。结果可想而知。当上了富农接下来就是没完没了的批斗。</p>
<p>这个故事告诉我们，哪怕当个农民也必须了解zf的意图。</p>
<h2 id="存钱不如存资产，钱会贬值，资产会升值"><a href="#存钱不如存资产，钱会贬值，资产会升值" class="headerlink" title="存钱不如存资产，钱会贬值，资产会升值"></a>存钱不如存资产，钱会贬值，资产会升值</h2><p>去年在宰荡做了一段时间的田野调查，今年这次来算是回访。时过一年，发现去年村子附近的大多数农田，今年都变成了房子。</p>
<p>现在农民政策还是可以的，即使贫困如贵州山区，农民除了能够完全自给自足外，多余的粮食蔬菜也能换来一定的经济收入，随着家境变好了，对更大的房子的需求也就产生了，农民愿意把闲钱都用来盖成更大的房子，宁肯牺牲掉自有耕地。这其实是一件可怕的事情。</p>
<p>这次同样对村民做了入户调查，发现了一件有意思的事情。</p>
<p>村民最感到遗憾的事情就是早在2000年初，那时村里还没有电，村民为了想让全村通电，卖掉了所有山上的古树。电通了，当时的村民很高兴，而且认为古树卖了一个高价格（当时总共卖了6万块钱），换来了全村的生活方便。</p>
<p>大约在三年后，其他村寨，zf都给免费通了电。如果那些古树不卖掉，现在随便一颗的价格都超过了6万。现在那些古树至少值几百万。</p>
<p>村民们用最朴实无华的思想总结了一个道理：存钱不如存房子、存木头、存树</p>
<h2 id="房子越早买越好，zf想钱想疯了"><a href="#房子越早买越好，zf想钱想疯了" class="headerlink" title="房子越早买越好，zf想钱想疯了"></a>房子越早买越好，zf想钱想疯了</h2><p>全国人民都知道有个以雷厉风行著称的球书记</p>
<p>球书记曾说过一段著名的话，大意是：昆明的开发商拿地价格很低，卖的价格却很高，腐败才是高房价根源。</p>
<p>当时昆明的很多无房户都很鸡冻，以为这下可好了，找到问题根源了，昆明房价要降了。</p>
<p>可是我听到的意思却是：zf卖地卖得太低了，应该大幅提高土地价格。</p>
<p>果然不久就出台了54321政策，以前拿地没走招拍挂程序的，一律按照54321补交土地款，否则开发商不发放任何证件，以至于升级到已买了房的业主也拿不到房产证。</p>
<p>于是昆明的新盘由于手续问题都无法开盘，已经卖掉很久的老盘，开发商还要求业主补交房款，否则退房。</p>
<p>结果可想而知，昆明的房价以一环与二环之间为例，由去年下半年的6000多涨到现在的均价过万。</p>
<p>如果从民生着想，会做出这样荒唐的事来吗。</p>
<p>帖子里有朋友问昆明的买房时机，我只能说越早买越好，因为dfzf想钱已经想疯了</p>
<h2 id="利益才是zf行为的指挥棒"><a href="#利益才是zf行为的指挥棒" class="headerlink" title="利益才是zf行为的指挥棒"></a>利益才是zf行为的指挥棒</h2><p>北大朱晓阳用了十多年时间跟踪昆明城中村，对刚刚建好5年的宏仁村就要因为商业利益而拆迁已经出离了愤怒，结果这事捅到CCAV曝光了，拆迁的事只好暂停。</p>
<p>利益才是zf行为的指挥棒</p>
<h2 id="建议一定是建立在严肃考察的基础上"><a href="#建议一定是建立在严肃考察的基础上" class="headerlink" title="建议一定是建立在严肃考察的基础上"></a>建议一定是建立在严肃考察的基础上</h2><blockquote>
<p><strong>爱情就像跳恰恰：</strong></p>
<p>这两天全部看完了，深受触动，楼主是个睿智的人，赞一个~</p>
<p>想说下自己的情况，楼主帮我参谋一下，我在上海，女性，前几年由于一些特殊个人原因，导致一直没有自己的房子，这两年专注于事业，今年发展不错，进帐了260万左右，但是，通过几次看房，我发现 300万以内，已经找不到理想的房源！</p>
<p>我现在是租住的市中心高档住房，每月租金 8500块，100个平米左右，这样的房子大概售价 500万左右，所以，现在的情况是 我想住的房子买不起，买的起的我也不想住~</p>
<p>我本人对买房和租房没有太大感觉，从某种意义上说 我倒更喜欢租房，可以每两年换个区 换套新房住住 比较有新鲜感~但是，我手上也不想持有现金，由于物价上涨，通货膨胀，我觉得持有现金的风险也不小！</p>
<p>不知道楼主对扬州的房产怎么看，我想放弃上海，到扬州购入房产，处于保值或者以后升值空间大后再售出，比如在市中心购入两三套高档小户型，用于出租！扬州由于地理优势，一两年后可能开通上海高铁，这样考虑在扬州安个家也不错，再置入一套生活便利的大点房子，以后可以考虑自住~</p>
<p><strong>kkndme：</strong></p>
<p>你的想法显然是经过深思熟虑的，在扬州买房子自住，花更少的钱过更舒适的生活很好啊，当然前提是你自己喜扬州这个城市。</p>
<p>说到投资，其实没人能够取代你自己的判断。我也没法给你提供究竟有多大升值空间的建议，因为建议一定是建立在严肃考察的基础上的。</p>
<p>我只能说东部地区的城市房产保值还是没问题的，但在哪个城市投资更好，确实需要认真实地考察。</p>
<p>如果从全国范围看，仅对投资而言，我比较看涨西安和重庆。但我个人不会在这两个城市买房子，因为本人不喜欢重庆的酷热和西安的气氛。</p>
</blockquote>
<h2 id="石家庄"><a href="#石家庄" class="headerlink" title="石家庄"></a>石家庄</h2><blockquote>
<p>楼主，请评价下石家庄的楼市，是暂时的价值洼地还是长期？</p>
<p><strong>kkndme：</strong></p>
<p>石家庄的地理和经济上的位置都比较尴尬。山西和天津都比石家庄有更好的优势</p>
</blockquote>
<h2 id="投资最重要的是稀缺性，买房首选公务员小区"><a href="#投资最重要的是稀缺性，买房首选公务员小区" class="headerlink" title="投资最重要的是稀缺性，买房首选公务员小区"></a>投资最重要的是稀缺性，买房首选公务员小区</h2><p>说到买房子，无论投资还是自住，最重要的还是稀缺性，首选还是学区房。</p>
<p>自住最好买政府公务员小区，无论是商业配套，教育配套以及休闲娱乐配套都是商品房所无法比拟的。特别是商品房经过十几二十年，房子旧了，电梯很容易出故障，如果物业有问题或者小区里有人不交物业费，那么这个小区就很难住了。公务员小区则完全不用考虑房子老旧的问题，那都是zf包干到底的。</p>
<blockquote>
<p><strong>usstcai：</strong></p>
<p>怎么找这种房源呢？</p>
<p><strong>kkndme：</strong></p>
<p>每个城市的情况不一样，北京基本上是单位的老公房，老计委的房，中石化的房都有上市交易的，但新房很难找。</p>
<p>至于二三线城市，现在还存在大量的公务员、垄断企业的新小区，并且很多房源都在市场上交易。比如昆明，存在大量的权贵小区，比如金江小区是省政府公务员小区，月牙塘小区是市政府公务员小区。</p>
</blockquote>
<h2 id="远离垃圾人"><a href="#远离垃圾人" class="headerlink" title="远离垃圾人"></a>远离垃圾人</h2><p>关于流氓无产者，在宰荡村子里还听了个故事</p>
<p>说很久以前的事情。</p>
<p>宰荡村民都很勤劳很淳朴。但是意外的出了一个叫罗老黑的人。</p>
<p>这个人好吃懒做无所事事，看见人家地里庄稼蔬菜长的好就跑去抢，为此挨过几次打。有一天罗老黑路上遇到个大兵，骗了大兵的枪，于是开始在村子里耀武扬威，不但抢人家辛辛苦苦种的菜，遇到单身的姑娘还动手动脚。</p>
<p>罗老黑在村里到处宣传他的逻辑：村里的庄稼、蔬菜、猪牛应该见者有份。</p>
<p>村里一些年轻人受了罗老黑的感染，开始变得好吃懒做，谁家种的东西都跑去拿。于是，村里人都不愿意劳动了，宰荡村开始变穷。</p>
<p>村里有个人很憎恨罗老黑的行为，但不敢明着跟王老黑作对，就在晚上在王老黑家放了一把火。侗族人住的房子都是杉木的，一旦一家着火，很可能全村遭殃，那把火烧了整个宰荡寨子，连青石板都烧裂了。</p>
<p>罗老黑，这个典型的流氓无产者，他的光荣事迹被当作反面教材激励着世世代代的宰荡村民。</p>
<h2 id="高房价或许有天会崩盘，但你等不到那一天"><a href="#高房价或许有天会崩盘，但你等不到那一天" class="headerlink" title="高房价或许有天会崩盘，但你等不到那一天"></a>高房价或许有天会崩盘，但你等不到那一天</h2><blockquote>
<p><strong>zhuce010022：</strong></p>
<p>不合理的制度不会永远的存在下去的。。。正如国父当年说的一句“天下大势浩浩荡荡，顺之者昌，逆之者亡”。。。</p>
<p>现在的高房价是目前中国的政治、经济结构失序造成的。</p>
<p>楼主上面分析了那么多，确实是，在目前这种局面下可能一直冲到崩是唯一的选择，但是，你怎么知道这种失序的大局面会一直持续下去呢？</p>
<p><strong>kkndme：</strong></p>
<p>一个朝代从鼎盛到衰亡至少维持个一两百年。所谓天下大势分久必合，合久必分，由合到分，总还是有个时间跨度的。</p>
<p>侥幸能在有生之年平平安安就是最大的福气，身死之后，哪管洪水滔天</p>
</blockquote>
<h2 id="房子不仅要早买，而且有能力的话不要怕压力，争取一步到位"><a href="#房子不仅要早买，而且有能力的话不要怕压力，争取一步到位" class="headerlink" title="房子不仅要早买，而且有能力的话不要怕压力，争取一步到位"></a>房子不仅要早买，而且有能力的话不要怕压力，争取一步到位</h2><blockquote>
<p><strong>傻子也疯狂：</strong></p>
<p>楼主</p>
<p>你好</p>
<p>跟你的帖子已经两晚上了，还是没看完</p>
<p>不过已经到第六页了，我会继续跟下去</p>
<p>感觉你分析很有道理，也很深奥<br>以前在一个炒房人的终极预测也看到过类似的帖子<br>慢慢的也有所感悟<br>现在想请教你个问题，也是我自己面临的问题</p>
<p>人在深圳，想趁今年调控在武汉买套房子，因为有回武汉发展的想法<br>我毕业三年，收入不高，目前可能首付都不够（40万总价我想付10–15万，别笑我无能）总是在想是等我存够了首付再回去看房子还是现在就订下来，订下来吧钱不够，可能要问朋友借点，既要还债又要月供怕压力大，如果先不买等存够钱我怕那时候房价又上去了，所以想你帮我参考参考，给点建议，谢谢，诚信请教</p>
<p>另外，我和我女朋友月总收入8000左右，你觉得买总价40万的压力大吗<br>准备两年后结婚，再次感谢。</p>
<p><strong>kkndme：</strong></p>
<p>40万首付15万，贷款25万，月供1000多，你和女朋友月收入8000，你觉得有压力吗？</p>
<p>二三线城市往往早买好于晚买，特别是你是自住。</p>
<p>40万的房子要不然是比较小的，要不然就是郊区了，如果你们有8000的月收入供60万的房子是不成问题的，建议不要图便宜，首选还是位置，宁可买贵点买离城中心近的房子，因为将来能够买得起改善性住房的会越来越少，有能力的话还是尽量买到位。要特别考虑今后小孩上学的配套问题。</p>
<p><strong>傻子也疯狂：</strong></p>
<p>楼主可能还不明白我的意思</p>
<p>我的首付目前也就10万</p>
<p>如果买大了首付要三成，按你说的卖60万的好是好</p>
<p>可首付至少要18万</p>
<p>我没有这么多怎么办呢</p>
<p>如果借钱，还债又月供，还要考虑两年后结婚。。。。。。。。</p>
<p>你觉得怎么办好，或者你有更好的建议</p>
<p>谢谢</p>
<p><strong>kkndme：</strong></p>
<p>如果只差8万，家里支持一些，亲戚朋友借一些，一挺就过去了。很多刚开始买房的年轻人都是要咬牙买的，换来以后的轻松。甚至很多人因为今后收入的提高，几年就把贷款还完了。</p>
<p>当然，如果真的凑不上，还是量力而行，但买房还是买位置，首选离城中心近的，宁可买小一点。住在远郊区的大房子里花1个多小时的时间上班才是受罪</p>
</blockquote>
<h2 id="金融杠杆是炒房赚钱的放大器"><a href="#金融杠杆是炒房赚钱的放大器" class="headerlink" title="金融杠杆是炒房赚钱的放大器"></a>金融杠杆是炒房赚钱的放大器</h2><blockquote>
<p><strong>错误角色：</strong></p>
<p>其实个人觉得普通炒房者不一定就能获多少利，比如他买一套新房是三千每平，等新房价到六千时出手，他能卖到五千每平。看上去他每平赚了二千…但是，他要继续炒的话，就要再加每平一千的本金进去买新房…看上去他们是资产翻翻了，但是他们的二次投资也是翻翻的…也就是说他以前三十万买了一百平，现在卖出去是五十万，看上去赚了二十万，但是，他想再买个一百平的却需要六十万…他还得从老本掏十万买同样大小的房子…这样算我也不知道对不对…要是对的话，就说明炒房的人不是抬高房价的最根本原因和最关键因素…… </p>
<p><strong>kkndme：</strong></p>
<p>你没考虑金融杠杆的作用，真正的投机炒房是贷款炒房，而投资客更愿意一次性付清。一个炒房客用20万可以买100万的房子，等到200万卖掉，投入20多万，赚了170多万。然后用变现的钱又可以贷款买多套，这就是投机炒房比股市更吸引人的地方，但是一旦资金链断掉就会比较惨。</p>
<p>这种赌徒心态的投机炒客还是比较遭人恨的，这次调控提高首付比例，对这类投机炒家打击不小。小资金的纯粹投机客数量控制在一个比较小的范围内，房产市场才会健康发展，这个国家是有共识的。所以二套房首付比例提高后，有可能变成常态</p>
<p><strong>tjOOSAN：</strong></p>
<p>这话。。。让我肝颤！~~ 投入20万？赚170？？还贷了80万呢</p>
<p>还有利息呢！~~</p>
<p><strong>kkndme：</strong></p>
<p>09年初20万首付买的100万的房子，2010年初涨到200万卖掉，你认为1年能还多少利息。难道炒房客一套房子拿满20年再卖？</p>
</blockquote>
<h2 id="要用发展的眼光看问题，只要努力，只会越来越好，越来越轻松"><a href="#要用发展的眼光看问题，只要努力，只会越来越好，越来越轻松" class="headerlink" title="要用发展的眼光看问题，只要努力，只会越来越好，越来越轻松"></a>要用发展的眼光看问题，只要努力，只会越来越好，越来越轻松</h2><p>要用发展的眼光看问题，只要你还年轻，即使你现在给老板打工只能赚4000块，并不意味着以后多少年都只赚4000块，随着经验和阅历的增长，薪水是会提高的，当然前提是肯学习，肯吃苦，提高能力和才干。</p>
<h2 id="性格决定命运"><a href="#性格决定命运" class="headerlink" title="性格决定命运"></a>性格决定命运</h2><blockquote>
<p><strong>错误角色：</strong></p>
<p>我只买得起4000元内100平的房子！哪怕住小点，住旧点…我也不愿意背着几十年的债度过我最美好的青年和中年时代、我更不愿意每天睁开眼就开始为了还房贷而奋斗。我不想短短的一辈子只是为了一堆只有七十年产权的砖瓦而奋斗。我只是一个平凡普通的人，我只想和老婆有一个快乐安逸的小家…但是“家”这个商品已经成了现在对我来说最昂贵的奢侈品。哈哈！</p>
<p><strong>kkndme：</strong></p>
<p>有一句话叫做怎么样付出就会怎么样的收获，看到许多人买房获利，另一些人坐不住了，心态变得鸡冻了，但是，当初人家咬牙买房的时候，另一些人还在追求所谓的生活品质。性格决定了命运</p>
</blockquote>
<h2 id="2012年不取消调控，还有房价维稳顺利换届考虑"><a href="#2012年不取消调控，还有房价维稳顺利换届考虑" class="headerlink" title="2012年不取消调控，还有房价维稳顺利换届考虑"></a>2012年不取消调控，还有房价维稳顺利换届考虑</h2><p>zf希望房价维稳，为2012年换届后上涨留出空间，所以调控政策不会轻易取消，但是在高通胀预期的背景下，能不能稳住房价是很考验zf智慧的。</p>
<p>换届后的老板不可能去接一个烂摊子，这是关键的地方</p>
<h2 id="洼地最终都会被填平，多数城市是早买胜于晚买"><a href="#洼地最终都会被填平，多数城市是早买胜于晚买" class="headerlink" title="洼地最终都会被填平，多数城市是早买胜于晚买"></a>洼地最终都会被填平，多数城市是早买胜于晚买</h2><p>目前传言与辟谣越来越频繁，如何透过重重的迷雾看到事情背后的真相。</p>
<p>这次调控zy盯的主要还是一线城市，从提高首付比例，直到监管预售款的准备推出，都是为了提高房地产进入门槛，踢出大量小资金投资客，让小开发商民营开发商知难而退，为国家队入场铺路，zy需要稳定一线城市房价，使2012年能够顺利换届，为换届后的上涨留足空间。有了国家队的后盾，zy无需因为调控导致部分小开发商资金链断掉而担心，相反这是zy希望看到的。</p>
<p>当然在政策和市场的博弈中，是否能够达到zy的预期，zy的心理也不一定完全有底，因为资金有他自己内在的规律。在打压房地产的同时，会带来农产品等生活必须品的价格全面上涨，这就需要xy做出一个权衡。因为填饱肚子的问题比房价的问题更重要。</p>
<p>多数二三线城市会在一线城市滞涨期间进行补涨，补足09年行情中远低于一线城市的涨幅。</p>
<p>作为二三线城市的刚需买房者，多数城市的情况都是早买胜于晚买</p>
<h2 id="西部"><a href="#西部" class="headerlink" title="西部"></a>西部</h2><blockquote>
<p><strong>mstsc_XP：</strong></p>
<p>楼主对成都的房子咋看？</p>
<p><strong>kkndme：</strong></p>
<p>在西部地区，重庆、西安、成都、昆明投资房产都不会有问题。西部的其他城市就要谨慎，不是因为房价不会涨，而是因为变现比较困难。</p>
<p>四川、重庆经济的高速发展是不容置疑的，但存在最大的隐忧就是三峡大坝对生态和环境的破坏根本无法预测。</p>
</blockquote>
<h2 id="短期波动属于正常现象，需要关注的是长期趋势"><a href="#短期波动属于正常现象，需要关注的是长期趋势" class="headerlink" title="短期波动属于正常现象，需要关注的是长期趋势"></a>短期波动属于正常现象，需要关注的是长期趋势</h2><blockquote>
<p>mobster6789</p>
<p>楼主的一番讲解真如拨云见日！</p>
<p>但是本人认为，在目前基本面疲软的情况下，成交会进一步萎缩，房价在短期内也还有小规模下调的趋势，请楼主评议。</p>
<p>kkndme</p>
<p>短期的波动是再正常不过的事情，把握政策可以把握趋势，但很难做到准确的逃顶与抄底</p>
</blockquote>
<h2 id="领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运"><a href="#领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运" class="headerlink" title="领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运"></a>领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运</h2><p>领导人的智慧和才干决定了国家的命运，统帅的智慧和才干决定了军队的命运，而个人的智慧和才干决定了个人的命运。</p>
<p>精英社会相对于法制社会存在更多的不稳定性，更崇尚个人能力、才干与职业精神，如果刘备只懂得眼泪是不可能得到三分天下的。</p>
<p>精英社会的根本就是以人治国，就是要承认人与人之间的差别。</p>
<p>百年战争，法国拥有全世界最强大的重骑士军团，可是由于统帅的无能，被英国长弓兵打得落花流水。</p>
<p>而耶路撒冷王国的鲍德温四世，一个年轻的麻风病人，率领几百个骑士打得萨拉丁三万马木流克骑兵溃不成军，几乎全军覆没。</p>
<p>一个人很可能决定一个国家的命运。</p>
<p>也许任何一个国家，甚至中国历史上任何一个朝代都没有象现在那样金权至上。</p>
<p>无论中国的儒家思想还是西方的骑士精神，都告诉人们，人总是要有所追求的，不能仅仅盯着钱。</p>
<p>秦时，有个老头叫郦食其，70多岁了还跑到刘邦大营参与革命，当然最后下场比较凄惨，被齐王煮了。郦老头本事很大，只身到齐国说服齐王归降了汉王刘邦。韩信害怕郦老头功劳太高，超过自己，于是很不仗义，在郦老头人还在齐国的时候，带兵攻打了齐国。齐王很愤怒，后果很严重，把郦老头放在锅里煮了。郦老头的才能出众，本想做一番事业，可惜没有算到人类本性丑恶的一面。</p>
<p>当然韩信也没有好下场，这个军事上的天才，政治上的白痴，本来做了齐王，汉、楚、齐三足鼎立，结果向刘邦缴了枪，直接兔死狗烹了。</p>
<p>另一个喜欢没事找事的老头叫姚广孝，是个和尚，法号道衍。虽是和尚，但既无和尚的慈悲心肠，又无和尚的遁世清修，这个老头专门搞权谋，不玩阳谋专玩阴谋，背靠朱棣这颗大树，不图名不图利，专搞武装夺取政权。</p>
<p>姚老头的头脑比郦老头高得多，不但是牛叉的阴谋家，也是牛叉的政治家，此人协助朱棣夺权后，深味帝王权术的精髓。不立家室，不营产业，把一脑袋阴谋全都转向文化事业，跟大才子解缙纂修《永乐大典》，是为数不多投身权谋得了好死的大师级人物</p>
<p>另一个喜欢没事找事的老头叫姚广孝，是个和尚，法号道衍。虽是和尚，但既无和尚的慈悲心肠，又无和尚的遁世清修，这个老头专门搞权谋，不玩阳谋专玩阴谋，背靠朱棣这颗大树，不图名不图利，专搞武装夺取政权。</p>
<p>姚老头的头脑比郦老头高得多，不但是牛叉的阴谋家，也是牛叉的政治家，此人协助朱棣夺权后，深味帝王权术的精髓。不立家室，不营产业，把一脑袋阴谋全都转向文化事业，跟大才子解缙纂修《永乐大典》，是为数不多投身权谋得了好死的大师级人物</p>
<blockquote>
<p><strong>打工不易：</strong></p>
<p>我个人认为：个人的智慧来自对大方向的把握，否则再有才干也难有作为。</p>
<p>单位司机，工厂工人即便技术再好，工资也高不到哪去。</p>
<p><strong>kkndme：</strong></p>
<p>聪明智慧决定了人的眼界，有远见的人一定会未雨绸缪。刘邦身为区区亭长可以得天下，朱元璋一个穷和尚驱除鞑虏重建朝廷，一个司机未尝不能当富商，一个小姐也可能当局长</p>
</blockquote>
<h2 id="对于具备投资属性的商品，供求关系是指货币与商品之间的关系"><a href="#对于具备投资属性的商品，供求关系是指货币与商品之间的关系" class="headerlink" title="对于具备投资属性的商品，供求关系是指货币与商品之间的关系"></a>对于具备投资属性的商品，供求关系是指货币与商品之间的关系</h2><p>关于供求关系还是有必要解释一下的</p>
<p>一提起供求关系，马上口水就来了，什么空置率啦，闲置率啦，空置我心啦，电表显示6000万套房没人住啦。</p>
<p>实际上供求关系跟空置率和闲置率完全没有关系。</p>
<p>对于具备投资属性的商品，供求关系是指货币与商品之间的关系。当货币量大于商品供应量时，商品价格就会上涨，即使人为打压也是短期行为，这是铁律。</p>
<h2 id="早买的风险小于晚买"><a href="#早买的风险小于晚买" class="headerlink" title="早买的风险小于晚买"></a>早买的风险小于晚买</h2><blockquote>
<p><strong>fantabulouski：</strong></p>
<p>楼主给点意见吧，想在上海市内环内买套二手房，现在出手合适嘛？</p>
<p>等等的话可能跌点么？有没有什么风险吗？</p>
<p>多谢！ 因为首套房可以贷款七成，多谢！！</p>
<p><strong>kkndme：</strong></p>
<p>如果手头有钱，又是自住，到不一定非要考虑抄在最底部。</p>
<p>因为钱要贬值是毋庸置疑的，房价在一段较长时期上涨的趋势也是毋庸置疑的。</p>
<p>但短期，波段性的抄底和逃顶是很难把握的，尤其是自住，考虑太多实在没有意义。</p>
<p>持币要冒房价持续上涨的风险，买房可能会面临短暂小幅下跌，哪个风险更大，需要自己认真考虑。</p>
<p>一线城市如上海一定会有短期的滞涨甚至小幅的下跌，当新房的价格低于周边二手房价，并且成交量开始逐渐攀升就是买房的时机。 <br>我反复强调，这次调控期却是二三线城市的补涨期，对于一线城市正好可以仔细的挑选好房，这种机会在房价上升期是难以遇到的。</p>
<p><strong>fantabulouski：</strong></p>
<p>楼主再问一个问题，看看这一两天调控的信息满天飞，上海房产税的消息也到处都是，银行在不断的紧缩，感觉这次调控可是不同以往，是外松内紧啊，至少到年底前看不到放松的迹象，还什么情况下才可能会放松呢？难道要等到KQ 接班不成？</p>
<p><strong>kkndme：</strong></p>
<p>可以肯定的是首付款的比例是不会轻易放松的。房产税的推出就没那么容易了。</p>
<p>上海和北京城区的二手房价有点幅度的下跌几乎不可能，很长一段时间都会滞涨或者维持小幅度的上涨。</p>
<p>手里资金多的人全款买房的比例大幅提高，精英阶层的购买力基本能够维持一线城市的正常的成交量（09年下半年的高成交量zy认为是反常的，已经影响了金融秩序，是zy不愿意看到的。）</p>
<p>现在的状况是，zy对调控后一线城市的房价增幅及成交量基本是满意的。</p>
</blockquote>
<h2 id="小开发商的房子能不能买？"><a href="#小开发商的房子能不能买？" class="headerlink" title="小开发商的房子能不能买？"></a>小开发商的房子能不能买？</h2><blockquote>
<p><strong>mstsc_XP：</strong></p>
<p>楼主的分析让我明白了很多之前误解的东西，所以自己错过了买房时机也是有一定道理的O(∩_∩)O哈哈~</p>
<p>比如空置率、供求关系、当地房价和当地平均收入关系等的解释，非常感谢</p>
<p>想再请教一下，zy要挤出小开发商的话，到2012年，这些小开发商修的房子会不会烂尾?因为被挤出了，也不好好修了，或者干脆跑了…..因为我买的房子不是华润、中海这些有实力的开发商的楼….</p>
<p><strong>kkndme：</strong></p>
<p>如果不是经济危机，基本不会出现这种情况，当然排除个别不诚信的开发商</p>
</blockquote>
<h2 id="大兴土木搞建设的城市，房价都底不了"><a href="#大兴土木搞建设的城市，房价都底不了" class="headerlink" title="大兴土木搞建设的城市，房价都底不了"></a>大兴土木搞建设的城市，房价都底不了</h2><blockquote>
<p><strong>黛眉轻：</strong></p>
<p>LZ厉害，分析得很透彻。请教LZ，对于目前的合肥房价怎么看呢？做为皖江城市带的中心城市，合肥的房价目前中心城区已经到了7000，也有了超过万元的所谓豪宅。和武汉长沙比起来，经济上感觉合肥还是差的，可是房价却已经不差了。</p>
<p><strong>kkndme：</strong></p>
<p>凡是大兴土木积极拆迁的城市，房价都低不了，城市发展规划的资金都要得益于dfzf卖地。这是zf主导投资经济模式的必然结果。这也是二三线城市在这次调控中补涨的根本原因</p>
</blockquote>
<h2 id="北京老式砖混板楼的最终命运？"><a href="#北京老式砖混板楼的最终命运？" class="headerlink" title="北京老式砖混板楼的最终命运？"></a>北京老式砖混板楼的最终命运？</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>楼主我想请教一下：就是北京二三环甚至四环有不计其数的老式砖混板楼，年代分布从六七十年代到八十年代初的都有，这些房子都是北京城市发展的产物，也是北京留给土著们的天然福利，但是现在有个问题是它们的房龄已经超过30年奔着40,50去了，这些房子的命运如何呢？拆迁吗？在原址上盖回迁房或者重新规划把里面的居民赶到周围郊区？</p>
<p>因为随着政策的收紧，这类房子越来越不容易流通了，银行不给贷款，升值空间也逐渐放缓，但是地段都非常好。是不是随着房龄的增加，这类房子只剩下保值功能而最终无法流通了呢？</p>
<p>这批房子最终会大规模寿终正寝，不知道dfzf会怎么处置？很想听听你的看法。</p>
<p><strong>kkndme：</strong></p>
<p>这个情况比较复杂，因为大多数老房子是各大部委的单位房。原则还是谁的孩子谁包干，谁的孩子谁认领。所以说买房子买到公务员小区最保险，即使房子旧了也不会没人管，也不会存在物业跑路、小区沦为贫民窟的问题，即使老房子拆了单位盖了高楼，保证会在原址上还你一套。</p>
<p>至于说单位不行了或者单位不存在了的老公房也是有的，早晚会走拆迁的路子，那就没有原址回迁那么幸运了，肯定是搬到远郊区县，但补偿条件肯定不差，离开城中心到郊区就成了富翁。</p>
<p>位置决定了价值。北京郊区农民房拆迁补偿两万一平就算高的，但是城中心房屋拆迁，补偿款那都是10万一平起步的。愿意一掷千金全款买城中心老房子的人只会多不会少，说白了就是：哥买的不是房子，是位置。</p>
<p><strong>welldayzwb：</strong></p>
<p>现在貌似 还没有听说10万的，反而是听说政府给你的补偿比市价二手房价格还低不少，如果没有拼死斗争的话</p>
<p>前段看新闻说是北京要控制拆迁成本，估计就是为了这一步压缩成本来着</p>
</blockquote>
<h2 id="把房买在zf边，差不了"><a href="#把房买在zf边，差不了" class="headerlink" title="把房买在zf边，差不了"></a>把房买在zf边，差不了</h2><blockquote>
<p><strong>yy45678：</strong></p>
<p>楼主您好，想请教下，最近想买房，三线城市老住宅区（我们那里最早的商品房90年建的）附近一幢私房，上下二层半，120平一层,带地皮93年的房子，所有证件齐全，不好的是建在一个山坡上不能进车子。售价一起30W，另是城市新区，新市政府边，小区房。现在还很荒，什么都不方便,但环境很好。请问是买哪一个房子好？我们那里平均楼价2000左右。</p>
<p><strong>kkndme：</strong></p>
<p>2000一平的地方，好像算不上三线城市，大概应该是地级市或者县级市的房价。</p>
<p>一般来说房子买在市政府边上怎么也不会有问题，只要确定新市政府已经搬到你说的那个地方，该地的升值空间肯定是有的。但是如果仅仅是zf规划就要谨慎了，因为规划并不等于真的搬迁。</p>
</blockquote>
<h2 id="天子脚下：二手老房买得好，拆迁补偿少不了"><a href="#天子脚下：二手老房买得好，拆迁补偿少不了" class="headerlink" title="天子脚下：二手老房买得好，拆迁补偿少不了"></a>天子脚下：二手老房买得好，拆迁补偿少不了</h2><p>旅行中，上个网是很不容易的事情。</p>
<p>关于拆迁补偿的事，巨大的利益驱使，那真是鲜血淋淋的。所以二手老房买在哪里很重要。银行的房、zf的房、各大部位的房，有上市交易的，买下来肯定不会吃亏。</p>
<p>存在风险的就是弱势群体聚居区。但是北京，毕竟天子脚下，不能搞得太僵，最终该补的还是会补到位，至于外省就很不好说了</p>
<h2 id="3万入手北京四环，你也是幸运的"><a href="#3万入手北京四环，你也是幸运的" class="headerlink" title="3万入手北京四环，你也是幸运的"></a>3万入手北京四环，你也是幸运的</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>北京七八十年代的砖混老房有体制内的，也有体制外的。现在公房上市流通，好多央产房也易主了，也许过个十年二十年的这批房子的产权证上早已换了一波又一波人。除非像楼主所说的昆明那种大型的省市公务员小区，房子新，户型好，环境和地理位置都不错，一般公务员没个20年轻易不会卖。</p>
<p>北京的这些老楼，不管谁是房主，肯定值钱，房子不值钱，位置还值钱呢。</p>
<p>至于这些房子使用寿命到了以后怎么处置，谁也说不清，能不能回迁，要看dfzf和规划局的利益。比如眼下金融街西侧月坛的老房子就要被集体拆除，连中学都要搬迁，这些西城人很有可能被撵到昌平回龙观西去，那边已经在建大批安置房了。</p>
<p>所以说，这些老房子不管是体制内的还是体制外的，命运如何不在自己手里。即使体制内的比较不错的老小区（比如三里河的建设部小区），如果牵涉到地方的利益，肯定也是毫不犹豫全部拆除，除非那里面住着实权人物当官的不让拆。这个时候就要看这些被拆迁户的谈判能力了，谈判能力强的，当个钉子户，当然是要得越多越好。</p>
<p>我以前买房的时候，也想了这些，不过最后还是买了新楼。现在因为地皮的价值，北京新老楼的房价差距不大，这个在别的城市是不可思议的。</p>
<p>很感谢楼主发这么一个帖子，版主还给了个绿脸，要不然可能就错过拜读的机会了</p>
<p>其实有些问题平时自己也在思考，比如GDP为什么保八，房价和滥发纸币等等，但是关于炒房和房租这一块，思考的并不多，而楼主的帖子比较有条理和逻辑的分析了这些方面，真的是很感谢，我甚至不用自己写分析，只要把楼主的帖子稍微整理，就是一篇很不错的分析资料了。</p>
<p>关于zf收紧口子，抬高小老百姓炒房门槛这一块，天涯房观有几个高人和楼主的看法一致。我细细想了一下，这个提高首付到50%的政策，确实会成为长期政策保持下去，而其实即使没有这个政策，稳健型的小老百姓也会掂量自己的钱袋买房。没有谁想断供，因为刚需需要房子。</p>
<p>至于以后十年甚至更长时间，房价仍然会涨。因为城市的发展离不开勤劳的人民，zf在不断的修建地铁画大饼，就是为了土地能卖个好价钱，只有不断的卖地搞铁公鸡，才会有gdp，才会有政绩。统治阶级带着他的各种利益集团一起玩，而老百姓以后可玩之物会越来越少，只能老老实实的干活挣钱。</p>
<p>由于家人的优柔寡断和缺乏对北京房地产现实的认识，我直到今年初才在四环买了第一套房，3w多的均价，让家里背负了100多w的债务。我错过了07年1w的机会，和09年1w+的机会。世上没有后悔药，历史也不会重演，那些07年买房和09年买房的人是幸运的。我现在努力攒钱挣钱的同时，最希望看到的事情居然是房价尽快远离我的成本区，我知道没有买房的同学一定会抨击我这种想法，但是现实就是这样可笑，一方面希望房价能降，这样可以把老人接到身边，另一方面又希望房价涨，这样自己在还贷的时候心里稍微能好受点。呵呵，不知道自己这样是不是活得太累。</p>
<p>不管怎么说，希望大家都能住上自己称心如意的房子，这几年来，zf真把我们这些人折腾的够呛。我和家人都是传说中的体制内，体制内确实有福利，可惜要想自己的财富不缩水，还得靠自己。</p>
</blockquote>
<h2 id="君为贵，商人、技工次之，农民为轻，打工人为底"><a href="#君为贵，商人、技工次之，农民为轻，打工人为底" class="headerlink" title="君为贵，商人、技工次之，农民为轻，打工人为底"></a>君为贵，商人、技工次之，农民为轻，打工人为底</h2><blockquote>
<p><strong>傻子也疯狂：</strong></p>
<p>今天看到新闻<br>什么房产市场回暖啊<br>温州炒房团又出江湖了<br>成交均价上涨啊</p>
<p>请问这个是真的吗，房价会在短时间涨上去吗<br>如果是真的，那中央调控有什么用，在没有下降的基础上再涨10%<br>不是自己打自己嘴巴吗</p>
<p>很想听听楼主怎么看待这个事情。</p>
<p><strong>kkndme：</strong></p>
<p>维持在正常成交量，保持一个缓步上涨的趋势，是zy最愿意看到的。因为zy很清楚，除非体制上有大动作，否则让房价下跌只是唱给人听的口号。体制是不能动摇的根本，是国家稳定的基础，高房价是体制造成的必然结果。zy很清楚，最好的方式就是以一个平缓的速度增长。但是决策者是不是有此能力控制房价缓慢上涨，这是值得仔细研究的。</p>
<p>任何一个朝代，即使是我们在电影里常看到的奸佞当权，往往政策的初衷都是好的，但是执行效果却常常适得其反，领袖的智慧与执政能力对国家的命运起着至关重要的作用。</p>
<p>明朝朱厚照时期有个太监刘瑾，权势一手遮天，是个典型的奸佞。但他其实是很想做点事情的。</p>
<p>明朝开国时，朱元璋搞了个戍边屯田，相当于现在的军垦，因为军队自给自足，给国家省了大笔的银子。但是到了后来，军官们都变成了大地主，霸占了士兵的土地，把士兵当作佃农，依靠盘剥士兵来实现让一部分人先富起来的号召。这是与杀良冒功、贪吃空饷并列齐名的第三大快速发家致富手段。</p>
<p>我们说了刘瑾是个有雄心壮志，很想做点事业的高责任心人士。对于军官霸占士兵田产导致士气低下这件事很看不惯，很不满意。决定坚决打击这种行为。于是下令地方zf</p>
<p>清理军官霸占田产的问题。</p>
<p>军官霸占的田产不仅仅是士兵的，更多的是当地老百姓的。</p>
<p>按理说，这应该是个老百姓叫好的政策，而事实上这是老百姓头上的噩梦。</p>
<p>执行人是谁？地方官。</p>
<p>地方官执行的时候就实在为难了，军官老爷手里都是握着重兵的，你上门还没开口，兵大爷的刀已经架在脖子上了。可是刘瑾刘老板下达命令的同时，还是要下达任务指标的，没收的田产有任务指标，以前军官老爷占有的田都不交税，既然清理田产就要交税，交税也有任务指标。</p>
</blockquote>
<p>有些地方官比较聪明，不敢找军官大爷收，就摊派给了老百姓，结果老百姓又交田又交税，自然是连活路都没了。有些地方官脑子不清醒，真的跑去找军官老爷要田要税，结果造成军官勾结宁王造了反，最后刘瑾自己的脑袋也保不住了。</p>
<blockquote>
<p>历朝历代，统治者代表的都是地主阶级的利益。历朝历代的改革都只是为了缓和底层群众与地主阶级的矛盾，防止因为过激发生极端群体性事件。</p>
<p>调控也是为了缓和矛盾，要温水煮青蛙，而不要一把火把青蛙烧死。</p>
<p>关于自己打自己嘴巴的事，那是太多了，自古以来，统治者也从来不怕自己打自己嘴巴。古人就总结过，只准州官放火，不准百姓点灯。</p>
<p>以前的科举制度与现在的公务员考试制度基本目的都是相同的，让全天下的优秀的和不优秀但有出身的知识分子依附于官，这样就有了绝对的话语权。无法进入体制内的知识分子，有商业头脑和技术专长的人员，就相当于过去的商人、小作坊主，尽管也许还算富裕，但是没有任何地位，任人支配。要是没有一技之长，又不能经商，就基本上在社会的最底层很难翻身，相当于过去城市里的贩夫走卒，甚至无片瓦立锥，糊口都是困难，地位和稳定性反而远远不如自给自足，拥有宅基地的农民</p>
<p><strong>中年不惑吗：</strong></p>
<p>说到底空空太幼稚了 当年拖拉机之夜太学生怎么也想不到机关枪和拖拉机真的会招呼到自己身上 这和他们从小接受到的教育不一样 呀 主流宣传中party妈妈都是慈祥的温柔的全心全意为p民服务的</p>
<p>有皇帝大力支持的王安石变法到了地方法令也大变味 如今虎温的威权要远远小于当年的宋神宗和王安石 而且统治阶层从上到下的改革从来是为了巩固统治地位 至于p民收益那从来都是附属作用</p>
<p><strong>kkndme：</strong></p>
<p>这就是中西方的不同，西方的拖拉机是对外的，中国的拖拉机从来对的都是p民，对外基本比较忪。所以才有元和清，明明是外族入侵灭了国，还要把蒙古人和女真人一起拉进来统一叫中华民族，居然认为中华民族很强大，元朝时一直打到亚得里亚海。也不管蒙古人跟中华的两河文明有关系没有。</p>
</blockquote>
<h2 id="10年的调控和08年调控的区别、带来的影响、机会"><a href="#10年的调控和08年调控的区别、带来的影响、机会" class="headerlink" title="10年的调控和08年调控的区别、带来的影响、机会"></a>10年的调控和08年调控的区别、带来的影响、机会</h2><p>这次调控与08年调控后的结果是有所区别的。08年调控的结果是一线城市的暴涨；而2010年调控的结果是房价以二三线城市为主的全面上涨。不但是二三线城市，高房价甚至已经传到至四线及以下城市。</p>
<p>在二三线以下城市，无房户的需求其实并不大，真正的刚需来自改善性住房。城市升级使人们开始不满足过去老旧式住房的居住环境，开始追求大盘大开放商的品质住宅。房价也由此迎来全面上涨。这种全面上涨，不能理解为全面泡沫，而是有基础存在的。不能理解为全国炒房。特别是四线及以下城市尽管新盘价格高涨，老旧住宅却乏人问津，县级市二手房变现也比较困难。在2010年的调控的大背景下，却神奇的出现了二三线以下城市的刚需大量释放现象，不得不令人叹为观止。这神秘的幕后推手其实就是资金的规律。</p>
<p>对于在2010年初布局二三线城市的房开商和有远见的投资者，在这次调控中，无疑是受益者。</p>
<p>一线城市，这次调控给刚需买房者一个最好的入市良机，但是能够抓得住的只是少数。</p>
<h2 id="历史总是惊人的相似"><a href="#历史总是惊人的相似" class="headerlink" title="历史总是惊人的相似"></a>历史总是惊人的相似</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>其实，几千年来，唱的都是同样的戏，只不过台上的演员变换而已。</p>
<p><strong>kkndme：</strong></p>
<p>赞赏这一句，呵呵，历史规律是不变的，变化的只是时间、地点、人物、事件。</p>
<p>城头变换大王旗。</p>
<p><strong>tjOOSAN：</strong></p>
<p>历史规律是不变！但他妈世界变了！~~ 中国采用资本主义制度了</p>
<p>还只参考中国历史？</p>
<p><strong>kkndme：</strong></p>
<p>你知道什么叫资本主义制度吗？</p>
<p>首先基础是三权分立。</p>
<p>早在1748年，孟德斯鸠男爵发表了伟大的划时代的巨著“论法的精神”明确提出了三权分立。奠定了资本主义制度的基础。三权分立制度就是国家的立法、行政、司法三权分别由三个机关独立行使，并相互制衡的制度。讲的是法律精神，讲得是私人财产神圣不可侵犯。</p>
<p>而作为一个人治而非法制国家，怎么能说是资本主义呢？</p>
<p>建议个别（tjOOSAN）不读书，不研究，不了解中西方历史，不懂经济，对社会制度基本的理解基本是个白痴的同志，就不要乱发表议论了，惹人笑话。</p>
</blockquote>
<p>无论是中国还是西方历史对现在都是很有借鉴意义的。这就使毛说过的“古为今用，洋为中用”，毛建的武装斗争及建国思想其实很大程度来自于朱元璋。</p>
<p>古代君主统治国家征服世界靠战争武器，现在则靠金融武器。</p>
<p>西方，我们所熟悉的具备最纯正贵族血统的哈布斯堡家族，曾经的德意志王国和神圣罗马帝国的统治者，家族成员曾经统治过欧洲诸国：包括波希米亚王国 、匈牙利王国 、克罗地亚及斯洛文尼亚王国、伦巴第及威尼斯王国 、奥地利皇室领地 、萨尔茨堡公国 、塞尔维亚及塔米斯-巴纳特公国等等无数欧洲国家。</p>
<p>而现在，哈布斯堡家族控制着华尔街，继而通过华尔街控制着全球的经济。</p>
<p>历史是在继承的前提下发展的，特别是在西方，现在几乎每一个显赫的家族都能追根溯源。因为尽管西方也发生大革命，但是象文革一样彻底否定历史是完全不可思议的。</p>
<p>我们有点英雄情结的人听到最多的西方中世纪十字军三大骑士团：圣殿骑士团、条顿骑士图案、医院骑士团；直到现在仍有两大骑士团存在。条顿骑士团总部现在还在德国，专门从事慈善事业。医院骑士团后来改名为马耳他骑士团，也就是现在的马耳他，世博会还来上海参展。只有圣殿骑士团灰飞烟灭，但现在仍有大量的修士组织自称为圣殿骑士团的继承人。</p>
<p>完全不懂历史，就等于完全不懂得社会。</p>
<h2 id="关于房贷"><a href="#关于房贷" class="headerlink" title="关于房贷"></a>关于房贷</h2><blockquote>
<p><strong>四环四环：</strong></p>
<p>同意LZ。<br>刚刚父母帮忙首付、自己还贷，在北五环边买了个小房。<br>判断依据非常简单：一个是国家政策和我等屁民生活是两岔儿的，既然移民无望，就赶快站队；一个是力所能及、负担得起。</p>
<p>07年底和09年底都错过了机会，也是当时条件不允许，一次是自己嫌弃燕郊太远；一次是嫌弃通县太远。完后工作逐渐稳定，一狠心安了家，剩下的就是往体制外金字塔中层挤吧。</p>
<p>LZ所说，正是我说不清楚、但能判断大概的那些事儿。<br>哈哈。</p>
<p>请教LZ：</p>
<p>眼下商业贷款贷款46万。<br>分20年还，月供3066<br>分30年还，月供2562</p>
<p>朋友劝我贷款时间越长月供越少越好。<br>直觉判断我觉得也是这样。<br>有科学依据么？</p>
<p><strong>kkndme：</strong></p>
<p>你的朋友考虑是有道理的。<br>如果不考虑通货膨胀，当然是利息越少越好，20年还的利息要少于30年还的利息。<br>但是因为通货膨胀的因素，我国是高增长高通胀的国家，每年的通胀率远远大于实际公布的数字，更远远高于贷款利息，所以贷款时间越长越好。<br>至于月供是否越少越好，完全取决于个人的承受能力，有条件当然买大房子，宁肯月供多一点。但是条件不够就买小的，量力而行。</p>
<p><strong>四环四环：</strong></p>
<p>谢谢楼主指点。</p>
<p>假设通胀率有一个固定值（当然实际这是没有的，它也是个取决于经济规律和国家意志的不确定因素）、贷款利息有一个值。<br>完后不同的贷款年限。<br>就能估算出两个值此消彼长。</p>
<p>需要选择判断的是，通胀率这个值的数字。<br>但通过对国际意志不确定因素极端情况的估算，预计这个值。</p>
<p>完后把这变成一个数学题。</p>
<p>是这意思么？</p>
<p>那不用算了，按常识，知道该怎么选了。</p>
<p><strong>kkndme：</strong></p>
<p>银行贷款的年限越高，利息支出越高，但不会高过通胀。你能贷30年就贷30年，这是你年轻的优势。年纪大点的就只能贷25年，甚至20年了。</p>
<p>所以说40岁买房的人很不靠谱，首先40岁的人不一定有钱，反而错过了最敢买房的黄金年龄。其次是40岁贷款年限就短了好多，相当于月供压力更大了。</p>
</blockquote>
<h2 id="买卖商品房会逐渐变成富人的游戏"><a href="#买卖商品房会逐渐变成富人的游戏" class="headerlink" title="买卖商品房会逐渐变成富人的游戏"></a>买卖商品房会逐渐变成富人的游戏</h2><p>以后，商品房本来就变成了富人间的游戏，普通人将不能卖进参与的门槛。</p>
<p>到多数人真的买不起房时也就安心了，也不用关心房价的涨跌了。</p>
<p>但是现在，房价还没有到那个高度，很多人还觉得有希望，所以对房价的涨跌才会特别关注。这个时期应该就是普通人最后买房的机会。错过了，将不会再有。</p>
<h2 id="zf还是更在意农民问题"><a href="#zf还是更在意农民问题" class="headerlink" title="zf还是更在意农民问题"></a>zf还是更在意农民问题</h2><blockquote>
<p><strong>肖肖19850706：</strong></p>
<p>楼主虽然有很多观点写的很有道理，但是对于历史这块，并不太正确</p>
<p>引用一段楼主的话：<br>——————<br>自古以来，民生问题的底线就是不要出现陈胜吴广的极端情况。所以zf更在意的是农民问题。<br>因为历史的改朝换代都是大饥荒引起的，无论是汉末、唐末、隋末、还是明末。农产品价格上涨的对zf的震动要远远大于房价的上涨。<br>农民具备最原始的力量，而他们关心的并不是三线以上城市的房价，而是能否填饱肚子。<br>而关心自己能否拥有一套产权房的都市白领，除了呻吟一下意外，几乎是没有什么有效反抗的可能的。<br>——————</p>
<p>其实在当今政权建立之前，还有一个政权，叫做中华民国<br>这个政权是由民主革命带来的<br>他们所举的旗帜是资产阶级革命，所建立的政权是资本主义社会<br>为什么会失败？<br>这是一个值得思考的问题<br>让一个经历了5000年封建社会的国家经过一次革命就达到资本主义社会的境界<br>没有工业革命的基础<br>没有原始的积累<br>有的只是借鉴西方<br>想先变制度再进行调整，结果固然是失败<br>于是“农民起义”卷土重来，我想大家肯定明白“农民”所指的是什么<br>于是又了现在的这个政权<br>由工人阶级和资产阶级去推翻帝制<br>再由农民阶级把土地抢回来，最终回到封建政权来压迫资产阶级<br>他们最怕的还是农民么？<br>显然不再是了<br>他们最怕的正是资产阶级<br>其次就是你说的那些<br>“关心自己能否拥有一套产权房，除了呻吟一下意外，几乎是没有什么有效反抗的可能的都市白领”<br>攻占巴士底狱的不是农民<br>正是这些“几乎没有什么有效反抗可能的都市白领”<br>是工人阶级结束了地球上长达上千年的封建统治<br>而改革开放，市场经济的发展，给了这一切充足的物质基础<br>社会的转化过程有两种<br>一种是和平演变<br>一种就是革命</p>
<p>现在所存在的问题，不是他们更怕谁<br>而是他们选择面对哪种演变方式</p>
<p><strong>kkndme：</strong></p>
<p>最可怕的不是农民而是失去土地的农民。<br>为什么说新民主主义革命是工人阶级领导的？<br>那时的工人阶级是什么？就是失去土地的农民和破产的手工业者，除了体力一无所有，所以他们才具备脑袋掖在裤腰带上，为了抢土地而玩命的动力。解放战争时期，我军的宣传就是：“同志们，国民党要把分给你们的土地抢走，你们说怎么办？”于是广大失去土地的农民兄弟不干了，玩命了。<br>工农红军一四方面军胜利会师，在选择南下和北上发生了分歧，真的为了北上抗日吗？1935年抗日战争还没有打响，日本人在东北而不是西北。北上抗日的说法实在有些牵强。<br>我想真正的原因还是群众基础。<br>近几年多次在西南地区的乡村进行田野调查，发现一个问题：解放前，即使如贵州山区的偏僻乡村，农民自给自足吃饱肚子是完全没有问题的，更别说富庶的四川平原。<br>那时参加红军要有不要脑袋的玩命精神，对于多数能够填饱肚子的农民来说，主动参加革命显然是不现实的。红军在西南地区完全没有群众基础，战斗中的减员得不到有效的补充，所以人才会越打越少。<br>而西北地区完全不同，自然条件恶劣，农村耕地很少，存在大量食不果腹，无地可种的农民。李自成起义也是从陕西发起的，可以说具备了随时发动武装暴动的群众基础。所以毛选择了北上的正确路线。而张同志南下凄惨的下场印证了毛的正确判断。<br>北上延安的另一个重要原因是获得苏联的支持，没有强大的后援是无法取得决定性胜利的。</p>
<p>一旦农民失去了土地，而又没有去处，那是相当可怕的，所以农民工就业问题是zy最为关注的。甚至提出如何让农民工在城镇买房子置业，处理好农民问题，是社会稳定的重中之重。</p>
<p>将来，有地可耕的农民将会成为都市中的底层群众羡慕的对象，农民有地有住宅有粮食。进可以在城市打工，有聪明的甚至通过经商迈进富人阶层，退可以回乡种田，虽然现钱不多，但是吃穿住行都是没有问题的。</p>
<p>而真正一无所有的将是大量在都市中沦为贫困的人群。在打拼挣扎的打工仔，如果没有能力购置房产，也没有得到向上爬的机会，在都市立足将变得困难，而又毫无退路。</p>
</blockquote>
<h2 id="治国需要用贪官、反贪官"><a href="#治国需要用贪官、反贪官" class="headerlink" title="治国需要用贪官、反贪官"></a>治国需要用贪官、反贪官</h2><p>讲个故事，可能这个故事很多人都看过，并且曾经多次被转帖：</p>
<p>宇文泰是北周开国的奠基者。当他模仿曹操，作北魏的丞相而“挟天子令诸侯”之时，遇到了可与诸葛亮和王猛齐名的苏绰。宇文泰向苏绰讨教治国之道，二人密谈 三日三夜。</p>
<p>宇文泰问：“国何以立？”</p>
<p>苏绰答：“具官。”</p>
<p>宇文泰问：“如何具官？”</p>
<p>苏绰答：“用贪官，反贪官。 ”</p>
<p>宇文泰不解的问：“为什么要用贪官？”</p>
<p>苏绰答：“你要想叫别人为你卖命，就必须给人家好处。而你又没有那么多钱给他们，那就给他权，叫他用手中的权去搜刮民脂民膏，他不就得到好处了吗？”</p>
<p>宇文泰问：“贪官用我给的权得到了好处，又会给我带来什么好处？”</p>
<p>苏绰答：“因为他能得到好处是因为你给的权，所以，他为了保住自己的好处就必须维护你的权。那么，你的统治不就牢固了吗。你要知道皇帝人人想坐，如果没有贪官维护你的政权，那么你还怎么巩固统治？”</p>
<p>宇文泰恍然大悟，接着不解的问道：“既然用了贪官，为什么还要反呢？”</p>
<p>苏绰答：“这就是权术的精髓所在。要用贪官，就必须反贪官。只有这样才能欺骗民众，才能巩固政权。”宇文泰闻听此语大惑，兴奋不已的说：“爱卿快说说其中的奥秘。”</p>
<p>苏绰答：“这有两个好处：其一、天下哪有不贪的官？官不怕贪，怕的是不听你的话。以反贪官为名，消除不听你话的贪官，保留听你话的贪官。这样既可以消除异己，巩固你的权力，又可以得到人民对你的拥戴。其二、官吏只要贪墨，他的把柄就在你的手中。他敢背叛你，你就以贪墨为借口灭了他。贪官怕你灭了他，就只有乖乖听你的话。所以，‘反贪官 ’是你用来驾御贪官的法宝。如果你不用贪官，你就失去了‘反贪官’这个法宝，那么你还怎么驾御官吏？如果人人皆是清官，深得人民拥戴，他不听话，你没有借口除掉他；即使硬去除掉，也会引来民情骚动。所以必须用贪官，你才可以清理官僚队伍，使其成为清一色的拥护你的人。”</p>
<p>他又对宇文泰说：“还有呢？”</p>
<p>宇文泰瞪圆了眼问： “还有什么？”</p>
<p>苏绰答：“如果你用贪官而招惹民怨怎么办？”宇文泰一惊，这却没有想到，便问：“ 有何妙计可除此患？”</p>
<p>苏绰答：“祭起反贪大旗，加大宣传力度，证明你心系黎民。让民众误认为你是好的，而不好的是那些官吏，把责任都推到这些他们的身上，千万不要让民众认为你是任用贪官的元凶。你必须叫民众认为，你是好的。社会出现这么多问题，不是你不想搞好，而是下面的官吏不好好执行</p>
<h2 id="二线城市典型代表"><a href="#二线城市典型代表" class="headerlink" title="二线城市典型代表"></a>二线城市典型代表</h2><blockquote>
<p><strong>klid：</strong></p>
<p>LZ 成都属于您口中的二三线城市么？<br>那么这次属于补涨阶段？</p>
<p><strong>kkndme：</strong></p>
<p>成都、重庆、西安、昆明、武汉都是二三线城市的典型代表。</p>
</blockquote>
<h2 id="关于商铺和住宅投资"><a href="#关于商铺和住宅投资" class="headerlink" title="关于商铺和住宅投资"></a>关于商铺和住宅投资</h2><blockquote>
<p><strong>马甲马甲_马马甲：</strong></p>
<p>请教楼主：</p>
<p>因为种种原因， 错过了很多买房的好时期，现在租房住，（ 享受到了朋友提供的体制内的好处， 远低于市场价格租了一套房子）。</p>
<p>手上200万左右的现金， 在上海，想买房子保值增值，</p>
<p>1，有套著名大学附近的二手房子，57平米， 130万左右，估计租金大约是2.5万-3万 之间，<br>2，在市中心成熟的商业区有个店铺， 124万， 年租金现在是6.4万一年。</p>
<p>2个选择，个人倾向于投资店铺， 因为在上海店铺的涨价远远低于住宅的涨幅，况且店铺的资金回报率也达到了 5% ，不知道楼主是否有更好的建议？</p>
<p><strong>kkndme：</strong></p>
<p>很多人不愿意投资商铺还是在于风险大，好位置熟铺是很少有人愿意拿出来卖的，谁愿意放弃生蛋的母鸡呢？而新开发的商铺要不然位置比较偏，不知道能不能做的起来，要不然就溢价太高，超出了大多数人的承受。好的商铺是市面上很难买到的。</p>
<p>如果经过考察确认商铺没有问题，还是首选商铺，但是一定要经过认真的考察。</p>
<p>而住宅的风险就相对小多了，而且投资不需要很多的经验，更适合一般投资者。</p>
</blockquote>
<h2 id="关于房产调控"><a href="#关于房产调控" class="headerlink" title="关于房产调控"></a>关于房产调控</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>请问楼主，房价会在年底重新确立上涨趋势吗？如果再不涨，政府的地卖不上好价钱，地方财政就回吃紧，地方政府还会像去年那样出各种政策救市吗</p>
<blockquote>
<p><strong>九五二七八：</strong></p>
<p>全国各地 一线二线三线 情况都有不同<br>楼主预测时点 怕不好预测啊</p>
<p><strong>kkndme：</strong></p>
<p>不但是不同城市情况有区别，同一城市的不同区位情况也有区别。就拿北京来说，过渡爆炒的通州房山等远郊区县，房价一定会有所回调，但是城市中心，特别是学区房是没有下降可能的。</p>
<p>而对于多数二三线城市，均价下降的原因主要还是远郊区的房源投放量增加，城区内的房子不但不降，而且涨得还很厉害。</p>
<p>房产投资最重要的还是位置，当远郊区县的房价远低于城中心的时候，一定会有补涨的要求，但当远郊区县的房价向城中心接近的时候，一定会出现城中心的补涨，当然在调控期也会体现为远郊区县房价的回调。</p>
</blockquote>
<p><strong>kkndme：</strong></p>
<p>仔细看一下各地的房价，不要被公布的所谓均价迷惑，只有少部分城市价格下降或者持平，多数城市都在上涨，只不过幅度不大而已。现在成交量属于正常水平，不存在dfzf吃紧的问题，当然不可能象09年那样的疯狂，09年底甚至银行出现无款可贷，太高的成交量会被zy视为危险的信号，是达到危害金融安全的高度的。</p>
</blockquote>
<h2 id="关于房产税"><a href="#关于房产税" class="headerlink" title="关于房产税"></a>关于房产税</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>还有一问题请教楼主，目前我一共有三套房，一套自己住，一套父母住，一套是投资房，在大连最繁华的地方，租金回报是百分之六点五，请问房产税会很快推出吗？我的那套投资房是卖掉还是持有呢？卖的话能赚白分之五十</p>
<p><strong>kkndme：</strong></p>
<p>在卖掉之前，你要先问问自己，拿这笔钱打算干什么？如果没的可做，干等着贬值，那你为什么要卖呢？<br>如果你有更好的投资或者创业渠道，那当然立刻卖掉，不用犹豫。<br>至于房产税，第一：近两年一定不会征收，因为条件还不成熟。第二：房产税只是一项苛捐杂税，目的是补充财政收入，并没有降低房价和租金的功能，并且只能导致租金的上涨。怕房产税的应该是租客，而不是房东。</p>
</blockquote>
<p>任何税种最终都要转嫁到社会最底层群众身上。丛林法则实际就是大鱼吃小鱼，小鱼吃虾米。</p>
<p>上层人士的享受是靠底层群众勒紧裤腰带过日子换来的。</p>
<h2 id="老公房的拆迁问题"><a href="#老公房的拆迁问题" class="headerlink" title="老公房的拆迁问题"></a>老公房的拆迁问题</h2><blockquote>
<p><strong>wofuleyumin1：</strong></p>
<p>从头至尾，一口气看完了。。赞同之极。。。</p>
<p>也向楼主问些问题。。。</p>
<p>是否老公房都会拆迁？<br>在成都，一环，二环内还有非常多的老公房，总量比商品房还多，这么多的房子都会拆迁吗？<br>我在想是否先买套老公房。。因为价格也便宜。新的商品房一般八九千。。老公房才5千多。买了后灯拆迁。</p>
<p>但这么多老公房都会拆迁吗？我觉得可能很多房子是不会拆迁的吧？否则只要现在买这些房子，以后都发财了。</p>
<p>是否拆迁的只是很少部分？</p>
<p><strong>kkndme：</strong></p>
<p>将来多数房都会拆迁，这是中国体制和经济发展模式决定的。在城市拆迁改造升级过程中，大量的老房拆毁，大量的新房拔地而起。而随着拆迁改造的成本的上升，房子也越来越贵。<br>现在拆迁改造集中建设70-90的小户型，将来会沦为新的城中村，通过二手置换，这类房子会变成新的贫民窟，而将来的拆迁改造建设的一定是追求环境品质的大户型。<br>因为zf官员任期的限制，决定了官员的短视，决定了城市规划的短视。<br>但是市中心的房子，即使在将来人口下降的过程中，仍然是稀缺的，房价高不可攀的。如果手有余钱首选的是市中心的大户型。<br>关于市中心老旧二手房的购买，还是有一定学问的，一定要选择位置好，低密度的矮层住宅楼，因为密度低，便于拆迁。而密度高的塔楼拆迁非常困难，拆迁成本太高，开发商很难有利可图。现在住在市中心高层旧式塔楼的富裕人口，将来一定会二次置业，这些旧式塔楼逐渐会沦为新一代年轻中产阶层的过渡性住房。</p>
</blockquote>
<h2 id="投资新房还是老公房"><a href="#投资新房还是老公房" class="headerlink" title="投资新房还是老公房"></a>投资新房还是老公房</h2><blockquote>
<p><strong>wofuleyumin1：</strong></p>
<p>楼主。。谢谢你的答复</p>
<p>我接着问</p>
<p>你说现在投资是投资一套新房好，，还是找个老公房投资？</p>
<p>新房，，一切都好，但价格贵。。</p>
<p>老公房，一切都不好，但价格便宜。。主要是等拆迁。。但可能要等七八年。。（从我近2年的观察，一般都要这么久。。除非有内部消息）</p>
<p><strong>kkndme：</strong></p>
<p>有钱当然是新房舒服。</p>
<p>老公房如果是学区房，随着住着不舒服但是不影响小孩上学。至于啥时拆迁那真是有年头等了。运气好，三年五年，运气不好十年八年。</p>
<p>关键是拆迁后，原地回迁是很难的，拆迁后安置一般都到远郊区县。如果碰上个铁腕书记，拆迁还真不见的能得什么便宜。条件还没谈好，推土机就开来了。</p>
<p><strong>wofuleyumin1：</strong></p>
<p>有钱当然是新房舒服。<br>老公房如果是学区房，随着住着不舒服但是不影响小孩上学。至于啥时拆迁那真是有年头等了。运气好，三年五年，运气不好十年八年。关键是拆迁后，原地回迁是很难的，拆迁后安置一般都到远郊区县。如果碰上个铁腕书记，拆迁还真不见的能得什么便宜。条件还没谈好，推土机就开来了。<br>。。。。。。。。。。。。。。。。。。。</p>
<p>楼主的意思是。。还是投资新房比较好？</p>
<p><strong>kkndme：</strong></p>
<p>还是量力而行，买老公房也比不买强，有条件当然买新房。</p>
</blockquote>
<h2 id="高端盘有房价带动作用"><a href="#高端盘有房价带动作用" class="headerlink" title="高端盘有房价带动作用"></a>高端盘有房价带动作用</h2><blockquote>
<p><strong>wofuleyumin1：</strong></p>
<p>楼主。。。又有一个问题</p>
<p>我附近的普通房子大概9000 旁边有个02年的别墅现在13000 现在又有一个新的楼盘开盘了。。是电梯 容积3 十多层的 是中海的高端项目，装修过的 居然卖将近2万。。。离谱吗？旁边容积0.8的老别墅才13000啊 </p>
<p>请问中海这个项目是否价格过高？ 另外，这个项目对我这附近的房价能拉动多少？</p>
<p><strong>kkndme：</strong></p>
<p>高端房产，开发商都是不急着卖的，而且也从来不乏有钱人慷慨解囊。你说的情况跟昆明的空间俊园完全相同。在市中心徘徊在万元关口的时候，空间俊园直接开出了19000的均价，之后市中心的二手房紧随攀升到15000.而一环二环间的房价在万元关口徘徊。</p>
<p>大盘高端盘对房价的带动作用是显而易见的。</p>
<p>自调控刚刚推出的时候，与一个朋友闲聊，说起调控将是二三线城市大涨的机会，还聊了聊昆明的发展，结果那个朋友头顶调控的大棒，去昆明投了n套房产，当时价格7000多点，时过几个月，现在看房价已经涨到9000.而且他买的位置周边先后有高端大盘推出，预计开盘价格在12000-15000，一旦高端大盘开盘将让他买的房子直接迈上万元的台阶。</p>
</blockquote>
<h2 id="买房和没买房的差距"><a href="#买房和没买房的差距" class="headerlink" title="买房和没买房的差距"></a>买房和没买房的差距</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>新穷三代。。。ORZ<br>我可不想做穷一代。。。。</p>
<p>房子真的让人抓狂，当跟你同样起点的人早你三年买房的时候，这种感觉尤为明显。</p>
<p>我老公是77年的，他一个女同学2007年底在清河新城买了一套房，一百多平100多万吧，找家里东拼西凑的全款。其实当时我老公也能拿出100w不用借钱的，可是他偏不听我的话，认为清河在五环外，那种地方还要100多万不可思议。结果北京经历了09年的疯狂以后他同学那套房子已经翻倍，借的钱也已经还清。</p>
<p>而我们呢，在犹豫和老公的优柔寡断中错过了时机，终于在2010年3月最疯狂的时候入手了，这时候即使首付160多万，还要背负100多万的贷款，生活质量比他的女同学差的不是一点半点。</p>
<p>这是真实发生的事情，犹豫和无知真的能让人付出很大的代价。</p>
<p><strong>kkndme：</strong></p>
<p>清河新城好像是50年产权吧。反正我对50年产权的都不感冒。<br>我一朋友06年买的水木天成，买时5000多，现在25000，调控都不带降价的。</p>
<p><strong>汝爱之罪：</strong></p>
<p>清河新城盘子还是很大的，分好几期，有70年也有50年，他们买的是70年的。07年底刚开第一期，相当于股市里的打新股了，基本上没什么风险。</p>
</blockquote>
<h2 id="房产交易历史"><a href="#房产交易历史" class="headerlink" title="房产交易历史"></a>房产交易历史</h2><p>最早的房产交易，出现在一个名字叫“盉”的西周青铜器上。在公元前919年农历三月份，一个叫矩伯的人分两次把一千三百亩土地抵押给一个叫裘卫的人，换来了价值一百串贝壳的几件奢侈品，包括两块玉，一件鹿皮披肩，一条带花的围裙。</p>
<p>周厉王三十二年又发生了一宗土地买卖。这宗土地买卖的交易过程也被刻在青铜器上。 </p>
<p>这次记录的是周厉王买地的事，周厉王为扩建王宫，买下一个叫鬲从的人的地，没有立即给钱。鬲从担心周厉王赖账，周厉王派人对鬲从说：“你别怕，我一定会照价付款的，如果我赖账，就让上天罚我被流放好了。”这是个很毒的誓。</p>
<p>周厉王买地花了多少钱，铭文上没写。不过李开周说，有人买地，有人卖地，说明当时除了有土地抵押，还存在土地买卖，房地产市场已经有了雏形。</p>
<p>隋唐时，有个叫窦乂的人，他生在陕西，很小的时候就死了爹娘，无依无靠，跟着舅舅一块儿生活。</p>
<p>他舅舅是个公务员，住在长安城。窦乂先通过卖鞋、卖树等生意赚了一些钱，后来有了80万钱的身家，于是开始向房地产行业进军。</p>
<p>当时长安西市有一个废弃的化粪池，面积不小，有十几亩，闲置七八年了，一直没人买。窦乂把它买了下来，雇人填平，在上面盖了20间店铺，租给波斯胡人做生意，平均每天都收上来几千钱的房租。</p>
<p>再后来，窦乂听说当朝太尉李晟喜欢打马球，于是斥资70万钱买下一块地，又花30万钱把这块地建成一片马球场，送给了李晟。</p>
<p>李晟很高兴，从此跟窦乂结成死党，有求必应。有这种靠山保驾护航，窦乂发得更快了，不到40岁就成了长安首富，人称“窦半城”。</p>
<p>除了像窦乂这样的开发商，古代的业余开发商还有一些是公务员、退休干部等，甚至官府自己就是开发商。 </p>
<p>比如在北宋，中央政府下面就有个专门搞开发的机构，叫做“修完京城所”。这个机构本来只能是修筑城墙和宫殿，后来城墙修得差不多了，宫殿也盖得够豪华了，这个机构就开始转型，开始给中央财政搞创收。</p>
<p>怎么搞创收呢？修完京城所向朝廷请示，划拨给他们大片地皮，他们在上面盖住宅盖店铺，盖好了，有的卖给老百姓，有的赁给老百姓，给国库做了很大贡献。</p>
<p>古代是没有专业的开发商的。做开发商最需要的是钱。买地、买建材、雇人、摆平关系，哪个环节都得花钱。尤其买地，流动资金不能少，钱不够，就得找同行拆借，或者找银行贷款。</p>
<p>古代没有银行，但有钱庄，可是钱庄规模一般很小，即使有一些大型的全国连锁的钱庄，他们也不做开发商的生意，都把钱借给别的老板了。</p>
<p>史料上有这样两个办理房地产抵押贷款的例子，一个是南北朝时候的梁朝郡王萧宏，让人家拿着房契去贷款，一张房契最多只贷给几千钱；还有一个是明朝嘉庆年间山阴县的一个富户，名叫求仲，最多的一次才贷给15000文。这点儿钱别说搞开发，吃一顿大餐都不够。<br>直到民国时期，外国银行纷纷到中国开展业务，开发商们才能贷到大笔的贷款。所以中国的职业开发商直到民国才出现。 </p>
<p>古代开发商如果大量囤地得挨板子</p>
<p>以唐朝为例。唐玄宗在位时，土地政策里有这么一条：“应给园宅地者，良口三口以下给一亩，每三口加一亩，贱口五口给一亩，每五口加一亩，……诸买地者不得过本制。”意思就是说，政府给老百姓划拨宅基地，划拨的宅基地大小取决于家庭等级和家庭人口，如果是平民家庭，每三口人给一亩宅基；如果是贱民家庭，每五口人给一亩宅基。另外老百姓也可以购买宅基，但是购买的面积有限，不能超过政府规定的指标。</p>
<p>政府规定的指标是多少呢？平民家庭买地，每三口人，最多只能买一亩宅基；如果是贱民家庭买地，每五口人，才能买一亩宅基。</p>
<p>在唐朝，商人也属于贱民，再有钱的商人也是贱民，贱民老板去买地，即使是上百口人的大家庭，最多也只能购买20亩地，用这20亩地搞开发，一两年就倒腾光了。而如果超标大量买地会怎么样呢？</p>
<p>唐朝法律规定：“诸占田过限者，一亩笞十。”意思是买地超过指标的，得挨板子，每超出一亩指标，挨10大板。</p>
<p>虽然古代开发商没有现如今的开发商这么“牛”，环境和政策对他们都不太有利，但是在拆迁问题上，始终还是开发商们占优势。就比如窦乂，他就知道要搞房地产，首先得朝上有人，于是傍上了当朝太尉。</p>
<p>古代拆迁过程更为暴力，因为普天之下，莫非王土，国家要用哪里就用哪里。</p>
<p>当然，在古代，也不乏一些民主的君主。例如北宋元丰六年(1083年)，开封外城向外拓展，规划中的新修城墙要占用120户居民的住宅，宋神宗让开封府制定拆迁补偿计划，开封府写报告说，总共需要补偿款两万零六百贯，平均每户至少能拿到补偿款171贯。</p>
<h2 id="契税的历史"><a href="#契税的历史" class="headerlink" title="契税的历史"></a>契税的历史</h2><p>关于契税、物业税或者房产税，其实也不是现在的创造或者纯粹的拿来主义。</p>
<p>早在东晋时期，就开始收契税，当时叫“散估”，这也是中国第一个有据可查的契税。其后，几乎所有朝代都有契税。</p>
<p>唐初魏征等人写出了房产税的实质：“其实利在剥削也”——当时“剥削”没有现今这么贬义，与“增加财政收入”是一个意思。</p>
<p>从税率上看，东晋税率为4%，隋唐税率是5%，宋代4%，元明清三朝基本是3%。我们现在的契税大户型也是3%。</p>
<p>万历三十三年，利玛窦在北京宣武门附近买了处房子，他在意大利、葡萄牙、印度都呆过，那些地方并没有“契税”这一说，所以他也没有去有关部门办理手续。</p>
<p>《大明律》规定：“凡典买田宅不税契者，笞五十，仍追田宅一半价钱入官。”好在利玛窦同志上面有人，托了户部官吏，最后交了一笔可观的滞纳金了事。 </p>
<p>相比之下，“物业税”这税种兴起较晚，而且断断续续。公元783年，唐德宗向长安城内拥有房产的市民开征物业税，叫作“间架税”，乃是按照房屋的等级和间架计税，上等房屋每年每间缴纳两千文，中等房屋一千，下等房屋五百。</p>
<p>结果民怨载道，当年深秋五万军兵哗变，口号就是“不税汝间架”。迫于压力，784年唐德宗废止了这个税种，也就是说，中国第一个正规的物业税仅仅活跃了半年就夭折了。</p>
<p>到了五代十国，梁唐晋汉周的每一代帝王都曾征收物业税，不过鉴于“间架税”惹过乱子，改叫“屋税”。</p>
<p>北宋物业税不是常设税种。南宋由于军费困难，每年两次向城乡居民征收屋税。元代，不叫间架税或屋税了，改叫“产钱”，按地基面积征稻米若干或折成钱若干。明朝，物业税不常设，江浙地区小范围征收过一段，叫“房廊钱”。清代，物业税也不常设，往往临时征收，比如1676年由于对吴三桂用兵，朝廷财政紧张，康熙下诏“税天下市房”，规定“不论内房多寡，惟计门面间架，每间税银二钱，一年即止。”算下来，是只对门面房征税，二钱税额相当于两斗大米或七斤白糖的价钱，不多。</p>
<p>总而言之，无论是间架税、屋税、地基钱、产钱、房捐，都是不折不扣的物业税。只不过，它们与国际上通行的物业税是不同的——不是为了调节需求，而是单纯地敛财。 </p>
<p>然而物业税在中国并不能成为常设税种，因为这个税是纯粹的苛捐杂税，税又比较重，很容易激化矛盾，直接结果是百姓吃不起饭，太容易导致大规模的农民运动，所以很难持续征收。</p>
<h2 id="廉租房的历史"><a href="#廉租房的历史" class="headerlink" title="廉租房的历史"></a>廉租房的历史</h2><p>言及公房和廉租房系统，最是宋朝搞得好。</p>
<p>宋朝原则上不分房，京官无论大小，一律租房居住，宰相那样的高干都是如此。偶尔有“赐第”，只照顾部级领导和有军功的将军。算起来大家的住房自有率不高。</p>
<p>南宋初年，大量流亡人口涌进杭州，三十平方公里的杭州城一度住了一百万人口，人口密度接近上海浦西。</p>
<p>因人多地少房价高，居民普遍租住公房。除了大规模公房出租，宋朝还有住房救济体制，一是灾年对租住公房的市民减免房租；二是政府建房（福田院、居养院）免费安置流民和赤贫民众；三是修建比公房条件要差的简易房，但是租金更低，堪称“廉租房”。此外，宋朝还有安济坊——慈善医疗，还有漏泽园——安葬无人认领的尸身，比较有人性。 </p>
<p>如果是公务员的话，生在元代也还不错。建国开始，就给半数京官和所有地方官分了房，叫“系官房舍”。一般分不到的市民以自主建房为主导，但是盖房不用买地，政府批给一块官地，然后每月交一次租金，时称“地基钱。” </p>
<p>满人刚进北京那会儿，也给领导们分房子。一品官二十间，二品官十五间，三品官十二间，四品官十间，五品官七间，六、七品官四间，八品官三间，不入流小军官每人两间。按照每间十五平方米估算，从一品官的三百平方米、到小军官的三十平方米不等。 </p>
<p>廉租房主要由寺观经营。土地由政府划拨，建房资金由民众捐献，房产维护可以从香火钱里冲销，僧尼道士理论上讲不以盈利为目的，再加上信仰需要，正适合执掌这项半慈善业务。大都市的庙宇常有上千间客房，供应试的学生、出门的商旅和遭了天灾的百姓临时居住。</p>
<p>《西厢记》里张生和崔莺莺在山西停留一整月，在那永济县普救寺里，莺莺住西厢，张生住东厢，该故事充分说明：在廉租房里也可能发生爱情。</p>
<p>到了明清两代，又多出个廉租房的来源，便是会馆。在这异乡人建立的聚会场所里，客房租金相当便宜。顺治十八年建于北京的漳州会馆，福建人来租住，只象征性地收取租金：每月三文钱！ </p>
<h2 id="历史上买房最好的朝代"><a href="#历史上买房最好的朝代" class="headerlink" title="历史上买房最好的朝代"></a>历史上买房最好的朝代</h2><p>历朝历代，哪朝买房最容易呢？</p>
<p>南北朝最不靠谱，贫富相差极为悬殊，普通居民收入只有几千，房价则是几百万。谢灵运那样的大财阀“左江右湖，南北二山”，房价都被他们给炒上去了。 </p>
<p>唐朝不用说啊，我们都知道“居长安，大不易”，而且士大夫时兴攀比，为了写诗题名好看，非得有个别墅不行。比如王维有辋川别业，岑参有南溪别业，杜牧有樊川别业，就是白居易本人，后来也在洛阳买了十七亩地，修了个“履道园”。</p>
<p>宋朝文人叶梦得说：“人未有无产而致富者也。有好便田产，可买则买之……勿计厚值。”这话一再被地主老财们重复。有点闲钱，买房子置地，不惜一切代价。</p>
<p>明代买房也不是件容易事。《金瓶梅》第五十六回，西门庆的结义兄弟要买房，朋友帮他算了算帐，“一间门面，一间客座，一间床房，一间厨灶——四间房子是少不得的。论着价银，也得三四千多银子”。小户型房子，要三四千两银子。而清河县县令，从七品国家公务员，每年薪水不过三百五十两。就是说，就算县长去买房，如果不贪污的话，需要十年不吃不喝才能攒够房钱。明代楼市虚火上延，与攀比之风分不开。尽管明太祖规定，任何人不得超越等级建房，例如居民门窗不得使用朱红油漆；庶民住房不得超过三间；功臣宅邸两边可以保留五丈空地；军民房屋不许建成五间或九间；寺观庵院不得使用斗拱。但如小说里所说，庶民西门庆“现住着门面五间到底七进的房子”，超标超大发了。</p>
<p>嘉靖年间，大家纷纷打肿脸充胖子，浙江人的房子必须带客厅了，江西人的房子必须带兽头了，江苏人的房子里必须摆上时尚家具和精美古玩了。明朝中叶，北京的地皮已经涨到每亩纹银两千两，就是折成人民币也有好几十万。</p>
<h2 id="未来房地产市场的发展"><a href="#未来房地产市场的发展" class="headerlink" title="未来房地产市场的发展"></a>未来房地产市场的发展</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>楼主旅行结束呢？</p>
<p>将来房租市场会如何演化？</p>
<p>房租涨的太多，如果大多数租客的收入承担不起该如何？</p>
<p>例如租客的平均工资4000元&#x2F;月，你让他和别人合租一个小两室要6000元<br>他们承担不起恐怕就只能离开这个城市了</p>
<p><strong>kkndme：</strong></p>
<p>公租房具有平准作用，zf要敛财，不能定价太低，但也不会高的离谱。有了这个参照物，个人普通房出租应该保持在比公租房稍高水平，当然位置好的高端房精装房也可能租出天价。</p>
<p>中国的房价在未来将成为多数群众遥不可及的梦想，也可以说大多数人都不再关心商品房的房价涨跌。</p>
<p>未来，租房将成为常态，所以房子的位置环境装修的档次不同，房租的差距将会非常明显。但好房子一定只有中等收入以上家庭才租得起。</p>
<p>而买房子是富人阶层的事，中等收入家庭想都不敢想。</p>
<p><strong>中年不惑吗：</strong></p>
<p>呵呵，将来，只要中等收入的家庭2个月的收入能买1平米，他们也会买房子的</p>
<p>难道将来的房价要涨到中等收入家庭半年甚至更长的时间才能买1平米？</p>
<p><strong>kkndme：</strong></p>
<p>除了房价高，贷款也没那么容易。而且除了房子，各方面的花销都会涨得离谱，这是太平盛世后期的普遍规律。</p>
<p>关键还在于体制外的中产，都是逆水行舟，一旦不能前进，就可能沦为赤贫。</p>
</blockquote>
<h2 id="房产到期"><a href="#房产到期" class="headerlink" title="房产到期"></a>房产到期</h2><blockquote>
<p><strong>不明真相的草民：</strong></p>
<p>向LZ请教</p>
<p>商品房的土地证年限有多重要？</p>
<p>现在一个二线城市的开发区，中心地段很多小区房子倒是新盖的，但地是90年代初拿的，有40年、50年的，还有30年20年的，大部分房子的土地证从现在算起只有10几年20几年，有的房子土地证已经到期了，但由于位置较好所以房价一点不便宜。按KFS的说法，土地证到期将来再续就是了，没有大的影响。</p>
<p>LZ给分析一下，这样房子将来的风险在哪？如果买来自住又如何？</p>
<p>谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>其实有无土地证都无所谓，无论有没有土地证，最大的风险都在dfzf，人治社会法律文件其实就是一张纸，关键还是zf做得不要太过份。</p>
<p>即使你证件齐全zf想拆一定会拆，即使没有土地证拆的时候也会同样补偿。</p>
<p>这个东西实在没多大意义。</p>
<p><strong>不明真相的草民：</strong></p>
<p>感谢LZ答复。都是新建的高层，应该不会轻易拆迁，这么说自住还好。但如果将来要出手是否就存在困难？？</p>
<p>期望LZ继续指明。</p>
<p>Lz似乎没有看到这个问题，再次感谢Lz，望答复。</p>
<p><strong>kkndme：</strong></p>
<p>出手不存在困难。二手房交易国家不会对土地证进行严格限制，关键还是房产证。</p>
</blockquote>
<h2 id="买学区房问题"><a href="#买学区房问题" class="headerlink" title="买学区房问题"></a>买学区房问题</h2><blockquote>
<p><strong>开洋木瓜：</strong></p>
<p>楼主，有个问题想咨询一下。</p>
<p>家在南京，郊区有一套自住房，130平，市值大概150万左右。市中心有一套小公房，居住权，目前空置（刚分到的，还没有装修，而且单位也禁止对外出租）。现在宝宝一岁，想给宝宝买个学区房，很多名校都要求提前三年落户，所以必须要在2年内买房。一线的学区房单价在2万2-2万6之间。一线小学的分校学区房在1万5-2万之间。我想买的是一个名小的分校，近几年的小升初成绩都非常不错，可以进入南京前三名。</p>
<p>我想买的一个房子位于这个小学的学区，是拆迁安置房，97年的房子，小区环境比较杂乱，没有物管，停车也不方便。但是周围配套都非常齐全，菜场超市医院都很近，上学也不用过马路。今年年初，2月份的时候我本来在这个小区买了一套，但因为房价上涨房主违约。当时买的房价是12500，现在看中一套，房主要17000，挂了很久没卖掉，我出15000，可能有机会成交。</p>
<p>这个隔壁有个新小区，物管环境都很好，但价格也上到2万一平了，如果要在这个新小区买房，我们家里的钱就不够了，如果要卖掉现有的房子去买，老公也不愿意。</p>
<p>还有个问题是，房主要求净得价，12月的时候满五年，就不用付营业税。如果现在交易过户也可以，但要多付几万块。如果算上这几万的税，房价就差不多一万七一平了，我也不愿意现在过户多付这个钱。如果现在签约等12月再交易过户会不会有风险？另外现在是否是出手时机？请楼主赐教。</p>
<p><strong>kkndme：</strong></p>
<p>学区房即使在调控最严厉的时期也几乎不可能下跌。但是在上涨期就很难买到，因为房东会跳价。</p>
<p>12月过户有一定风险，如果到12月时，房价上涨比较厉害，房东有可能违约。</p>
<p>制约房东违约的方法就是签较高的违约金。</p>
</blockquote>
<h2 id="历史的结局"><a href="#历史的结局" class="headerlink" title="历史的结局"></a>历史的结局</h2><blockquote>
<p><strong>Peter_Takeshi：</strong></p>
<p>LZ写的不错，有些意见不敢苟同。<br>LZ既然熟读历史，又在安抚众人去接受被统治的命运，那能否告知最后的结局呢？<br>是否跟前几十个朝代一样？呵呵~<br>人性几千年从未根本改变，所以即使过程不同，结局仍旧是一样。<br>谁上台都改变不了这一切。</p>
<p><strong>kkndme：</strong></p>
<p>历史上的结局三条路：<br>和平演变——在中国好像没发生过，今后也不可能，没有土壤<br>大革命——哪次也少不了<br>外来入侵——这个也比较靠谱</p>
<p><strong>facetowall：</strong></p>
<p>对lz的深厚的历史功底十分佩服。lz说改朝换代的方式有三种：1.和平演变；2.农民qiyi；3.外族入侵。我觉得前苏联的解体看似像是和平演变吧，第2、3条好像不符合。lz说zhongguo无和平演变的土壤，但是前苏联好像也没有啊。这该如何解释呢？</p>
<p><strong>kkndme：</strong></p>
<p>苏联的文化背景与中国完全不同。我国是自秦以来进入帝国时代，是一个上千年大一统的国家。<br>而苏联是在近代革命后才出现的。俄罗斯的主要人种是斯拉夫人，在日耳曼民族眼中是奴隶的意思，人种低劣。中世纪叫做罗斯地区，由基辅公国、莫斯科公国、立陶宛公国等多个公国割据，在元代一直附属于拔都建立的金帐汗国。罗斯诸国在西方中世纪非常弱小，直到波兰立陶宛联军大破德意志的条顿骑士团后，才逐渐强大。俄罗斯于1721年彼得大帝时期才开始崛起，19世纪末才成为帝国主义国家，根本就没有大一统的土壤存在，这也就是苏联能够和平演变，而中国不行的原因。</p>
</blockquote>
<h2 id="人口普查"><a href="#人口普查" class="headerlink" title="人口普查"></a>人口普查</h2><blockquote>
<p><strong>平静的房奴：</strong></p>
<p>看来楼主今天比较空闲，一口气发了这么多帖子。</p>
<p>有个问题想青椒哈楼主，我在武汉，最近武汉在全免清理个人和家庭住房信息，晚上调查人员还上门登记、记录，请问这是何意？是否在为出台房产税做准备。</p>
<p><strong>kkndme：</strong></p>
<p>人口普查。不但武汉，连穷山沟里也在忙这个，穷乡僻壤的支书天天忙得不亦乐乎。这是第六次人口普查，前面查过五次了</p>
</blockquote>
<h2 id="昆山房价分析与买房"><a href="#昆山房价分析与买房" class="headerlink" title="昆山房价分析与买房"></a>昆山房价分析与买房</h2><blockquote>
<p><strong>買房難：</strong></p>
<p>樓主﹐麻煩你分析一下昆山的房價吧﹐先謝謝﹗﹗</p>
<p>昆山是一個縣級市﹐原先是屬于蘇州的﹐離上海很近﹐動車只要20分鐘﹐現在高鐵也開通了﹐原先房價還算便宜的﹐現在連鎮上也貴到五千多六千了﹐市中心最便宜的也要七千多八千﹐09年10月的時候一下子漲了很多﹐原先我看好的一套二手房32萬﹐現在要50多萬﹐太奇怪了</p>
<p><strong>kkndme：</strong></p>
<p>昆山不能理解为县级市，要理解为上海的卫星城。相当于北京的燕郊。所以房子八千多一点也不奇怪。</p>
<p><strong>買房難：</strong></p>
<p>謝謝樓主回復﹗昆山市中心的房子大一點的開發商開發的如世茂在一萬左右一平﹐這個價位算不算高啊﹖</p>
<p>買房子要在市中心好點呢﹐還是城東靠近上海方向好些﹖</p>
<p>昆山很小的﹐就那么几個鎮﹐現在火車站﹐汽車站﹐高鐵﹐人才市場都在城南﹐另外除市中心的玉山鎮外﹐其它的都是工廠很多﹐污染還是多。</p>
<p><strong>kkndme：</strong></p>
<p>买在哪里合适，你要看zf规划，跟着zf规划走。比如房山，zf打造的是长阳而不是老的镇中心，所以买房就应当买在长阳。道理是一样的。</p>
</blockquote>
<h2 id="为什么现在租售比这么低-amp-同小区买一套大还是两套小"><a href="#为什么现在租售比这么低-amp-同小区买一套大还是两套小" class="headerlink" title="为什么现在租售比这么低 &amp; 同小区买一套大还是两套小"></a>为什么现在租售比这么低 &amp; 同小区买一套大还是两套小</h2><blockquote>
<p><strong>我爱的飞飞：</strong></p>
<p>对待房子，我的看法是这样的，50-60年代的人，兄弟姐妹至少5-10个，2004-2020年之间正50、60、70、80、90年代共存的时代，人口达到了爆发阶段，现在好多小年轻70、80代人因为买不起房结不起婚，甚至晚婚索性不育，等50.60后在未来20-30年离世之后，将会有大量的房子空出来。而80后的子女2000后，人口根本不足以养活上一辈。</p>
<p>我在成都，我的父母是体制内的，我是体制外的80后，刚结婚，老公是体制内的。原家里有一套单位的集资建房，只有小产权，在二线城市的一环内，98年的房子，因为担心迟早有一天拆迁以后没有房子住，小产权也不会赔多好的地段或者得到较好的补偿，再加上以房养房的心理作祟，以及我参加工作以后想从家里独立出来，于是父母在08年底四川地震以后全国大降价赶上好时光在三环外买了一套140的房子，那会儿才买成2900，今年交房以后装修到一半，就有人以双倍价格想买入，父母不卖，留着养老。一年不到翻了一番起来，我结婚以后，也和老公一起在一环附近购入一套小户，8千多。老公家在外省某市有2套，这样算下来，我门要是生一个孩子，以后这孩子手里就有我父母在成都的2套加上老家的1套，我和我老公的1套，孩子爷爷奶奶的2套，一共6套，您说等我父母和老公父母都去世以后，房子嗖的一下就空出来了不少。所以我觉得80后到了四十岁左右肯定都能住上房子，那个时候房子也不再值钱，不过话又说回来，其实我的父母也是年轻的时候住在单位的公房，三十五近四十岁才有了第一套集资建房，而他们的第二套和第三套相对比较快了。所以我现在觉得年轻人还是应该多奋斗吧。但是我真的不清楚，到了房子不缺的时候，那个时候又会炒什么。</p>
<p>虽然我是土著，也不缺房子，但是压力也不小，特别是还贷，连车也没敢买。有时候我跟LG也想，为啥我们买的房子首付了二十几万，装修十万，我们每个月还还着2500的按揭款，租房客2000就租走了，那不是我们垫着钱给别人提供福利么？向楼主求解。</p>
<p><strong>kkndme：</strong></p>
<p>打个比方，假设你打算在某地开个游乐园，竞拍一块地，经过计算当时的门票定价10元一张，根据人流测算，你认为出500万投标这块地，5年可以回本，于是你出了500万，但是别人出到了1000万，你认为1000万要10年回本，风险太大了，于是你放弃了。你冷笑着认为那个傻子一定会赔钱。</p>
<p>结果过了2年，票价涨到100元一张了，人流量一点也没减小。人家5年就回本了，以后赚的盆满钵满。可是这个生意你却因为太能算计没有做成。</p>
<p>为什么房价租售比低？</p>
<p>其中原因之一是现在的房价预期了以后的租金。</p>
<p>另一个也是最重要的原因就是：现在的房价不够高，说明了很大一部分普通家庭都有希望买得起房，所以宁肯省吃俭用住合租房，为了攒首付。但当房价高到普通家庭不敢问津的时候，这部分中等收入的合租家庭就会放弃买房转而追求租住有一定舒适度的房屋，房屋租金就会上涨到合理的程度。</p>
<p><strong>welldayzwb：</strong></p>
<p>楼主在线啊，真好，这个道理大概也明白，不过现在出于”活雷锋”阶段，心里还是很不舒服<br>去年底在北五环投资的一套大一居，首付加税款超过60％，贷了30年的公积金，现在房租还是不顶月供，而且空租期很长<br>很怀疑自己的投资决策，好象不是一个很明智的选择，纠结中</p>
<p><strong>kkndme：</strong></p>
<p>当房价快速脱离你的成本区，你的心理就好受了。</p>
<p><strong>welldayzwb：</strong></p>
<p>再多问一句，有机会一步到位买个满意的大房好(也是老房，得房率高，三居)，还是买两套小房，一套凑合着住，一套放租好？</p>
<p>当然两套小房的总额比一套还是要多不少，帮忙分析一下，短期和长期来看的情况？谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>其实买两套同一小区的房子是最好的，投资自住兼顾，可进可退。如果家里有老人，和老人分别居住，又在同一小区，照顾起来很方便。</p>
</blockquote>
<h2 id="买房难之回不去的乡-amp-拉美人过得比你想象的好"><a href="#买房难之回不去的乡-amp-拉美人过得比你想象的好" class="headerlink" title="买房难之回不去的乡 &amp; 拉美人过得比你想象的好"></a>买房难之回不去的乡 &amp; 拉美人过得比你想象的好</h2><blockquote>
<p><strong>九五二七八：</strong></p>
<p>楼主说的以后大部分人买不了房的论题<br>中美在这个方面的差距 怎么这么大呢<br>现在产业转移 一部分人就业就有回乡的趋势<br>今后再有一波转移 会不会再离故乡近一些<br>这样 分散置业 购买难度会不会下降</p>
<p><strong>kkndme：</strong></p>
<p>中美体制不同、文化不同、人口不同。一辆在美国2万美金的汽车，国内要卖几十万人民币。一件made in china的服装美国卖20美金，国内卖900人民币。</p>
<p>不管一线城市、三三线城市都是人满为患的，从一线城市逃离的也会驻扎在二三线城市，绝没有可能大中型城市向小城市回流。</p>
<p>返乡潮指的是家有自留地的农民工，如果工资待遇差不多，与其到沿海地区漂泊不如回乡打工或者种地。比如贵州镇远的油漆工一天工资是150，而在珠三角打工一天工资还不到150，这也是大量农民工返乡的原因。</p>
<p><strong>九五二七八：</strong></p>
<p>最难的怕是现在三四流的大学生和跟着打工父母生活在城里的二代<br>失去了农村生活本领<br>在城里也无法立足<br>楼主<br>难道拉美化真的不远了</p>
<p><strong>kkndme：</strong></p>
<p>很多人都丑化拉美，但是拉美的生活水平要高过我国。不说远超中国的巴西，即使是法属及荷属圭亚那(苏里南）这样的小国，人民的生活也很富足。</p>
<p>前几年有个援助项目去苏里南等拉美国家，去之前所有的人给我灌输的都是拉美国家如何贫困。但事实上，这些国家与中国完全不同，国穷民富，藏富于民，与中国正好是相反的，只要勤快点的家庭都还比较富裕。当然不排除也有很多穷人（美国也有很多穷人），穷人一般以当地的黑人为主，好吃懒做，整日无所事事。</p>
<p>这些国家的人民不如中国人勤奋，从不攒钱，只图眼前享受，我想主要原因还是由于币值不稳定，通货膨胀比较严重，所以没有人愿意攒钱。在拉美国家是无法炒房地产的，比如苏里南平均25平方公里有一口人，真的是地广人稀。所以才保留了世界上最高的森林覆盖率。</p>
<p>拉美人的懒惰会让中国人瞠目结舌，当地的蔬菜价格昂贵，尽管有大片肥沃的土地，当地却没有人愿意耕种，很多去苏里南种植蔬菜的中国人为此发了大财。</p>
<p>而相反中国人可以说是全世界最勤劳的民族，但是大量勤劳的中国人却过着低水准的生活。这与中国的国富民穷，藏富于国，与民争利的政策是分不开的。</p>
<p>拉美国家尽管有这样那样的问题，但是确实是法制国家与民主国家，私人财产神圣不可侵犯，这是与中国完全没有可比性的。</p>
<p><strong>九五二七八：</strong></p>
<p>一般对“拉美化”的定义是这个吧：贫富悬殊扩大、腐败严重、国有企业效率低下、社会治安恶化、城市人口过多、地下经济泛滥、对外资依赖性强、金融危机频繁和政局不稳定，等等</p>
<p>没去过拉美 不知道真实的拉美</p>
<p><strong>kkndme：</strong></p>
<p>看来拉美妖魔化后，深入人心了。好比在越南旅游，越南人自己说越南官僚太腐败，我笑了，能有中国腐败？</p>
<p>拉美的官僚机构，国企、医院、警察我都见识过。</p>
<p>说到官员的官僚，相比中国我真的觉得那里的官员很亲切。我曾经以一个游客的身份和苏里南的司法部长一起在街边小店喝咖啡。以一个陌生的外国游客身份在财政部长家里做客，逗他家的几个黑小孩玩。</p>
<p>说到治安，我在街边咖啡店坐了一下午，每二十分钟一辆巡逻车从我身边经过。里约热内卢的治安绝对不会差过广州。</p>
<p>国有企业效率低下恐怕是全世界的通病，况且拉美根本没有可能赚钱的行业全部由国企垄断。</p>
<p>政局不稳要看怎么理解，拉美国家是相对民主的国家，国家元首倒是常常因为民众的不满而换届（排除少数经常政变的军政国家）。但人民并没有感觉到不幸福。</p>
<p>拉美国家的经济基本被美国所控制，所以才会对外资依赖严重和金融危机频繁。作为一个主权国家我们看到的是国家财政贫困，但是作为拉美地区的中下层人民群众，生活水平和幸福感是要高于国内的中下层群众的。</p>
</blockquote>
<h2 id="租房的苦"><a href="#租房的苦" class="headerlink" title="租房的苦"></a>租房的苦</h2><p>说到租房举个活生生的例子。</p>
<p>我有朋友是个房产的死空头，一直租住着北京一套两居室的老公房，租金不高1000多点，所以没什么负担，对买方族恨不能理解。结果今年他租住的那片老公房要拆迁，限期20天内搬家走人，结果终于理解了找房子的辛苦，而且随便租一套两居室也找不到2500以下的了。</p>
<p>真是心态决定命运。</p>
<h2 id="北京西三旗"><a href="#北京西三旗" class="headerlink" title="北京西三旗"></a>北京西三旗</h2><blockquote>
<p><strong>bjwxw：</strong></p>
<p>楼主在线啊，今天几乎花了大半天的时间从头至尾的看了楼主的帖子，分析和解释的真的很实在到位，也许我了解的不是很多，但是确实觉得现实好多都是这样的，麻烦我现在有个问题，我住在西三旗，我租住的这个小区去年的这个时候价格是60-70左右，我失去了机会，可是今年这些房子基本都是120-140万之间了，我现在是在忍不住，也憋不住了，因为我是刚需，虽然心里是万分的懊丧和后悔，但是事情还的做，房子还是的买，可是我很担忧，我花140万买只隔一年就升值一倍多的房子，后果会是什么，我真的怕等了好久，可是等我出手了，房子真的跌了，尽管不会跌很多，但是把我的首付跌光那也是件很可怕的事，毕竟辛苦的攒了这么多年的钱，我是实实在在像楼主说的那样的底层奋斗着的接近中年的刚需外地人，挣钱太辛苦了，所以很害怕，楼主，我现在也很急，老婆看好了一套140万的房子，要我去买，我也知道她也很无奈了，可是我心里这关好难过啊，想听听你的指点，急盼回音</p>
<p><strong>kkndme：</strong></p>
<p>西三旗的房子与不远的立水桥相比，涨速是相当慢的，尽管离市区更近当房价跟回龙观相仿，并没有拉开差距。随着8号线的即将开通，8号线地铁站中央部位保障房项目的启动，西三旗房价上升空间还不小。</p>
<p>西三旗附近最值得购买的小区是枫丹丽舍，因为低密度将来必定稀缺，但是目前价格也高过其他几个楼盘，甚至高过新盘富力桃园。配套最成熟的小区当属育新小区。象硅谷先锋、森林大第也都比较好住。西三旗这片地区属于难得的价值洼地，值得购买。</p>
<p><strong>bjwxw：</strong></p>
<p>多谢楼主，看来您真的对西三旗了解的太透彻了，我真的很幸运，我就直接跟您说了吧，我说的房子是龙乡小区，您肯定也很了解，这个是个老小区，房子已经超过了10年，优点就是交通好，周边医院，学校，购物都极其的方便，因为钱有限的原因，只能买这里的，情况就这样，您能给我多说几句吗？多谢</p>
<p>一着急字都打错了，不好意思</p>
<p><strong>kkndme：</strong></p>
<p>龙乡小区的房价在西三旗片区相对较低，因为房子是90年代的，但是周围配套相当齐全，去超市购物也很方便。如果你在上地上班也算比较近，唯一的遗憾就是房子旧了点，户型与2000年后的次新小区相比，有点不尽如人意。</p>
<p><strong>bjwxw：</strong></p>
<p>确实是这样，今天通过从头看到尾您的帖子，基本心中已经有了概念，买吧，尽管我从这个小区的70万的房子如今花140万去买这个心理关很难过去，但是还是过吧，既然已经这样了，认命吧，不害羞的问一句，房子价格已经16000了，您说这个地段在将来是会升些，还是会跌一些，呵呵，实在不好意思，添麻烦了</p>
<p><strong>kkndme：</strong></p>
<p>这个地区的房价，两年内是可以看到25000的。</p>
<p><strong>喜欢8号线：</strong></p>
<p>楼主看好西三旗地区房价，本人深有同感。<br>西三旗地区的焦点不在京藏高速路口，也不在林翠路路口，而在西三旗东路。也就是地铁8号线西三旗站附近。<br>现在这附近已经有宾馆、饭店、百汇商品市场、中小学、3甲医院、银行。<br>到2012年，8号线开通，百汇市场新增电影院，龙旗广场新增写字楼2座和3星级酒店一座，<br>随着北新建材厂的搬迁，原厂区还会有更多的新楼拔地而起，西三旗东路将南延、拓宽至永泰。整个地区的房价将随着新楼盘的不断推出而节节高升。</p>
<p><strong>kkndme：</strong></p>
<p>西三旗地区一直相对滞涨主要还是缺乏大品牌开发商入住，没有高端楼盘的带动，涨幅偏低。但也正因如此，才形成了一块价值洼地，以后才有更大的上涨空间。</p>
<p><strong>跳坑的青蛙：</strong></p>
<p>没想到楼主对西三旗地区如此熟悉~<br>想问问楼主对于上地附近二手房的看法，如当代城市家园这样的地方，有没有升值潜力？<br>觉得这边交通还是有很大问题~</p>
<p><strong>kkndme：</strong></p>
<p>上地区域的房产在2008年之前，涨幅较快。但在2008年以后由于上地区域的产业以民营iT为主，属于充分竞争，利润下滑较快的产业，区域经济的发展前景远不如望京，所以上涨空间受限，涨幅趋缓。<br>区域发展是房价升值的动力，个人不太看好上地区域。</p>
<p><strong>汝爱之罪：</strong></p>
<p>对上地一点也不了解，不过今后北京的私企郊区化应该是趋势，好多公司因为成本问题已经开始向密云等地搬家。上地的价格若被炒太高，也难逃此运。</p>
<p>也许zf会注意到这个发展趋势，引导郊区，现在大力发展郊区地铁就是为今后的卫星城铺路吧。不过能不能成功，是另一回事。里面牵涉利益太多，比如海淀，主导还是高科技产业，如果全都搬家，地区zf就头大了。上地区域，可是海淀政府大力度发展的重点区域。</p>
<p><strong>kkndme：</strong></p>
<p>你说的很有道理，现在海淀的it产业基本就是以处于链条底端的制造业，毫无科技科研，急需产业升级，才能得到持续的发展。象联想这样的it公司完全沦为了90年代家电厂商的境遇，毫无未来。</p>
</blockquote>
<h2 id="买房争取一步到位"><a href="#买房争取一步到位" class="headerlink" title="买房争取一步到位"></a>买房争取一步到位</h2><blockquote>
<p><strong>hohowell：</strong></p>
<p>楼主，诚心请教下，从开贴开始就一直在潜水关注，终于坚定了买房的决心</p>
<p>现在在犹豫，一是买个80平米的小户型，开发商一般，房型尚可，这样贷款比较少，基本不影响供车，旅游和以后小孩的开销，不过考虑5到8年左右，这个房子就不能满足居住要求了，回头换，又是一大笔钱，而且城区内的好小区也会越来越小，另外一个就是保利的大户型，开发商物业都靠得住，基本上短期可以不用换，不过贷款至少贷100多万，短期内还会要小孩，压力会比较大，基本手里每个月都没有闲钱了，很容易回到赤贫线，一直犹豫不决，诚心请教楼主解惑，我在南京，一个一线以下二线以上的鬼地方，两处房子都靠地铁，周边商业中心配套齐全，谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>买房子如果有能力还是要争取一步到位。将来改善，除非个人有较大的发展，否则将很难很难。而且买楼首选好位置，大开发商，大盘，升值空间才大。</p>
<p><strong>welldayzwb：</strong></p>
<p>看来楼主分析说购房应该一步到位，我就犯了一个错误，用投资的眼光来选择自住房，后来买的两居室比同小区的三居室性价比高很多，但是居住环境不好，临一条小街，所以现在住起来不是很爽，现在调控着价格先不说了，光是现在限制换房的一些条条框框感觉再置换就很麻烦<br>另外一套买的外面一点，小区环境非常棒，不过当时是被环境给迷惑了，放租的房子管那么多环境做什么，感觉两套房子操作反了<br>纠结中啊纠结中，现在唯一能安慰自己的就是，买上房子总比没买强，如果去年年底再犹豫一下或是赌气的话，那就真是悲剧了，一个好三居得活活等成质量差些的两居了</p>
</blockquote>
<h2 id="收入稳定的家庭如何买房"><a href="#收入稳定的家庭如何买房" class="headerlink" title="收入稳定的家庭如何买房"></a>收入稳定的家庭如何买房</h2><blockquote>
<p><strong>黑眼圈钱：</strong></p>
<p>请教楼主，买房子的事情，比较纠结。</p>
<p>1）夫妻两人均在西部某高校任职，一个教师，一个行政人员，年龄都不小了，37和35，两人每月总收入在8000-10000，1年算10万收入，应该会多一点。</p>
<ol start="2">
<li>一个女儿，才两个多月。</li>
<li>3）每年给双方父母1万，双方父母均已60出头，一方父母城里的有退休金及医保。另一方父母农村的，得为他们准备点钱。</li>
</ol>
<p>4）目前租住单位两室一厅房，就在学校住宅小区内，除了小点，别的都好，房租100。</p>
<p>5）公积金两人很少，约1000元每月，未来1-2年内会有购福利房机会，估计90多平方的旧三室一厅（约需 10万元），可能有120平米的房子，但需要排队看单位建房情况（2000每平米）。</p>
<p>6）两人都有单位医疗保险。</p>
<p>7）孩子可以上学校的幼儿园和小学、初中，就在150米范围内。</p>
<p>8）对于车没有什么想法，每天步行上班用不到车代步。不过会买辆10万左右的。</p>
<p>9）现在没有任何投资和理财。银行存款1-2年期定期存款50万，这个傻了，已经存2年了，平时光顾着干活。</p>
<p>有没有必要买个商品房呢，周围的房价从08年的4500涨到现在8500，容积率还非常高，并且楼间距等等不理想，那种房子我不想住的。</p>
<p>其实在附近买套120平米的房子，首付后也供得起，买房子放那等涨价或者出租？ 不想放弃单位的房子，每天睡到自然醒再去上班还是挺惬意的，送孩子上幼儿园上学也方便。</p>
<p>买了房子后经济会紧张些，不像现在自由。财务自由也算一种幸福吧，我太太对于房子没什么要求，所以也不给我什么压力。</p>
<p><strong>kkndme：</strong></p>
<p>对于工作稳定，收入不错的体制内家庭，基本上的情况就是有闲钱就买房。主要还是由于收入稳定不用担心失业，钱放着只有贬值，不如置业。投资型住房与自住型住房在选择方向上有很大不同。</p>
<p>举个例子，昆明打造了个螺丝湾，几乎半个昆明做生意的人都聚集在哪里。如果自住没有人愿意选择在那里买房，实在是不好住。但是投资确是最好的选择，因为可以获取较高的租金的收益，将来升值空间也不会小。</p>
<p>假如在昆明一环附近买一套两居室，月租金一般在1500-1800，而房价在万元左右。而在螺蛳湾附近买一套两居室，月租金都在2000多，而房价在7000多。</p>
</blockquote>
<h2 id="北京回龙观"><a href="#北京回龙观" class="headerlink" title="北京回龙观"></a>北京回龙观</h2><blockquote>
<p><strong>baiyang11112010：</strong></p>
<p>LZ,你好，我2010年3月在回龙观买一复试房子120平米，户型不是很好，全部下来，161万，我尽量提前还贷，控制在3-5年以内，所以，这房加利息定能控制在170万以内，我想问的是，3-5年我想出手，会不会亏？</p>
<p><strong>kkndme：</strong></p>
<p>你的问题太短了，虽然问了几遍，居然没看见。<br>回龙观地区的配套设施齐全，积水潭医院入住将提升该地区的物业价值。随着中关村高新区北延规划的利好，回龙观地区的房价在未来两年内有50%左右的上涨空间。</p>
<p><strong>baiyang11112010：</strong></p>
<p>我觉得LZ你的分析思路不错，但是这种涨幅应该不会再有了吧？虽然我今年4月投资了一套，但是，我能回本就行，没敢过分估计，你这样有煽动别人之心啊</p>
<p><strong>kkndme</strong>：</p>
<p>首先投资房产不是炒股，不能有炒股的心态。目前说起投资房产是最安全的品种，指的是长线投资，而不是短线投机炒房。短线投机炒房还是因政策的不稳定有较高风险的，一旦资金链断掉，将万劫不复。</p>
<p>对于4月份，在山雨欲来风满楼的特殊时期，投资一线城市郊区房地产肯定是欠考虑的。</p>
<p><strong>对于房地产调控，主要针对一线城市，且一线城市在09年行情涨幅过大，郊区楼盘一定会受到调控影响，而资金的运作规律告诉我们，调控抑制住了一线城市的投资资金，一定有相当部分转向二三线房价相对不高的城市，大开发商对二三线城市的入住，将加速城市升级。所以调控征兆的开始，正是布局二三线城市的时机，而不是一线城市。：</strong></p>
<p>值得安慰的是，回龙观地区并没有遭遇疯狂炒作，表现比较抗跌，即使被套损失也不会大。从未来两三年看，回龙观的区位一定会有50%左右的涨幅，这是不用担心的。</p>
</blockquote>
<h2 id="贷款还是全款"><a href="#贷款还是全款" class="headerlink" title="贷款还是全款"></a>贷款还是全款</h2><blockquote>
<p><strong>jhjdream：</strong></p>
<p>楼主，请教一下，</p>
<p>也正是8月初看来楼主的帖子，坚定了我此时买房的决心</p>
<p>我在3月份卖了一套小房子，8月底买了套大点的，也是学区房，学校在建</p>
<p>现在考虑一个问题，是全款付清好还是贷款比较好<br>全款付清，欠亲戚10多万，没有还钱压力，年底可还清，但是手头没有余钱<br>贷款的话，手头会有20多万余钱，可以装修，或者等年底再攒点钱，投资其他的<br>所在省会城市房价8000多，偏一点的6000左右。</p>
<p>装修好出租2500左右，贷款月利息2000左右<br>也就是说我全款还清，一年相当于收益2.4万的利息及3万的租金，房款70万左右，<br>是否值得？还是贷款35万比较合适？</p>
<p>因为考虑到通货膨胀时期，应该是负债比较划算～～ 谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>肯定是贷款划算，这是毋庸置疑的。当然如果你的余钱实在找不到其他投资渠道，也可以一次性付清。如有可能也可以贷款买两套，而不是买一套。<br>70万的总房款月租金达到2500，租售比还是很高的，贷款35万，租金抵月供完全没有问题，说明你所在地区的房价具备较大的上涨空间。</p>
</blockquote>
<h2 id="00后的买房需求从何而来"><a href="#00后的买房需求从何而来" class="headerlink" title="00后的买房需求从何而来"></a>00后的买房需求从何而来</h2><blockquote>
<p><strong>和风中的树叶：</strong></p>
<p>看了那么多 有点意思</p>
<p>不过在下有一事想不明白：</p>
<p>因中国的计划生育政策 往近了说 人口红利会在这几年消失 往远了说 80后基本都是独生子女 父辈在城市里都是有房子的 这些房子作为遗产 按理说 在未来应该使00后没有买房的需求。<br>LZ如何解释在这种情况下在未来房子仍然看涨？</p>
<p><strong>kkndme：</strong></p>
<p>前面已经说过了，你往前翻。</p>
<p><strong>和风中的树叶：</strong></p>
<p>LZ能不能再贴一次？或者说明一下在第几页？谢谢哈~</p>
<p><strong>kkndme：</strong></p>
<p>回去找了一下，居然被删了。<br>大意基本是讲中国经济未来的发展模式，城市升级与拆迁改造的关系，没想到这样也不允许说。实在懒得再长篇大论说一遍。<br>关键的意思就是一方面是富裕阶层对更高端产品，更大面积的追求，一方面是城市升级带来的大规模拆迁改造。下层群众将被挤出城市核心区。许多住房都会被拆迁置换。</p>
</blockquote>
<h2 id="意大利的住房模式"><a href="#意大利的住房模式" class="headerlink" title="意大利的住房模式"></a>意大利的住房模式</h2><p>我本人对意大利的住房模式还是比较赞同的。<br>有去过米兰的朋友可能很清楚，米兰城区的房屋居住的大多数是富豪显贵，一旦出了城区，则是大片大片鳞次栉比的公租房供普通工薪族居住。<br>以后的中国有可能学习这个模式，原市中心的居民被拆迁安置到郊区，城区居住的都是达官贵人。郊区将形成拆迁安置房、中产阶级商品房、公租房、廉租房混居的模式。</p>
<h2 id="中国的学术"><a href="#中国的学术" class="headerlink" title="中国的学术"></a>中国的学术</h2><p>97年我大学毕业的第一任老板就是在龙乡小区买的房，我还到他家送礼。那时从城里骑车到西三旗，花了我将近两个小时。一晃就十几年过去了，真是有很多感慨。</p>
<blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>感觉您是学者型的啊，看您去做田野调查什么的。大学毕业送礼给老板。。。。</p>
<p>看您点评回龙观的那一段，估计很多人要捶胸顿足的后悔了。回龙观真是个奇迹，从2600涨到15000，让所有人大跌眼镜。</p>
<p><strong>kkndme：</strong></p>
<p>送礼也算学者型？晕</p>
<p><strong>九五二七八：</strong></p>
<p>他是说本以为你是学者型的 不需要送礼<br>现在看到你说送礼 觉得自己判断失误了 呵呵<br>现在这个时代 学者也需要送礼啊</p>
<p><strong>汝爱之罪：</strong></p>
<p>差不多这个意思，呵呵。我一直以为楼主是搞学术的。</p>
<p>其实吧，虽然大多数学者砖家都成了贬义词，但我觉得在北京这个大环境里，还是有土壤培养一些目光敏锐犀利的人，BBS的P民也需要这样有前瞻性的引导者，因为毕竟不是每个人都强大到能把这些东西娓娓道来，没有积淀，根本悟不出。</p>
<p><strong>kkndme：</strong></p>
<p>中国的学者是很难拿出点时间好好搞搞学问的，功利性太强。</p>
<p>以前跟一伙民族学者到元阳考察，这帮人没呆满两个星期就跑回去了，说是又要评职称了，人不能不在单位。而日本学者已经在元阳与当地人同吃同住了3年，还没有一次回日本。真不知道这帮民族学者研究了两个星期的东西能发表什么样的惊世论文出来。</p>
</blockquote>
<h2 id="北京远洋山水"><a href="#北京远洋山水" class="headerlink" title="北京远洋山水"></a>北京远洋山水</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>不知楼主了解远洋山水吗？在西四环外，我舅舅想在那买房，去年一万七没买，今年最高到过三万，现在两万六左右，能买吗？还有升值空间吗？诚心请教。</p>
<p><strong>kkndme：</strong></p>
<p>别提了，08年的那次调控，开盘才1万1，这是个让人悔得肠子都青了的楼盘。<br>北京的楼市前景，在未来的两三年，北四环西四环东四环达到5万，北五环西五环外到达3万应该不是什么难事，南面可能相对低一点。远洋山水的位置2万6不能算便宜，但将来只有更贵。</p>
</blockquote>
<h2 id="精英的资产"><a href="#精英的资产" class="headerlink" title="精英的资产"></a>精英的资产</h2><p>5万一平的房子对于中国的精英阶层真算不上什么。500、600万一套的房子一次性付清的人群在北京大把的存在着。这是很多工薪阶层一辈子都觉得不可能挣到的财富，但对于另外一些人却可以轻而易举的拿出来。平均工资的概念在中国是完全没有用处的。</p>
<h2 id="北京三环塔楼"><a href="#北京三环塔楼" class="headerlink" title="北京三环塔楼"></a>北京三环塔楼</h2><blockquote>
<p><strong>bluesyang2010：</strong></p>
<p>请问楼主，北京三环内的塔楼，80年代末的房子，以后会有什么走向，现在能出手吗？谢谢</p>
<p><strong>kkndme：</strong></p>
<p>三环内都是老公房，干嘛不买个板楼呢。这种房子老到不好住了，迟早还是要换。板楼还可以拆迁，塔楼拆迁就比较困难了。不过今后的北京可能存在一个相当奇怪的现象，一部分高端富裕人群居住在市中心老旧的小区，而令广大住在远郊的中产阶层羡慕不已。</p>
</blockquote>
<h2 id="普通人买房的未来"><a href="#普通人买房的未来" class="headerlink" title="普通人买房的未来"></a>普通人买房的未来</h2><blockquote>
<p><strong>baiyang11112010：</strong></p>
<p>直白说，我刚毕业一年，完全靠着父母资助，要完全靠自己根本买不起房，我一些同学在北京两人的话年薪也就15万左右吧，现在好歹还能惦念着买房，要是像您所说，“北四环西四环东四环达到5万，北五环西五环外到达3万应该不是什么难事”，那他们根本就没有盼头了，这是很可怕的事啊</p>
<p><strong>kkndme：</strong></p>
<p>将来年薪20万的中产阶层一定连北京6环内的房子都买不起。这一天，不会很远。</p>
</blockquote>
<h2 id="北京房价超香港"><a href="#北京房价超香港" class="headerlink" title="北京房价超香港"></a>北京房价超香港</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>金岩石说未来五年房价还得翻一翻，北京核心区域得到二十万一平，真会那样吗？请楼主说说</p>
<p><strong>kkndme：</strong></p>
<p>北京北四环，东三环，西三环，南二环内区域的房子，价格一定会超过香港。</p>
<p><strong>tianxiaobing11：</strong></p>
<p>香港怎么也得几十万一平吧，还是得早买房，早买早心安</p>
<p><strong>kkndme：</strong></p>
<p>香港都是按尺算的。富翁住的千尺豪宅相当于我们的大约100平米。现在香港的房价换算成平米大概是十五、六万一平吧。</p>
</blockquote>
<h2 id="中国的新闻不可信，精英的有钱是你想象不到的"><a href="#中国的新闻不可信，精英的有钱是你想象不到的" class="headerlink" title="中国的新闻不可信，精英的有钱是你想象不到的"></a>中国的新闻不可信，精英的有钱是你想象不到的</h2><blockquote>
<p><strong>bluesyang2010：</strong></p>
<p>搂主分析一下,现在的新闻都说房屋成交量的上升是因为kfs打折才上升的,但这个很不成立,为什么新闻这么懵老百姓.是不是政策上还有可能收得更紧?</p>
<p><strong>kkndme：</strong></p>
<p>中国的新闻最不可信，为了抓眼球不惜胡编乱造，不惜前后自相矛盾。我倒觉得这个成交量放大的背后的意义更值得深入研究。</p>
<p>在二套房首付50%，三套房首付更是严格控制的前提下，成交量大幅提升，中国的货币到底泛滥到何种程度，中国的精英阶层的绝对数量多么庞大，手里多么有钱。中国的贫富差距很可能已经达到了一般人不敢想象的程度。</p>
<p>这是一个坏的预兆。</p>
</blockquote>
<h2 id="40年的商住房没有70年的住宅有投资价值"><a href="#40年的商住房没有70年的住宅有投资价值" class="headerlink" title="40年的商住房没有70年的住宅有投资价值"></a>40年的商住房没有70年的住宅有投资价值</h2><blockquote>
<p><strong>klid：</strong></p>
<p>LZ 请教一下，市中心没有天然气的房子能买么？自住兼投资</p>
<p><strong>kkndme：</strong></p>
<p>商改住，40年产权？<br>不影响出租，但是变现可能不那么容易。</p>
<p><strong>klid：</strong></p>
<p>是70年产权住宅，但是不通天然气！<br>LZ请教一下啦，可以自住兼投资么</p>
<p><strong>klid：</strong></p>
<p>自住只要你觉得不用天然气也很方便，当然没问题。</p>
<p>投资首先是出租不存在问题，另外市中心的位置可以填补任何房屋设计方面的不足，70年产权具备投资价值。购买这样的房产还是可以的。</p>
</blockquote>
<h2 id="限贷对精英没用"><a href="#限贷对精英没用" class="headerlink" title="限贷对精英没用"></a>限贷对精英没用</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>楼主，我也是不明白，现在成交量确实上来了，按说现在贷款控制的这么严，第三套房都贷不到款，是谁在买房，难道都是第一套房的刚需吗</p>
<p><strong>kkndme：</strong></p>
<p>民币发行泛滥，有钱人绝对数量庞大。在北京上海等城市，手中拥有千万现金的人不在少数，都是全国的精英阶层啊。精英阶层的财富积累已经逐步完成，提高首付，严控贷款只能抑制小白领保值的需求，但对于精英阶层是没有任何作用的。</p>
<p>如果将来推出房产税就更好笑了。精英阶层谈笑风声，小白领神情紧张，最终结果是全部转嫁租房客。</p>
<blockquote>
<p><strong>bluesyang2010：</strong></p>
<p>我认为,这个跟kfs和政府之间的博弈有很大关系,投资人前段时间一直在观望或者投入到农产品等领域,我不记得是7月还是8月,突然听到热钱大量涌入国内房地产市场的传闻,之后成交量就上来了,这些信息之间有很大的关系,但我捋不清.<br>请楼主评评</p>
<p><strong>kkndme:：</strong></p>
<p>你说的很有道理，当资金泛滥无处可去，一定会找到一个出口。资金如洪水在于疏而不在于堵，资金一旦冲破调控所筑的堤坝，将一发不可收拾。所以屡次调控屡次暴涨。如果不能有效开渠，将注定调控政策的失败。</p>
</blockquote>
<p><strong>tianxiaobing11:：</strong></p>
<p>我现在就被抑制住了，现在是认房不认贷，我也不能贷款了，可现在动不动就得百万以上才能买房，真是力不从心啊，房贷新政看来是堵塞了中低收入的房产投资渠道了，对精英阶层反而是利好，这调控就搞笑了</p>
<p><strong>bluesyang2010:：</strong></p>
<p>zf倒是想调控精英层呢,但zf本身就是精英的组成部分,所以zf只能借砍掉投机者之名,开拓自身,抢占市场,特别是楼主说的租赁这个大市场,所以特别佩服楼主之前说的:zf找到了吃租赁这块蛋糕的最好时机,明着是抑制房价,其果却是让很大部分老百姓租着zf的房,zf的钱就更多了,到时候想拆哪儿拆哪儿,精英更精英,百姓更百姓….可悲呀</p>
<p><strong>kkndme:：</strong></p>
<p>估计给政府出这主意的幕僚熟读过宋史，宋代官府就是靠出租房给群众敛财的。</p>
</blockquote>
<h2 id="外汇管制决定了大部分有钱人只能在国内投资"><a href="#外汇管制决定了大部分有钱人只能在国内投资" class="headerlink" title="外汇管制决定了大部分有钱人只能在国内投资"></a>外汇管制决定了大部分有钱人只能在国内投资</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>还有一个问题始终不明白，请教楼主，现在五六百万的房子都有人全款买，这些人为什么不买国外的别墅呢？难道就因为中国的房子升值快吗？要我有那么多钱早移民了</p>
<p><strong>kkndme：</strong></p>
<p>我国实行的是外汇管制，人民币不能自由兑换，不可能大批人口通过地下钱庄转移资产。只有官员和少部分有背景的高端人士才能做到人民币资产顺利兑换转移。</p>
<p>一旦发现较多资金量的人民币兑换美元出境，国家将采取强制管制措施。</p>
<p>现在国家对外汇外流已经非常重视，携带价值50美元以上的商品入境都要交税，实际上国家给出了一个不希望人民币兑换成外币外流的一个强烈信号。</p>
</blockquote>
<h2 id="外国国籍在中国生活是更好的选择"><a href="#外国国籍在中国生活是更好的选择" class="headerlink" title="外国国籍在中国生活是更好的选择"></a>外国国籍在中国生活是更好的选择</h2><blockquote>
<p><strong>理财的猫咪：</strong></p>
<p>我有段动过移民的念头，但现在基本放弃了。不知自己的选择正确与否，想听听楼主高见。</p>
<p><strong>kkndme：</strong></p>
<p>移民不见得能够适应，毕竟文化差异太大，但是如果拥有一个外国国籍，在中国生活，是一个比较好的选择，至少，你的财产是受到保护的。</p>
</blockquote>
<h2 id="分期付款买房，如果房价上涨，很容易毁约-amp-自住要选大品牌开发商"><a href="#分期付款买房，如果房价上涨，很容易毁约-amp-自住要选大品牌开发商" class="headerlink" title="分期付款买房，如果房价上涨，很容易毁约 &amp; 自住要选大品牌开发商"></a>分期付款买房，如果房价上涨，很容易毁约 &amp; 自住要选大品牌开发商</h2><blockquote>
<p><strong>showcar:：</strong></p>
<p>楼主说的正确啊，除非世界经济再次崩溃或者朝内变天，否则的房价要跌，太难！</p>
<p>到处听说是纸币不受截至的发行，有点现金留在手上都发抖啊，是因为“贬值”发抖！</p>
<p>所以，出手了，淘一套保值去吧！！总价150万左右。</p>
<p>楼主请教付款方式：<br>1：分期付款，30%首付，6个月内付30%， 12个月内付30%，10%交房前付清（约24个月）；<br>2：商业银行贷款，需要50%首付，50%余款贷款，首付3个月后按揭，110%的贷款利息。<br>商业贷款的话，计划交房后就付清。</p>
<p>不知道哪个更合算？期待楼主解惑。。。。</p>
<p><strong>kkndme:：</strong></p>
<p>分期付款是你和房东的约定？这个比较不靠谱，如果是付清后过户，一旦房价上涨，很可能出现毁约。</p>
<p><strong>showcar:：</strong></p>
<p>楼主，忘记说了，是期房，我们这里是房子盖到一层高就预售了。房子结顶是按揭。结顶后1年半左右交付。</p>
<p><strong>kkndme:：</strong></p>
<p>貌似你们那里的房产商很不规范。我还是觉得投资自住都要选择大开发商、大体量楼盘，不仅配套好，升值空间也大，这样的楼盘几乎没有风险。</p>
</blockquote>
<h2 id="通货膨胀和房价的关系"><a href="#通货膨胀和房价的关系" class="headerlink" title="通货膨胀和房价的关系"></a>通货膨胀和房价的关系</h2><p>要解释通膨和房价的关系，我来建个简单的模型，跟大家说说</p>
<p>假设5年前，某个国家一共有10个一篮子生活必须品（包括吃，穿，住，行的所有的必需品），这个国家发行了100万货币，一共有10个人。那么这个国家的毎个篮子生活必须品价值10万。</p>
<p>假设这10个人每人得到了10万元收入，则每个人刚好分配了一个篮子。</p>
<p>实际情况是，这10个人中，有人得到了10万元，有人得到了8万元，有人得到12万元。那么这10个篮子通过在品质上的差别有所区分，卖给这10个人，刚好1人1份，只不过有的品质略好些，有的品质略差些。<br>时间过了5年，这个国家增加到20个一篮子生活必须品，人口还是10个人，但是发行了1000万的货币，那么这个国家的毎个篮子生活必须品价值50万。价格翻了5倍。如果每个人平均是100万，则每个人可以得到2篮子生活必需品，生活提高了。但实际上是，这10个人中，4个穷人每人还是10万，3个普通人每人是20万，剩下3个富人每人300万。</p>
<p>这3个富人共900万可以买掉18个一篮子生活必需品。剩下7个人只能分配到2个一篮子生活必需品。这样势必有人会饿死。而且无论是穷人还是普通人都买不起任何一个一篮子生活必需品。社会不可能只有富人才配生存，没有穷人，富人就不会存在。</p>
<p>因此必须有一项物品能够从一篮子生活必须品中剥离出来，吸收掉富人庞大的资金，同时也要让穷人和普通人能够买的起一篮子生活必需品中能够维持生命的最基本的生活品。</p>
<p>于是就要把一篮子生活必须品进行拆分。找到一项物品，不拥有不会饿死，但拥有能够让人过的舒服，具备高的使用价值，能够保存，具备稀缺性。</p>
<p>这个东西就是具备产权房屋（注意不是使用权），而一篮子生活必须品中其他的东西都不具备这个条件。<br>吃的不能保存，</p>
<p>衣服不具备稀缺性，</p>
<p>土地和房屋，是生产，居住，商业贸易的必需品，可以保存，具备稀缺性，富人拥有房屋土地的所有权可以租给普通人和穷人进行生产和居住。土地和房屋超过租金部分的溢价就变成了富人中吸收资金，炫耀财富的特殊品。</p>
<p>所以请注意，真正吸收大量发行的被富人拥有的货币的，是土地和房屋超过租金部分的溢价，所以房屋的租售比很低是货币大量发行造成的。房屋土地租金成为了新的一篮子货币中的必需品，而房屋土地所有权被剥离出来变成了富人之间货币再分配的游戏。<br>这样一篮子生活必须品进行了重新定义，本来包括的房屋，变成了房屋租金，而房屋所有权被从一篮子生活必须品中剥离出来，变成了吸收富人多出来的货币的奢嗜品。而一篮子生活品分成两大类，即最基本的和品质高的。</p>
<p>最基本的又变成了10万一个，保证这个国家的4个穷人可以每人得到一份。</p>
<p>品质高的，20万一个,3个普通人和3个富人每人得到一份就可以得到较好品质的生活。</p>
<p>多出来的840万，就是房屋的所有权，供3个富人拥有。房屋所有权的价格远高于租金，这是因为房屋所有权已经变成了富人炫耀的资本，身份的象征。<br>因此说，高房价的根本原因是由于货币发行泛滥和收入分配不公。这个根本问题不解决房价不可能下降。</p>
<p>而且单纯的依靠行政手段让房价下跌不但不能抑制通货膨胀，多出来的流动泛滥的货币得不到有效吸收，会推动生活必需品上涨，使穷人的生活更加艰难。<br>当然，有人的说，这多出来的840万为什么不投入到创新领域带动需求，增加一篮子生活必须品的品质。</p>
<p>这显然是不现实的，900万的财富集中在3个人手里，剩余7个人总共只分到100万，而平均一篮子生活必需品的价格是50万，7个人应该有350才能满足生活需要。购买力的不足一定会使远离生活必须品的任何东西都没有市场。</p>
<p>高房价，低租金是货币泛滥发行和分配不公的必然结果，而不是推动通货膨胀的，阻碍实体经济发展的原因。</p>
<p>货币泛滥和分配不公才是实体经济发展困难，房价高企的根本原因</p>
<blockquote>
<p><strong>fataltomato：</strong></p>
<p>有钱人的投资渠道一般都不是房子</p>
<p>房子最多是资产配置中的一项</p>
<p>开始投房收租，说明财富控制能力的下滑，往往意味着人生下坡路的开始</p>
<p>所以诸君，还是努力赚钱改变人生为第一要务</p>
<p>评来论去，于事无补</p>
<p>别人说到了，你不一定明白，你明白了，不一定有体会</p>
<p>你有体会，不一定能做到，你做到了，不一定能做好</p>
<p>你做好了，还不一定有机会呢，呵呵</p>
<p><strong>welldayzwb：</strong></p>
<p>对于不善理财的人来说，买房收租未尝不是一个选择，到没必要上纲上线，当然为了收租而买房，目前看起来不是很理想的一个选择</p>
</blockquote>
<h2 id="南京买房分析-amp-买房要做好调查分析工作"><a href="#南京买房分析-amp-买房要做好调查分析工作" class="headerlink" title="南京买房分析 &amp; 买房要做好调查分析工作"></a>南京买房分析 &amp; 买房要做好调查分析工作</h2><blockquote>
<p><strong>闲坐庭前也：</strong></p>
<p>楼主，一直跟帖，<br>觉得你的认识颇有见解<br>请教一下<br>最近看了南京奥体附近的仁恒楼盘<br>2万2左右每平方<br>不是自住，用做投资的话现在出手是否合适呢？<br>一直在犹豫中<br>望不吝赐教</p>
<p><strong>kkndme：</strong></p>
<p>尽管南京去过多次，但对于那里的楼盘并不熟悉，所以不敢妄言。如果能够提供更详细的信息，或许可以试着为你分析。但以你目前提供的信息，真的不好评判</p>
<p><strong>闲坐庭前也：</strong></p>
<p>恩，<br>详细的话就是南京河西奥体那块推出了仁恒G53精装公寓<br>简称高汤，90平方复式上下两层的，180万左右<br>我对南京不太了解<br>有人说2014青奥会召开，<br>有点升值空间<br>我不准备贷款<br>因为平时也不怎么会理财<br>全付可以95折<br>楼主，请问我能买进吗？<br>汗一个先，我买房好像总买在高点呢<br>泪奔<br>不知道这次怎么样<br>楼主不吝赐教哦！！！</p>
<p><strong>kkndme：</strong></p>
<p>房产毕竟是一笔相当大的投资，对于一个不了解的城市，就轻易购买，显得过于轻率。青奥会是噱头但不是利好，对于房产的长期升值没有任何促进作用，充其量也不过有些资金参与短线炒作。<br>经济的发展才是一个城市房价上升的驱动力。<br>建议在你购买之前，认真去南京进行考察。不但要考察周边楼盘，还要考察你所购买地区的经济发展状况、交通状况、商业和学校的分布。最好能够了解当地政府的规划。</p>
</blockquote>
<h2 id="北京华清嘉园"><a href="#北京华清嘉园" class="headerlink" title="北京华清嘉园"></a>北京华清嘉园</h2><blockquote>
<p><strong>dog19972009：</strong></p>
<p>请教楼主点评华清嘉园的房子以及上地一带的房子，谢谢楼主！</p>
<p><strong>kkndme：</strong></p>
<p>学区房，房价坚挺，配套齐全，环境也还凑活，紧邻轻轨，唯一的遗憾就是交通比较拥堵。如果有钱是可以考虑的。但是绝大多数人只能对华清嘉园的高房价兴叹了。我预计两到三年内，华清嘉园就将冲击5万关口。<br>上地可参加前两页的评述。</p>
<p><strong>dog19972009：</strong></p>
<p>谢谢楼主，但如果是上地的低密度低板房格局朝向及位置都较好的小3居可以考虑吗？另外知春路一带的九十年代的塔楼还有板房可以考虑吗？</p>
<p><strong>kkndme：</strong></p>
<p>北四环周围有许多不错的小区，都值得考虑，无论自住还是投资都还是比较合适的。比如志新村、塔院、牡丹园小区等等，配套齐全，居住舒适，特别是志新村还是学区房，这一片区位肯定是好过上地的。缺点就是户型较老，物业等于没有。</p>
</blockquote>
<h2 id="中国的朝代更替"><a href="#中国的朝代更替" class="headerlink" title="中国的朝代更替"></a>中国的朝代更替</h2><p>中国与西方最大的不同，是历次革命都要推倒重来，革命总是伴随着血琳琳的屠杀和破坏，无论是财富还是文化。每次建朝人民都要从一穷二白做起，所以才说中国人民苦难深重，几千年的历史，居然没有什么积累，有的只是统治者根深蒂固的帝王思想世代传承。<br>从项羽焚烧阿房宫到近代的破四旧，革命的都非常彻底，人民洗脑也非常彻底。所以帝国时代才能够一直延续。西方人贪婪对财富是占有和继承，东方人重义轻利所以破坏焚烧和屠杀。</p>
<p>西方的大革命产生了资产阶级新贵阶层，然而当时却不为普通群众接受，尽管他们有钱有势，但是却得不到群众的尊敬，直到资产阶级新贵们捐钱捐物，为群众做了大量的善事之后，才得到人民的认可。<br>而我们这个时代产生的新贵却太多的为富不仁。</p>
<p>而中国古代的乡村，通常族长就是村子里的大地主，族长是非常重视名胜的，一个族长必须有足够的威望，象修桥补路，借无米下锅的族人粮食，都是族长份内的事。去徽州旅游的人都知道，道路、桥梁等公益设施无不是富商修建。古人不但讲个人声望，还讲积阴功。假设你去贵州的深山中旅游，发现山径上常常有个亭子，不但有坐的地方，还有水井或者用水管从山上引来的泉水供路人休息。这都是周围的村里人为积阴功修建的，绝非政府投资。<br>时值社会主义的今天，反而一切行善积德的事都不讲了，全民金钱至上。没有文化建设的民族是悲哀的。</p>
<h2 id="中国可以无限印钞吗"><a href="#中国可以无限印钞吗" class="headerlink" title="中国可以无限印钞吗"></a>中国可以无限印钞吗</h2><blockquote>
<p><strong>tianxiaobing11:：</strong></p>
<p>中国可以无限印钞票吗？有没有个限度呢？我是请教楼主，肉食者会怎么思考呢？他们的幕僚能从历史中找到答案吗？楼主的历史资料库中有这方面的吗？</p>
<p><strong>kkndme:：</strong></p>
<p>如果你收集过铜钱，你会发现有一种大钱叫一当十五。这就是中国古代的铸钱方式。当铜不够了，zf用铸造2枚铜钱的铜铸造一枚大钱当作十五个大钱用。那时还没有纸币，所以采取了这种方法。<br>到了解放战争时期，物品紧缺，国军大量印制金圆券，今天用一捆钱没一斤米，明天用同样一捆钱却只能买一两米。当然这种金圆券无限制满天飞也和我军大量投放伪币有关。<br>当物质紧缺时，必然会通过发行纸币来缓和矛盾。小时候我常去买2毛钱的肉馅包一顿饺子，现在2毛钱仍在大街上也没人捡。肉馅从2毛钱涨到4块钱，货币贬值了20倍。为什么我们认可肉馅从2毛钱涨到4块钱的既定事实，但是却不能想象现在的物价会在未来的10年再涨20倍呢。<br>如果你收集过邮票，会发现50年代的老有票的票面价格都是500元一张，1000元一张，我们建国后的货币也并不是一开始就是圆角分的。50年代圆是最基本的货币单位，随便买个最小的东西，都是1000元起步的，很象现在的越南盾。<br>我们国家的印钞制度，主要跟外汇挂钩，在帖子里已经做过了描述，你可以在帖子里找一找。正是由于国内商品的内需不足，完全依靠低附加值商品出口创汇，才造成了人民币的外升内贬。</p>
</blockquote>
<h2 id="读史读的不是故事，还是找历史规律，以古鉴今"><a href="#读史读的不是故事，还是找历史规律，以古鉴今" class="headerlink" title="读史读的不是故事，还是找历史规律，以古鉴今"></a>读史读的不是故事，还是找历史规律，以古鉴今</h2><p>读史读的不是故事，还是找历史规律，以古鉴今，毛就是这方面的天才。<br>读史难在古人常常作假，事件往往扑朔迷离，必须象破案一样，从重重的迷雾中寻找真相，这也是读史的乐趣所在啊。<br>好比喜欢三国的度魏延，总认为此人天生反骨。事实上，魏延作为仅次于关张马黄（没有赵云，赵云的才能和级别都不能和魏延相比）的第五员上将，在关张马黄死后，成为了西蜀的军方顶梁柱，不但有极高的军事天赋，而且忠心耿耿，不足的是政治头脑不大灵光，结果诸葛亮刚死，就被小人杨仪给黑了，不但掉了脑袋，还被按上了背主的罪名。</p>
<blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>《三国演义》里这一段完全是黑魏延来着。<br>我心里还想，其实魏延还是比较大度的，马谡刚愎自用的时候，诸葛亮很不爽，但是魏延还一个劲的替马谡说好话，我就觉得魏延一直忠心耿耿，怎么可能晚节不保呢？</p>
<p>唉，看来正史和演义，还是有很大区别啊</p>
<p><strong>kkndme：</strong></p>
<p>正史里很多信息都是极其可疑的，就更别说演义了，呵呵。<br>每次听评书赤壁大战一段，诸葛亮给关张布置任务就觉得好笑，赤壁大战时诸葛亮官拜军师中郎将，官职远不如关张，关张不可能直接听诸葛亮的将令。当时，诸葛亮顶多给刘备出出主意，调兵遣将还应该是刘备的事。演义一夸张诸葛亮，，就没刘备什么事了。</p>
</blockquote>
<h2 id="毛太阳往事"><a href="#毛太阳往事" class="headerlink" title="毛太阳往事"></a>毛太阳往事</h2><p>当年毛太阳发动文ge的原因是因为政府被刘奇和邓平的政经系所把持</p>
<p>当年要是老毛召开人大来决定谁去谁留，老毛肯定被PK掉</p>
<p>如此不发动底层，通过正常的程序夺不回权利</p>
<p>什么防止腐败，打到走资派都是借口</p>
<p>毛太阳比任何人都要腐败</p>
<p>死的时候存款有1亿多（不是工资积攒的，都是稿费，垄断市场的稿费）</p>
<p>70几年的时候，1亿多，确实恐怖</p>
<p>但是后来被邓平给没收了，讽刺呀，以这是全党的财富为由</p>
<h2 id="北京大兴"><a href="#北京大兴" class="headerlink" title="北京大兴"></a>北京大兴</h2><blockquote>
<p><strong>VVVMMMABC：</strong></p>
<p>楼主,现在大兴的房子新楼盘较多,某楼盘推出两次均卖光光.地理位置占尽优势,因为紧挨着将要建好的地铁.现在能出手买吗?首套,没有立马买房结婚的压力,但三四年内总得买吧.首付提高后也就刚刚好付首付.要是利率也真的不打折,真不知道如何是好.</p>
<p><strong>kkndme：</strong></p>
<p>通州、房山、大兴都是前期炒作比较厉害的区域，在楼市调控期要慎重购买，如果遇到明显低于周边二手房的楼盘可以立即下手购买，否则观望。</p>
<p><strong>VVVMMMABC：</strong></p>
<p>楼主圣明,楼主说得明显低于周边二手房的话是指大于多少一平的时候呢?现在的二手房和新房都互相盯着呢,都差不多</p>
<p><strong>kkndme：</strong></p>
<p>一般来说调控期内，郊区新盘比调控前的周边二手房大约低10-20%%之间，且成交放量，说明底部已见。</p>
</blockquote>
<h2 id="贵阳"><a href="#贵阳" class="headerlink" title="贵阳"></a>贵阳</h2><blockquote>
<p><strong>努力看透：</strong></p>
<p>楼主，谢谢你对贵州的关注！<br>我是贵阳的，想听听你对贵阳的看法，我07年在小河区2400买了120平方的新房子，今年八月初买了套市里的二手房，93年的，65平方，学区房，总价43万，送家具家电！<br>非常想听听你对贵阳房市的看法，还有金阳新区的看法，感觉金阳就是房地产撑起的，如果地产有个风吹草动，金阳会是最容易受打击的，不知对否？<br>另外93年的老房子以后卖时不好贷款，是不是会影响成交价格？<br>谢谢</p>
<p><strong>kkndme：</strong></p>
<p>刚从贵阳回来没多久，呵呵。<br>贵阳投资房产有一定的风险，主要是城市比较小，不好变现。如果我在贵阳投资，即使再贵也会选择喷水池附近市中心的楼盘，稀缺性较强，变现相对容易。<br>贵阳是一个城区尚未开始升级改造的城市，zf大力打造金阳花溪等外围区域，但是将来一定会遇到较大的交通瓶颈，城区的升级改造早晚都要启动。<br>关于金阳实际上就是政府的造城运动，因为市政府的搬迁对房价有一定的支撑力，但是随着人口的大量入住，从金阳到主城的交通可能出现瘫痪状态，谁又能保证政府不进行二次搬迁呢？<br>贵阳的美女确实很多啊，是这个城市最靓丽的风景，令人留恋。</p>
<p><strong>努力看透：</strong> <br>贵阳小了，为什么房子不容易变现呢？毕竟全省只有贵阳繁华点，地方小，人多，更应该容易变现啊！我指的是市区房，不含郊区</p>
<p><strong>kkndme：</strong></p>
<p>市中心中高档房屋变现是没问题的，但市中心老房变现也不是很容易。贵阳的城中心改造升级还没有启动，市区存在大量的老公房，而贵阳最需要的是改善型中高端住房。现在zf全力打造金阳等外延区域，大片的新楼盘拔地而起，二手房交易的活跃度远不如其他省会城市。</p>
<p>贵阳与成都、昆明这些西部城市略有区别，昆明、成都有大量的外地人口，这些外地人口构成了买房刚需，因此市区位置的稀缺性就显得尤为重要。<br>但是贵阳的外地人口相较昆明、成都要少，以本地改善型需求为主，所以城区楼盘的档次尤为重要。<br>作为相邻的省会城市，重庆的吸引力要大于贵阳，贵州许多地州的资金可能会被重庆分流。</p>
</blockquote>
<h2 id="富人越富、穷人越穷"><a href="#富人越富、穷人越穷" class="headerlink" title="富人越富、穷人越穷"></a>富人越富、穷人越穷</h2><blockquote>
<p><strong>我爱的飞飞：</strong></p>
<p>其实很多空军比较SB，天天叫着加息，说是提高收入就可以买得起房子，试问穷人手里10万，富人有100万，按照现在的利息，穷人每年整存整取10万不开税收是2250元，而富人得到的是22500，加息以后假设穷人每年收入是4000，富人是40000万，成千上万的富人每年多出40000，而生产资料和资源是有限的，当每个富人的4万流入市场，试问是不是又要通膨呢？所以加息是最愚蠢的均贫富方法。行之有效的办法其实是重新发行货币。但是除了改朝换代几乎不可能。<br>其实穷人一穷就注定穷下去，除了少数几个可以翻身，原因很简单，因为生产资料掌握在富人手中，富人为什么有生产资料的支配和拥有权，答案很简单，只有革ming。<br>由此则可以明白为什么房子可以按照富人的想法定价，就因为土地，建材等生产资料掌握在富人手中。<br>妄想房子降价其实是更愚蠢的想法，为什么？GCD拼命给公务员和arm加薪，这些钱用印刷机印出来发到公务员手里最终却让老百姓埋单？统治阶层当然首先第一位维护和最大化自己的利益，任何朝代都是如此，只有当民心涣散的时候才出台一些政策缓和民心。现在看CCAV，对社会主义这充满美好想象的词的强调都逐渐弱化了，你不得不承认，在GCD的领导下大家都有肉吃了，国家安定，在这里嚷嚷的，不过是对贫富不均不满而已。</p>
<p><strong>kkndme：</strong></p>
<p>今年朝鲜搞货币改革，重新发行货币，结果导致不可控的通货膨胀，财政部长给枪毙了。</p>
<p><strong>我爱的飞飞：</strong></p>
<p>所以民众还是愚蠢的，只看到了15元最后换成1元的落差和失落，没有看到除去附加值的生产资料的价值。货币改革是富人最不愿意看到的，跟加息是一个道理，因为改革让货币的附加值骤然缩水，富人的货币不再比穷人有更多的附加值，而统治阶级恰恰是富人，没人愿意搬石头砸自己的脚。所以为什么我说不可能。</p>
</blockquote>
<h2 id="通货膨胀的形成原因"><a href="#通货膨胀的形成原因" class="headerlink" title="通货膨胀的形成原因"></a>通货膨胀的形成原因</h2><blockquote>
<p><strong>我爱的飞飞：</strong></p>
<p>在谈谈通膨是怎么形成的。生产资料是有限的，生产资料其实一直都没有变，而货币只是一种虚拟附加值而已。像楼主所言，一个国家，有人手里有8元（假设他是建材行业的），有人有12元（假设是石油行业的），但是人心不足蛇吞象，建材行业的员工觉得不够用了，8元的想变成13元，石油行业的12元想变成20元。因此，建材行业把原来卖8元的水龙头提价成13元，对于石油行业的人，装修的时候拿着12元发现自己买不了13元的龙头了，于是琢磨着把石油卖到20元，由此各行业依次提价，物价越来越高，实际上水龙头还是水龙头，一桶石油还是一桶石油，生产资料始终没有变，稀少，远远不够人均分配，但是生产资料的价值变了，提高了。拿成都的房价为例，02年的时候成都人均收入800-1200，房价2000-4000，约为房价的3倍，现在成都人均收入2500-3000，成都房价7500左右，仍然为3倍比例，看似7500比2000翻了多翻，实际上房子作为所谓的生产资料，始终是稀缺的，在02年的时候，拿着当时的工资买4000的房子仍然不容易。任何时候，其实都是一种相对平衡的比例，而空军喜欢拿现在的工资跟过去的房价相比，但是那种状态太过理想，想明白的，就会觉得房子不贵。</p>
<p>什么时候房价会下降，一句话供求关系，人口减少是房价下降的唯一出路。即便是出台房产税，很有可能富人顶着房产税不卖，变相加租抵消房产税，特别当今租房市场存在中介的操纵，很多房子都是通过中介渠道才租出，垄断的中介忽悠房东集体涨价，房产税很容易就转嫁给租房者。ZF也不是完全不作为，当你开着车逛着公园坐着快铁地铁的时候，就应该加速印刷的钞票有一部分投入了基础设施建设，如果不通过税收和出让土地收入来建设，我们很可能还走在乡间小路上。</p>
<p>虽然瓷器国是中yang高度集权的国家，但是任何朝代都是诸侯之间相互制约，上面出台个政策，各个诸侯执行与否或者执行是否到位都可以影响房价甚至很大影响，且不谈上面是不是真的想降房价，即便是动真格，下面的诸侯听不听招呼是另外一回事。有心无力的事情不是不可能发生。共同富裕其实是一种美好愿望，因为人与人的竞争天性，不可能人人平等，只要有人还想凌驾于其他人之上，就永远不可能GC主义。</p>
<p>任何社会都是这样的形态，忍无可忍-geming-平稳-不满足-垄断与剥削-改革-改革失败-再次忍无可忍。为何历史反反复复如此？就是因为人的劣根性，因为人性的贪婪。所以周而复始而已。</p>
<p>人性的贪婪决定了社会进程，刚开始穷人只想平均，从富人手中夺取生产资料，当GEming之后，穷人开始不满足于仅仅是平均，穷人想要凌驾于其他人之上，想变成富人，于是利用geming占有的各种手段获取利益，最终变成了富人，被凌驾的穷人再次想通过变革改变自己的地位。。。。如此循环。。。</p>
</blockquote>
<h2 id="深圳-amp-昆明仇书记-amp-通货膨胀体制内高枕无忧、体制外自求多福"><a href="#深圳-amp-昆明仇书记-amp-通货膨胀体制内高枕无忧、体制外自求多福" class="headerlink" title="深圳 &amp; 昆明仇书记 &amp; 通货膨胀体制内高枕无忧、体制外自求多福"></a>深圳 &amp; 昆明仇书记 &amp; 通货膨胀体制内高枕无忧、体制外自求多福</h2><blockquote>
<p><strong>sprina0321：</strong></p>
<p>楼主真是高人啊，追了两天，终于看完了。也想向楼主请教下房事</p>
<p>不知楼主对深圳了解吗，我们来深圳七年了，结婚也好几年了，可是最近才去布吉买了首套，布吉的可园，二手，单价一万四。现在深圳关内10年的二手都一万六，好一点的两万，关内基本没新房了，有的都3万左右了。大量的新房都在关外，基本2万吧。我们本来也想买关内，可是想着同样的价格在关外可以买好点的，就买了关外，不知这个决定是否正确？按楼主的意思，还是要买市中心，可是市中心的话，只能牺牲面积，房子也旧，这样住着也不舒服啊。</p>
<p>另外，我父母就在昆明，他们本来在一环上有套房改房，挺方便的，就像楼主说的，可恨的仇书记要制造需求，现在他们的房子说是要拆了，他们现在想买，可是一环外的都8000多，他们觉得有点贵，买了以后，手上的钱就都用完了，又想干脆等回迁。楼主觉得要不要买呢？<br>我父母就我一个孩子，他们在深圳买过一套房子，就是市中心的塔楼，等我们不住了，这套房子要不要卖掉，还是留着出租好？</p>
<p><strong>kkndme：</strong></p>
<p>深圳不太了解，不过宁肯牺牲点品质也要选择市中心，这是无数人经过从市中心搬到郊区大户型再搬回市中心老房子而取得的宝贵经验，当然如果你在关外上班就另当别论了。<br>往历史人物上套，qh应该算作集酷吏与奸佞于一身，横施暴（）政早晚落到身败名裂的下场，不是不报时候未到。等拆迁主要是在昆明风险比较大，几年不知道能建起来，志远综合体就是很好的例子，如果有能力不妨先买一套。</p>
<p>至于说房子卖不卖关键你是否需要用钱，如果不需要，又没有更好的投资，不妨先留着。</p>
<p><strong>sprina0321：</strong></p>
<p>我有时候想，像QH这样的人应该不得好死，断子绝孙，老天还真是不长眼。</p>
<p>请楼主明示 志远综合体是怎么回事</p>
<p>我父母家就在东站，董家湾中间那里，原来厂里也在，现在厂子搬到开发区了，家里的房子也逃脱不了被拆迁的命运了。<br>现在家里在一环出去点看中一个房子，房子挺不错的，大社区，新房，算下来9000多，不便宜啊。一环内的估计我们买不起，家里人年纪大了，想住电梯房。</p>
<p>楼主对昆明现在的房价怎么看呢，会不会回调，感觉今年涨很多。<br>现在9000，难道以后涨到2万，和深圳现在价格一样？我和老公也工作很多年了，现在年收入30多万，我们都买不起2万的，我们去看过万科在深圳的新盘，房子没得说，带精装修，2万多一平，一套要300万，虽然很心动，也只能放弃，怎么现在昆明人这么有钱了？<br>按照通货膨胀来说，如果以后昆明的房子卖2万，那深圳的岂不是要卖4万，那我们的收入也会涨到60多万吗？哈哈，实在算不过来了。通货膨胀对我们的收入有影响吗</p>
<p><strong>kkndme：</strong></p>
<p>一环外9000多的新盘，昆明还真没几个，滨江俊圆9000多，但容积率太高，又有大量的回迁户，个人很不看好。翡翠湾达到了12000，云上城、翠园等要开的楼盘估计开盘价也要上万了。呵呵<br>昆明的房价，我预计市中心将达到2万，一环二环间15000，滇池板块将达到12000，北市区及世博板块将达到1万。东市和西市在8000-9000。螺丝湾板块最不确定，但未来不会低于9000。<br>志远综合体早在几年前完成了莲花池片区的拆迁，但迟迟不动工盖房，时隔几年一点动静都没有，拆迁户没有买房的现在还在租房住。</p>
<p>关于通货膨胀问题，体制内的职工工资一定会与时俱进的。体制外人员的薪水不取决于通货膨胀，而是取决于行业的利润率，企业的利润和个人的能力运气。对于多数竞争激烈，产能过剩行业内的民营企业一般员工，工资增长是很难抵御通胀的，而且由于通胀导致生产成本的价格上涨，减薪甚至裁员的可能反而更大。</p>
</blockquote>
<h2 id="长春"><a href="#长春" class="headerlink" title="长春"></a>长春</h2><blockquote>
<p><strong>wkzjx2008：</strong></p>
<p>楼主你好，请帮我分析一下，谢谢</p>
<p>我在长春</p>
<p>长春的市政府在前几年的时候搬到了城市的南部，南部因为是空地，所以盖的都是新盘，价钱现在7000多，而我工作的所在的位置是原来的一个商业区，这里原来都是学校，医院和一些机关单位，好企业的家属楼，因为原来的购买力强所以居民楼的一楼都变成了小店铺，所以形成了这个城市的一个没有大商场的一片繁华商业区，但现在随着原住民的逐渐迁走，这里租房的人多。但这里有一个优势是离市里最好的小学和高中都很近，这也是这里房价坚挺的原因。现在这里的二手房如果是大户型在5000左右每平米，小户型6000左右，基本都是八九十年代的房子，2000年以后的次新房很少，距离这个区域较近的一个新盘是商住两用的卖到9000多每平</p>
<p>孩子现在在这上幼儿园，堵车太厉害了，为了孩子我在这租的房子<br>我现在手里有20万现金，请问这片区域值得购买么，买大的还是小的，我已经贷过一次公积金贷款，现在已经结清</p>
<p>现在这个城市很远的地方新开的楼盘也要4000多一平米</p>
<p>请楼主赐教，不胜感激</p>
<p><strong>kkndme：</strong></p>
<p>政府所在地区域又是学区房，这样的房子优势还是很大的，但是由于有大体量的老房子存在，将来有可能大规模拆迁，而拆迁补偿却决于zf是否铁腕，如果遇到铁腕领导，补偿额一定不会太高。这是购房的风险。对于非一线城市，新盘的风险肯定小于老房。</p>
</blockquote>
<h2 id="佛山"><a href="#佛山" class="headerlink" title="佛山"></a>佛山</h2><blockquote>
<p><strong>爱佛僧傲瞪詹牧师：</strong><br>lz高人！<br>不知道来过佛山没有？佛山紧邻广州，两地的地铁即将贯通接轨，房价应该会快速飙升，但是另一方面，佛山是个制造业城市，村镇工业高度发达，外来打工的比较多，流动性很大，lz所说的，今后买房只是有钱人游戏，房租会高涨，这点对佛山这样的小城市不知道成不成立？村镇里还是有很多便宜的出租屋的，高端点的打工者，如果房租太贵，应该会嫌贵干脆回家发展，最后只能留下低端制造业产业工人吧？这样房租应该还是很难上涨。</p>
<p><strong>kkndme：</strong></p>
<p>佛山还真没去过，只去过东莞和中山，呵呵。<br>对于广州一带房价相对偏低的原因是广州并非全省唯一的大型繁华城市，而是广东省内形成了大片的都市群，使得城市的经济得到了均衡的发展。这是最健康的城市发展模式，但也制约了房价的上升空间。随着地铁的贯通接轨，佛山的房价将呈稳步上涨态势。</p>
</blockquote>
<h2 id="首付提高的逻辑"><a href="#首付提高的逻辑" class="headerlink" title="首付提高的逻辑"></a>首付提高的逻辑</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>请教楼主，最近有银行提高了首付，这是为什么？政府真要让中低层租房子吗？政府吃租赁的大蛋糕吗？</p>
<p><strong>kkndme：</strong></p>
<p>主要还是防范金融风险，政府调控的目的从来也不可能是解决穷人的买房问题。恰恰相反，金融风险来自于让穷人买房，所以提高首套房首付比例，杜绝穷人买房，才是防范金融风险的有效手段。同时可以推升租金上涨，政府推出的公租房才有市场，有钱可赚。</p>
</blockquote>
<h2 id="四线城市"><a href="#四线城市" class="headerlink" title="四线城市"></a>四线城市</h2><blockquote>
<p><strong>shs2009：</strong></p>
<p>楼主，我们这个城市离武汉60公里，四线城市吧。我打算在新开发的工业园区买一套房子，买的理由是认为工业区是人员比较集中的地方，应该有比较大的需求，无论租售都应该有潜力的。我的看法对吗？</p>
<p><strong>kkndme：</strong></p>
<p>四线城市一定要选择城中心或者高档住宅区买房</p>
</blockquote>
<h2 id="苏州工业园"><a href="#苏州工业园" class="headerlink" title="苏州工业园"></a>苏州工业园</h2><blockquote>
<p><strong>夏天来了我也来：</strong></p>
<p>我是昨天才看到LZ这个帖子的，一口气读完了，眼睛虽然有些累，但心里却是收获颇丰，今年四月ZY刚开始严厉调控的时候，我可是抱了一百分的信任，心想我们老百姓的好日子终于来了，终于可以用较低的价格买套属于自己的房子了，可现在都九月了，看着周围一直慢慢望上爬的房价，真的是失望极了！<br>我九月三号的时候刚定了一套二手房，是我们的第一套房子，不知道LZ是否了解苏州工业园区的发展前景和房价，我们这套房子在园区的中心位置，也相当于市区吧，位置还不错，可就是这个房子属于政府修高速路时的拆迁安置房，房龄有十年了，原来房东的两证上写的土地性质是“出让”，不知道这样的房子以后是否有升值空间？因为在苏州园区同样的地段，同样旧的拆迁房价格基本都快一万了（我们定的这个房子因为离马路有些近，而且在顶楼，户型是小户带阁楼，上下两层复式结构的那种，所以便宜一些，只有八、九千），附近的高档商品房价格也要一万五左右！苏州和上海离的这么近，如你所说，江苏的有钱人都跑到上海买房了，苏州的房价是不是很难涨呢，同时也担心以后房价再继续上涨，ZY会出重拳打击楼市，真到那个时候，房价是不是要暴跌呢？</p>
<p><strong>kkndme：</strong></p>
<p>土地性质“出让”没有问题，“划拨”才有问题。<br>zf初重拳打击的结果往往取得相反的效果，因为政府如果希望继续执政是绝不可能让房地产崩盘的，房地产的崩盘将同时埋葬现有体制，社会“和谐”将不复存在。如何让房地产持续稳定与gdP同步上涨是政府最大的难题，完全取决于领导的智慧，但是以现在的水平来看，是很难做到的。<br>苏州工业园区房地产不是很了解，但是一个工厂及仓储所在地，缺乏高科技与文化历史底蕴的支持，房价一定会涨，但涨幅一定有限。</p>
</blockquote>
<h2 id="住房公积金利率"><a href="#住房公积金利率" class="headerlink" title="住房公积金利率"></a>住房公积金利率</h2><blockquote>
<p><strong>facetowall：</strong></p>
<p>另一个问题啊，我准备用住房公积金购买首套房，在其它的一些帖子上看到政府将在某个时间点上加息，那么对住房公积金的贷款利息（3.87%）会不会同样上调呢？上调幅度会是多少？对这个比较关心，麻烦楼主给解答一下吧。谢谢了！</p>
<p><strong>kkndme：</strong></p>
<p>如果当年加息，再次年的元旦后贷款利率也会相应增加，但公积金贷款利率增加的幅度很小，不用担心。加息说明通货膨胀严重，如果不是连续过度加息，对房价没有影响。从长期看更是不可能影响房价上涨趋势，除非经济崩溃。如果经济崩溃，持有纸币也没有意义，等同于废纸。<br>90年代我国高度通货膨胀，银行存款年利率曾达到百分之十几，但并没有影响房价的上涨趋势。</p>
</blockquote>
<h2 id="济南-amp-大规律拆迁的城市房价不会下降"><a href="#济南-amp-大规律拆迁的城市房价不会下降" class="headerlink" title="济南 &amp; 大规律拆迁的城市房价不会下降"></a>济南 &amp; 大规律拆迁的城市房价不会下降</h2><blockquote>
<p><strong>facetowall：</strong></p>
<p>不知道楼主对济南的房市了解如何？去年接着全运会的东风，济南房价涨了35%到40%，让许多人措手不及。现在市区的新开盘的楼盘依据位置不同大约在8000到13000rmb每平方。济南奥体中心附近的房子在9000到13000rmb每平方吧。我和老婆都在济南高校工作，目前俩人月收入6000+，公积金1100多吧。相比于其它省市地区高校，无论工资还是公积金</p>
<p>都比较少。我感觉高校老师属于体制内的边缘群体，工作忙(很多人不认同这点)报酬少，并且目前已经没有什么福利分房了，都要到市场上购买商品房。我们的家庭情况是这样的：均为独生子女，目前有一个孩子，二岁了，双方父母均是事业单位退休人员，我父母退休金合计1万每月吧，她父母大约7000.由于我父母在济南有两套房改房，所以现在他们住一套，我们三口住一套，房产证上都是我父母的名字，所以我和老婆属于无房户。目前想买一套房子给岳父母住，毕竟我们俩是独生子女，将来接到济南来住是早晚的事。感觉济南的房价几乎没有下降的可能，因为全济南正处于最火热的拆迁阶段，山东省已经把济南的改造升级列为战略了，并且全国的知名地产商如绿地、中海、保利、绿城、万达(好像万科没有)都来拿地盖房并且已经推向市场了。目前看中了奥体中心附近的一套2005年的二手房，房子很新，毛坯房，环境物业都不错，大约120平米，单价得9100，总价110万。我们想拿出70万现金，再以公积金贷款50万(10万装修)&#x2F;20年，不知道这样有没有风险。一个是担心房价下跌，再一个加息。请楼主给出明示，指导一下，万分感谢。</p>
<p><strong>kkndme：</strong></p>
<p>大规模拆迁的城市，房价没有下降的可能，可以忽略政策因素。既然城市大规模拆迁，就晚买不如早买，这是本贴中一再提到的。</p>
<p><strong>facetowall：</strong></p>
<p>多谢楼主的解惑。感觉济南不像北京上海那样具有巨大的政经优势吸引全国的阔商巨贾和精英汇集，也不像昆明、杭州那样为渡假天堂，还不像西安、南京、武汉那样高校云集具有巨大的教育资源。也就是说济南不能吸引相当多的精英投资，始终是个不温不火的地方，所以济南的房价有点虚，再上涨的话就脱离了实际的承受能力。楼主对此有何看法？</p>
<p><strong>kkndme：</strong></p>
<p>济南的地理区位并不差，但城市搞的不好跟领导有关，济南的经济前景不错，而且房价的上涨是拆迁带动的，以后很多城市都会走这一步。</p>
</blockquote>
<h2 id="公务员小区牛逼"><a href="#公务员小区牛逼" class="headerlink" title="公务员小区牛逼"></a>公务员小区牛逼</h2><blockquote>
<p><strong>何金银银金何：</strong></p>
<p>不知楼主是否了解哈尔滨的房价？小弟有套小房子 想换大点的，现在可是时机？哎 早拜读你这文章 今年年六月份就能换套大的了，可惜现在搞得自己换不起了……杯具&amp;</p>
<p>哈尔滨的公务员小区是没有产权的，不知道这种房子买了做第二套之后要不要征税？而且也非常贵，按使用面积要1w多一平了</p>
<p>小弟小白，您有空给指点指点……</p>
<p><strong>kkndme：</strong></p>
<p>公务员小区比房产证和土地证还保险。我国不是一个法制国家，任何颁发的纸质文件的可信度都不高，反而公务员小区因为是特权房，信用度要远高于产权证。</p>
</blockquote>
<h2 id="房屋朝向只要不是纯北西就行-amp-买房首选市中心、公园地产"><a href="#房屋朝向只要不是纯北西就行-amp-买房首选市中心、公园地产" class="headerlink" title="房屋朝向只要不是纯北西就行 &amp; 买房首选市中心、公园地产"></a>房屋朝向只要不是纯北西就行 &amp; 买房首选市中心、公园地产</h2><blockquote>
<p><strong>pohangcity：</strong></p>
<p>楼主。兄弟在一北方省会城市太原，目前这里的商品房平均价为5000左右，上周看了市中心的一套房子，112平米，紧挨市区里的公园（有一大湖），周边就是万达广场，万达的房子均价8500，已经售完，这个房子售价7000，已经是现房，结构还可以，唯一的问题是不是正房，朝向向东，周边一片混乱，全是施工的、拆迁的，说以后要以万达广场为中心，打造太原的CBD，也不知道能不能实现。<br>房子总价74万，首付24万，按揭月供3400，现家庭年收入税后10万，不可以公积金贷款，我已有一套住房，不过感觉还款压力很大。<br>我的问题是：<br>1、楼主帮我房子一下这个房子值不值？我想以后自己居住，现在的房子可出租1500左右。<br>2、太原也有万达、恒大的楼盘，位置是在太偏，价格6000带精装，户型也好，如何取舍？<br>非常谢谢楼主~~~~~~</p>
<p><strong>kkndme：</strong></p>
<p>房屋朝向问题，随着城市房价的不断飙升，已经不那么讲究了。只要是不是纯北房或者纯西方，都可以接受。<br>建议首选还是城中心，特别是公园地产，未来将更稀缺。</p>
</blockquote>
<h2 id="zf搬迁"><a href="#zf搬迁" class="headerlink" title="zf搬迁"></a>zf搬迁</h2><blockquote>
<p><strong>xhyyhzy：</strong></p>
<p>楼主您好，从您的帖中收获很多。觉得以前真的被洗脑洗的很厉害，从天涯学到很多。非常感谢您，又让我明白了很多事情。</p>
<p>请教您，市政府从原来的市中心，搬迁到另外一个地方，相对较远，因为城市不大。好的医院，学校，各种好的资源都在市中心。现在搬到一个特别偏远，荒凉的地方，重新开始建设，政府这么做是什么意思阿？以后这些医院，学校也会搬吗？多浪费阿。另，您怎么看该城市未来房价的变化。（注，离上海很近的3线城市）</p>
<p>期待您的分析。</p>
<p><strong>kkndme：</strong></p>
<p>政府搬迁到郊区不仅仅是个别城市问题，而是大多数二三线城市面临的问题。政府的用意在于扩大城市规模，扩充人口，追求gDP的高速增长，但对于新开发出一块荒郊野地，没有政府的带头搬迁，是很难炒作起来的。政府的迁入是一个信号，告诉老百姓，政府都搬过去了，以后配套肯定不会有问题。于是概念将透支未来，房地产价格就会飙涨。但是未来建成后政府是否真的搬迁就不一定了。<br>医院和学校全部搬迁会加深社会矛盾，所以通常是在新规划的区域建分校。如果自住还是主城，如果投资投机，可以考虑新城。</p>
</blockquote>
<h2 id="俄罗斯"><a href="#俄罗斯" class="headerlink" title="俄罗斯"></a>俄罗斯</h2><p>有同志提起俄罗斯很可以再说一说的。</p>
<p>俄罗斯的前身叫罗斯公国。首都不在莫斯科，而在基辅。</p>
<p>建立罗斯公国的，是东斯拉夫人，日耳曼人眼中的劣等民族。有人说过，俄罗斯和西方国家的差别，并不仅仅是经济上的差别，而是民族和文化的差别。这种说法还是很有道理的。用我们现在的话来说，斯拉夫的人种有问题。善于侵略，欺软怕硬，野蛮无礼。这是斯拉夫人的特点。所以在罗斯的土壤，永远出不了骑士精神。</p>
<p>罗斯人信奉基督教，源于弗拉基米尔一世娶了东罗马帝国安娜公主为妻。所以我们看到的俄罗斯教堂全部是拜占庭式的。拜占庭帝国灭亡后，东正教的中心就搬到俄罗斯。</p>
<p>罗斯国并不是统一的帝国，而是象我们的西周，搞的是封建分封制（我国在秦以后就不是封建社会了，因为取消了封建分封制，丞相都是打工仔，这一点是与我们的课本不同的），到了十二世纪，礼崩乐坏，罗斯国分裂了，罗斯的周天子弗拉基米尔二世·莫诺马赫的统一大业未能完成，故罗斯的土地上居然出现了十八个公国，很有点象我们的十八路诸侯。</p>
<p>十三世纪，成吉思汗的孙子，术赤的儿子，英勇的拔都同志西征，一个强大的统一的蒙古帝国攻击分裂的罗斯诸公国，很有点欺负人的味道。于是强大野蛮的东斯拉夫人在金帐汗国的铁蹄下，当了孙子。<br>莫斯科公国的伊凡一世·达尼洛维奇以贿赂的方式从金帐汗那里获取了弗拉基米尔大公的封号，并把东正教罗斯教区总主教驻地从弗拉基米尔迁到莫斯科。</p>
<p>莫斯科大公是很有一手的，一面拍金帐汗的马屁，一面组织军队，终于利用金帐汗国的内部分裂，一举击败了马迈汗率领的大帐汗国军队，并且兼并了科斯特罗马公国、加里奇公国、白湖公国、乌格里奇公国、下诺夫哥罗德公国、木罗姆公国和苏霍纳河流域北部等广大东北罗斯地区。</p>
<p>14世纪，莫斯科大公依凡三世在乌格拉河战役中，迫使阿合马特汗撤退，终于结束了金帐汗国长达两个多世纪的统治。</p>
<p>直到1713年，莫斯科公国干掉了罗斯地区的绝大多数王公，才形成了统一的集权国家，正式命名为俄罗斯帝国。</p>
<p>罗斯公国打得最精彩的战役就是楚德湖战役。<br>对手是称霸普鲁士的赫赫有名的三大骑士团之一，条顿骑士团，欧洲强大到令人恐怖的军事组织。<br>罗斯的最高指挥官是亚历山大诺夫格罗德公爵。<br>俄罗斯联军一方有1.5万到1.7万，主要是步兵。而条顿骑士团的大约有1万人，以重骑兵为主，其中大骑士应该不下千人，这是一支让整个欧洲都发抖的军队。<br>罗斯联军的步兵排成密集队形，据守冰湖东岸。骑士团的重骑兵以楔形阵发起冲锋。按常理看这是一场毫无悬念的战斗，罗斯步兵在强大的世界第一军事组织面前应该不堪一击。<br>但是亚历山大诺夫格罗德公爵是军事天才，军事才能相当于中国的乐毅。这位乐毅公爵仔细研究了重骑兵的楔形阵，认为弱点在于两翼的防御力量有限，如果重骑不能迅速撕开步兵防线，重骑的两翼会慢慢被侵蚀。<br>亚历山大同志于是把联军中主要的轻步兵安排在中间，列成加厚的方阵，消磨条顿重骑的突击能力，然后把他自己的诺夫格罗德精锐步兵放在两翼。<br>条顿骑士团的攻击开始还是成功的，但无法撕开罗斯步兵的军阵。最惨的还是条顿骑士狂妄自大，非要在楚德湖的冰面上发起冲锋（冬天结了冰），可想而知重骑兵跑到冰面上冲锋是什么样的效果，战争逐渐陷入僵持。<br>亚历山大的精锐步兵攻击骑士团的两翼，骑士团被包围了。亚历山大同志果断的派出最精锐的骑士亲兵卫队，从右翼后方包抄攻击骑士团。<br>可怜的条顿骑士，拥有世界上最强悍的战力，但在湖面上根本发挥不出来，大量的重装甲骑士掉进冰窟窿里，条顿骑士大团长也被俘虏了。<br>每次看这段历史，都为条顿骑士团唏嘘不已。</p>
<p>条顿骑士团败的最惨的是另一场战役，塔能堡。是中世纪欧洲最大规模的战争。<br>对手是波兰、立陶宛联军。<br>著名的波兰小说“十字军骑士”就是讲的这段历史。<br>骑士团的大团长是荣金根，大概有投入1万多名士兵。<br>波兰、立陶宛联军大约有3万名士兵。<br>联军方面指挥官是波兰国王Jagiello和立陶宛大侯爵Witold。<br>条顿骑士大团长荣金根是一个位标准的日耳曼大骑士，开战前，骑居然给波兰国王Jagiello送去两把剑，表示要进行一场骑士之间的较量。斯拉夫人是不敢这么玩命的，立刻拒绝了日耳曼骑士的要求。<br>条顿骑士团的骑士拥有强大的武力，真不是盖的，荣团长挥动旗枪组织冲锋，立陶宛军立刻溃败，波兰的翼骑兵也根本无法抵挡日耳曼骑士强大的冲击力，准备开始溃逃。这时一个意外发生了，大团长兼倒霉蛋荣金根同志在奋勇冲锋时突然遭了冷箭挂掉了，骑士团缺了指挥官陷入混乱，无法阻止有效的进攻，波兰立陶宛联军乘机组织起冲锋，条顿骑士团莫名其妙的大败。<br>真是谋事在人，成事在天。强大的条顿骑士的惨遭溃败居然因为一个意外。</p>
<h2 id="珠海-amp-唯一自住房不只是投资-amp-调控是最佳的选房时机"><a href="#珠海-amp-唯一自住房不只是投资-amp-调控是最佳的选房时机" class="headerlink" title="珠海 &amp; 唯一自住房不只是投资 &amp; 调控是最佳的选房时机"></a>珠海 &amp; 唯一自住房不只是投资 &amp; 调控是最佳的选房时机</h2><blockquote>
<p><strong>期待艳阳天：</strong></p>
<p>楼主，想就以下问题请教：<br>1、珠海属几线城市？您对投资珠海的房产前景作何分析？<br>2、我一朋友刚出手一套自住的房，打算租房住一段时间，想抄底再入，他是坚信房价会跌派，考虑到目前他供房确实有困难，且对刚出手的那套房不是很满意，请问他的做法是值得借鉴？<br>3、我目前的对自住的房朝向及大小不太满意，也想倒手后再入，我目前的房出手的话比同地段的新房价略低10-30%（主要是小区及户型有差异），如果换大、好的承受不了借贷压力，但如果淘二手房的话，可以在附件找比我目前房价低20%左右的二手房，请问我是否可以考虑换个朝向、大小更满意的房？现在是好时机吗？</p>
<p><strong>kkndme：</strong></p>
<p>以上，请楼主不吝赐教！</p>
<p>珠海是个适合居住的城市，干净整洁，生活节奏不快，相当安逸。<br>将自己唯一一套自住房卖掉，跌了买回，这样做的投机性心理太强，风险很大，往往得不偿失。当然如果为了换更大更好的住房就令当别论了。</p>
<p>人的一生很短暂，在衣食住行中，住占了人生的大部分时间，有一个温暖的家，生活才觉得安逸。如果有能力确实应该换一套自己满意的舒适的住房。至于出手时机，我觉得房产不是股市，不能总想着抄底逃顶，只要房价的长期上涨趋势未变，调控时期正是选房的最佳时机。</p>
</blockquote>
<h2 id="经济崩溃，最后接盘的是老百姓"><a href="#经济崩溃，最后接盘的是老百姓" class="headerlink" title="经济崩溃，最后接盘的是老百姓"></a>经济崩溃，最后接盘的是老百姓</h2><blockquote>
<p><strong>vipboy223：</strong></p>
<p>看了LZ的帖子，受益非浅！谢谢！<br>有一个问题还请教下：就像LZ所说，此次调控是ZY布局，赶出炒房者和小的kfs，目的是实现房子的垄断。但从政策和执行看，停止3套房贷并没有真正打击到真的炒房者，至多是改变了预期；二套房首付比例和利率的提高，确实实实在在的把改善性需求排除在外了；现在有些银行对首套房的首付都提高到4成，利率优惠也没有7折优惠了。当然我很愿意相信这次ZF在保护LBX，阻止老百姓去接房产暴利的最后一棒；显然这不是真正的原因。当然，首付和利率提高可以让银行增强金融防范能力。<br>随意想请教LZ对这个问题的看法；</p>
<p><strong>kkndme：</strong></p>
<p>政府阻止老百姓去接最后一棒？晕，如果真的到了崩盘的一天，接最后一棒的一定是老百姓，而且zf会千方百计的让老百姓接最后一棒。<br>分析问题不能用喜羊羊的头脑。</p>
<p><strong>vipboy223：</strong></p>
<p>显然LZ没有仔细看我写的内容。<br>换种方式问下：改善性需求是否现在就入市？首付高就不说了，利率1.1倍可是很厉害的；</p>
<p><strong>kkndme：</strong></p>
<p>如果是忙于拆迁的二三线城市就要抓紧买了，利率高也认了。<br>如果是一线城市不妨再看一下，但是观望也是有风险的，一旦上涨就买不到合适的房子了。</p>
</blockquote>
<h2 id="命运之矛"><a href="#命运之矛" class="headerlink" title="命运之矛"></a>命运之矛</h2><p>荣金根团长的挂掉会不会跟命运之矛有关呢。</p>
<p>1189年，神圣罗马帝国皇帝红胡子腓特烈一世在与教皇和解后，与狮心王理查一世、腓力二世·奥古斯都开始了第三次十字军东征。然而，红胡子腓特烈一世在小亚细亚渡过萨列法河时竟然意外溺死。原因是他突然丢失了传说中的命运之矛。</p>
<p>命运之矛也叫郎基努斯之枪。</p>
<p>正是一个叫郎基努斯的罗马士兵用这杆抢刺入了十字架上耶稣的身体，这只枪因沾有圣血成为圣物。</p>
<p>传说持有命运之矛的人可以主宰世界的命运，但失去的人会即时毙命，神圣罗马帝国的皇帝红胡子腓特烈一世就拥有这只命运之矛。</p>
<p>二战时期，希特勒从维也纳博物馆夺取了命运之矛，差不多占领了整个欧洲。但是在1945年4月30日下午2点10分，命运之矛又被美军夺走了，不到2小时，希特勒便吞枪自杀而亡，死时是下午3点30分，这难道仅仅是巧合？</p>
<p>荣金根是否也拥有过这只命运之矛？</p>
<p>我以为我们每个人都有一把属于自己的命运之矛，当你得到它的时候，你的事业、家庭、健康、财富都相当不错，但是当你失去它的时候，你的生命也将完结。</p>
<p>每个人对生命之矛都有自己的理解，希望我们都能够找到它。</p>
<h2 id="除非外族入侵或全国大饥荒，否则双轨制决定了房价不会崩盘"><a href="#除非外族入侵或全国大饥荒，否则双轨制决定了房价不会崩盘" class="headerlink" title="除非外族入侵或全国大饥荒，否则双轨制决定了房价不会崩盘"></a>除非外族入侵或全国大饥荒，否则双轨制决定了房价不会崩盘</h2><blockquote>
<p><strong>戈者：</strong></p>
<p>不要枪，不要炮，我只要选票，有了票，谁不让老百姓好过，就让谁滚蛋</p>
<p><strong>kkndme：</strong></p>
<p>我们连依法治国都办不到，何谈选票。<br>我们是实行双轨制国家，在经济全球一体化的今天，内部并不与外部接轨。这个好比是互联网，我们重要部门的内网是绝不会跟外网联结的。<br>改变只有两个前提，一是外族入侵，二是出现全国性的大饥荒。否则期望房价崩盘重建一个新世界是没有可能的。</p>
</blockquote>
<h2 id="kkndme聊北宋、唐朝"><a href="#kkndme聊北宋、唐朝" class="headerlink" title="kkndme聊北宋、唐朝"></a>kkndme聊北宋、唐朝</h2><p>北宋时期，有个文豪及公务员叫苏东坡，一辈子也没能在首都开封买上房子，不得已，在外省小县城投资了几套房地产。苏文豪公务员的儿子在首都结婚的时候，居然都没搞到一套新房，苏公务员急眼了，最后想办法跟朋友借了一套房子，总算把喜事办了。北宋跟我们的现实还是有区别的，象苏文豪公务员这样的中层国家干部，在京城大都是有几套房子的。可见北宋时期公务员待遇还不如现在。</p>
<p>苏文豪公务员的弟弟苏辙就比较幸运了。该同志也是公务员国家干部，工作上兢兢业业，勤勤恳恳，熬了几十年工龄，在七十岁的时候终于买到了房子，但是买的位置还算不上首都开封，而是在开封南边的许昌买的，相当于首都的卫星城。就好比在北京买不起房的同志，跑到天津去搞了一套。<br>苏辙公务员同志专门为买房的事写了诗，“我生发半白，四海无尺椽”，我老未有宅，诸子以为言”诗的意思反正是比较愤青，很想现在的傻空</p>
<p>唐朝还有个白居易同志，也是个公务员，级别相当于正处级，工作是在中央办公厅负责校对红头文件。白公务员职务一般，但工资可不低，每月一万六千钱。但是白公务员却买不起房，在长安东郊常乐里租了四间茅屋，因为房租比较高，城区的租不起，所以上班比较远，很潇洒的买了一匹马，相当于我们买车。白公务员还是很懂享受生活的，雇了两个保姆，每月的总支出大约是七千五百钱。白公务员很象蜗居里的海萍，不肯高价租城里的好房子，而是把剩下八千五百钱存起来，一心要买套房。但是存了十年，他也没能买的起长安的房子，白公务员兼诗人的文学功底很高，但是不懂经济，不了解通货膨胀。</p>
<p>最后白公务员急了，很愤青的说：“你们局级干部在长安炒房子，我处级干部就去周边炒房子。”于是白公务员跑到长安城的卫星城——陕西渭南县，买了套房子，平时在单位蹭房子住，逢假期和周末回渭南的家里跟老婆叉叉呕呕。可见唐朝时处级及以下公务员待遇也就跟我们的都市普通小白领差不多。</p>
<h2 id="宋代房奴"><a href="#宋代房奴" class="headerlink" title="宋代房奴"></a>宋代房奴</h2><p>关于房奴，也是宋代就有记载。宋代有本书叫《白獭髓》，写的就是房奴生活：“妻孥皆衣蔽跣足……夜则赁被而居。”<br>大意就是所有的存款不够，还借来钱砸在房地产上，不得不节衣缩食还债，别说家里人买新衣服，就连被子都是租的。<br>不知此人炒房后来发财没有，那时买房可都是全款，没有银行贷款一说。</p>
<h2 id="ZG民主"><a href="#ZG民主" class="headerlink" title="ZG民主"></a>ZG民主</h2><p>只许州官放火，不许百姓点灯，这就是我们的民主</p>
<h2 id="王安石的青苗法之国家出政策的动机"><a href="#王安石的青苗法之国家出政策的动机" class="headerlink" title="王安石的青苗法之国家出政策的动机"></a>王安石的青苗法之国家出政策的动机</h2><p>关于呼唤国家出政策已达成自己买车买房心愿的空空们，有必要听听王安石变法的故事。</p>
<p>我国的官僚有几千的当官经验，最不怕的就是新政策，只要是新政策，无论目的是为了民生还是敛财，反正就找到了由头，就有办法敛财，有空子可钻。</p>
<p>王安石变法的初衷是好的，但是不了解中国的官僚体制，变法让老百姓吃饭都成为了困难，加速了北宋的灭亡。所以盼着出房产税的空空要认真的用脑子想问题，梗着脖子泄愤是没有用处的。</p>
<p>说说王安石同志的青苗法。</p>
<p>青苗法，按理说是一项最为民生考虑的政策。</p>
<p>在百姓青黄不接，缺少粮、钱的时候，让老百姓自己估计当年谷、麦产量，先向官府借钱，谷熟后还给官府，称“青苗钱”。</p>
<p>青苗法规定把以往为备荒而设的常平仓、广惠仓的钱谷作为本钱。每年分两期，即在需要播种和夏秋未熟的正月和五月，按自愿原则，由农民向政府借贷钱物，收成后加息，随夏秋两税纳官。</p>
<p>实行青苗法的目的肯定是好的，可以让农民在青黄不接时免受高利贷盘剥、并且让农民不至于在没粮的时候土地被大地主所兼并。同时,让政府获得一大笔“青苗息钱”的收入————单纯为了民生，政府收不到钱的事情王安石同志也不同意。 </p>
<p>按理说，出了这个政策，农民该欢呼了，zf出面了，农民们不用受地主老财剥削了，很多傻空老农民鸡冻的喊：“还是王领导的政策好啊。”</p>
<p>地方官员也鸡冻了：“太牛了，发财的机会来了，王领导这人人品虽然不怎么样，但是很给我们挣钱的机会啊。”</p>
<p>于是，王领导的青苗法一推行下去，完全走样了。</p>
<p>首先青苗息钱从王领导定的年息二分，本来就挺高的贷款20%利率，比我们房贷可高多了。但是就这个年息二分，在地方一下子变成了半年息二分，年利率高达40%：因为是春季发一次贷款，秋季发一次贷款，所以地方官每半年收回本利，还是按二分收，所以变成了半年息二分，年息四分。到了后来地方官想怎么收怎么收，甚至年息高达百分之几百。</p>
<p>傻空农民立刻傻眼，说反正自愿的，我不贷还不行吗？接着管地主老财借不行吗？</p>
<p>zf说了：不行。你贷也得贷，不贷也得贷，于是变成了强制高利贷。</p>
<p>王领导在推行青苗法的时候，还下了定额，贷款多少那是有任务的。任何朝代推行某个政策，只要涉及到收钱，都是有任务的。</p>
<p>王领导下达了任务，地方官必须完成，不然要罢官丢脑袋，扣个阻碍变法的帽子可不得了，同时本着无利不早起的伟大思想，不但要完成任务还要层层加码。</p>
<p>这下，傻空老农民彻底傻了，饭都吃不上了。</p>
<p>结果是王领导给zf增加了税收，官员闷声大发财，老百姓彻底崩溃。</p>
<p>所以请呼唤房产税的朋友，好好读一下王安石变法</p>
<blockquote>
<p><strong>tjOOSAN:：</strong></p>
<p>我想 这个 “房产税”出不出。不是什么决策问题吧？</p>
<p>是我们产权的解释问题！我们产权只有70年，换句话说就是租七十年，地和房子本身还是国家的！那么国家的房产再收税，是不是有点法理不通呢？ 这是 郎咸平说的</p>
<p>楼主！这个。你让我再次质疑你了</p>
<p>我其实 很想看进去你的文章！可惜。。。。唉 这成了您的历史秀了~~ 海</p>
<p><strong>kkndme:：</strong></p>
<p>连法制国家都不是还提什么法理。</p>
<p> 拆迁条例是违背宪法的，后来又违背了物权法，但是管用的既不是宪法也不是物权法，而是拆迁条例。一群人说要修改条例，牵扯到利益就没了下文。</p>
<p>有时间你不妨研究一下，看看我们的政策有多少是违反宪法的。<br>在中国拿法理说事就比较搞笑了</p>
</blockquote>
<p>读懂历史</p>
<p>对自己真没坏处。</p>
<p>王安石不但动员zf放高利贷。</p>
<p>还是我国搞中央政采、垄断企业和官倒的先驱。这就是王领导推行的均输法。</p>
<p>宋初以来，为了供应京城皇室、百官、军队的消费，在东南六路设置发运使，负责督运各地“上供”物质。 　　</p>
<p>发运司只照章办事，各路丰年物多价贱时不敢多办，歉年物少价贵时却又必须办足。物货运到京城后往往因不合需要而削价抛售，朝廷所需却又要另去搜括。这些做法给富商大贾操纵物价，控制市场，囤积居奇提供了方便。</p>
<p>王领导希望能够节省劳务费，减少政府的财政支出和减轻人民的负担，就想出了均输法，相当于中央政府采购。 </p>
<p>于是官府直接做生意，行政机构变成了大型国有垄断企业。</p>
<p>中石化、中石油、中国移动、电力等大企业的苦大家都吃过。</p>
<p>垄断企业的低效率，fb，强迫定价，强制消费，这些古今中外都是一样。</p>
<p>而且老百姓跟官府做生意，必须得上供。zf采购那是要多黑有多黑。<br>紧俏商品，官倒搞双轨制，体制内搞配额，体制外高价卖指标。<br>结果是zf闷声大发财，老百姓直接崩溃。</p>
<p>王领导的独断专行，刚愎自用还是很为大家所称道的，呵呵</p>
<p>张居正的一条鞭法从地主阶级的利益出发，反而成功了。</p>
<p>而王领导从民生的利益出发，搞改革，失败的很惨。</p>
<p>不能不说，历史是很搞笑的</p>
<blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>符合地主阶级利益的张居正变法？？</p>
<p>怎么后来张被清算呢？</p>
<p>封建社会官僚本来就是地主阶级的代言人</p>
<p><strong>kkndme:：</strong></p>
<p>张同志的清算不是因为变法，而是把万历同志架空了，比皇帝还牛的首辅能活到寿终正寝已经算是奇迹了，跟他的变法无关。</p>
<p>这位徐阶先生的得意门生，政治上是青出于蓝的，无懈可击，贪污受贿大概也师承徐阶吧，呵呵</p>
<p>很多人只对张居正同志是否和太后有一腿感兴趣，呵呵</p>
<p>张居正通常是以正面形象出现，但是在贪污受贿方面是很有一手的。另一个贪污受贿的正面人物是戚继光。</p>
<p>我国历朝历代的体制，不搞点潜规则什么事都干不成。</p>
<p>比如一事无成的海瑞，光赢得了个好名，其实毫无建树。</p>
<p>关于写青词的严嵩搞掉了正值的夏言，忍耐力超强的徐阶搞掉了老奸巨猾的严嵩，心狠手辣的高拱搞掉了徐阶，而张居正又搞掉了高拱。</p>
<p>这是各机关、企业学习政治斗争的最好案例啊。</p>
</blockquote>
<h2 id="什么是社会公平"><a href="#什么是社会公平" class="headerlink" title="什么是社会公平"></a>什么是社会公平</h2><p>古今中外，任何一次武装革命，无论最终成功还是失败，上位者因为野心的极度膨胀，都变得更加专制。陈胜、李自成、朱元璋、罗伯斯皮尔、斯大林、 ，都是一个个鲜活的例子。</p>
<p>真正公平的社会并不是均贫富、等贵贱的乌托邦，也不是贵族享有领地少女初夜权的强权社会，而是法制社会，大家在一个完善的法律制度下，享有人身和财产自由，知道什么该做什么不该做，法典之下对于任何人都是平等的，无论是平民还是权贵。</p>
<p>作为爱好和平，小富即安的我等小民，最愿意看到的是社会的稳定而不是动乱。</p>
<h2 id="还是有很多有钱人"><a href="#还是有很多有钱人" class="headerlink" title="还是有很多有钱人"></a>还是有很多有钱人</h2><p>说起空空们们不买房是因为没钱，我还真不相信。</p>
<p>在某二线城市，调控重拳刚出的时候，我赶紧去买房，碰见一个大姐。</p>
<p>那个大姐很有意思，说从08年底看房，一直觉得房价高，所以坚决不买，结果等到了2010年，一直盼着降，但是调控政策刚一出就心慌了，害怕后面是大暴涨，赶紧把房买了，这位大姐买房是一次性付款。到现在房价涨了30%。</p>
<h2 id="双轨制之体制内的福利"><a href="#双轨制之体制内的福利" class="headerlink" title="双轨制之体制内的福利"></a>双轨制之体制内的福利</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>水木社区上有很多愤青打电话给北京建委，举报领秀慧谷捂盘内购的事，我跟了个贴子说不要太幼稚，结果被骂的很惨。今天他们接到建委电话了，说是没有违规。我在想：有这些不明真相的群众存在，房价怎么会跌呢？通胀怎么会停呢？股市IPO怎么会停呢？底层不被收割就奇怪了</p>
<p><strong>kkndme：</strong></p>
<p>让北京建委去查国资委就比较搞笑。北京的房优先安置各大部委，剩余很少的部分才用于商品房开发，所以才说北京四环房价5万一平都不算贵。</p>
</blockquote>
<h2 id="开发商思维"><a href="#开发商思维" class="headerlink" title="开发商思维"></a>开发商思维</h2><blockquote>
<p><strong>鼻使豆豆：</strong></p>
<p>高房价不可怕，可怕的是没有辩别是非的能力，明明是老百姓，却有开发商的意识，可悲</p>
<p><strong>kkndme：</strong></p>
<p>其实这个道理是很浅显的，你不买房并不能代表房价不涨，而你买了房不但可以住的舒适，还可以获利。反而是有开发商的思维才能有好日子过。</p>
<p>这个道理跟炒股票是相同的。大家知道，股票与房地产不同，并不能创造财富，只是财富再分配的工具，但是财富再分配，是庄家分配散户的钱，而不是散户分配庄家的钱。所以炒股要有庄家的思维才能挣钱。</p>
<p>道理都是一样的。</p>
</blockquote>
<h2 id="农民政权的缺点"><a href="#农民政权的缺点" class="headerlink" title="农民政权的缺点"></a>农民政权的缺点</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>请问楼主，为什么历史上的农民起义军领袖，一旦得势后比原来的统治阶级还残暴呢？像黄巢，张献忠等等</p>
<p><strong>kkndme：</strong></p>
<p>是因为缺乏一个纲领。</p>
<p>农民伯伯因为没饭吃拿起武器造反了，造反之后怎么办？——对不起，从来没想过。国家治理到底是怎么回事？——对不起，一概不懂。</p>
<p>比如陈胜，刚占了一块地盘就不知道姓什么了，老子天下第一，农民暴富后，就想拼命享受，自己的属下和革命战友在自己眼中就是一坨屎，就更别说老百姓了。武装还没胜利呢，就生怕别人夺权，大搞内部政治斗争。吴广挂掉最高兴的就是陈胜。太平天国表现的更是淋漓尽致。</p>
<p>朱元璋就不同，是个军事天才和政治天才，懂得治国之道，有做皇帝的野心，也懂得当皇帝需要的知识，朱清楚的知道靠均贫富等贵贱是不能坐天下的。</p>
<p>古代能够夺取天下的，基本都是贵族阶层，有野心有理想有知识。最典型的就是李世民。汉高祖刘邦同样不是单纯的流氓无产者，他幸运的娶了吕雉，一跃成为地主家族的一员。</p>
<p>历史上只有朱元璋是个异数。这也是毛为什么要推崇朱的原因。</p>
</blockquote>
<h2 id="郑州有前景"><a href="#郑州有前景" class="headerlink" title="郑州有前景"></a>郑州有前景</h2><blockquote>
<p><strong>larryzs：</strong></p>
<p>最喜欢看楼主评说历史了</p>
<p>呵呵，看来历史要重新好好读一下了</p>
<p>不知道楼主对河南郑州的房价了解吗？</p>
<p>希望楼主对郑州将来的发展分析一下。</p>
<p>现在郑州的房价均价也差不多快到6000了，郑东新区的一万以上。</p>
<p>市政府也在大力修建地铁，个人认为还是有发展前景的。</p>
<p><strong>kkndme：</strong></p>
<p>郑州的交通区位决定了经济发展的空间，同意你的说法，很有前景</p>
</blockquote>
<h2 id="公园地产是稀缺资源"><a href="#公园地产是稀缺资源" class="headerlink" title="公园地产是稀缺资源"></a>公园地产是稀缺资源</h2><blockquote>
<p><strong>klid：</strong></p>
<p>LZ，省会城市二环边公园边房产和市中心无天然气房产，选择哪个比较好？</p>
<p><strong>kkndme：</strong></p>
<p>公园地产未来是稀缺资源，市中心虽好，但是没有天然气毕竟不方便。两者相较还是公园边合适。</p>
</blockquote>
<h2 id="张献忠屠川"><a href="#张献忠屠川" class="headerlink" title="张献忠屠川"></a>张献忠屠川</h2><p>关于张献忠屠四川，尽管学术上存在争议，但大致是不差的，虽不见于正史，但《蜀碧》及《求幸福斋随笔》都有记录。很多学者也做了大量的考证。</p>
<p>张献忠此人曾经读过书，做过zf最基层公务员——捕快，但是被开除了。人格比较扭曲，不但好色，且好杀成性，是典型的流氓无产者。大明的苦难子民指望这样的有严重心理疾病的杀人狂拯救，那是毫无指望的。</p>
<p>张献忠每攻城略地特别喜欢把当地的妇女同志送进军营当营妓，并且乐此不疲，军队没粮了，就把美丽的少女切成块做成腊肉。把儿童成群的围起来用火烧，谁往外跑就用刀刺，也是张大义军领袖最喜欢的游戏。</p>
<p>对于张的行为，我们只能用有严重的心理疾病来解释。</p>
<p>一个仇视社会的愤青，掌握了军队，破坏力是相当可怕的，是人民的灾难。</p>
<p>张攻陷四川建立大西国政权，与柬埔寨的红色高棉政权简直是异曲同工。以至于清军进入四川受到了百姓的欢迎而不是抵抗。这跟越南入侵柬埔寨，越南军受到了柬埔寨人民的欢迎是多么相似啊。</p>
<p>人民的眼睛是雪亮的，违反人性的，即使打着爱国的旗号，也终将被人民抛弃。</p>
<h2 id="洪秀全、黄巢、李自成"><a href="#洪秀全、黄巢、李自成" class="headerlink" title="洪秀全、黄巢、李自成"></a>洪秀全、黄巢、李自成</h2><p>洪秀全同志，人生比较悲剧，人家好歹是个落地秀才。洪教主考了20多年，连个秀才都没考上，相当于小学都没毕业。</p>
<p>洪教主考试不行，搞邪教确是个高手，夜里做梦居然梦见上帝（形象大概是个白胡子老道）说洪教主是他的二儿子。这个梦确实不太靠谱。很可能是洪教主有意编的。</p>
<p>洪教主的拜上帝教应该算是白莲教的一支或者说是余孽。</p>
<p>洪教主搞革命，对解放劳苦大众却一点不感冒，最感兴趣的是一夫多妻制，娶了88个后妃。好像历史上的农民军领袖对妇女同志都有出奇好感，大概是小时候性压抑的结果。</p>
<p>太平天国攻下南京得了半壁江山，洪教主从41岁开始，直到11年后自杀，竟然没出南京城一步。大概是收罗的漂亮的妇女同志太多了，实在没有时间干别的。</p>
<p>比起张大义军领袖的变态，洪教主还是比较有人性。好色，人之天性。</p>
<p>不过洪教主进南京，并没有因为女性的爱情滋润，而让他变得温柔。虽然没有张大领袖变态，实行的也是三光政策：杀光、烧光、抢光。</p>
<p>“凡掳之人，每视其人之手，如掌心红润，十指无重茧者，恒指为妖，或一见即杀，或问答后杀，或不胜刑掠自承为妖杀，或竞捶楚以死。”大意是手上没长茧子的就是妖人，就要统统杀掉。</p>
<p>农民起义带来的不是均田地等贵贱的乌托邦，而是血腥恐怖</p>
<p>说起洪教主玩弄的美女确实让人流口水，除了88个妃子外，女官侍婢不计其数，算下来用了11年时间玩了2300名妇女。</p>
<p>有一本《江南春梦笔记》：王后娘娘下辖爱娘、嬉娘、妙女、姣女等16个名位共208人；24个王妃名下辖姹女、元女等七个名位共960人，两者共计1169人。以上都属嫔妃，都是要和洪秀全同床共枕的。天王府不设太监，所以另外还有许多服役的“女官”。以二品掌率60人各辖女司20人计算，合计为1200人。各项人数加起来，总计有2300多名妇女在天王府陪侍洪秀全一个人。</p>
<p>一个农民当了教主，就有这样的眼福。换做了傻空当教主，会怎么做？</p>
<p>黄巢比洪教主学问要高一些，但是屡试不第，当了私盐贩子。</p>
<p>从起义的第一天开始，黄巢的脑子里也从来没有过百姓该如何如何的。</p>
<p>他是一个彻头彻尾的投机分子，说是义军，不如说是强盗。</p>
<p>新唐书中说，贼军所过州县，老百姓皆烧杀殆尽。黄巢的兵可并不懂三大纪律八项注意，那是能抢救抢，抢不了就烧就杀。</p>
<p>无论是旧唐书、新唐书、还是资治通鉴，从头到尾，就没有出现过黄巢的一句好话。</p>
<p>黄巢攻陷广州，至少屠杀了十二万人，把皇帝气晕了。</p>
<p>皇帝还知道体恤子民呢，而黄巢就是彻头彻尾的强盗外加杀人犯。</p>
<p>黄巢攻进长安当了天子，充分显现了流氓无产者的本质，穷奢极欲，挥霍无度，治理国家的事彷佛就跟他没有一点关系。不搞建设就只能做吃山空，结果长安的粮食都被糟蹋完了。</p>
<p>长安没有余粮，黄巢就把长安老百姓抓来，煮着吃，十万大军靠吃老百姓过日子。</p>
<p>幸好老天开眼，官军打进了长安，结果是老百姓对官军夹道欢迎。<br>农民军真是义军吗？</p>
<p>不但中国的农民军领袖都是杀人魔鬼的化身，就是法国资产阶级大革命领袖罗伯斯皮尔，同样也是法西斯暴政的先驱者。最后被人民送上了断头台。</p>
<p>只有一个真正的法制化国家，人民在法律的制约下，享有人身与财产自由，才能够安居乐业。</p>
<p>李自成在军队纪律上，是要比张献忠高明一点的，所以李自成打进了北京。李自成到北京后，拷贝了黄巢进长安的淫乐经验，对美女极尽淫乱之能事，对百姓烧杀抢劫做的也很出色。</p>
<p>历代农民军对妇女的态度与《水浒传》中梁山好汉完全相反。</p>
<p>施耐庵笔下的梁山好汉们似乎对妇女有天生的仇视，动不动就把女同志劈死，李逵甚至终生不尽女色，就凭这一点，我们只能说梁山好汉是农民军中的异类。</p>
<p>但是梁山好汉不是为了起义，而是为了招安。一群由小公务员和渔民组成的社会最底层群众梦想通过拉山头再跳槽的方式走进金字塔的中层，但是这个梦想破灭了。</p>
<p>古代历史上，能够治理天下的穷苦人，只有一个：朱元璋。</p>
<h2 id="朱元璋"><a href="#朱元璋" class="headerlink" title="朱元璋"></a>朱元璋</h2><p>为什么朱元璋可以，而别人不可以。</p>
<p>经过仔细研究发现，朱元璋的人生际遇不像黄巢、张献忠和李自成，他有点像刘邦，但又有很大区别。</p>
<p>朱元璋是一个到处要饭吃的和尚，但是喜欢思考，见世面，交朋友，并且找到了自己的宗教信仰——明教（也叫摩尼教、白莲教）。</p>
<p>朱元璋走投无路投奔起义军的时候，娶了起义军濠州大帅郭子兴的义女当老婆，就是那个著名的马皇后。郭子兴并不是一个农民，而是一个大地主，所以朱元璋加入的这个新家族，思想完全不同一个扛着扁担造反的农民。</p>
<p>郭子兴作为农民军的统帅，却在逛街的路上，被其他的农民军兄弟（真正的农民）绑了票，大概是因为农民对地主阶级比较仇恨。最后被朱元璋救了出来。</p>
<p>郭子兴看见朱元璋比自己强，反而起了憎恨之心，一心想把朱元璋弄死。</p>
<p>朱元璋在丰富的人生经历中看到了农民起义军领袖们的鼠目寸光，要想成大事，必须有远大的理想和抱负，而这些是黄巢、张献忠、李自成、洪秀全都没有的。</p>
<p>朱元璋与那些个农民军领袖最大的不同在于，他熟读历史，因此他把汉高祖刘邦作为榜样。目标是建立一个基业长青的强大统一的国家。</p>
<p>朱元璋就懂得无论是得到天下，还是治理天下，就必须有能力的人来辅佐。嫉贤妒能的人只能被历史的车轮碾碎。</p>
<h2 id="曹参治国"><a href="#曹参治国" class="headerlink" title="曹参治国"></a>曹参治国</h2><p>人们最希望的，就是在一个良好的社会环境下，安居乐业，自食其力。zf的职责就是健全法制，维护一个良好的环境，剩下的事，交给民间去做。三天两头出政策，过度插手百姓如何过日子，甚至朝令夕改，就会让百姓的正常生产生活无所适从。<br>早在汉朝初期，曹参已经参悟了这个道理。<br>曹参是刘邦当亭长时的领导，也是刘邦最亲密的战友。萧何是文官，曹参则是武将，曾经在韩信麾下效力，除了披坚执锐外，最重要的工作就是监视韩信，防止韩大军事家谋反。<br>这样一个万夫难敌的勇将，却在革命胜利后被分配给齐王刘肥（刘邦的私生子）当相国，主抓齐国的政务。</p>
<p>曹参是一介武夫，只懂得军事，并不懂治理地方，就用厚礼聘请了精通黄老之术的盖公。盖公认为：治理国家很简单，只要按照律法办事，给老百姓提供一个安全的稳定的环境，其他的都不用管，官府千万不要好大喜功，追求政绩，过多插手百姓的事物，顺其自然就好了。<br>曹参很赏识盖公，并且按照盖公的话去做，九年的时间，齐国变得非常繁荣。<br>这时候，传来噩耗，萧何挂了，皇帝刘盈聘请曹参出任相国。曹参上任以后，几乎罢免了所有办事效率高、口才好，有追求有抱负的能吏，提拔了一群只知道按部就班，照章办事的老实巴交的官员，然后就彻底大松心，成天喝酒吃肉听小曲。</p>
<p>很多人对曹参不满就给皇帝刘盈打小报告，刘盈的表现是很愤怒。<br>曹参就问刘盈：是陛下你牛呢，还是先皇刘邦牛呢？<br>刘盈：当然是先皇牛<br>曹参又问：那我跟萧何比，谁牛呢？<br>刘盈愤怒的说：你比萧何差远了。<br>曹参做了个总结：您讲的太对了，先皇和萧相国拟定的法令已经非常清楚了，只要贯彻执行下去就好，我只要按照他们的法令办，不就行了吗？<br>刘盈虽然不事朝政，但应该算是比较聪明的君主，一听就懂：对于已经定下的治国方针大略，只要执行下去，一定会使人民休养生息，国家富足。如果大搞政绩工程，对于先皇刚死，吕后掌权时期风雨飘摇的大汉来说，将是灾难性的。<br>民间把成天喝酒吃肉听小曲的曹参称为贤相。司马迁在史记中也给了曹参极高的评价。</p>
<p>假设一个工程队要盖楼房，起初设计人员设计了20层，刚盖了两层，队长换人了，非要盖成30层，工人于是绞尽脑汁费劲办法改造。等盖到25层的时候，又换队长了，新队长说还是改成两层的别墅吧。刚把楼房都拆掉，别墅建了一半，又来了一个队长，说要建成比迪拜塔还高的大塔楼。这个楼建了n年也没建起来。<br>建房子跟治国的道理是一样的，我国汉代的相国曹参就已经明白了这个道理。</p>
<h2 id="晁错"><a href="#晁错" class="headerlink" title="晁错"></a>晁错</h2><p>刚才有人提到吴楚七国之乱，讲得是晁错。晁错其人是很值得讲讲的，一个有才能的人在错误的时间做了一个理论上正确的事，却导致吴楚七国之乱，汉景帝差点完蛋。结果是景帝砍了晁错的脑袋。</p>
<p>这个故事，几乎家喻户晓，蕴藏的道理却很深，大家如果懒得看史料，有兴趣可以参看易中天“帝国的惆怅”，还是很值得一看的</p>
<h2 id="民营小企业的老板和打工者"><a href="#民营小企业的老板和打工者" class="headerlink" title="民营小企业的老板和打工者"></a>民营小企业的老板和打工者</h2><p>糊涂人即使把道理说的再浅显，他也听不明白，呵呵。<br>现在我国已经进入高通胀期，但是地方巨额债务与人民币的升值又封杀了加息的空间，经济形式有可能恶化，民营小企业的老板和打工者只能自求多福了。</p>
<blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>刚查了一下央行的数据，8月份的M2是68.75万亿，我没记错的话，7月份的M2控制的很好，基本没怎么涨，但是到了8月份，没想到有那么猛的涨幅，看来不到12月，我国的M2就要到70万亿了。2007年1月份，我国的货币供应量是35万亿。</p>
<p>今早去小摊买早点，原来一块五的加鸡蛋灌饼现在卖两块。如果涨工资，只会把通胀越推越高，如果不涨工资，P民就要忍受通胀的剥削。真是无语了</p>
</blockquote>
<h2 id="郭解"><a href="#郭解" class="headerlink" title="郭解"></a>郭解</h2><p>从古到今，小老百姓遇到不公，受了委屈，幻想最多的就是跳出一个大侠，劫富济贫，为自己伸张正义。所以金庸的小说广为流传，被称为成年人的童话。<br>我国古代，真有大侠，不过古代的大侠并不是会降龙十八掌的郭靖，也不是小李飞刀，而是黑帮的老大，相当于西方的教父。<br>最有名的大侠叫郭解，汉朝时有极高的威望，不然也不会写进史记。<br>郭解的爸爸是个职业杀手，非常有名，用古龙的话说，最厉害的杀手是没有名字的，郭解的老爸名声太大，注定活不长。有个米商请郭解的老爸到监狱里救出犯了法的儿子，郭老爸看在钱的份上去了，就再也没能回来。</p>
<p>郭解跟他老爸学过功夫，很有两下子，于是干起了抢劫和盗墓的这份很有前途的职业。因为功夫高，谁只要说句话让他不爱听，必然遭遇一顿暴打。本着流氓会武术谁也挡不住的精神，到了三十岁，郭解已经钱多的数不过来了。男怕入错行，女怕嫁错郎，看来抢劫和盗墓的职业选择对了。<br>30岁以后，郭解为了从强盗升级为教父，开始积累自己的名声，并且学习战国四公子，开始蓄养门客，但凡是哪个人有难，有求必应。俨然形成了一个严密的黑社会组织。在民间的声望，甚至超过了皇帝。<br>皇帝的权威是不容冒犯的，一个地方黑社会头子怎么能够这么嚣张呢？就把郭解抓了起来，虽然有大量的证据证明郭解作奸犯科草菅人命，但都是汉武帝大赦前的事情，没有办法定罪。汉武帝一筹莫展，人抓了不能定罪，又不能放掉，该怎么办呢？<br>这时，正好有个书生，骂郭解不遵纪守法。正巧被郭解的门客听到了，就把那个书生给杀了。<br>汉武帝听了哈哈大笑，正巧找这个理由把郭解灭族。<br>侠客的黄金时代，从此结束</p>
<p>剑侠情侣，快意江湖，听着是一个充满了浪漫的世界，而事实是完全不可取，一个没有法制的社会，奉行者赤裸裸的丛林法则，什么是对？什么又是错？理由就永远站在强者一边，强者可以随自己的意愿决定弱者的生死。<br>这个社会是可怕的。<br>郭解，就让他永远埋葬吧</p>
<h2 id="2010年的中国房地产"><a href="#2010年的中国房地产" class="headerlink" title="2010年的中国房地产"></a>2010年的中国房地产</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>今天跟家里人打电话，姨妈说了下近一年来老家云南东北方向一个地级市曲靖的变化。</p>
<p>主要就是：好些有资金的外地大佬大手笔拿地，开发酒店和商品房。都是市区的黄金地段。</p>
<p>其实房地产开发在中国的任何一个城市每天都在发生，不过令人感慨的是这样的“四线”城市也如此火爆，购买力之强令人感慨，她说最近几天曲靖正在举行房交会，人头攒动。<br>现在老百姓有钱都向往好的房子和户型了，已经不满足90年代的老旧房子了，而且通货膨胀也逼得大家不得不置业保值。</p>
<p>再回头看看北京，简直找不到跌的理由。那么多地铁要修，那么多优质生源每年涌向北京高校，那么多人口，每天要造就那么多富人。。。。</p>
<p><strong>kkndme：</strong></p>
<p>钱太多了，流动性泛滥，老百姓恐慌了。这次调控暂时抑制了一线城市房价的上涨势头，但是却直接导致了全国性房价的上涨，不光二三线城市，连四级以下城市都是如此。这就是领导水平。</p>
</blockquote>
<h2 id="房奴算不上不幸，相当当不了才算"><a href="#房奴算不上不幸，相当当不了才算" class="headerlink" title="房奴算不上不幸，相当当不了才算"></a>房奴算不上不幸，相当当不了才算</h2><p><strong>lanyu1121：</strong></p>
<p>普通老百姓都成房奴了。</p>
<p><strong>kkndme：</strong></p>
<p>成为房奴还算不上不幸，相当房奴当不了才不幸</p>
<h2 id="精英人群的平均收入决定房价"><a href="#精英人群的平均收入决定房价" class="headerlink" title="精英人群的平均收入决定房价"></a>精英人群的平均收入决定房价</h2><blockquote>
<p><strong>skysurfer2208：</strong></p>
<p>想请教一下楼主，对于很多的二线城市，比如武汉，市区房子的均价一万左右了，但当地的平均收入一般也就3000左右吧，难倒你不认为现在的房价里面有泡沫吗？特别是现在正处在调控期，对于我们这些近年打算买房的来说，是在等等看呢还是在在这个时期出手？多谢楼主</p>
<p><strong>kkndme：</strong></p>
<p>你所说的平均收入是什么概念？是人人都挣3000块，还是有人挣2000块，有人挣1万块。武汉的房价，要看湖北省包括各地市的人口，家庭收入上万的人有多少，如果你认为很少，几乎没有，那房价肯定存在泡沫。如果湖北省有20%的人口家庭月收入超过万元，那么武汉市区的房价就没有泡沫。</p>
</blockquote>
<h2 id="内地不是香港、海南"><a href="#内地不是香港、海南" class="headerlink" title="内地不是香港、海南"></a>内地不是香港、海南</h2><blockquote>
<p><strong>johny__：</strong></p>
<p>那香港97年的时候还不是一样跌了一大截，按LZ的说法，1）土地资源很稀缺；2）作为消费群体的白领收入也能买房；3）作为世界城市，更是汇聚了世界级精英的购买力，仿佛现在上海。最后，不是一样大跌？？中产都成了负资产了。就连林百欣的儿子林建岳97年以69亿港元高价购入中环富丽华，还不是赔得一塌糊涂。</p>
<p>楼价涨高了就要跌，哪都不例外，这个才是规律。什么通涨，精英购买力决定房价，都是涨了之后在找理由。</p>
<p><strong>kkndme：</strong></p>
<p>这就是体制上的不同啊，所以我们无法重复香港和日本。97年的金融风暴，还是中国以国家之力对抗索罗斯的量子基金，保住了香港，这种行为在西方国家是难以想象的。一个国家动用全国人民的外汇储备与美国的民间资本打一场战争，这是令全世界震惊的。索罗斯因为不了解中国的体制，悻悻而归。</p>
<p>人民币不能在世界流通，依照我国实行的货币制度，货币只不过是一种符号。如果有一天我们的人民币能够自由兑换，香港发生的事也一定会发生在我们身上，但你认为我们的人民币能够自由兑换吗？</p>
<p><strong>johny__：</strong></p>
<p>那92年的海南崩盘有从何说起？从7000多掉到了几百元，这难道是海南体制？发币行是海南银行？同样是国内，同样的外汇管理制度，不是日本也不是香港，是中国海南。</p>
<p>–据《中国房地产市场年鉴（1996）》统计，1988年，海南商品房平均价格为1350元&#x2F;平方米，1991年为1400元&#x2F;平方米，1992年猛涨至5000元&#x2F;平方米，1993年达到7500元&#x2F;平方米的顶峰。短短三年，增长超过4倍。</p>
<p>–海峡对岸的北海，沉淀资金甚至高达200亿元，烂尾楼面积超过了三亚，被称为中国的“泡沫经济博物馆”。</p>
<p>[经验交流]92年海南房地产泡沫始自于“击鼓传花”(转载)<br><a href="http://www.tianya.cn/publicforum/content/house/1/163988.shtml">http://www.tianya.cn/publicforum/content/house/1/163988.shtml</a></p>
<p><strong>kkndme：</strong></p>
<p>全国的资金去炒海南、北海，炒的纯粹是概念，没有实体的支撑，就是一种博傻游戏。今年年初海南房地产的爆炒，同样积聚了巨大的风险。买房并不是全无风险，好比通州、燕郊，经历疯狂的炒作一定会理性的回归。但是如果指望北京四环内房价下跌，也只是痴心妄想。</p>
<p>房产投资也不是随便买套房就只涨不跌，比如说山东乳山的房子，开发商疯狂炒作旅游地产概念，但如果真的想投资升值，那就成了天大的笑话，因为根本无法变现。</p>
<p>什么样的房产适合投资，投资者不是傻子，都会有理性的判断。</p>
<p>90年代初的强硬调控让海南和北海的经济崩盘，对全国来说不可怕，毕竟只是一隅之地，但是如果用粗暴手段搞崩了全国，zf一定会好好掂量的。</p>
</blockquote>
<h2 id="历史是一面镜子"><a href="#历史是一面镜子" class="headerlink" title="历史是一面镜子"></a>历史是一面镜子</h2><p>如果以为本帖讲的历史故事，那就完全理解错了。</p>
<p>本帖讲得不是历史，而是总结前人的经验，讲得是故事背后的道理。<br>如果毛不是熟读历史，也不可能取得胜利。毛在进京的时候，说过一句话：我们不学李自成。</p>
<p>只有认真总结过李自成失败的教训，才能够做出正确的选择。</p>
<h2 id="买房一次性到位比较好"><a href="#买房一次性到位比较好" class="headerlink" title="买房一次性到位比较好"></a>买房一次性到位比较好</h2><blockquote>
<p><strong>包容会通：</strong></p>
<p>我老婆是长春人,岳父母退休,都有退休金.我和我老婆现在都在国外,准备3年以后回长春工作,我们现在有40万的现金,放在银行也没什么用,也担心3年以后,长春的房价还要涨.</p>
<p>因此,现在准备用其中的20万作首付买套70平的小户型的,让岳父母住(岳父母有住房,但很快就要拆迁了).等3年以后回长春,把这套小的卖了换成大的.不知这样的计划是否可行?贷款如何弄?<br>　　　　　　　　<br>谢谢兄弟.</p>
<p><strong>kkndme：</strong></p>
<p>既然是自住型需求，何不买套大点的，70平（建筑面积）的房子无论是自住、父母住还是合住，都比较拥挤。既然有40万的闲钱，还是一次到位比较好，3年后长春的房价一定要比现在高的多。</p>
<p>只是贷款比较麻烦，你的父母是无法贷款的，除非你们夫妻能够回国，这种事用别人的名字办肯定是不行的，房价上涨后就有可能会陷入扯皮甚至打官司的境地。</p>
</blockquote>
<h2 id="外汇管制"><a href="#外汇管制" class="headerlink" title="外汇管制"></a>外汇管制</h2><blockquote>
<p><strong>tianxiaobing11：</strong></p>
<p>楼主，这个tj连人民币不能自由兑换都不知道，可见他的水平也太差了，就不用和他计较了，从上个月开始人民币换美圆好象收紧了，是怕民众把人民币换美圆出逃吗？</p>
<p><strong>kkndme：</strong></p>
<p>外汇外流趋势比较严重，zf开始严管，包括携带50美元以上商品入境必须征税等措施，都是限制外汇外流。富人从穷人身上赚了钱，换成美元在国外消费，这是zf不愿意看到的，zf不在意富人搜刮穷人，但肉一定要烂在锅里</p>
</blockquote>
<h2 id="一线和二线"><a href="#一线和二线" class="headerlink" title="一线和二线"></a>一线和二线</h2><blockquote>
<p><strong>yamazaki28：</strong></p>
<p>楼主好，小弟有问题请教，本人所在二线省会城市，存款40w,近来看中本市CBD区域高端住住宅一套，各方面条件十分优越，面积100左右，均价18000。但通过观察，又看中觉得北京五环附近的待建地铁房，均价16000，想贷款弄小户型60左右，不知哪个升值潜力大，本人已有房一套。谢楼主指点。</p>
<p><strong>kkndme：</strong></p>
<p>短期来看，二三线城市的房产升值速度要高于北京，这是这次调控造成的结果，从长期来看，北京房产的升值速度要高于二三线城市。五环附近地铁房，还是很有优势的。</p>
</blockquote>
<h2 id="吕后篡权"><a href="#吕后篡权" class="headerlink" title="吕后篡权"></a>吕后篡权</h2><p>大凡是60年代末，70年代初生人，小时候肯定看过一本小人书：吕后篡权。<br>在那个时代推出这本书，很有寓意，起到了很好的宣传效果。<br>吕后真的是十恶不赦的妖妇吗？让我们还原历史的真相。<br>我们读到的吕雉，通常的形象是蛇蝎心肠的女强人。<br>大家感兴趣的，首先是关于吕雉在项羽大营和审食其是否有一腿。<br>然后看到的是吕雉协助刘邦诛杀异性王、与倾国倾城的戚夫人争宠、帮助儿子刘盈与戚夫人的儿子刘如意争夺太子、杀害戚夫人和刘如意、提拔吕氏家族成员。<br>但是因为宣传的需要，几乎所有人都忽略了吕雉的另一面</p>
<p>刘邦见上帝以后，吕雉掌权期间，对待老百姓还是很够意思的。<br>俗话说嫁出的女就是泼出去的水。吕雉可不同，吕雉非常照顾自己的娘家人，想把自己的娘家人都提拔起来。<br>秦始皇把分封制改成郡县制，搞天下大一统，意识比较超前，结果政权不稳定，秦朝很短时间就完蛋了。高祖刘邦吸取了这个教训，仍然搞分封制，不过分封制做了重大的改革:首先是分封的诸侯王必须是皇族，也就是说必须姓刘。其次是从中央派丞相给诸侯王，丞相掌握诸侯国的军政大权，防止生变。<br>吕雉提拔娘家干部最大的障碍就是：高祖说过，诸侯王只能姓刘。</p>
<p>吕雉是一个极其精明的女人，她追尊自己的老爹吕公为宣王，吕公是刘邦的老岳父，追尊皇帝的老岳父，旁人自不能有异议。既然有了先例，剩下的事就好办了，吕雉趁机把自己吕姓家族的成员封为吕王。<br>吕王吕嘉这个人很嚣张，仗着外戚的身份，飞扬跋扈，不尊法纪。<br>吕雉是一个出色的国家领导人，不是黄巢李自成之类的强盗流民，是很关心民生的，所以很生气，把吕嘉给废了，让吕嘉的叔叔吕产当吕王。<br>吕雉掌权后，做了很多亲民的好事，减免老百姓的税赋，加强建设健康的人民文化娱乐，最受百姓欢迎的是废除了“三族罪”和“妖言令”。<br>三族罪的意思很直白，就是一人犯罪株连三族。<br>妖言令有点象后来的文字狱，哪里出现统治者认为的妖言，就把那个地方的所有百姓全部处死。这是一个伟大的历史进步。<br>吕雉还是女权运动的先驱者，在吕雉时代，女子也可以封官封侯，可以随意离婚再嫁。那个时代是中国古代史上，女人最幸福的时代之一。<br>吕雉，一个柔弱的女子，在残酷的宫廷政治斗争中表现的异常凶狠，然而权力的斗争本身就是你死我活，在治国方面，吕雉却无愧于一个贤明的统治者，可谓巾帼不让须眉。吕雉与后来的老佛爷完全就不是一个等级，毫无可比性。<br>吕雉执掌朝政十五年，直到病死后，吕氏家族才土崩瓦解。<br>还原真实的历史，我们不应该对这位叱诧风云的女政治家，致以深深的敬意吗？</p>
<h2 id="小产权房"><a href="#小产权房" class="headerlink" title="小产权房"></a>小产权房</h2><blockquote>
<p><strong>大水牛跟水牛仔：</strong></p>
<p>楼主,可以谈谈小产权房的看法吗?父母是珠海的原居民且拥有两套小产权房,无房产证只有村里所发的使用证,是村委会卖给原居民的,离市中心约半小时车程,近河边,而一路之隔的位置己建有大型高尚住宅小区,在售价一万二以上,请问这些小产权房可靠吗?听说往后政府对这些小产权房采取放宽政策,只需补一点钱就可改成商品房,你觉得有可能吗?</p>
<p><strong>kkndme：</strong></p>
<p>这个补点钱就改商品房的可能性不大，如果是大片的小产权房，拆的可能性也不大。这个问题很让zf头痛，城乡双轨制的结果，所以zf能拖就拖。</p>
<p>但是对于片区不大的小产权房，风险就很大</p>
<p><strong>大水牛跟水牛仔：</strong></p>
<p>谢谢楼主回复,父母手上的两套小产权房在同一小区,小区比较大,这类小区有好几个,由于村内将进行旧村改造,规划成高级住宅片区,那此类小产权房如遭迁拆的话会得到赔偿吗?</p>
<p><strong>kkndme：</strong></p>
<p>这个会比较扯皮，最坏的情况是按照原价退赔，最好的情况是回迁安置。如果原价退赔损失就很大。</p>
</blockquote>
<h2 id="商铺和住宅"><a href="#商铺和住宅" class="headerlink" title="商铺和住宅"></a>商铺和住宅</h2><blockquote>
<p><strong>deeplp：</strong></p>
<p>kkndme 兄，你好。</p>
<p>从这个帖子一开始就一只跟着，每天必看。受益良多。</p>
<p>你对广州感觉如何？请教一个问题，不知你对商铺是否有研究？你觉得眼下投资商铺好呢，还是继续投资房产。<br>本人已有2套房产，都在广州市区且近地铁但不带很好学位。现有如下两个想法，</p>
<ol>
<li>分散投资，投资一个商铺，目前看中一个广州北京路拐弯处二楼商铺一个，靠近地铁。</li>
<li>继续房产，买一个130以上大户型且带学位房，方便以后小孩读书。（计划明年要小孩，现在就做打算是怕以后买不起阿。）<br>麻烦兄台给些意见。十分感谢。</li>
</ol>
<p><strong>kkndme：</strong></p>
<p>找到合适的商铺是很难的，因为商铺投资风险大，所以非常考验个人的眼光，属于高风险高回报，找对了，将财源滚滚，找错了很可能血本无归。<br>如果你有眼光，首选商铺。如果不具备这方面的能力投资住宅比较保险。</p>
</blockquote>
<h2 id="体制内外"><a href="#体制内外" class="headerlink" title="体制内外"></a>体制内外</h2><blockquote>
<p><strong>tuzi1976：</strong></p>
<p>kkndme兄，你好。上周提了几个问题，可能你没看到，再请教一次，请抽空指点一二。<br>看到楼主说过“人民币对外是升值，对内贬值”，我认识到“人民币对外是升值，对内贬值”这一点也有一年多了吧，主要是从生活经历、经济新闻中得到的结论（本人学工科、不懂经济）。虽然看到了表面现象，但对其发生的根本原因、对群众生活的深刻影响、“中产阶级（勉强算是有这么个阶级）”的应对之策等等尚没有深刻的认识。楼主看到我提的这些问题恐怕也觉得范围太大、难以回答？难道体制外的“中产阶级”只有任人宰割、移民海外、钻营往上爬这几个选择？诚心求教，风险自担（呵呵，楼主也不是神仙）</p>
<p><strong>kkndme：</strong></p>
<p>普天之下莫非王土，决定了今天的土地国有<br>万般皆下品，也决定了以后知识分子的前途必须进入体制内。<br>不能考中进士的明清两代知识分子，即使经商发了大财，也一样让人看不起，不能光宗耀祖。今天的知识分子将面临同样的命运。<br>体制外，凭个人的本事和运气，自生自灭。</p>
</blockquote>
<h2 id="2010年的上海"><a href="#2010年的上海" class="headerlink" title="2010年的上海"></a>2010年的上海</h2><blockquote>
<p><strong>youme5845：</strong></p>
<p>看到LZ的帖子真是太及时了！因为要解决小孩子上学，我最近开始密集型的看房子.</p>
<p>感慨房价高的同时后悔没有早点考虑买房。头痛啊！！！</p>
<p>说说我们的情况：目前现金40W,家庭收入1W5,住上海，目前看的房子为周边世纪公园地铁10分钟老公房(新房很少)，81P 190W,地段很好，但房子都是95年左右的了。算下来除了首付家里帮助外每个月供5K还30年(扣除公积金还款),我们现在可以出手么？还是等十一新政策出来后买？</p>
<p>还是在交通稍微不便的地方买低价的房子？</p>
<p>请LZ给个意见~ 在线等~<br>多谢！！！！</p>
<p><strong>kkndme：</strong></p>
<p>月供5k,收入1万5，说明的你的压力不大，完全可以承受。如果地段好，可以不考虑房子的新旧。一线城市的买房时机最不好拿捏，因为一线城市是调控的目标，你要仔细观察，如果发现中介的铺面里看房客越来越多，建议赶紧下手。</p>
<p><strong>youme5845：</strong></p>
<p>多谢！！！ 那我最近关注多一些！<br>还有这块小区同时是学区房，是否可以买个100W出头的出租，然后自己租房住(我们长期租住房租很便宜 1700两室户)，这样即使以后出现金融危机等情况也不会担太大风险，是这样么？</p>
<p><strong>kkndme：</strong></p>
<p>对自己好一点的就会自己住，对钱看的比较重，可以买房出租，自己租便宜的。因人的性格而已。<br>不过人生苦短，在短短的有生之年，还是要对自己好一点。自己买的房子住起来跟租房子的感觉是完全不同的。</p>
</blockquote>
<h2 id="收紧住房贷款"><a href="#收紧住房贷款" class="headerlink" title="收紧住房贷款"></a>收紧住房贷款</h2><blockquote>
<p><strong>welldayzwb：</strong></p>
<p>顶楼主，越读越觉得受益良多<br>楼主分析一下，最近几年一线城市是否会一直收紧贷款，想改善住房是否也得必须全款了？一想起这个就很郁闷，去年机会没利用好，后面不仅仅是经济成本的问题了，又面临和无房空空类似的问题，攒钱永远赶不上房价了。。。</p>
<p><strong>kkndme：</strong></p>
<p>收紧住房贷款起码在未来的一段时间会成为常态。由于货币泛滥，一次性付款的人群数量庞大，收紧贷款虽然不能降低房价，但可以抑制房价上涨的速度，防止商品房卖给穷人，以规避金融风险，对社会稳定和经济平稳增长都是有利的。</p>
</blockquote>
<h2 id="买房：物业与房贷"><a href="#买房：物业与房贷" class="headerlink" title="买房：物业与房贷"></a>买房：物业与房贷</h2><blockquote>
<p><strong>fallenleafe：</strong></p>
<p>关注本贴多日，非常欣赏楼主的睿智和理性。<br>小女子也是上海众多买房人之一，目前所谓单身剩女，得家人支持有一百五十万的首付金。基本确定买在内环交通方便的次新房（老公房停车太成问题）。<br>对上海浦西内环内的诸多区位和楼盘做过研究，发现离地铁近的同时能有苏州河景观的房源最具性价比，满足交通性和景观稀缺性的双重优势（上海内环内几乎没什么安静同时又具有自然资源的地方）。<br>现在基本确定了两个小区，比较纠结的问题有两个。<br>第一个问题，一个是小区管理和区位优势明显单价在3万3左右，另一个区位和管理比较差，名声不好，但是面苏州河的独一无二景观，单价在3万左右。从小区管理的角度，我也认可楼主的看法，管理好的小区升值空间大，管理差的小区由于群租问题严重，目前价格偏低，但是这个软件问题在日后随着自住率的提高貌似也能解决。究竟我该选一个景观资源非常稀缺的管理和配套相对较差的小区，还是一个相对成熟价格稍高同时综合配套比较好的小区？那个小区比较有保值和投资优势？<br>第二个问题，目前的月收入税后刚过万元，如果拿150万的首付买一房大概80平左右，是比较轻松的，月供不成问题（目前租的一室一厅租金3500，已经可以做为还贷资金了）。但是考虑长远问题和一些小户型的局限性，非常想投资一套能长久居住的两房甚至三房（众所周知，一个小区里好的位置总是留给最大的户型）。这样的话，大概一套就要在320万甚至350万，我需要每月还贷1万2左右，基本和我的月工资持平。从个人观点来看，我比较想冒这个风险，比较合适的做法是首付降低到3成左右，留出三十万左右的还贷资金用以应付前面两至三年的还贷。由于目前单身，两至三年后也许家庭收入就可以完全承受这个月供。即使还是单身，目前事业发展良好，对2年后的收入在2万以上很有信心，因此还是认为可以目前阶段多点勇气，目光长远，以保证日后生活安康。<br>不知道楼主怎么看这个问题？如果是房价持续上涨的情况，也许更该相信我的工资也会持续上涨，是否我看问题太乐观？贷款200万的风险是不是会太大？</p>
<p><strong>kkndme：</strong></p>
<p>第一个问题：物业管理对于小区的价值起着至关重要的作用，好的物业管理才能让人居住舒适，这一点是非常重要的。软件的提升往往比硬件的提升难度更大。物业很差的景观楼盘，可以比喻为鲜花丛中的一坨屎，周边环境再好，它也是一坨屎。一坨屎能否脱胎换骨变成黄金，存在着较大的不确定性。<br>第二个问题：是否承受较高月供，取决于你对未来的预期，所以你要仔细分析你的行业前途，如果你所处的行业告诉成长，或者你的能力职位将得到进一步提升，你可以承受较高的月供。<br>一般来说月供不要超过全部收入的70%，如果超过这个边际，就会有较大风险。</p>
</blockquote>
<h2 id="奸臣蔡京"><a href="#奸臣蔡京" class="headerlink" title="奸臣蔡京"></a>奸臣蔡京</h2><p>现代的纸币发行成本很低，拿着印钞机印就是了。古代就没那么好办，金银的开采量是有限的，别说金银，就是铸铜钱用的铜，也不是想要多少就有多少。</p>
<p>古代要想制造通货膨胀，最绝的办法就是拿一个铜钱当十个铜钱花，叫做当十大钱。搞当十大钱，扰乱货币秩序的领导，最有名的就是蔡京。</p>
<p>蔡京这个名字并不陌生，不爱读历史的人也一定看过水浒传。就是这个领导，被宋史称为六贼之首。大家一提起他，就自然把他跟奸臣划了等号，恨不得在他脸上踹几脚。</p>
<p>蔡京的确是个奸臣，但很多人可能不知道的是：蔡京是王安石的最得力干将，他的很多祸国殃民的政策，竟然是源于恢复王安石的变法。</p>
<p>王安石可以说是一个品德高尚的人，但是变法的流毒，竟直接导致了北宋的灭亡。王安石是一个在历史上有争议的任务，但是他的得力骨干蔡京同志，却是不折不扣的奸臣。</p>
<p>蔡京领导的罪恶，大家一致公认的就是那么几条<br>第一、花石纲，水浒传有精彩的描述，这个纯属于皇帝的个人爱好，似乎都推到蔡领导身上比较冤枉。<br>第二、大兴土木，大搞基础设施建设拉动内需，顺便搜刮点民财，以至于百姓怨愤<br>第三、恢复王安石时期的方田法，并且更改盐法茶法，国库和官员一起大肆搜刮民财，与民争利，结果租税混乱，富人把负担全部转嫁给穷人，穷苦百姓的负担更加沉重。<br>第四、就是当十大钱，制造通货膨胀，严重扰乱金融秩序和金融安全，北宋的经济崩溃了<br>蔡京，一个王安石变法的坚定执行者，最后成为祸国殃民的奸贼。</p>
<p>关于蔡京的奸臣形象，到了现在，有人企图为他翻案。但终究声音比较弱小。<br>因为在中国的古代，肆意敛财、大兴土木、搞官商垄断，与民争利，以至于人民不堪重负的领导，都被称为奸臣。对于减轻人民赋税，不胡乱插手民间生产和贸易，让人民修养生息的，被称为贤臣。<br>中国的古代，奸臣远远多于贤臣。</p>
<h2 id="体制内的28原则"><a href="#体制内的28原则" class="headerlink" title="体制内的28原则"></a>体制内的28原则</h2><blockquote>
<p><strong>facetowall：</strong></p>
<p>有人说，高校里20%的人掌握着80%的资源和财源，本人深有同感。所以经常想怎样才能成为20%里面的人。每天也很努力工作着，科研教学也可以，但是总看不到希望。</p>
<p><strong>kkndme：</strong></p>
<p>从一个小吏变成中高级干部，是需要深入研究中国古代政治斗争史的。否则就变成了宋江，企图另立山头通过跳槽达到目的，最终的结果只能是失败。宋江是一个政治上的白痴。</p>
<p>还有一个白痴叫贾谊，我们所熟知的“过秦论”的作者，才高八斗，政治却很白痴。被文帝做了棋子。如果贾谊同志知道晁错的下场，是无论如何不会仗着有才胡说八道，口无遮拦的</p>
</blockquote>
<h2 id="贾谊"><a href="#贾谊" class="headerlink" title="贾谊"></a>贾谊</h2><p>贾谊的粉墨登场，是有很深的政治大背景的。<br>首先要从吕雉死翘翘，以陈平、周勃为首的功臣集团铲出了吕氏一党说起。<br>吕氏一党灰飞烟灭，小皇帝是个吕雉制造出来的傀儡，甚至跟高祖刘邦都没有任何血缘关系。<br>难题是让谁当皇帝呢？<br>于是中国历史上最为搞笑的一幕发生了，在高祖刘邦的子孙中要搞最弱外戚选举。</p>
<p>大概是被吕雉专权搞怕了，大家推举皇帝，专门看哪个皇子的外戚弱。于是众人的目光投向了刘邦的第四个儿子，代王刘恒。原因是刘恒的母亲薄氏出身低微，为人又很低调，堪当最弱外戚之名望。<br>提起薄氏，野史里记载的很香艳，很可以拍三级片</p>
<p>野史里说，楚汉争霸时期，高祖刘邦大败。<br>薄氏还是个姑娘的时候叫薄姬，逃难的时候占领了一个无人居住的民宅。忽然有一天看见一个浑身是血，穿着盔甲拿着兵器的男人闯进了自己的屋子，这个人就是刘邦。<br>薄姬听到后面有追兵，就把刘邦的盔甲和兵器藏了起来。然后放了一大桶洗澡水，把自己和刘邦脱光光，洗起了鸳鸯浴。追兵闯了进来，惊奇的看了一通三级片，然后走人。<br>这个只是野史，可信度不高，但是说明了薄氏的低微出身。</p>
<p>不管怎麽说，有着最弱外戚称号，并且做事很低调的刘恒当了皇帝。但是对于刘恒来说，陈平、周勃等功臣集团有着很高的声望，齐王刘襄是高祖长孙并且在铲除吕党是很有功劳，声望也很高，受到了很多人的支持，而刘恒却毫无功劳，因为功臣集团平衡关系，天上掉下了皇帝的帽子，砸在自己脑袋上。<br>所以刘恒必须提拔自己人，这个人不能有很高的功劳，也不能有结党的嫌疑，最好比较有本事能治理国家，于是大才子贾谊粉墨登场了</p>
<p>贾谊同志很有口才，一腔热血，要到现在来说最适合搞传销或者卖保险。<br>贾谊同志激愤起来甚至说：自己完全可以带兵打仗，灭了匈奴，把匈奴王象狗一样牵回来。”刘恒很贤德，但也很老谋深算，当然认为贾谊同志满嘴喷粪，所以一笑置之。<br>贾谊同志的胆子不是一般的大，向皇帝刘恒提供了一个深的帝心的建议：让所有的诸侯王滚回自己的封地。<br>为什么说这是深得帝心的建议？因为朝里功劳大的人太多，居功自傲，而自己却没有什么威望和功绩，如果功臣集团和齐王、淮南王联合起来造反怎么办？<br>所以，最好的办法就是让诸侯王滚回封地。汉代的诸侯王可跟周朝不同，周朝的诸侯王是有实权的，有自己的军队。而汉代的诸侯王只能收收领地的税，军政事务全说了不算。<br>这个事，从贾谊嘴里说出来最好不过。</p>
<p>汉代的京城是最繁华的，有全国最好的教育、医疗、商业，有钱人的天堂，大臣们都可以花天酒地。让诸侯王回到封地，大家都不干了，回封地有什么好？房价又低，又没什么娱乐，漂亮姑娘也不好找，偏远的地方气候还不好，梅雨一来全身都要发霉。<br>首先带头反对的是功臣集团的领袖周勃（陈平已经死翘翘了）。在历朝历代，多数皇帝并不是想干什么就干什么的。既然所有大臣都反对，那就先暂且作罢。<br>但是贾谊，已经为刘恒种下了希望的种子，给自己埋下了祸根。<br>贾谊注定了只能是一颗棋子。</p>
<p>贾谊的建议没有被采纳，估计很郁闷，成天滔滔不绝的演讲，甚至建议刘恒削藩，要是贾谊知道晁错的下场，一定不敢这么建议。<br>这时候，贾谊已经得罪光了朝中几乎所有的大臣。于是大家的不满全部转移到贾谊的身上。<br>刘恒要的就是这个效果。</p>
<p>随着政权的逐渐稳固，刘恒把矛头指向了周勃。给予周勃最高的赏赐，却经常在治理国家方面，询问一些周勃不可能知道的问题。让周勃很尴尬。<br>周勃有个门客，就对周勃说：“皇帝经常给你很多赏赐，您就安心的接受，这很危险。皇帝给你的赏赐越多，说明皇帝对您越不放心啊。”<br>功高震主，弄不好会有杀身之祸，周勃不是傻子，立刻明白了这个道理。所以周勃才能称的上除曹参外，最有政治头脑的武将，最后得了善终。<br>于是周勃就上表辞职，表示年老体病干不动了。周勃还期望皇帝能挽留一下，但皇帝一点挽留的意思都没有，立刻同意了。<br>刘恒让周勃起个带头作用，回到自己的封地去吧。并且赐予了大把的金银。其他诸侯王看周勃都走了，也扛不住了，只好都回到了封地，这叫射人先射马，擒贼先擒王。<br>刘恒为了安抚大家，把遭人恨的贾谊明升暗降，贬到了长沙，从此离开了政治中心。<br>后来有一天，刘恒想起了贾谊，找他来中央谈话。贾谊一见皇帝立刻滔滔不绝，把皇帝立马侃晕了。<br>刘恒想：我靠，这厮死不悔改，留着没用，有多远滚多远吧。<br>再次把贾谊贬到了梁国。<br>贾谊不多久就死了。</p>
<p>关于魏豹和薄姬是否有一腿，也不好就肯定，也是个悬疑。因为记载薄姬的版本太多，我国古代人也比较八卦，呵呵。</p>
<h2 id="kkndme-推荐的历史书"><a href="#kkndme-推荐的历史书" class="headerlink" title="kkndme 推荐的历史书"></a>kkndme 推荐的历史书</h2><blockquote>
<p><strong>welldayzwb：</strong></p>
<p>这个帖子最大的感受就是应该认真读一下历史了，麻烦楼主给列个入门级的书单，鉴于我的历史水平只有演艺级的，书单请尽量入门级，当然演绎过的就免了，别读历史还别人顺带洗脑，比较郁闷了</p>
<p>先再次表示感谢！</p>
<p><strong>kkndme：</strong></p>
<p>比较浅显的是“史记”，入门级基本都读的懂。如果开始觉得部头太大，觉得累，刚开始可以从“古文观止”入门。逐渐增加难度。<br>入门以后，很多古文就好读了。<br>现代翻译的一般都加工的比较多，同一部历史可能有无数个解释。象易中天和当年明月，都是写的不错的。</p>
<p>关于古文观止，很多文章都曾被节选进中小学课本，篇篇堪称经典，其中就包括贾谊的“过秦论”。不看过秦论真的不知道贾谊的才华呀。所以想读读历史的童鞋，不妨回过头再温习温习古文观止，边品茶边看，真是一种享受。</p>
<p><strong>EchoMa9999：</strong></p>
<p>楼主晚上好！<br>我看之前有跟贴的朋友提过，请楼主列个史书入门级的书单，我不求列了很多书的书单，只请楼主推荐三本，佛渡有缘人，楼主，望不吝赐书名，先谢了！</p>
<p><strong>kkndme：</strong></p>
<p>我觉得读史最基本的就是古文观止，读了古文观止，有了功底，再读其他的就好读了。<br>开始读的时候，通史类是很难看得进去的，象“资治通鉴类”的也不好读，因为“资治通鉴”应当算评史算不上史书。<br>入门开读的话还是选择文学性强的比较好读，故事性趣味性都高，比如“史记”“三国志”“汉书”。<br>有了兴趣再读大部头的“宋史”“明史”<br>现代编写的中国史纲之类的就不要读了，纯粹洗脑，很多加工过的历史类读物就是瞎扯。</p>
<p>特别是： 千万不要读“中国通史”那样的垃圾!!!!!!!!</p>
<p>一定要读懂原文，跟中国通史讲得完全不是一回事。读不懂原文宁可不读，也不要让中国通史洗脑。</p>
<p><strong>打工不易：</strong></p>
<p>请问楼主，范文澜的《中国通史》也不值一读吗？</p>
<p><strong>kkndme：</strong></p>
<p>从始至终以唯物主义角度阐述的历史，可信度究竟有多高？</p>
<p>唯物主义要很深的理解，比如子虚乌有的抢渡大渡河，就是唯物主义的杰作。</p>
<p>范对封建社会的理解，也很有问题，是唯物主义的需要，不能还原历史的真实</p>
<p><strong>welldayzwb：</strong></p>
<p>这个唯物主义的定义是什么？</p>
<p><strong>kkndme：</strong></p>
<p>我只能用唯物主义这个词，再直白就和谐了，呵呵</p>
<p>我们的历史教科书很多都出自中国通史，但是你真正熟读了史官的著作以后，发现那有多扯，歪曲的有点太不靠谱。中国通史我把它定义成政治类书籍，是政治需要产生的，专门用于洗脑，不能当史书读。</p>
<p><strong>EchoMa9999：</strong></p>
<p>楼主，简单研究了一下古文观止&#x2F;三国志&#x2F;汉书&#x2F;后汉书&#x2F;史记，古文观止，以目前的水平，看起来着实吃力，决定还是先从史记开始看起吧</p>
<p>淘宝上搜了一下，史记 （全四册），北方文艺出版社出版，2007年9月1号出版的，萧枫主编，绣像本，盒装， 这个版本的买来自读加收藏，可以吗？请楼主点评，谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>古文观止可以买带注解的，但不要带译文的，看译文对读原文是有害的，可以通过注解提高古文水平。</p>
<p>史记买太好的版本，我是舍不得拿出来读，不能勾勾画画，我一定会把它高束焉,庋藏焉。读史记，最好买个普通本，带注解的，方便阅读，可边读边勾画，以提高阅读水平。</p>
</blockquote>
<h2 id="年轻人要早买房"><a href="#年轻人要早买房" class="headerlink" title="年轻人要早买房"></a>年轻人要早买房</h2><blockquote>
<p><strong>GGKMM：</strong></p>
<p>看了三天，终于看完了。。有些是一眼带过的，有些是比较认真的看下来的；</p>
<p>感觉回帖的筒子大多数都挺有钱的啊，至少相对我来说。因为都在计划一二百万的房子了。</p>
<p>本人在福州，目前月薪只有4K，但是福州市区的房产均价已经越过一万了，市中心的更是到了1.5万这样高不可及的地步。我就那楼主口中那种民企私企的体制外的P民了，属于自生自灭型的。但也还是得活下去啊，今年也二十五了，过两年也要结婚了。房子成为不可避免的头等大事；</p>
<p>不知道楼主对福州这样一个三线或者四线城市的房产怎么看待？平均工资水平约2000，有钱人据自己观察应该不少，至少超过20%的福州人口（有关这个，从大街上越来越多的好车做判断的，或许数字不准，但有钱人不少是肯定的）。如果在郊区能找到六千左右的小户型（65平左右），首付（还得存两年或者去借钱）自己掏，剩下的做货款，因为家里实在是没办法再支援了。这样的话应该还可承受，前提是付房贷的这二十年或者十五年里不失业。。</p>
<p>希望楼主给分析分析，写得有点乱。。。</p>
<p><strong>kkndme：</strong></p>
<p>25岁不是考虑失业的年龄，35岁体制外没有混出来的群众才应该考虑失业问题。<br>所以房子一定要趁年轻买，刚开始钱不够，就不要计较太多，先买个小的，以后有能力再换，如果没混出来，以后起码有个自己的窝住。不至于租房子被人赶出来。</p>
<p>福州是有点尴尬，明明是省会，又比不过厦门，不过市区1万左右的房价，在省会城市里真的谈不上高。你是自住，你又不打算去厦门生活，所以你该买还是得买。福州的房价也许涨得没那么块，但是也不可能跌。</p>
</blockquote>
<h2 id="不要低估通货膨胀"><a href="#不要低估通货膨胀" class="headerlink" title="不要低估通货膨胀"></a>不要低估通货膨胀</h2><blockquote>
<p><strong>someway2010：</strong></p>
<p>跟楼主请教一下：<br>楼主怎么看知春里小区的房子？那边连着双榆树小区，有大片的老房子，都是6层的板楼，都是上世纪8、90年代建的。环境看起来有点乱，以前的老公房，原单位早就没了，物业基本等于没有。将来拆迁的可能性有多大？值得买不？</p>
<p><strong>kkndme:：</strong></p>
<p>只要是4环内保值升值不会有问题，那个位置还是可以。关键是看投资还是自住，如果是自住，我就觉得那边有点乱糟糟的，不舒服。挨着中关村其实住着都不舒服，但不耽误升值。</p>
<p><strong>someway2010：</strong></p>
<p>多谢楼主，是自住<del>因为老公在中关村上班，想离公司近些，所以就挑了那里</del>是挺乱的，唉~<br>希望以后等我们有钱了能换个别的地方的大房子，不过按照楼主的分析这个是极有可能实现不了了。。。5555~~~~~~<br>再问一个，现在市场上卖200w的房子，十年后大概会涨到多少钱？麻烦楼主</p>
<p><strong>kkndme:：</strong></p>
<p>80年代你想象不出以后一瓶茅台会卖1000块<br>现在你同样想象不出十年后你的房子能卖多少钱。<br>那时也许人民币都是1000块一张的</p>
</blockquote>
<h2 id="二三线城市与重庆"><a href="#二三线城市与重庆" class="headerlink" title="二三线城市与重庆"></a>二三线城市与重庆</h2><blockquote>
<p><strong>dali_05：</strong></p>
<p>浏览了楼主观点，和我之前的货币推动楼市的看法完全一致<br>但由于无法像楼主那样掌握一些基础数据，对一些楼市的演变细节还有几个疑问</p>
<p>，还请lz指点<br>（1）二三线城市在这轮调控中的增长不出意料，但是二三线城市的房价增长，我始终认为存在一个最终谁接盘的问题。我是重庆人，以重庆为例，这个城市代表了典型的二三线城市。外来人口少，特别是外来的普通白领阶层。据我了解的数据，2008年之前，重庆的具备房子购买力的人群任然是净流出。到08年后才得以改观。但是流入任然缓慢，这也就是意味着重庆的楼市将没有长期稳定的接盘群体。而本地人，没有房子的是非常少的。在没有外来人群接盘的情况下，本地人在有房的情况下，任然投资囤积房产，最终，这些房产将如何变现。</p>
<p>一句话，房价要持续的上涨，还得有没房者接盘，而且这些人还得要有购买力。多次购房者无法稳定的解决这个问题。那么我就有理由对这样的二三线城市的房产前景表示担忧。</p>
<p><strong>kkndme：</strong></p>
<p>重庆房价的上涨得益于zy的战略规划，打造中国的大后方，把重庆的经济发展提升到了政治的高度。因为如果发生战争，重庆将变成第二首都，是中国最安全的大后方，蒋同志就很有眼光的选择过重庆。<br>重庆并不是以城中心为核心向外辐射的城市，繁华区域相对比较分散，所以房价很难快速上涨。这也就是过去重庆长期滞涨的原因。<br>重庆房价的崛起可以说完全是中央规划概念推动的，至于日后是否会吸引大量的精英和富人来重庆发展，我想一定可以。作为上升到国家政治高度的发展计划，就算是代价再大，也一定会搞得起来。</p>
<p><strong>dali_05：</strong></p>
<p>（2）高端房产还是普通住宅？<br>看了lz的观点，认为高端房产，由于其稀缺性，更具价值。<br>但我认为，房产和古玩还是存在差别的。古玩最大的价值在于收藏把玩，只要有钱，买再多古玩来玩都无所谓。但是房产不一样，房产的价值除了和古玩一样的投资外，真正的功能在于居住。但是目前的二三线城市，精英阶层的数量是非常有限的，他们谁没个3，5套别墅，在没有外来精英加入购买的前提下，这些高端的房产也就是在精英圈子中流转，这样封闭的流转，如何实现价值的增长呢？</p>
<p>要知道，在2，3线城市，普通白领阶层能跳出自己的阶层而具备购买高端房产能力的概率是非常小的，不具有代表性。那这些每个富人，有权人都有很多的高端房产有什么价值可言？</p>
<p>而普通住宅由于有普通白领的接盘，是否投资价值更大？</p>
<p><strong>kkndme：</strong></p>
<p>二三线城市房价的支撑，要因城市而异的，大体上二三线城市的核心区域与高端住宅区都不会有问题。毕竟一线城市的体量，不可能满足全国中产以上群体定居，而且一线城市随着竞争的日益激烈，钱也不是那么好赚的。有很大比例的富裕人群仍会选择二三线城市生活。<br>中国的二三线城市的富裕人口，要比大家想象的多的多，特别是二三线城市，有相当比例的人口都有较高的隐性收入，权力寻租现象更为严重。</p>
<p><strong>dali_05：</strong></p>
<p>（3）长期持有房产的变数<br>中国房产只有70年，甚至50年的使用权，如果长期持有，随着时间推移，房产价值是否会受到影响。因为我在重庆，这个问题尤其严重，重庆只有50年。</p>
<p>如果我只是持有，出租。那我的租金将是较低的（相对房价而言），因为zf不会允许房租像房价那样疯涨，原因和粮食问题一样，基本需求嘛。那有可能50年到了，我的房租收益实际上还抵不上房款的综合支出。而那时房子早就是危房了，强拆将是完全可能的情况。那做为普通人，怎么可能和zf在赔偿上博弈。这个风险lz是怎么理解的？？</p>
<p>我的理解是，房子不能长期持有，必须在5年左右变现，否则将存在贬值和变现难度加大的风险，请lz指点</p>
<p><strong>kkndme：</strong></p>
<p>关于中国的房产能够持有多少年的问题，这要持续观察zf的动向。对于现在的80后来说，如果在有生之年能够平安度过，不经历大的动乱，已经是很值得庆幸了。<br>如果有动乱发生，即使你没有买房，你手中的现金也将变成废纸。</p>
<p><strong>dali_05：</strong></p>
<p>（4）天津现象（或者即将出现的重庆现象）<br>天津房价在二线城市中增长是惊人的，但收入水平并没有达到那样的高度。这种依靠所谓开发区吸引资金推动房价的模式，是否具备可持续性？？</p>
<p>我认为真正的天津常住精英阶层的资金实力是无法支撑这样的价格的，只能理解是外来游资的介入，推高了价格。<br>我想问的是，这些游资有可能退去吗，一旦退去，面临的风险是否很大。</p>
<p>据我的理解，中国真正成功的开发区，都是由于本身的条件好，而非开发区本身的作用。</p>
<p>比如深圳，享受的是经济转型的首发政策优势。上海浦东是由于本身就实力雄厚。而所谓的滨海新区，重庆两江新区，本身实力就不过如此，即使要真正实力上来，那也将是非常漫长的过程。那这些进入房地产的游资，将在概念炒作一遍之后，获得一定收益后撤出，一旦撤出，这些地区的房价将会是怎样的趋势？</p>
<p>放眼中国，房价高的地方无不是富人集中，或周边富人多的区域。天津重庆这样的地方，一旦外地资金撤出，将何去何从？</p>
<p>（5）新兴城区和老核心城区<br>新兴城区环境好，轨道交通也使得原本偏远的新兴城区变得方便起来。那老核心城区的房产是否不如这样的新兴城区有价值。这个问题一直很困惑。因为我是重庆人，这个问题尤其明显。现在重庆房价最高的是以前的郊区，江北，渝北。而传统的渝中，房价反而排着中等水平。这和北京的一二环贵，上海的黄埔徐汇贵完全不同。这样的状况具备可持续性吗，还是仅仅是阶段性的。但是感觉现在zf的规划更倾向于向外发展，避免主城区拆迁的高成本，这会否导致传统主城区的边缘化</p>
<p>先问这几个问题，困惑很久了，期待lz的高论</p>
</blockquote>
<h2 id="城区和郊区"><a href="#城区和郊区" class="headerlink" title="城区和郊区"></a>城区和郊区</h2><blockquote>
<p><strong>hey-hey：</strong></p>
<p>楼主 我在上海， 小白领一枚。最近想买房。稍微好点的区均价已经至少2万5+了， 现在考虑在其他价格洼地的区买套新房，看中了均价1万7左右，买90送30，到手面积120左右。此楼盘开发建造定位2万&#x2F;米以上，因政策调控，故现1万7。好处是小区规划不错，属大型国企房产公司，2012年交房。附近有超大型公园，地铁明年开通（升值利好），附近有医院，学校，路上看到的在建建筑较多（百废待兴）。不好处是离上班开车要1个小时，属工业区（在另外一个方向），路上集卡较多，有传空气质量不好。 </p>
<p>另外一个选择是在市中心或其他比较好的区买个小房子，大概5、60平方米左右，预算也是180万左右。 好处是地段好，租金回报可能较高。如果自住相对比较方便。</p>
<p>单身，买房投资愿望大于自住愿望。 请楼主给分析分析。谢谢</p>
<p><strong>kkndme：</strong></p>
<p>多数人买房子都是郊区买个大的，后来上班实在不方便，再想办法城里买套小的。住郊区牺牲时间，住城里牺牲面积。总得来说，还是住城里更方便些。<br>关于房价升值，一定是郊区和城区版块轮动的。当郊区房价较低时，资金就会关注价值洼地，当郊区房价炒起来以后，城区的房价跟着上涨，但总的来说，城区的房价涨幅一定高于郊区，且比郊区更抗跌。</p>
<p><strong>hey-hey：</strong></p>
<p>谢谢楼主。真是纠结阿。一样的钱想买个新点的。而且周边的觉着还有这样那样的优势，比如公园，比如现在的性价比。比如大了一倍。比如该区未来发展空间和前途。如路建好了地铁修好了，城市辐射发展的面扩展了。<br>市区现在虽然完善，但未来没什么发展空间，该发展的都饱和了该配套的都配好了。升值的空间是否相对就小了。 </p>
<p>还请楼主再给说说。</p>
<p><strong>kkndme：</strong></p>
<p>你说的其实还是性价比的问题，比如郊区（前提是配套能发展的起来）1万7，城区2万5，那肯定是选择城区，毕竟相差不大。如果郊区1万7，城区3万以上，那肯定选择郊区。<br>好比北京的通州，城区2万的时候，通州8000，肯定选择通州，升值会快。但城区3万，通州2万5的时候，肯定会选城区。</p>
</blockquote>
<h2 id="守着金碗要饭吃"><a href="#守着金碗要饭吃" class="headerlink" title="守着金碗要饭吃"></a>守着金碗要饭吃</h2><p>守着金碗要饭吃，最典型的就是老一辈玩田黄寿山石的，收藏了一屋子石头，穷了大半辈子，第一次参加石头交易会，居然发现自己随便拿块石头出来能卖上千万。</p>
<h2 id="人制的社会，人就是制度"><a href="#人制的社会，人就是制度" class="headerlink" title="人制的社会，人就是制度"></a>人制的社会，人就是制度</h2><p>让李荣融来讲垄断巨头的功劳，这个事很有意思。</p>
<p>西汉时期，功臣集团和他们的后人势力比较大，大街上瞎晃的黑社会头子比较多，皇帝提倡以法治国，靠法律来制约功臣集团，先是重用了皇宫守大门出身的张释之大法官。<br>张法官完全按法律办事，该杀头的绝不会流放，但是该流放的也绝不会杀头。张大法官实现了我国历代百姓追求的天下无冤民的梦想。<br>史书上记录：汉文帝车驾过中渭桥，一个人从桥底下突然钻出来把皇帝的御马惊了，刘恒很生气，让张法官治他的罪。张法官审讯后发现是个意外，属于民事事件，打算罚点钱放掉。刘恒不干了，那可是惊了圣驾呀。罪该杀头。张法官却认为：律条上没有说因意外惊了圣驾就必须杀头，按律条就应该罚钱放人。要不然陛下你就不要把这个人交给我审，直接杀掉算了。既然陛下让我审，就必须按法律办事。刘恒只好按照张法官的审判结果，放掉了那个人。<br>其实，遵守法律，按照法律办事的不仅仅是张法官，而是刘恒自己。刘恒为了保证社会安定、基业长青，就必须限制特权阶层，限制特权阶层就必须依法治国。<br>但是文景之后，武帝就不满足于完全依法办事的张释之法官这样的人了，而是开始重用酷吏，张汤、义纵、宁成这些新一代法官登上了历史舞台。法律是什么？法律就是张汤，张汤就是法律，犯了法的要往死理打，没犯法的也要往死里打。<br>唐朝武则天时期，出现了一个史无前例的酷吏：来俊臣。<br>来俊臣法官不管法律专搞冤狱，专门养了一大群打手无赖，凡是武则天不喜欢的人，还有他自己不喜欢的人，一律刑讯逼供，屈打成招。发明的酷刑比张汤有过之而无不及。<br>古代，法律是什么？是皇帝？是张释之？是张汤? 是来俊臣？其实，法律什么都不是。</p>
<h2 id="准公务员的好处"><a href="#准公务员的好处" class="headerlink" title="准公务员的好处"></a>准公务员的好处</h2><blockquote>
<p><strong>xufangliang1120：</strong></p>
<p>楼主，请问新进公务员队伍的人员今后还会不会有住房福利。像年纪大的都有分房或定向开发的商品房，已经分过了。象新进来的，工资不高，每月不到2000，平时无任何待遇，过年也就发个千来快意思意思。我在湖南常德，这里的房价也在4000左右，今年涨起来的。象我们这种情况要怎么办才好？请您指教！！谢谢！</p>
<p><strong>kkndme：</strong></p>
<p>大哥，公务员也是有级别的，想想宋江为什么上梁山呢？<br>你要是在重要部门，或者到了级别自然就有了。<br>西汉的张释之，冯唐、郅都都是皇宫守大门的出身。皇宫看大门的，不算是公务员，是体制外编外人员，相当于协管员，连工资都不发，但为什么大家都趋之若鹜的争当皇宫传达室老大爷这种有前途的职业？因为，可以有机会见到皇上，有机会成为高级公务员。当上了高级公务员，你就有了票子房子妹子。</p>
</blockquote>
<p>最著名的皇宫传达室看门老大爷叫冯唐，头发都白了还在未央宫值班呢。皇帝刘恒没事瞎溜达，看见老大爷一脑袋白头发，就叫过来神侃。不侃则已，一侃才知道冯大爷的爷爷是赵国的官帅将，跟大名鼎鼎的名将李牧是哥们。而且冯大爷不愧是名将之后，太懂带兵打仗的道道了。<br>刘恒说：我要是能有李牧这样的大将，还怕什么匈奴啊。<br>冯唐很牛叉的说：就是有李牧这样的大将，也得不到重用。<br>冯大爷直接把皇帝气晕，皇帝转身就走了。<br>后来刘恒气消了，又找冯大爷问话。<br>冯大爷就说了一番大道理：<br>对待将士，要以激励为主，才能得到将士拼死效力的心。重惩罚，轻奖励，光拿大棒不掏胡萝卜，将士怎么肯用命呢？（皇帝是信奉法家的，法家的精神领袖商鞅同志认为管理手下最高境界就是基本不怎么用胡萝卜，直接用大棒的最牛——罚九赏一。）<br>云中太守魏尚是个名将，让匈奴文风丧胆。魏尚的手下都是农民子弟，魏尚对待士兵很好，很舍得犒劳，也和舍得给钱，所以大家都很拼命。但是陛下您经常因为军兵的一点小错误，就扣掉军兵的赏赐，因为魏尚虚报了几个斩获的首级数量，就把魏尚抓起来关监狱，奖励太轻，而惩罚太重了。所以说陛下有李牧这样的良将也不能重用。<br>刘恒大悟，拜冯大爷为车骑都尉。<br>唐代的王勃，很不得志，于是写了《秋日登洪府滕王阁饯别序》:“嗟乎!时运不齐，命途多舛;冯唐易老,李广难封。” 冯大爷一下子因为王勃的文学作品，家喻户晓了。</p>
<h2 id="小城市房价会因为人民币贬值涨价，但依然难变现"><a href="#小城市房价会因为人民币贬值涨价，但依然难变现" class="headerlink" title="小城市房价会因为人民币贬值涨价，但依然难变现"></a>小城市房价会因为人民币贬值涨价，但依然难变现</h2><blockquote>
<p><strong>xufangliang1120：</strong></p>
<p>楼主,谢谢您的回复!<br>你您怎么看常德的房价呢,那我们现在还是想点办法先买房?</p>
<p><strong>kkndme：</strong></p>
<p>买一套自住房还是应该的，不是所有公务员都能够上位，也不是所有公务员能够分到房子，特别是二线以上城市，将来普通的底层公务员住公租房的可能性更大。</p>
<p>对于小城市，房价也会因为人民币的贬值而上涨，只是可能不如大城市好变现而已。所以，有能力还是应该买一套自住房的。</p>
</blockquote>
<h2 id="一线杭州"><a href="#一线杭州" class="headerlink" title="一线杭州"></a>一线杭州</h2><blockquote>
<p><strong>钱江风帆：</strong></p>
<p>看了个通宵啊，不知楼主对杭州了不了解，目前市区大概25000&#x2F;m2,杭州未来房价的趋势如何？</p>
<p><strong>kkndme：</strong></p>
<p>杭州我都当一线城市看的，你就当一线城市理解。富人的天堂，房价多高都不稀奇</p>
</blockquote>
<h2 id="二三线城市的发展靠拆迁"><a href="#二三线城市的发展靠拆迁" class="headerlink" title="二三线城市的发展靠拆迁"></a>二三线城市的发展靠拆迁</h2><blockquote>
<p><strong>dali_05：</strong></p>
<p>支持楼主房价大涨房租必涨的观点</p>
<p>但是这仅限于外来人口众多的一线城市<br>二三线城市本地人几乎没有没房的，如果算上父母的，将来普遍一个家庭拥有两套以上的房子<br>房租也就失去了大涨的基础<br>唯一可导致房租上涨的就是拆迁，一旦便宜的旧房子少了，房租肯定是要上调的<br>但那也是有限的<br>总之，外来人口极其可支配收入是房租的决定性因素</p>
<p><strong>kkndme：</strong></p>
<p>二三线城市的敛财和追求政绩方式，全靠大规模拆迁，城市搞升级改造，这个拆迁规模是一线城市市民难以想象的。有的城市已经搞得如火如荼了，有的城市还没开始，但都会走这一步。</p>
</blockquote>
<h2 id="转篇文章：一个忽悠了几亿中国人的伪概念：所谓“中国房地产泡沫”"><a href="#转篇文章：一个忽悠了几亿中国人的伪概念：所谓“中国房地产泡沫”" class="headerlink" title="转篇文章：一个忽悠了几亿中国人的伪概念：所谓“中国房地产泡沫”"></a>转篇文章：一个忽悠了几亿中国人的伪概念：所谓“中国房地产泡沫”</h2><p><strong>中年不惑吗：</strong></p>
<p>一个忽悠了几亿中国人的伪概念-所谓“中国房地产泡沫”</p>
<p>作者：罗伯特卡帕</p>
<p>中国大陆大家目前最为关心，讨论最为热烈的一个问题就是中国的房地产泡沫问题。从政府到民间，从经济专家到普通百姓，大家都在关注这个问题。以前，我也觉得中国存在一个叫“中国房地产泡沫”的所谓概念，但今天我忽然感悟，原来多少年来包括我在内的几亿中国人都被蒙骗了，中国根本就不存在所谓“房地产泡沫”的问题，“房地产泡沫”这个概念本身就是一个伪概念。</p>
<p>如同市场经济一样，房地产泡沫也是一个外来事物，它是市场经济的产物。但问题是，中国是市场经济吗？显然不是，否则为什么大多数西方国家都不承认中国是一个市场经济国家。尤其是中国大陆的房地产市场，更不是市场经济，而是计划经济与市场经济相结合的一个怪物，政府操纵着房地产行业，政府对房地产有着绝对的掌控能力。</p>
<p>房地产泡沫是市场经济的产物，既然是泡沫，那么这个泡沫也会遵循市场经济的规律，即当泡沫足够大的时候，会破裂。因为日本与美国的经济是市场经济，所以当日本与美国的房地产产生泡沫的时候，就会破裂。</p>
<p>目前包括中国在内的几乎所有世界经济学家都以为，当年日本与美国的房地产泡沫破裂了，中国的房地产泡沫比日美大几倍，当然也会破裂。事实却是，中国的房地产泡沫在几年年前的膨胀程度就超过了当年日本与美国的房地产泡沫，中国的泡沫几年来虽然翻倍，但却没有破裂，这是何故？显然，经济学家们犯了一个错误，那就是把中国的房地产乃至中国经济当成了市场经济来看待，而事实是中国的房地产市场根本不是市场经济。所以，西方市场经济国家所有的房地产泡沫，在中国也根本不存在，所谓的“中国房地产泡沫”根本就是一个伪概念。</p>
<p>当然，我说到这里时，肯定有很多人不服气，中国的房地产明明几年之内翻了很多倍，远远超过了普通人的收入水平，这不是泡沫这是什么？我的回答是，中国的房地产价格确实虚高，远远超过普通人的收入水平，这是事实，但这不是“房地产泡沫”，因为泡沫会破，而中国的这个被大家称为“泡沫”的东西却不会破，因为它的真实名字其实不叫泡沫，应该叫“变相的税收”或者“房地产垄断价格”。</p>
<p>中国的房地产业本质上已经不是一种行业，像中国大陆的税收与垄断行业的垄断价格一样，成了少数人剥夺多数人财富的一种工具。在这个工具上，寄生着很多食利者。这个食物链的最上层为地方政府，地方政府通过卖地与房地产税收，养着一大批高薪的公务员及满足他们的奢侈需求。食物链的第二层为与官员勾结的房地产商以及受贿吃回扣的官员，第三层是炒房者，炒房者相当部分为拥有大量现金的官员及家属。</p>
<p>市场经济的泡沫会破裂的，但中国的房地产不是市场经济，房地产价格也不是“泡沫”，所以它也不会破裂。中国的房地产价格被政府严格操控着，不说是操控自如，也是有绝对的控制力。因为政府掌控着土地银行汇率等房地产的关键要素。中国的高税收是泡沫吗？中国的垄断行业的高垄断价格如水价电价油价是泡沫吗？当然不是，他们是转移财富的手段。中国的房地产价格也是一种变相的“税收与垄断价格”，其“税率”与“垄断价格”是政府控制的。这也解释了为何中国几年来房价如此之高，却不下跌，所谓“泡沫”却不破裂的原因。</p>
<p>中国房地产的所谓“泡沫”会“破裂”吗？会，只要政府愿意。中国的房地产的“泡沫”会不破裂吗？会，只要政府愿意。</p>
<p>其实，中国所有的问题都是政治问题，而不是经济问题，离开政治谈经济，永远找不到问题的答案。</p>
<h2 id="拆迁补偿"><a href="#拆迁补偿" class="headerlink" title="拆迁补偿"></a>拆迁补偿</h2><p>拆迁补偿的两种方式：1、现金补偿；2、回迁安置。<br>在二三线及以下城市，通常采用第二种，因为多数开发商没有钱现金补偿，房地产开发基本上是靠zf关系，空手套白狼，就是有钱也不愿意拿出来。<br>对于拆迁户来说，现金补偿也不划算，因为补偿的现金在与原地同级别的位置肯定是买不了相同面积的住房的，所以多数拆迁户选择回迁安置。<br>但是越小的城市开发新盘的速度越慢，往往回迁房盖个三五年也不见得盖得起来。在这期间，开发商会按月补偿拆迁户一定的租金，用于过渡。<br>手里现金多的拆迁户会先买房住，慢慢等拆迁，但是现金不多的拆迁户，就不得不拿着开发商的过渡款租房住。通常这笔过渡款都要高于相同位置的租金，所以拆迁户就把房租炒起来了。</p>
<p>北京已经没有原地回迁的说法了，一线城市，还有部分较发达的二线城市都不搞原地回迁了，土著一旦拆迁了就赶到郊区。反而是二、三线城市，特别是三线以下城市多数还在搞原地回迁。主要原因是城市小，住户多多少少都有些背景，特别是单位的老公房，开发商不让原地回迁，根本就拆不动，阻力太大。</p>
<p>房子从拆到迁是有时间的，快的情况是1年多，但很多情况都是拆迁安置房3,4年盖不起来。比如昆明的莲花池片区，大概是06年左右拆迁的，但拆迁安置房现在才开始动工，2012年才盖的起来。这种事情并不是个案。<br>贵州更离谱，房子04年拆了就再也没有音讯，开发商一直盖不起来，到现在都6年了。原来的拆迁户，现在还在租房住。</p>
<h2 id="城市底层"><a href="#城市底层" class="headerlink" title="城市底层"></a>城市底层</h2><blockquote>
<p><strong>游泳横渡马六甲：</strong></p>
<p>经常有人说收入是决定因素，其实人均收入没有意义。北京姑娘去外企做前台一个月2000，和公司外地姑娘拿这么多，和做公务员的外地姑娘拿这些，生活成本天差地远。不是说有10万个月入2000的外来人口，四环内就有一万处他们能承受的住房。而个体的外来人口的支出，会随着生活成本调整。开始很难理解月入两三千的白领在北京市如何生活，毕竟他们不可能像楼下卖蔬菜水果的大叔那样，炖点猪肉粉条就算开荤，穿特价五块的汗衫就算工作服。一样的月入，白领的幸福起点高得多。后来知道他们原先偶尔用兰蔻改成一直用大宝，早餐不再喝豆浆，住单位附近的搬到五环外，有人在燕郊买了房……突然想起小时候学新概念英语，说起蓝领工资比白领高，但还有人为了能西装革履宁可减薪做白领。</p>
<p>对80后而言，最恐怖的绝不是房价，而是养老。这也不是计生的问题，一个社会的生活资源是有限的，老龄化早晚会到来，为了改变老龄化呼吁多生育，那是饮鸩止渴。等多生出来这部分老了，再这么循环？而福利社会如英国是50多岁的人最幸福，有稳定养老金，二三十岁最痛苦，看不到未来依靠。家底不厚的像希腊，透支做社会福利，后果还不如不做。中国则是取不足以奉有余，竭全民之力供特权阶层挥霍，没有哪个年龄段享受过全民福利，还得共同面对养老难题。房子，真不算此生最纠结的事</p>
<p><strong>kkndme：</strong></p>
<p>正是如此，以后城市的底层吃饭都是问题，zf最喜欢拿房子说事转移矛盾</p>
</blockquote>
<h2 id="垄断企业"><a href="#垄断企业" class="headerlink" title="垄断企业"></a>垄断企业</h2><p>我们的垄断企业其实都是第二税务局的角色，比如石油、移动、电力、水务、地产、银行等等。zf一定要掏空百姓的钱包，所以说什么泡沫不泡沫，就是个笑话</p>
<h2 id="农村自来水"><a href="#农村自来水" class="headerlink" title="农村自来水"></a>农村自来水</h2><p>说起农村建自来水更搞笑，亲眼目睹要不然真不敢相信。<br>贵州有个村子，以前，自来水是村子集体出钱买的管子，然后全村出劳力从山上接下来（用的山泉水），要是水管坏了，大家再摊钱摊劳动力修。<br>结果zf不愿意了，说他们修的不规范，zf给重新修，还是从山泉引水下来，zf包给工程队换了一下管子，然后每户给按了水表，安好了以后，要按照2块钱一吨收费，全村都炸了窝了，集体抗议，现在还没有结果。</p>
<h2 id="袁盎"><a href="#袁盎" class="headerlink" title="袁盎"></a>袁盎</h2><p>丛林社会就是要承认人与人之间的差别，性格决定命运。<br>我要讲一个奇人，这个人叫袁盎。故事的出处是《史记·袁盎晁错列传》，如果鸡冻同志认为我瞎编，可以自己去看原文。</p>
<p>袁盎同志的神奇是一般人都无法想象的，这个奇人在吴国当相国的时候，他手下的一个小公务员跟老袁同志的爱妾乱搞，经常背着老袁嘿咻嘿咻。老袁知道了这个事就装聋作哑。<br>有人跟那个小公务员说:坏了，你跟袁领导的二奶私通的事让袁领导知道了，你死定了。<br>小公务员一听吓坏了，骑了马就跑，公务员这份全世界最令人羡慕的工作也不要了。<br>小公务员一跑，袁领导就使劲追，小公务员就更拼命跑，袁领导就更拼命追。袁领导的马要好一点，跑的快，终于把小公务员追上了。小公务员只好下马等死。<br>袁领导急了，对小公务员说：你跑什么呀？我正打算把我的二奶送给你。兄弟如手足，妻子如衣服。大概就是这个意思。<br>小公务员感激涕零，抱着袁领导的二奶继续嘿咻。<br>所以说老袁这人最仗义，人缘最好。上下都买他的帐。</p>
<p>老袁也有个把敌人。老袁在皇宫里当小跟班的时候，得罪了汉文帝宠爱的一个太监叫赵谈的，所以特别害怕，怕赵太监哪天找茬把自己给黑了。<br>老袁征求了侄子的意见，认为自己应该先下手为强，应该当众侮辱一下赵太监，这样如果赵太监再黑自己，就没人信了，别人都以为是公报私仇。老袁的政治手腕还是相当高的。<br>一天，文帝刘恒跟找太监坐在一辆车子里外出，老袁上前拦住车子，大义凛然的说：能够跟天子共乘一车的，都是天下豪杰，天子怎么能跟一个没小鸡鸡的人坐一辆车呢？<br>赵太监当场就气哭了，还不能说什么。以后赵太监要黑老袁，也没那么容易了，因为大家都知道老袁义正言辞，充满正义的得罪了赵太监，如果赵太监再说老袁坏话，就是公报私仇。</p>
<p>老袁的人缘是公认的好，但是在朝里有一个最大的敌人，就是大名鼎鼎的晁错。<br>晁错这个人学的是商鞅之术，法家的代表人物。为人冷酷，不讲人情，人缘特别差。老袁和晁错关系不好，可能跟两个人的性格很有关系。<br>晁错跟贾谊很有一拼，特别喜欢喷，口才也特别好，跟贾谊同志喷的内容也差不多，一会儿说打匈奴其实很简单啦，一会儿说必须削藩啦。刘恒听晁错喷的很有水平，很欣赏，但是刘恒不是傻子。<br>打匈奴？那得是国力强大以后的事，现在必须让老百姓修养生息。<br>削藩？我也想削藩，但是总得有合适时机才行啊，现在削藩不是逼人造反吗？<br>刘恒对晁错这种人的态度就是，你建议你的，我听听就可以了，不能当真。</p>
<p>晁错同志懂得要想发达，必须选择一个有前途的职业，所以凭着他气死保险推销员的口才，当上太子的老师。这个太子就是汉景帝刘启。<br>晁错的时代终于来了，原因是刘恒挂掉了。<br>刘启生下来就是锦衣玉食，可没他老子那两下子，也不怎么懂帝王之术，晁错说什么就是什么。<br>晁错于是抖起来了，不知姓什么了，仗着是皇帝的老师，飞扬跋扈，人缘极差。晁老师最爱追求政绩，立刻提出削藩。<br>削藩的结果就是吴楚七国反了。<br>这个故事跟明代朱允文同志的削藩如出一辙。明朝朱允文同志削藩的结果就是朱棣反了，当了皇帝。朱允文被迫流浪，泡吉普赛美眉去了。<br>吴王不是朱棣，性格有点象袁绍，生性多疑，手下有人才不会用，所以没能成大事，被周亚夫跟干掉了。如果吴王能有朱棣的本事，汉朝的历史就会改写。</p>
<p>吴王一反，老袁就着急了。老袁给吴国当过相国，吴王造了反，晁错必然要借机宰了老袁，老袁觉得自己冤枉啊，吴王造反不是你晁错逼的吗？<br>晁错果然趁机对老袁打击报复，安排了两个手下去弹劾老袁。但是晁错的人缘实在太差了，老袁的人缘实在太好了，那两个手下竟然不同意弹劾老袁。而且还劝晁错,大意是：现在七国兵马造反了，形式很危急，我们还搞内斗就不好了。老袁这个人是不可能参与谋反的。<br>晁错也着急叛乱的事，就把老袁放一边了。政治斗争，不是你死就是我活。<br>晁错错了，赔进了自己的老命。<br>窦婴同学也曾经在吴国当过相国，立刻跟老袁站在了一条战线上，准备给晁错来个致命一击。<br>晁错这个人的死，完全是他自己性格造成的，对人苛刻，政治上又是白痴。吴楚七国打着“诛晁错，清君侧”的名义造反，皇帝问晁错应该怎么办?<br>晁错的白痴精神充分发挥了出来，“陛下您御驾亲征，臣留守长安，做好看家的工作。”<br>皇帝估计当时心里要多愤怒有多愤怒。你自己惹的祸，你一个当臣子的在家躲起来，让我当天子的上去当炮灰，你是何居心? 不过刘启涵养好，没说出来。<br>这时候老袁跑了进来，说有平乱之计，要单独跟皇帝说。刘启很不客气的就把晁老师请了出去。<br>老袁立刻献计，既然反叛打着清君侧的名义，就先把晁老师宰了，叛军就出师无名了，就得不到老百姓的响应，事情就好办了。<br>刘启一听挺高兴，正恨晁老师让自己当炮灰的事呢，立刻同意，腰斩晁错。<br>晁错的下场要比贾谊惨多了。</p>
<p>不过老袁的下场也并不好。皇帝的老妈想让皇帝的弟弟梁王在刘启驾崩后继承皇帝这份工作，但是老袁不同意，坚决表示反对，得罪了梁王。<br>梁王不是一般的高级公务员，最喜欢搞黑社会，找了杀手把老袁干掉了。<br>这个故事又告诉我们，即使人缘再好，在政治斗争中活下来也是不容易的。</p>
<blockquote>
<p><strong>welldayzwb：</strong></p>
<p>最好把历史故事表达的直白的意思讲出来，不排除观众里像我这么愚钝的人不少</p>
<p><strong>kkndme：</strong></p>
<p>我说的不是袁盎也不是晁错，说的是削藩，皇帝削藩怎么样？看看朱允文的下场，晁错几乎独揽了大权，削藩的下场是什么？腰斩。清查空置率，zf不参与一级开发，不是扯淡吗？</p>
</blockquote>
<h2 id="二三线城市，选新城还是老城"><a href="#二三线城市，选新城还是老城" class="headerlink" title="二三线城市，选新城还是老城"></a>二三线城市，选新城还是老城</h2><blockquote>
<p><strong>wofuleyumin1：</strong></p>
<p>楼主 我又有问题了。。。。请务必回答 谢谢</p>
<p>1。目前很多城市开发新城 我们主要谈二三线城市吧。。。这些地方的新城会超越老城吗？ 我们投资该投新城还是老城？</p>
<p>比如成都 南边的天府新城，口号国际城南。。</p>
<p>2。投资一定投越靠市中心越好吗？ 比如成都，西三环是比东二环还好。。但未来2环是否最终比3环好？</p>
<p><strong>kkndme：</strong></p>
<p>拆迁是块硬骨头，不够铁腕的领导会避开破旧但繁华的老城区的问题，转而开发新城，所以往往形成倒挂，即新城一下子变成了新贵聚居区，新城的房价甚至高过老城区。 但这是一种倒挂，老城升级改造是必然的一步棋，只是时间的早晚。未来老城区的升级改造，老城区的价值就会凸显，价格要远远高于新城。</p>
<p>但是老城区的多数老房子都可能面临拆迁，投资老城区的老房子不见得划算，特别是二三线城市的拆迁，离皇帝越远的城市，争取合理补偿越困难。</p>
</blockquote>
<h2 id="在中国，普通人手上闲钱不多的人被剥削"><a href="#在中国，普通人手上闲钱不多的人被剥削" class="headerlink" title="在中国，普通人手上闲钱不多的人被剥削"></a>在中国，普通人手上闲钱不多的人被剥削</h2><blockquote>
<p><strong>抽着雪茄喝着绿茶：</strong></p>
<p>兰州，我近来盛干人民币的贬值力度之强烈<br>现在手上还有十万的盈余<br>做什么好呢<br>咬紧牙关供一套房？买黄金？还是买车呢？<br>总之不能空放着，<br>这样通货膨胀下去，汽车的价格也会涨吗？</p>
<p><strong>kkndme：</strong></p>
<p>买车是消费，不是投资，如果追求享受，可以买车，但不能保值增值。汽车属于工业品，通过扩大生产规模可以使边际成本下降，所以汽车会因为档次的不同有涨有跌。<br>黄金可以适当配置，但由于黄金的定价权不在国内，所以买黄金有一定的风险。<br>十几万买房子估计不够首付，除非特别小的城市。但小城市的房产变现起来比较麻烦。<br>至于古玩字画茅台酒之类的，真假难辨，不是专家很难参与投资，且一般人变现还是很困难的。<br>所以资金越小，资金实现保值增值越困难。我国实行的高通胀低利率政策，是对手中闲钱不多的普通群众赤裸裸的剥削。而手中闲钱较多的中产阶层，相对好一点，可以投资住宅商铺进行保值增值。</p>
</blockquote>
<h2 id="三分天注定，七分靠打拼"><a href="#三分天注定，七分靠打拼" class="headerlink" title="三分天注定，七分靠打拼"></a>三分天注定，七分靠打拼</h2><blockquote>
<p><strong>汝爱之罪：</strong></p>
<p>从晁错的上位过程可以看出，口才很重要</p>
<p><strong>kkndme：</strong></p>
<p>呵呵，这个也不一定，一个是看老板的风格，一个是看自身的运气。<br>说汉文帝刘恒去参观皇家动物园（上林苑）就问动物园园长：“咱们动物园有多少动物啊，都有什么品种啊？”一下子把园长问晕了，吭吭叽叽答不上来。<br>这时有个负责老虎的工作人员跑了出来，作了一通汇报，如数家珍，回答的头头是道。刘恒特别高兴，觉得这个管理老虎的工作人员口才特别好，想提拔他当动物园园长。<br>这时候张释之蹦了出来，对皇帝说：秦朝的时候，赵高口才就特别好，特别巧言善辩，结果忠厚的大臣都被迫害了，天下大乱，秦朝完蛋了。陛下要是提拔这个管理大老虎的人，恐怕所有的大臣都会效仿他，专门学习卡耐基演讲，并且天天琢磨吹牛拍马，就没人真正为皇帝干活了。<br>结果是可怜的管理老虎的工作人员白高兴了一场，不但没得到奖赏，还得罪了动物园园长。</p>
</blockquote>
<h2 id="人的前程有的时候不掌握在自己手里"><a href="#人的前程有的时候不掌握在自己手里" class="headerlink" title="人的前程有的时候不掌握在自己手里"></a>人的前程有的时候不掌握在自己手里</h2><p>某城市从外省调来个姓q的一把手。该一把手一上任就把该市原来的骨干公务员全部晾到一边，一概不用，名义上对外宣称的是：领导干部年轻化。提拔了一批没有工作经验刚毕业的博士生当处级干部，大多数30岁还不到。这些人一点工作经验没有，以至于外界都很惊讶，甚至惊动了日本友人。<br>该一把手正是要用这些毫无工作经验的白纸，第一：人是自己一手提拔的，他能不感激涕零吗？第二：这些人啥也不懂，自己想怎么干就怎么干，这些人听话就行。不这样做，怎么能一手遮天呢？<br>一批期望往上爬的老公务员就这样牺牲掉了，而一批新丁就此崛起。人生的前程往往不掌握在自己手里。</p>
<h2 id="河南郑州与洛阳"><a href="#河南郑州与洛阳" class="headerlink" title="河南郑州与洛阳"></a>河南郑州与洛阳</h2><blockquote>
<p><strong>scdf1234：</strong></p>
<p>楼主，我想咨询一下，像洛阳这样的城市，它的经济在河南是第二位，但又离省会郑州很近，洛阳的房价现在大概是四千多，您认为洛阳的房价上涨的空间大吗？<br>谢谢！！！！！！！！！！！！</p>
<p><strong>kkndme：</strong></p>
<p>洛阳只能成为郑州的影子，如果自住，趁早在洛阳买房，以后一定会涨，如果投资，还是在郑州买，郑州的上涨空间，肯定大于洛阳。<br>不过95年以后，我就再也没去过洛阳，所以洛阳买哪个楼盘升值快，你得自己仔细研究。</p>
</blockquote>
<h2 id="杭州"><a href="#杭州" class="headerlink" title="杭州"></a>杭州</h2><blockquote>
<p><strong>灵魂被枪决：</strong></p>
<p>不知道楼主还在不在，因为只看完前面几页。</p>
<p>我前两天刚定了一套二手房，昨天打了首付款，下星期应该就要办银行按揭手续了。</p>
<p>我一直很想买房，但我LG一直不愿意买房，就在定下这套房子之前他还是很不乐意，但</p>
<p>因为我的坚持，我们终于买了房子了。房子定下后一个石头落地了，但另一个石头有悬</p>
<p>地半空了，因为我们是做个体户生意的，就怕生意有变故贷款接不上（我是个悲观主义</p>
<p>者，总先把最坏情况打算在前）。我们是在杭州，虽然不是市中心，但也算是市区了，</p>
<p>请问楼主能分析一下杭州楼市情况吗？？</p>
<p>先谢过了，楼主的文章对我启发真的很大</p>
<p><strong>kkndme：</strong></p>
<p>前面说过了，杭州我是当一线城市看的。杭州这个城市，本来就是富人的天堂，房价涨到多高都不奇怪，而且极好变现。所以你根本无须担忧资金问题。</p>
</blockquote>
<h2 id="西安与重庆"><a href="#西安与重庆" class="headerlink" title="西安与重庆"></a>西安与重庆</h2><blockquote>
<p><strong>ttan12345：</strong></p>
<p>用了一整天的时间拜读了楼主的精彩文章，很是佩服！</p>
<p>印象最深刻的就是北周宇文式和苏的关于贪官的对答，古人真有高人啊！</p>
<p>感觉楼主知识面相当的宽广，尤其对世界历史比较精通，许多观点非常符合世界发展的规律</p>
<p>关于房产的问题，我也一直认为，最终不是我们小老百姓可以玩的东子，所以能买就</p>
<p>尽早买。看了楼主不止一次给大家推荐去投资西安和重庆的地产，楼主问什么看好西安</p>
<p>和重庆这两个地方，现在各个省会城市哪个不是大兴土木呢？为何西安和重庆会进入你</p>
<p>的法眼？</p>
<p><strong>kkndme：</strong></p>
<p>重庆我就不多说，论述的比较多了，发展重庆是国家战略性的，这是政治任务。<br>西安是西北地区唯一的大城市（乌市比较特殊，不讨论乌市），教育资源丰富，且房价基数较低，所以说后续发展潜力很大，未来该城市的发展一定会纳入zy的视野</p>
</blockquote>
<h2 id="谢国中「空置率」"><a href="#谢国中「空置率」" class="headerlink" title="谢国中「空置率」"></a>谢国中「空置率」</h2><blockquote>
<p><strong>林语边的鸽子：</strong></p>
<p>谢国中:”一是加息预期；二是政府对房地产的政策调控力度不改；三是市场对人民币升值的预期减弱；四是参考了实际的供应量，“到2012年，房地产的空置率会非常高，全中国13亿老百姓要有的房子都有了。”<br>谢国忠预测，“接下来可能会看到交易量一直在增长，而房价却不死不活地拖几年，房地产没有第二场戏了</p>
<p>请问楼主对谢国中的说法怎么看?<br>谢谢</p>
<p><strong>kkndme：</strong></p>
<p>谢是油价和中国房地产的长期唱空者，从04年开始唱空中国房产。谢的有些话还是很有道理的，但有些预测就另有目的了，毕竟屁股决定脑袋。<br>今年谢一直呼吁的是加息，兼带唱空房地产，唱空房地产的主要依据是空置率。<br>谢自己也说中国的房地产最大受益的是zf，但却用空置率给出了一个下跌的结论。<br>人民币升值，呼吁加息，唱空房地产，摩根史丹利的喉舌作用显而易见的</p>
</blockquote>
<h2 id="打工不如有一技之长的小老板"><a href="#打工不如有一技之长的小老板" class="headerlink" title="打工不如有一技之长的小老板"></a>打工不如有一技之长的小老板</h2><blockquote>
<p><strong>中年不惑吗：</strong></p>
<p>现在他们已经比一般的小白领强了</p>
<p>人力成本只会越来越高</p>
<p>现在去读个技校，当个技工</p>
<p>肯定比一般大学出来强多了</p>
<p>还有一个问题：</p>
<p>一般企业的工资10年没有变</p>
<p>10年前某个职位是5000，</p>
<p>10年后这个职位也是5000；</p>
<p>而在10年间，民工工资可能从1000涨到了3000，<br>房价更是涨了10倍；</p>
<p>菜价生活用品也翻了数倍</p>
<p>高房价问题其实就是分配问题</p>
<p>如果某个从事的职位10年前和10年后是一样的</p>
<p>那也就相当于这个职位的薪水降了相当多</p>
</blockquote>
<p><strong>kkndme：</strong></p>
<p>进不了体制内的，无论是不是大学毕业，凡是有头脑的、懂做生意的，会一技之长的，只要不懒，活的肯定比无特长一般在公司打工的小白领强。<br>古代也是这样的，街面上卖爆肚的肯定比大户人家厨房里负责切葱的日子过的稳当。卖爆肚的小本生意很累很辛苦，但是有个手艺就不会饿肚子。大户人家切葱的上班期间日子过的比较轻松，甚至收入比卖爆肚的还强点，在大户人家也体面些。但一旦大户人家不要切葱的了，裁员了，这个切葱的出来还真没办法养活自己。<br>大学文凭顶多算个秀才资格，有这个资格才有机会举士，但是举不了士的，就必须学点技术，否则收入远远赶不上瓦工、电工。<br>过去的穷秀才，饭都吃不饱，但是社会地位却不差，一旦中了恩科，就是宰相根苗。现在有点不同，进不了体制内，又没点技术，那肯定沦为社会的最底层，不要说买房子了，能不能解决吃饭问题都不一定。</p>
<h2 id="一线、二线的生活"><a href="#一线、二线的生活" class="headerlink" title="一线、二线的生活"></a>一线、二线的生活</h2><p>一线和二线选择哪个城市生活，其实就是围城。<br>在一线打拼，有技术有背景或者机会好的，进了金字塔的中层。对于没背景的，运气差点的，看着没什么希望就离开了，到二线发展，起码二线生活成本还低点。混不下去的离开了，又有大量的打算拼一把的冲进来。<br>很多人宁可在大城市当底层，也不愿意回小城市。这还是个观念问题。小城市从城东走到城西也就二十分钟，觉得过得太枯草。大城市灯红酒绿的，虽然跟自己其实没多大关系，但是看着就是舒服。</p>
<h2 id="讲故事含沙射影ZG之房子不属于市场经济"><a href="#讲故事含沙射影ZG之房子不属于市场经济" class="headerlink" title="讲故事含沙射影ZG之房子不属于市场经济"></a>讲故事含沙射影ZG之房子不属于市场经济</h2><p>不说历史了，讲个故事吧。这个故事纯属虚构，如有雷同，纯属巧合。讲故事麽，就不要和谐了。<br>传说王安石变法失败，后人小王跑到了海外，发现了大西洲。大西洲正处于混乱阶段，军阀割据，外族入侵。小王是个政治军事天才，煽动农民起义，统一了大西洲政权，建立了大西国。<br>小王继承了王安石变法的理想，建立了一个中央高度集权，百姓与百姓之间完全消灭差别的理想国家。农场、工厂、商场全部由国家统一经营，老百姓只需要在国家的农场、工厂、商场里快乐打工就行了。老百姓穿一样的，吃一样的，连结婚都是国家给安排。<br>大西国里有的知识分子认为这样治理国家太机器化了，有违人性。小王同志对这些知识分子很生气。<br>遥远的东方，有一个白鹿洞书院，书院的院长是个伟大的导师，这个人叫朱熹，此人提出了存天理、灭人欲的理论，给了小王同志治理国家理论上的支持。<br>于是小王同志大搞禁欲主义，凡是学习过陆九渊、王阳明心学理论的都抓起来改造。</p>
<p>不久，大西国经营的农场、工厂、商场就出了问题。效率特别低，老百姓出工不出力，胡干蛮干的比比皆是，后来出现了大饥荒，饿死了不少人。小王同志干不下去，被人赶走了。<br>新领导上台后，先把农场划分给农民，提高农民的积极性，先解决粮食问题。但是工厂、商场就比较不好办。<br>新领导认为，工厂、商场效益低，赔钱是因为负担太重了，城市里的老百姓生老病死都是由国家的工厂、商场负责，国家哪里管的起呢？<br>于是新领导就提出给国家的企业减负，给点优惠政策，拿出胡萝卜，让胆子大愿意自己单干的同志们主动离开国家企业。对于很多死活不肯走的同志，新领导强令这些人卷铺盖，国家不再负担这些人的生老病死了。大家自己解决吧，国家不管了。<br>新领导把还留在国家企业的自己人，定义为内部人员。离开国家企业的，就是外人，定义为社会闲杂人等。<br>社会闲杂人等，有人欢喜有人忧。有人利用内部人员的关系，大把赚钱，有人跑去给外国人当洋买办赚的也不少，还有的知识分子凭着有点文化，给人打工生活的也不错，反正这些人都挺高兴，比在内部受穷强。当然也有没本事的，就比较惨，生活的比较困难。</p>
<p>新领导看见内部都是自己人了，闲杂人等都清理掉了，于是着手内部改革，凡是稀缺的，与老百姓生产生活密切相关的行业，都由内部来经营，不需要动脑子搞创新，只要定个价，老百姓就必须得接受。<br>而需要创新动脑子的产业，不具备稀缺性必须充分竞争的产业，不是跟老百姓生产生活密切相关的产业都交给社会闲杂人等去自由竞争。<br>相当于把肉都留给了内部自己，把骨头扔给了外部闲杂人员。<br>这样做还有个好处：新领导喜欢内部自己人直接跟外国人做生意，但是只要跟外国人做生意就赔钱，赔的还不是一点半点。赔的钱从哪里补呢？<br>只要通过内部自己人经营的企业，抬高定价，将赔掉的钱转嫁给社会闲杂人等就可以了。<br>于是，当初离开内部的社会闲杂人等发现，钱也难赚了，生活成本也越来越高了，日子过得变得越来越艰难了。<br>这时有个傻空跳出来说：我就不信了，市场经济没有只涨不跌的商品。房价肯定会跌。<br>有个明白人告诉他：市场经济是分品种的。外部社会闲杂人等经营的电脑、电视是市场经济。但是内部人经营的石油、房地产不是市场经济。不能拿市场经济来解释。<br>这个傻空不信，本来在大西国能买房的，结果一直没买，后来买不起了，只好一直租房住。但是房租老涨价，吃饭越来越困难，一年难得吃两回肉。</p>
<h2 id="什么是好的政策"><a href="#什么是好的政策" class="headerlink" title="什么是好的政策"></a>什么是好的政策</h2><p>好的政策就象挂在驴子鼻子上的胡萝卜，让人永远有希望，但是拼命追也吃不到。这就是中国政治家的最高智慧。</p>
<p>洋人进北京，老佛爷把义和团推出来，结果拳匪搞的鸡飞狗跳，没法收场。<br>保钓也打算发动群众，靠爱国激情转嫁矛盾。不过好像这招不灵了。老板怎么对待员工，员工就会怎么回报老板。</p>
<h2 id="李商隐「渣男」祖师爷"><a href="#李商隐「渣男」祖师爷" class="headerlink" title="李商隐「渣男」祖师爷"></a>李商隐「渣男」祖师爷</h2><p>中秋节将至，撇开房地产的涨跌。喝一壶好酒，聊聊古人。</p>
<p>云母屏风烛影深，长河渐落晓星沉。 　　<br>嫦娥应悔偷灵药，碧海青天夜夜心。</p>
<p>借着中秋节的千古名句，我们八卦一下李商隐。<br>李商隐帅哥很有女人缘，据说谈了n多次荡气回肠的恋爱，不过这些恋爱经历没记录进正史，而是唐代的八卦记者通过李商隐帅哥的文学作品，侦破出来的。</p>
<p>李商隐帅哥不光会写诗，年轻人还在玉阳山修习过道术。但是当道士期间并没有认真的清修，以李帅哥的魅力，竟然吸引了一个美丽多情的女道士的目光。</p>
<p>这个女道士叫宋华阳，本来是个侍奉公主的宫女，跟随公主进山当了女道士。两人邂逅于山中，缠绵悱恻，但终究没有结果，宋美眉怀了李帅哥的宝宝，李帅哥也被轰下了山。但好像李帅哥也没负什么责任。</p>
<p>李帅哥伤痛的写下了“无题”以示纪念：<br>昨夜星辰昨夜风， 画楼西畔桂堂东。<br>身无彩凤双飞翼， 心有灵犀一点通。<br>隔座送钩春酒暖， 分曹射覆蜡灯红。<br>嗟余听鼓应官去， 走马兰台类转蓬。</p>
<p>李帅哥的第二个女朋友，被八卦记者们认为是锦瑟，锦瑟是谁？八卦记者们认为是令狐楚家的一个美丽温婉的侍女。</p>
<p>李帅哥很有才华，但是在晚唐时代，有点生不逢时。当时牛僧孺和李德裕搞党争，李帅哥跑去给牛党的重要人物令狐楚当幕僚，结果泡上了令狐大人的侍女。这个李帅哥和锦瑟谈恋爱的证据是根本没有。八卦记者是根据李帅哥的诗找到的蛛丝马迹。</p>
<p>这首诗就叫锦瑟。</p>
<p>锦瑟无端五十弦，一弦一柱思华年。 　　<br>庄生晓梦迷蝴蝶，望帝春心托杜鹃。 　　<br>沧海月明珠有泪，蓝田日暖玉生烟。 　　<br>此情可待成追忆，只是当时已惘然。</p>
<p>春 　　<br>风光冉冉东西陌，几日娇魂寻不得。<br>蜜房羽客类芳心，冶叶倡条遍相识。 　　<br>暖蔼辉迟桃树西，高鬟立共桃鬟齐。<br>雄龙雌凤杳何许？絮乱丝繁天亦迷。 　　<br>醉起微阳若初曙，映帘梦断闻残语。<br>愁将铁网罥珊瑚，海阔天宽迷处所。 　　<br>衣带无情有宽窄，春烟自碧秋霜白。<br>研丹擘石天不知，愿得天牢锁冤魄。 　　<br>夹罗委箧单绡起，香肌冷衬琤琤佩。<br>今日东风自不胜，化作幽光入西海。</p>
<p>夏 　　<br>前阁雨帘愁不卷，后堂芳树阴阴见。<br>石城景物类黄泉，夜半行郎空柘弹。 　　<br>绫扇唤风阊阖天，轻帏翠幕波洄旋。<br>蜀魂寂寞有伴未？几夜瘴花开木棉。 　　<br>桂宫流影光难取，嫣薰兰破轻轻语。<br>直教银汉堕怀中，未遣星妃镇来去。 　　<br>浊水清波何异源，济河水清黄河浑。<br>安得薄雾起缃裙，手接云輧呼太君。 　　</p>
<p>秋 　　<br>月浪衡天天宇湿，凉蟾落尽疏星入。<br>云屏不动掩孤嚬，西楼一夜风筝急。 　　<br>欲织相思花寄远，终日相思却相怨。<br>但闻北斗声回环，不见长河水清浅。 　　<br>金鱼锁断红桂春，古时尘满鸳鸯茵。<br>堪悲小苑作长道，玉树未怜亡国人。 　　<br>瑶琴愔愔藏楚弄，越罗冷薄金泥重。<br>帘钩鹦鹉夜惊霜，唤起南云绕云梦。 　　<br>璫璫丁丁联尺素，内记湘川相识处。<br>歌唇一世衔雨看，可惜馨香手中故。</p>
<p>冬 　　<br>天东日出天西下，雌凤孤飞女龙寡。<br>青溪白石不相望，堂上远甚苍梧野。 　　<br>冻壁霜华交隐起，芳根中断香心死。<br>浪乘画舸忆蟾蜍，月娥未必婵娟子。 　　<br>楚管蛮弦愁一概，空城罢舞腰支在。<br>当时欢向掌中销，桃叶桃根双姊妹。 　　<br>破鬟倭堕凌朝寒，白玉燕钗黄金蝉。<br>风车雨马不持去，蜡烛啼红怨天曙。</p>
<p>这是李帅哥写的燕台诗四首。<br>有个叫柳枝的美女，是洛阳大富翁的女儿，吟唱了这首诗后，就爱慕上了李帅哥。这个美女很大胆主动跟李帅哥约会，并没有嫌弃李帅哥没车没房，但不幸被李帅哥放了鸽子。李帅哥其实很喜欢这个柳枝，事后非常后悔，准备把失去的爱情找回来，但是柳枝已经给有权有势的大佬做了妾。</p>
<p>飒飒东风细雨来，芙蓉塘外有轻雷。<br>金蟾啮锁烧香入，玉虎牵丝汲井回。 　　<br>贾氏窥帘韩掾少，宓妃留枕魏王才。<br>春心莫共花争发，一寸相思一寸灰。</p>
<p>这首诗名为“无题”，写得是荷花。荷花是民间传说中李帅哥又一个女朋友的名字，也是李的初恋。美丽的荷花陪李帅哥进京赶考，半路上得了重病，李帅哥天天陪伴着她，但不幸的是，荷花还是香消玉损。李帅哥悲痛不已，常常以荷花为题，以纪念此段恋情。</p>
<p>李帅哥的才华，被节度使王茂元看中了，把女儿嫁给了这位帅哥。李帅哥娶了这位娇妻的同时，也给自己带来了麻烦。</p>
<p>原因是王茂元是李党的重要人物，而李帅哥的老师令狐楚却是牛党的重要人物。娶了王美人，李帅哥掉进了牛、李两党的夹缝，于是前途杯具了。</p>
<p>这个故事告诉我们，如果有个老大罩着你，日子过的还不错，就千万别轻易向老大的对手抛媚眼。否则，只能是杯具。</p>
<p>李帅哥尽管前途杯具了，但是跟娇妻王氏感情很好，王氏突然病逝，李帅哥伤痛万分，写下了“悼伤后赴东蜀辟至散关遇雪” 　　</p>
<p>剑外从军远，无家与寄衣。 　　<br>散关三尺雪，回梦旧鸳机。</p>
<p>无题<br>相见时难别亦难，东风无力百花残。<br>春蚕到死丝方尽，蜡炬成灰泪始干。<br>晓镜但愁云鬓改，夜吟应觉月光寒。<br>蓬山此去无多路，青鸟殷勤为探看。<br>　　<br>夜雨寄北<br>君问归期未有期，　　<br>巴山夜雨涨秋池。 　　<br>何当共剪西窗烛， 　　<br>却话巴山夜雨时。<br>　　<br>读这两首诗，第一个感觉就是李帅哥的用情之深，令人叹为观止；第二个感觉就是，其克女朋友的本事，也令人叹为观止啊</p>
<p>将近中秋，闲扯了一通李商隐，就以李商隐的无题结束这个闲话吧。</p>
<p>凤尾香罗薄几重，碧文圆顶夜深缝。<br>扇裁月魄羞难掩，车走雷声语未通。<br>曾是寂寥金烬暗，断无消息石榴红。 　　<br>斑骓只系垂杨岸，何处西南待好风。 　　<br>重帏深下莫愁堂，卧后清宵细细长。 　　<br>神女生涯元是梦，小姑居处本无郎。 　　<br>风波不信菱枝弱，月露谁教桂叶香。 　　<br>直道相思了无益，未妨惆怅是清狂。</p>
<h2 id="西五环内的别墅，是相当稀缺的资源"><a href="#西五环内的别墅，是相当稀缺的资源" class="headerlink" title="西五环内的别墅，是相当稀缺的资源"></a>西五环内的别墅，是相当稀缺的资源</h2><blockquote>
<p><strong>黎</strong>明中的星光：**</p>
<p>楼主，认真阅读您的帖子快两周了，以史为鉴，深入浅出，感觉受益匪浅！</p>
<p>这两天，也在为在北京买房子的事很纠结，请您指点一二：</p>
<p>为自住，我们最近要买房了，此前，已经关注一年了，一年中，看上的房子都翻了倍。</p>
<p>最近我们在西四环西五环之间选了一个低密度花园别墅，叠层，新房，小区面积不大，只有200多户，（第一期08年开盘，大约2万上下单价，已入住，这次是二期）。小区密度是1.0。一期为3到5层，2期为5层坡屋顶。小区本身绿化环境不错，堪称绿意盎然，对内部环境很满意，我们选的是1、2层叠层带小花园的房子，220平方米左右。<br>这个小区叫：“金隅—长安山麓”，您从网上可以查到。</p>
<p>目前价格均价37000元左右。年初开盘时31000左右。开发商的策略是每次小部分放量，慢慢卖，拉开每栋楼开盘时间。最近我们看上的这个，是8月份开盘的。</p>
<p>我们认为优点是：<br>1、低密度带花园；这在大都市太难得了。<br>2、周围绿色环境好，多。向北是香山方向，一路绿色。<br>3、距离石景山万达距离近，3公里左右吧。万达出现在哪里，哪里基本是一个商业服务中心了。</p>
<p>缺点是：<br>1、周围没有紧密连接大型服务超市，商场等。最近的沃尔玛在2公里以外。<br>2、周围环境还不够理想。饭后散步、娱乐休闲的地方几乎没有。</p>
<p>担忧和想咨询您的问题是：<br>1、现在出手买，是否太冒险？<br>2、您对这个小区的前景判断如何？<br>3、我有朋友说买市中心的高层更好，万一卖掉也方便。怕这里以后不好出手。</p>
<p>楼主，再次打扰，百忙中能帮分析下吗？不胜感谢！</p>
<p><strong>kkndme：</strong></p>
<p>关于西五环内的别墅，是相当稀缺的资源，相当于奢侈品，奢侈品是不会随着调控有大幅度的调整，可以参考收藏品的投资，收藏品的风险在于战乱发生或者**经济崩盘。</p>
</blockquote>
<h2 id="“奸臣”贾似道"><a href="#“奸臣”贾似道" class="headerlink" title="“奸臣”贾似道"></a>“奸臣”贾似道</h2><p>说一个存在争议的人物，这个人被宋史写入“奸臣传”，就是大名鼎鼎的贾似道。几乎所有人眼中的贾似道都是大奸贼的形象，仗着是贵妃的姐姐，由一个游手好闲不学无术的二流子，摇身一变成了飞扬跋扈的大汉奸。他贪污受贿，搜罗奇珍美女，蒙古人打过来媚外卖过，还向皇帝谎报军情，最后南宋在他手里灭亡。反正老百姓眼中奸臣能干的所有坏事，都安在了贾似道的头上，然而历史真的如此吗？</p>
<p>经过多方面史料对照，读书仔细的筒子会发现，宋史的说法并不可信，自相矛盾的地方太多，几乎可以说宋史几乎收罗的都是野史和民间传说。是什么原因使一部正史却采用了大量的野史资料呢？</p>
<p>原因只有一个，贾似道得罪的人太多。</p>
<p>贾似道得罪人的原因，在于推行了一个政策：公田法。推出的背景是连年征战，南宋需要庞大的军费开支。军费的开支从哪里来呢？当然是从最底层的农民的肚子挤出来。南宋的经济已经是非常困难了，巧妇难为无米之炊，于是zf推出了纸币，相当于给人民打白条，可见纸币并不是现在的专利。这就是恶性通货膨胀。眼看国家经济崩盘了。贾似道想的办法就是：公田法。</p>
<p>公田法的意思跟傻空说的把多军的财产充公的意思差不多，就是限制地主的田地，凡是超过标准的，超过部分的三分之一充公给zf，zf给佃农耕种，产出的粮食用于军粮。有点相当于物业税的意思。</p>
<p>就凭贾似道想出的这个政策，说贾似道是个不学无术的混混，说什么我也不会相信的。</p>
<p>贾的办法很大程度上缓解了南宋经济的彻底崩盘，延缓了南宋生存的时间，但是贾却得罪了几乎所有的地主士大夫阶层。</p>
<p>贾不是一个贤臣，但绝非二流子，政治上也许不够成熟，但是为了南宋的艰难维持也算是呕心沥血。关于向蒙古大军求和，也并不能就说明他是个汉奸，那样一个经济崩溃，军队毫无战斗力的朝廷，你让他硬着头皮打，下场也就相当于鸦片战争。当然，关于宋史里讲到的贾似道极尽献媚之能事，把汉奸表演得淋漓尽致，应当是士大夫出于地主阶层对公田法的憎恨，狂泼的屎盆子。因为宋史的记录实在是疑点颇多。</p>
<p>南宋的将领如范文虎、夏贵之流，才真是腐败透顶，拥兵自重，对抗元军极尽脚底抹油之能事，而贾似道能够亲自督师，所以说贾似道是个大汉奸，实在开玩笑有点过火。南宋灭亡了，元世祖抓了南宋投降的将领问话：你们为什么这么容易就投降了呢？</p>
<p>降将回答：都是贾似道，只重视文官，不重视我们，所以就投降了。</p>
<p>元世祖哈哈大笑：就你们这样的武将，贾似道能重视你们才怪。</p>
<p>贾似道最后被郑虎臣擅自给杀了。郑虎臣是个大地主，自己的利益被公田法害得不轻，恨透了贾似道。</p>
<p>贾似道死了，全体士大夫阶层拍手称快，并且把他列入了奸臣传，永世不得翻身。</p>
<p>全因为一个公田法。</p>
<h2 id="关于拆迁"><a href="#关于拆迁" class="headerlink" title="关于拆迁"></a>关于拆迁</h2><p>关于拆迁，我国只有一部91年颁布的拆迁管理条例，但是就是这个简单的东西，很多拆迁时并不遵守。</p>
<p>常规来说，拆迁应持有拆迁许可证，开发商的开发项目应通过规划局的审核（这个可以在规划局查到），如果连开发商是谁，有没有资格开发都不知道就奇怪了。</p>
<p>是否同意拆迁取决于拆迁户和拆迁方的博弈，但是拆迁补偿办法一定要具体详细，包括如何补偿，过渡期的约定，具体要有时间和操作办法，还要签订违约责任。关于协议不可能只留在拆迁方手中，这是不合法的。</p>
<p>暴利拆迁，zf侵害拆迁户的利益的例子比比皆是，关键是自己如何争取主动。</p>
<h2 id="保钓事件之死要面子活受罪"><a href="#保钓事件之死要面子活受罪" class="headerlink" title="保钓事件之死要面子活受罪"></a>保钓事件之死要面子活受罪</h2><p>保钓事件，既定对策就是争取更多小国穷国的舆论支持，减免他国债务，加大对外经济援助。钱的来源，要靠底层国民勒紧裤腰带。</p>
<p>自古以来，泱泱大国，威仪四海，对外“恩”显示国力强大，对内“威”显示权力强大，恩威并施，千古国策。</p>
<p>朱棣的恩泽海外，死要面子，是做的比较极致的。结果是国库空虚，人民吃饭一下成了问题。所以才有后来坚定的禁海。</p>
<p>如果开通海外贸易，不是为了皇帝的面子，而是为了充实国库和老百姓的腰包，明代的官僚就不会坚持禁海，中国的历史就会改写。</p>
<p>郑和下西洋，反而堵塞了中国通向大海的道路。</p>
<blockquote>
<p><strong>tjOOSAN</strong></p>
<p>我只能说，楼主不懂政治，就触及了。钓鱼岛就算所有您所谓的“小国”都支持。也没用啊。神经病 就是神经病</p>
<p><strong>kkndme</strong></p>
<p>这个做法不新鲜，从周恩来时期，我们的外交政策就是拉拢第三世界国家的选票，远到非洲拉美，近到越南缅甸柬埔寨，支援铁路基建，捐钱捐物，自认第三世界国家的带头人。但是第三世界国家基本有奶就是娘。比如拉美的苏里南，我国刚捐了钱物，米国给了点好处，马上又投向米国。</p>
<p><strong>tjOOSAN</strong></p>
<p>建议您看看nhk的中国力量。真实偷拍的中国在非洲都做了什么。</p>
<p>1、资源。铁矿石 2、建立国家通信网 3、人力。</p>
<p>呵呵。援助是拉拢，但是有条件的。</p>
<p>越南最新的高铁，由日本公司建设。中国从来没援建过越南。</p>
<p>唉。。。。你把中国当傻子了。</p>
<p><strong>kkndme</strong></p>
<p>周时代，越南的生产工具、军火、粮食，都是中国无偿援助。无知不可怕，无知还满嘴喷粪最可怕</p>
<p><strong>tjOOSAN</strong></p>
<p>呵呵！</p>
<p>援建越南？？！哪了？给我证据？！？</p>
<p>关于非洲，我给你们穿了视频！自己看就知道了</p>
<blockquote>
<p><strong>中年不惑吗</strong></p>
<p>还非洲的力量</p>
<p>当年红太阳把大米鸡蛋东方红拖拉机运到阿尔及利亚</p>
<p>换来的是“中国人民是我们最好的朋友”和对中国各种口头的声援</p>
<p>这和kkndme兄说的难道不一致吗</p>
<p>现在不给钱给物了</p>
<p>你还能听到“中国人民是我们最好的朋友”的说法吗？</p>
<p>拉拢非洲小兄弟，是具有政治意义的</p>
<p>你英国是一票，人家再穷的小国也是一票</p>
</blockquote>
<p><strong>kkndme</strong></p>
<p>你理解力看来真有问题，你哪只眼睛看到争取小国穷国的舆论支持里面，包括越南。</p>
<p>这个事是温总定的调子，挂在搜狐首页</p>
<p><strong>tjOOSAN</strong></p>
<p>中年！kk！！<br>你们这两个同学啊！一看就跟成天上网的学生，没两样。争来争去。</p>
<p>哎呀，非要你赢他输。</p>
<p>唉。。。你说的怎么就对呢？？！证据！！明白吗？？</p>
<p>光你自己打嘴炮。没用啊！</p>
<p>呵呵 我得出去玩会了</p>
<p>你们继续网络吧！~~ 两个宅男</p>
<p><strong>kkndme</strong></p>
<p>tjOOSAN你去图书馆查查当年的报纸，什么都清楚了。</p>
<p>典型的愚民政策教育出来的傻蛋。</p>
</blockquote>
<h2 id="中国的房地产不可能软着陆"><a href="#中国的房地产不可能软着陆" class="headerlink" title="中国的房地产不可能软着陆"></a>中国的房地产不可能软着陆</h2><p>中国的房地产不可能软着陆，甚至也不可能出现日本的硬着陆。一旦积蓄的问题爆发，会直接崩，崩的绝不会只是房地产。那时候绝对没有人会关心房价，很多人将庆幸于当天能够勉强填饱肚子，但绝不奢望还能见到第二天的日出。</p>
<blockquote>
<p><strong>xiangshangpa</strong></p>
<p>请教楼主，如果出现您说的大部分老百姓勉强甚至不能填饱肚子，房价没人关心的时候，也就是社会动荡的时候，作为您这样的中产以上的阶级，还没有移民，如何自保？我很感兴趣，谢谢！祝中秋快乐！</p>
<p><strong>kkndme</strong></p>
<p>这种事要静观其变，所谓山雨欲来风满楼，发生之前一定会有大的征兆。<br>自保是没**有办法的，只能看形势不对，脚底抹油。</p>
<p><strong>xxx</strong></p>
<p>按照我的理解，在发生很大征兆之前，党国就会采取措施，实施闭关锁国政策（倒回50年代），跑是跑不掉的，如果大量难民出去，也没有几个国家会接受，中产，富裕阶层也不例外，现在很多国家已经提高移民门槛了，我对这种情况的出现感到悲观，调适空间十分有限，权贵集团真的是永远无法满足，唉</p>
<p><strong>kkndme</strong></p>
<p>呵呵，人的命，天注定，自求多福吧。</p>
<p><strong>中年不惑吗</strong></p>
<p>我倒没有kkndme兄那么悲观</p>
<p>去看看美国20世纪30年代的新闻和文章</p>
<p>也是一片哀嚎</p>
<p>资本主义已经完蛋了，无可救药了</p>
<p>贫富差距太大，老百姓活不下去了</p>
<p>美国当时的知识界很多人都是向往苏俄模式的</p>
<p>左倾的名流非常多（包括卓别林和爱因斯坦等等）</p>
<p>即使到了20世纪50年代，美国还要搞麦卡锡主义</p>
<p>也说明了当年左倾很有市场</p>
<p>现在了，苏俄成为历史，资本主义反倒越活越精神了</p>
<p>还有就是如果在南北战争的时候想象一个黑人能当总统</p>
<p>人家肯定说你是凡尔纳</p>
<p>就是马丁路德的时候</p>
<p>也只是奢望能给黑人争取公平和权益<br>　　<br>社会进步总是靠人推进的</p>
<p>可以是谭嗣同蔡锷，也可以是邹容和陈天华</p>
<p>何必太悲观了</p>
<p>难道不是事在人为吗<br>　　<br>自己都不努力改变</p>
<p>怎么能埋怨前辈的选择错误不作为了</p>
</blockquote>
<h2 id="关于购买经济适用房"><a href="#关于购买经济适用房" class="headerlink" title="关于购买经济适用房"></a>关于购买经济适用房</h2><blockquote>
<p><strong>大学生007</strong></p>
<p>楼主你好，质询个问题：<br>我家要买个二手房，房子是经济适用房，房产证上写的是土地划拨，中介说买了之后就是商品房了，那买了以后房产证上写的还是不是划拨啊，如果以后遇到拆迁什么的是不是补偿跟人家正规商品房不一样啊？谢谢</p>
<p><strong>kkndme</strong></p>
<p>经济适用房需要补交土地款后才能上市销售，补交土地款后，就变成了商品房，所以不用担心。<br>购买经济适用房一定要把补交的地价款算进去，才知道房价是否高于或低于周边商品房楼盘。<br>我国房地产交易很不规范，特别是中介有很多办法欺骗客户，买房无论是自住还是投资都要多长几个心眼。</p>
</blockquote>
<h2 id="地级市买房"><a href="#地级市买房" class="headerlink" title="地级市买房"></a>地级市买房</h2><blockquote>
<p><strong>我是射手520</strong></p>
<p>楼主，您好。有幸看到您盖的楼，您对历史、政治和经济的研究让我如醍醐灌顶，很多隐约迷惑的东西，似乎有了出路能去寻找答案。万分感谢。<br>说到置业，您对一线二线城市谈的较多，想听听您对类似我们这样城市楼市和经济的看法。<br>我所在的是地级市，离您帖子提到的武汉有500公里。我所在的地市以汽车工业为主导，是三大汽车集团其中之一的发源地，目前是该企业的商用车基地。<br>在全省范围，离省会最远，但是在城市建设、居民生活水平、物价和房价可以排在全省前面，以前分析是因为我们这里是以工业为主，故经济发展比其他以农业为主的地市发展的要好，看了楼主的帖子，感觉跟离武汉最远也有关系。<br>我们当地最贵房价从05年前2000以内，到09年3000-4000元，到今年的5000元，最贵的6000元。<br>房价的飙升一方面随着全国大环境有关，我分析同时跟当地政府的发展思路密不可分，05年开始引进外地大开发商，新修了很多路，其中跟旧城区主干道平行的最重要的一条路，随着市政府入住，体育馆、美术馆，大开发商进驻，经过5年发展，该路段已经成为我们这里房价最贵的一条路，我们是小城市，在这里买房子的，除了投机成分以外，大部分应该是改善型住房，要大型小区，要绿化，这条路目前房子也是越盖越高。通过建设，当地政府财政也充裕，明显感觉对市政投入也大多了。<br>我们这里养老还是不错的，山多，空气好，工业城市，经济发展也交好。<br>我目前的置业状况是，在老城区广场旁边有单位分高层住宅一套，虽然是塔楼，但在广场旁边，弱化了容积率高，当年放弃了单位地段相对没这个中心，总价低的多层住宅，就是看中了地段，这个投资较成功，按照现在市价，房屋总价基本翻番，该房屋目前由父母住。<br>08年底，在开始说的新地段够买一套房屋，120平米，多层住宅，周边政府规划为大学城，周边有两所大专院校，对于该房屋地段较为满意，虽然比不上新修的路的北边和中部靠近体育馆，靠近政府地段升值快，但较看好该地段前景，该地段新修了 一条连接老城区的通道，唯一不太满意是购买的顶楼，因为是购买的该小区的多层住宅没有电梯，如果有了孩子，住顶楼生活就不太方便。购入均价2900，目前周边的新盘均价4500元，该楼盘创造了摇号去选房的记录。该套房屋自住，当年购买房屋没有多贷款一步到位，现在如果想换个满意的难度就大的多，满意的房屋都5000往上了。这套房屋有15万左右的贷款。<br>虽然很看好武汉的楼盘，远远现阶段大于经济承受能力，目前放弃。<br>对于我们当地的楼盘，也超出了我们这种普通人的能力，虽然最近楼盘都卖的很火。<br>好在单位公积金较多，我打算收复30%，剩下用公积金贷款，再购置一套房屋，怕再过一段时间，我的改善型需求就满足不了。<br>前一段时间，有个机会，但是考虑按照目前房价，30%首复，要耗尽目前自己和家人积蓄，犹豫中，错过了机会。<br>目前这种状况，不知道是否该再次买房？<br>再次买房考虑标准时什么？我不太喜欢高层，但是原中心城区，没有大盘，都是单位或者小开发商盖的，基本没有绿化，在中心城区边上也有了一套高层住宅。<br>考虑学位房？我们城市不大，目前这套中心城区房屋虽然没有画片在最好的小学中学，但是离这些学校距离比较近。<br>在靠近那条政府搬入的路的北边靠近体育馆、美术馆（同时也靠近两所重点高中）地方置业，那里房价已经5000多，年底开盘的都是30层以上的高层，自住又不太考虑高层，总价也超出了承受范围。<br>在当地，离那个大企业居住地，区政府也新开了一条路，那条路待开发状态，据说区政府要搬过去（要搬也是2年以后，现在那条路只有一个大开发商在开发），那条路开车到市中心20分钟，那次有机会买的就是那个大开发商的楼盘，主推多层住宅并且带电梯，去年就预售完毕，这次犹豫中，错过了，住宅品质较好，目前地段太偏。<br>如果再有机会，该如何选择呢？</p>
<p><strong>kkndme</strong></p>
<p>地级市选房是比较麻烦的，因为投资风险要大于一线城市和省会城市。<br>地级市的购房需求，主要是以改善性需求为主，追求的是大盘，低密度，低楼层，高绿化，最好有个江景或者水景，环境优美的别墅是首选。<br>因为低级市城市较小，绝对的城中心如果环境比较嘈杂，小区不够高档最好不要选择。没有实力购置别墅，可以选择环境优美的高端住宅，最好是品牌大盘，一眼能够让人赏心悦目。</p>
</blockquote>
]]></content>
      <categories>
        <category>杂项</category>
      </categories>
      <tags>
        <tag>天涯神贴</tag>
      </tags>
  </entry>
</search>
